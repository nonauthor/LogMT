[
 [
  "conn.open();\tcmd.connection = conn;\ttry {\tusing (sqldatareader rdr = cmd.executereader()) {\tverifycolumnboundaries(rdr, getfields(tvpperm), objvalues, dtvalues);\t}\t}\tcatch (sqlexception se) {\t}\tcatch (invalidoperationexception ioe) {",
  "invalidop",
  0
 ],
 [
  "static void displaycrl (x509crl crl, bool machine, bool verbose) {\tif (verbose) {",
  "type",
  1
 ],
 [
  "assemblies.add (a.codebase);\t} catch (exception) {\tif (skip_scan) {\tassemblies.add (new uri (new fileinfo (name).fullname).tostring ());\t} else {\tthrow;\t}\t}\t}\tif (error != null) {",
  "transaction failed due to in doubt transaction",
  1
 ],
 [
  "w.writecharentity('\\ud23e');\t}\tcatch (invalidoperationexception) {\ttestlog.compare(w.writestate, writestate.error, \"error\");\ttry {\tw.writecharentity('\\ud23e');\t}\tcatch (invalidoperationexception) { return; }\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "}\tint nchars;\ttry {\tnchars = datareader.readvaluechunk(buffer, strexpected.length, 3);\t}\tcatch (argumentexception) {\tcerror.compare(datareader.readvaluechunk(buffer, 0, buffer.length), strexpected.length, \"readvalue count\");\tcerror.compare(new string(buffer), strexpected, \"str\");\treturn test_pass;\t}",
  "runruntests basic w o ct waiting for a task unwrapped if we hang something went wrong",
  1
 ],
 [
  "break;\tcase \"system.data.oracleclient.oracledatetime\": oravalue = ((oracledatetime) ovalue).value;\tbreak;\tcase \"system.byte[]\": oravalue = gethexstring((byte[])ovalue);\tbreak;\tcase \"system.decimal\": decimal dec = reader.getdecimal (f);\toravalue = (object) dec;\ttry {\treader.getint16 (f);\t} catch (notsupportedexception e) {",
  "public table get return gettable",
  1
 ],
 [
  "static void printnode (astnode node) {",
  "did not throw exception",
  1
 ],
 [
  "checkexpectederror(e2, \"system.xml\", \"xslt_cannotloadstylesheet\", new string[] { new uri(uri.urischemefile + uri.schemedelimiter + path.getfullpath(fullfilepath(\"xmlresolver_main.xsl\"))).tostring(), \"null\" });\t}\tif (loadxsl(\"xmlresolver_main.xsl\", xslinputtype, readertype) == 1) {\tif (transform((string) \"fruits.xml\", (outputtype) outputtype, navtype) == 1) {\tverifyresult(baseline, _stroutfile);\treturn;\t}\telse assert.true(false);\t}\telse {",
  "main hello world",
  1
 ],
 [
  "private static void modifyinner() {",
  "domain end",
  1
 ],
 [
  "oldtg = node.taggroup;\ttaggroupsize = 1;\t}\telse {\ttaggroupsize++;\t}\t}\t#endif prev = node;\tnode = node.next;\tif (node == null) {",
  "privatekeyselection",
  1
 ],
 [
  "dictionary<siloaddress, silostatus> statuses = await mgmtgrain.gethosts(false);\tforeach (var pair in statuses) {\tassert.equal(silostatus.active, pair.value);\t}\tassert.equal(3, statuses.count);\tipendpoint address = silo3.siloaddress.endpoint;\tthis.hostedcluster.stopsilo(silo3);\toutput.writeline(\"----------------\");\tstatuses = await mgmtgrain.gethosts(false);\tforeach (var pair in statuses) {",
  "silo status",
  0
 ],
 [
  "break;\tcase \"file_extensions\": foreach (var nn in entry.value.allnodes.oftype<yamlscalarnode> ()) {\textensions.add (\".\" + nn.value);\t}\tbreak;\tcase \"scope\": scope = ((yamlscalarnode)entry.value).value;\tbreak;\tcase \"hidden\": try {\thidden = bool.parse (((yamlscalarnode)entry.value).value);\t} catch (exception e) {",
  "did not throw exception",
  1
 ],
 [
  "public void addextobject2() {\tmyobject obj = new myobject(2, _output);\tm_xsltarg = new xsltargumentlist();\ttry {\tm_xsltarg.addextensionobject(null, obj);\t}\tcatch (system.argumentnullexception) {\treturn;\t}",
  "done with finalizers",
  1
 ],
 [
  "static ienumerator getit (int [] args) {\tforeach (int arg in args) {",
  "passwordinfo changepassword sending request",
  1
 ],
 [
  "public void parityerroronlastbyte() {\tusing (var com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (var com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\tvar rndgen = new random(15);\tvar bytestowrite = new byte[numrndbyte];\tvar expectedbytes = new byte[numrndbyte];\tvar actualbytes = new byte[numrndbyte + 1];\tvar actualbyteindex = 0;",
  "test failed conversion result is incorrect",
  1
 ],
 [
  "static bool loadconfig (bool quiet) {\tsystem.reflection.methodinfo config = typeof (system.environment).getmethod (\"getmachineconfigpath\", system.reflection.bindingflags.static | system.reflection.bindingflags.nonpublic);\tif (config != null) {\tstring path = (string) config.invoke (null, null);\tbool exist = file.exists (path);\tstrongnamemanager.loadconfig (path);\treturn exist;",
  "couldn t resolve machine config location corlib issue",
  0
 ],
 [
  "assert.true(task1.status == taskstatus.rantocompletion, \"    > failed.  task did not end in rantocompletion state.\");\ttask<int> future1 = task.run(() => { return 7; });\tfuture1.wait();\tassert.true(future1.result == 7, \"    > failed.  future completed but did not run.\");\tassert.true(future1.status == taskstatus.rantocompletion, \"    > failed.  future did not end in rantocompletion state.\");\ttask1 = task.run(() => { return task.run(() => { count = 11; }); });\ttask1.wait();\tassert.true(count == 11, \"    > failed.  task(unwrapped) completed but did not run.\");\tassert.true(task1.status == taskstatus.rantocompletion, \"    > failed.  task(unwrapped) did not end in rantocompletion state.\");\tfuture1 = task.run(() => { return task.run(() => 17); });",
  "set name value to set an internal variable",
  1
 ],
 [
  "public void testbug3952() {\tstring code = @\" class foo {\tvoid bar() {\ttest(new foo ( }\t}\";\tvar unit = syntaxtree.parse(code);\tvar type = unit.members.first() as typedeclaration;\tvar method = type.members.first() as methoddeclaration;\tbool passed = !method.body.isnull;\tif (!passed) {",
  "was",
  0
 ],
 [
  "public static int main (string[] args) {\tint c = 0;\ttry {\tthrow new exception(\"test exception\");\t}\tcatch (exception e) {\t}\tfinally {",
  "finally",
  0
 ],
 [
  "s6.f5 = 5;\ts6.f6 = 6;\ts6 = mono_return_short6(s6, 90);\tif (s6.f1 != 1+90) {\treturn 1;\t}\tif (s6.f2 != 2+90) {\treturn 2;\t}\tif (s6.f3 != 3+90) {",
  "got but expected",
  0
 ],
 [
  "public static void readclob (oracleconnection connection) {\toraclecommand rcmd = connection.createcommand ();\trcmd.commandtext = \"select clob_column from clobtest\";\toracledatareader reader2 = rcmd.executereader ();\toraclelob lob2 = reader2.getoraclelob (0);",
  "length",
  0
 ],
 [
  "if (diff != null) {\tstring diffhtml = string.empty;\tusing (var writer = new stringwriter ()) {\tstate.output = writer;\tac.compare ();\tdiffhtml = state.output.tostring ();\t}\tif (diffhtml.length > 0) {\tusing (var file = new streamwriter (diff)) {\tif (state.colorize) {",
  "obsolete color gray",
  0
 ],
 [
  "sb.append(\"(\");\tappendcppmethodcallparamlist(sb, unboxingstubnode.method, true);\tsb.append(\");\");\tsb.exdent();\tsb.appendline();\tsb.append(\"}\");\tout.write(sb.tostring());\t}\tpublic void outputcode(ienumerable<dependencynode> nodes, nodefactory factory) {\tbuildmethodlists(nodes);",
  "include",
  0
 ],
 [
  "private void thread_func() {",
  "handling load of",
  1
 ],
 [
  "public static xmlnode getnodefromurl (string url, roottree tree) {",
  "could not update jumplists",
  1
 ],
 [
  "public void nullstring() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {",
  "macmenu maps to null command",
  1
 ],
 [
  "private static bool callsecondclassinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tif ((!(bool)(firstclassreturndynamicclass.staticproperty.instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "ctor",
  1
 ],
 [
  "return false;\t}\t}\telse {\tif (!comparer.equals((t2)e1.current.data, e2.current)) {\treturn false;\t}\t}\t}\telse {",
  "invalidated x",
  1
 ],
 [
  "else {\tconsole.writeline ();\t}\t}\tpublic void opendatasource () {\tstring msg = \"\";\tif (factoryname.equals(string.empty) && provider.equals(string.empty)) {\treturn;\t}\tif (isopen()) {",
  "error already connected",
  0
 ],
 [
  "private static bool inconditionaloperator() {\tint failcount = 0;\tbool origin = false;\tdynamic d = origin;\tif (d ? true : false) {\tfailcount++;",
  "ms other tasks",
  1
 ],
 [
  "public bool doinserttemplate () {\tstring shortcut = codetemplate.gettemplateshortcutbeforecaret (editorextension.editor);\tforeach (codetemplate template in codetemplateservice.getcodetemplatesasync (editorextension.editor).waitandgetresult (cancellationtoken.none)) {\tif (template.shortcut == shortcut) {\tvar doc = view.workbenchwindow?.document ?? ideapp.workbench.activedocument;\tif (doc != null) {\tinserttemplate (template, doc.editor, doc);\t} else {",
  "doinserttemplate can t find valid document",
  0
 ],
 [
  "public override nsdragoperation draggingentered (nsdragginginfo sender) {",
  "while reading registry data at",
  1
 ],
 [
  "if (s12.f1 != 1+9) {\treturn 1;\t}\tif (s12.f2 != 2+9) {\treturn 2;\t}\tif (s12.f3 != 3+9) {\treturn 3;\t}\tif (s12.f4 != 4+9) {",
  "ok",
  1
 ],
 [
  "private void attributeidentityconstraints(string name, string ns, object obj, string sobj, schemaattdef attdef) {\tfor (int ci = this.startidconstraint; ci < this.validationstack.length; ci ++) {\tif (((validationstate)(this.validationstack[ci])).constr == null) {\tcontinue;\t}\tconstraintstruct[] constraints = ((validationstate)this.validationstack[ci]).constr;\tfor (int i = 0; i < constraints.length; ++i) {\tfor (int j = 0; j < constraints[i].axisfields.count; ++j) {\tlocatedactiveaxis laxis = (locatedactiveaxis)constraints[i].axisfields[j];\tif (laxis.movetoattribute(name, ns)) {",
  "ctor registering x on",
  1
 ],
 [
  "public static void main () {\tvar vtib = new vti_c<int> ();\tvar result = vtib.graf<int> ();\tif (result) {",
  "it works",
  0
 ],
 [
  "enabledjob = batchcli.joboperations.getjob(jobid);\tassert.equal(jobstate.active, jobstate.active);\tjob.terminate(\"need some reason\");\tcloudjob terminatedjob = batchcli.joboperations.getjob(jobid);\tassert.true(terminatedjob.state == jobstate.terminating || terminatedjob.state == jobstate.completed);\tif (terminatedjob.state == jobstate.terminating) {\tthread.sleep(timespan.fromseconds(5));\t}\tjob.delete();\ttry {",
  "secutil",
  1
 ],
 [
  "static private void help () {",
  "secutil vbmode",
  0
 ],
 [
  "}\tcatch (optionexception e) {\tconsole.write (\"bundling: \");\tconsole.writeline (e.message);\treturn;\t}\tif (show_help) {\tp.writeoptiondescriptions (console.out);\treturn;\t}",
  "macros",
  0
 ],
 [
  "m_xsltarg.addparam(\"myarg1\", szempty, obj);\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);\tif (retobj.tostring() != \"0.00\") {\tassert.true(false);\t}\tint j = 8;\tint i = 8;\tm_xsltarg.addparam(\"myarg2\", szempty, i);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (!i.equals(retobj)) {",
  "failed to add get a value for of type int",
  0
 ],
 [
  "rsa rsa = cryptoconvert.fromcapipublickeyblob (publickey, 12);\tstrongname sn = new strongname (rsa);\tif (sn.verify (assemblyname)) {\treturn 0;\t}\telse {\treturn 1;\t}\t}\telse {",
  "assembly is strongnamed verification skipped",
  0
 ],
 [
  "}\terror = wldap32.ber_printf_int(berelement, new string(fmt, 1), (bool)value[valuecount] ? 1 : 0);\tvaluecount++;\t}\telse if (fmt == 's') {\tif (valuecount >= value.length) {\tdebug.writeline(\"value argument is not valid, valuecount >= value.length\\n\");\tthrow new argumentexception(string.format(cultureinfo.currentculture, sr.berconverternotmatch));\t}\tif (value[valuecount] != null && !(value[valuecount] is string)) {",
  "type should be string but receiving value has type of",
  0
 ],
 [
  "double d3 = double.nan;\tdouble d4 = 2.000001;\tdouble d5 = 0.00;\tdouble d6 = double.maxvalue;\tdouble d7 = double.minvalue;\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(\"myarg1\", szempty, d1);\tm_xsltarg.removeparam(\"myarg1\", szempty);\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);\tif (retobj != null) {",
  "failed to remove",
  0
 ],
 [
  "runtime_args = (runtime_args ?? \"\") + \" \" + args [i + 1];\ti += 2;\t} else if (args [i] == \"--config\") {\tif (i + 1 >= args.length) {\treturn 1;\t}\tconfig = args [i + 1];\ti += 2;\t} else if (args [i] == \"--opt-sets\") {\tif (i + 1 >= args.length) {",
  "token",
  1
 ],
 [
  "public static void testpersistsucurityinfo3() {",
  "use default for persist security info which is false",
  0
 ],
 [
  "assert.true(false);\t}\tm_xsltarg.addparam(\"myarg5\", szempty, d5);\tretobj = m_xsltarg.getparam(\"myarg5\", szempty);\tif (!d5.equals(retobj)) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg6\", szempty, d6);\tretobj = m_xsltarg.getparam(\"myarg6\", szempty);\tif (!d6.equals(retobj)) {",
  "delegate method",
  1
 ],
 [
  "httpwebrequest request = (httpwebrequest) webrequest.create (browscapurl);\trequest.useragent = useragent;\tstreamwriter writer = null;\tstreamreader reader = null;\tconsole.write (\"connecting...\");\twebresponse resp = request.getresponse ();\tstring tmppath = null;\ttry {\ttmppath = path.gettempfilename ();\treader = new streamreader (resp.getresponsestream ());",
  "error while renaming",
  1
 ],
 [
  "public static void main(string[] args) {\truntwothreads(delegate { addandremove(15000); });\tcoll = new arraylist<int>();",
  "using system collections generic",
  1
 ],
 [
  "public static void tabstring_usesprovidedstring(string tabstring) {\tvar sb = new stringbuilder();\tvar sw = new stringwriter(sb);\tusing (var itw = tabstring == null ? new indentedtextwriter(sw) : new indentedtextwriter(sw, tabstring)) {\titw.indent = 1;\tif (tabstring == null) {\ttabstring = indentedtextwriter.defaulttabstring;\t}\titw.writeline();",
  "waitsubsystemtests doublesetoneventwithtimedoutwaitershouldnotstayinwaiterslist",
  1
 ],
 [
  "public static void runspinlocktests_negativetests() {\tfor (int i = 0; i < 2; i++) {\tbool b;\tif (i == 0) {",
  "clientwritekey",
  1
 ],
 [
  "static getbinddnrequest() {\ttry {\tldapextendedresponse.register(replicationconstants.get_identity_name_res, system.type.gettype(\"novell.directory.ldap.extensions.getbinddnresponse\"));\t}\tcatch (system.exception e) {",
  "usesimplereader true false to use simple reader when displaying results",
  1
 ],
 [
  "catch {\tcounter++;\tthrow;\t}\t}\tcatch (exception ex) {\tif (ex.message != \"hello\") return fail;\tcounter++;\t}\tif (counter != 10) {",
  "unexpected counter value",
  0
 ],
 [
  "tw.writeline(\"<entity4 att1='xxx&lt;xxx&#65;xxx&#x43;xxxe1fooxxx'>xxx&gt;xxx&#66;xxx&#x44;xxxe1fooxxx</entity4>\");\ttw.writeline(\"<entity5>e1foo e3bzee </entity5>\");\ttw.writeline(\"<attribute1 />\");\ttw.writeline(\"<attribute2 a1='a1value' />\");\ttw.writeline(\"<attribute3 a1='a1value' a2='a2value' a3='a3value' />\");\ttw.writeline(\"<attribute4 a1='' />\");\ttw.writeline(string.format(\"<attribute5 crlf='x{0}x' cr='x{0}x' lf='x\\nx' ms='x     x' tab='x\\tx' />\", environment.newline));\ttw.writeline(\"<skip1 /><afterskip1 />\");\ttw.writeline(\"<skip2></skip2><afterskip2 />\");\ttw.writeline(\"<chars1>0123456789</chars1>\");",
  "failure",
  1
 ],
 [
  "public static void creategenerictestfile(string strfilename) {\tfilepathutil.addstream(strfilename, new memorystream());\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"no\\\"?>\");\ttw.writeline(\"<!-- comment1 -->\");\ttw.writeline(\"<?pi1a?>\");\ttw.writeline(\"<?pi1b?>\");\ttw.writeline(\"<?pi1c?>\");",
  "generates c file from reference source resource text file",
  1
 ],
 [
  "public static void deletecertmonitor(certificateoperations certops, itestoutputhelper testoutputhelper, string thumbalgo, string thumb) {\tbool found;\tdo {\tfound = false;\tforeach (certificate curcert in certops.listcertificates()) {\tif (thumbalgo.equals(curcert.thumbprintalgorithm, stringcomparison.invariantcultureignorecase) && thumb.equals(curcert.thumbprint, stringcomparison.invariantcultureignorecase)) {",
  "deletecertmonitor thumb state",
  0
 ],
 [
  "if (!d5.equals(retobj)) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg6\", szempty, d6);\tretobj = m_xsltarg.getparam(\"myarg6\", szempty);\tif (!d6.equals(retobj)) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg7\", szempty, d7);\tretobj = m_xsltarg.getparam(\"myarg7\", szempty);",
  "return this value",
  1
 ],
 [
  "public int read8() {\tstring filename = path.combine(testdata, \"common\", \"bug_65660a.xml\");\ttry {\treloadsource(filename);\twhile (datareader.read()) ;\treturn test_fail;\t}\tcatch (xmlexception e) {",
  "source",
  0
 ],
 [
  "writeline($\"    return _value == (({handlename})obj)._value;\");\twriteline(\"    return _value == ((handle)obj)._value;\");\tclosescope(\"equals\");\topenscope($\"public bool equals({handlename} handle)\");\twriteline(\"return _value == handle._value;\");\tclosescope(\"equals\");\topenscope(\"public bool equals(handle handle)\");\twriteline(\"return _value == handle._value;\");\tclosescope(\"equals\");\topenscope(\"public override int gethashcode()\");",
  "retentiontime null",
  1
 ],
 [
  "public void testremovebracesfromwhile() {\ttest<removebracesaction>(@\"class testclass {\tvoid test () {\t$while (true) {",
  "hello",
  0
 ],
 [
  "static void showconnectionproperties (oracleconnection con) {\ttry {\t} catch (system.invalidoperationexception ioe) {\t}",
  "datasource",
  0
 ],
 [
  "public void testaddbracestoif() {\ttest<addbracescoderefactoringprovider>(@\"class testclass {\tvoid test() {\t}\t}\", @\"class testclass {\tvoid test() {\tif (true) {",
  "hello",
  0
 ],
 [
  "writelineuni (\"}\");\twriteline (\"\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twriteline (\"\");\tforeach (generationresult res in generatedmaps) {\tres.serializerclassname = getuniqueclassname (res.mapping.elementname + \"serializer\");\twritelineind (\"{\");\twritelineuni (\"}\");\twriteline (\"\");",
  "getvalue",
  1
 ],
 [
  "private static bool callsecondstructoperator() {\tint failcount = 0;\tdynamic d = new firstclassreturnstruct();\tverify.firstcalled = false;\tif ((!(((secondstruct)d.instancemethod()) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "if (s.startswith (\"-d:\")) destpath = s.substring (3);\telse if (s.startswith (\"-f:\")) formatname = s.substring (3);\telse if (s.startswith (\"-p:\")) projects.add (s.substring (3));\telse if (s == \"-l\") formatlist = true;\telse if (projectfile != null) {\treturn 1;\t}\telse projectfile = s;\t}\tif (projectfile == null) {",
  "usage managed linker path to exe",
  1
 ],
 [
  "public static int test_shift_3 () {\tchecked {\tulong c = 0x800000ff00000000;\tulong d = 0x8ef0abcd00000000;\tulong t;\tt = c >> 4;\tif (t != 0x0800000ff0000000) return 1;\tif ((t << 4) != c) return 1;\tt = d >> 40;",
  "comobjectinfo found non default i f",
  1
 ],
 [
  "thread.sleep(trigering_events_wait_time);\tcom1.databits = 7;\tcom1.parity = parity.none;\tcom2.basestream.write(new byte[] { 0x01 }, 0, 1);\tthread.sleep(trigering_events_wait_time);\tcom2.rtsenable = true;\tthread.sleep(trigering_events_wait_time);\tcom1.databits = 8;\tcom1.parity = parity.none;\tcom2.basestream.write(new byte[] { 26 }, 0, 1);",
  "addnlinkedattrset dispose disposing membersenum enumerator",
  1
 ],
 [
  "public static int main () {\teventhandlers handlers = new eventhandlers ();\thandlers.handler = handlers.dosomethingeventhandler;\tconsole.writeline (\"is handlers.handler == handlers.dosomethingeventhandler (instance)?\");",
  "expected true",
  0
 ],
 [
  "public override control createpanelwidget () {",
  "mono compiler tester c novell inc compiler tester mode pos neg compiler file files file list options compiler file the file which will be used to compiler tests compiler options options add global compiler options il il file xml file with expected il details for each test issues file the list of expected failures log file writes any output also to the file help lists all options mode pos neg specifies compiler test mode safe execution runs compiled executables in separate app domain update il updates il file to match compiler output verbose prints more details during testing",
  1
 ],
 [
  "static void help () {",
  "verifying default readbuffersize after open",
  1
 ],
 [
  "public override bool performdragoperation (nsdragginginfo sender) {",
  "can t get source code location for test",
  1
 ],
 [
  "public void usage() {",
  "apiname identifier",
  0
 ],
 [
  "public static void print(xmlmembermapping mm) {",
  "result",
  1
 ],
 [
  "private void thread_func() {",
  "assembly",
  1
 ],
 [
  "static void showhelp (optionset p) {\tconsole.writeline ();",
  "options",
  0
 ],
 [
  "public static int main () {\tbyte b;\tfor (b = 0; b < 255; b++){\tif (s (b) != 255 - b){\treturn 1;\t}\t}",
  "batch",
  0
 ],
 [
  "public override bool check() {\tbool retval = true;\tif (underlyingsize > array.length) {\treturn false;\t}\tif (offset + size > underlyingsize) {\treturn false;\t}\tif (offset < 0) {",
  "the registry path cachepath and addinspath options can t be used when package is specified",
  1
 ],
 [
  "public int emitsymbolreference(isymbolnode target, int delta, reloctype reloctype) {\tstring realsymbolname = getbasesymbolname(target, _nodefactory.namemangler, true);\tif (realsymbolname == null) {",
  "unable to generate symbolref to",
  0
 ],
 [
  "assert.areequal (typeof (outer<double>.inner), res, \"#5\");\ttname = \"system.collections.generic.list`1[system.int32]\";\tres = type.gettype (tname, name => {\treturn assembly.load (name);\t},(asm,name,ignore) => {\treturn asm == null ? type.gettype (name, false, ignore) : asm.gettype (name, false, ignore);\t}, false, false);\tassert.areequal (typeof (list<int>), res, \"#6\");\ttname = typeof (foo<>).fullname + \"[,][]\";\tres = type.gettype (tname, name => {",
  "generated offsets file",
  1
 ],
 [
  "static private void help () {",
  "hello",
  1
 ],
 [
  "output.write(\"catch \");\toutputtypenamepair(current.catchexceptiontype, current.localname);\toutput.writeline(\"\");\tindent++;\tgeneratevbstatements(current.statements);\tindent--;\t}\t}\tcodestatementcollection finallystatements = e.finallystatements;\tif (finallystatements.count > 0) {",
  "has",
  1
 ],
 [
  "writer.writeendelement ();\twriter.writeendelement ();\twriter.writeendelement ();\twriter.writeenddocument ();\tstring babysitterxmllist = environment.getenvironmentvariable(\"mono_babysitter_nunit_xml_list_file\");\tif (!string.isnullorempty(babysitterxmllist)) {\ttry {\tstring fullxmlpath = path.getfullpath(xmlpath);\tfile.appendalltext(babysitterxmllist, fullxmlpath + environment.newline);\t} catch (exception e) {",
  "rxevent triggered",
  1
 ],
 [
  "public static void testpersistsucurityinfo6() {\tstring user = environment.username;\tif (!environment.userdomainname.equals(string.empty)) user = environment.userdomainname + \"\\\\\" + environment.username;\toracleconnection con = new oracleconnection(\"data source=palis;integrated security=true\");",
  "connectionstring before open",
  0
 ],
 [
  "static bool loadproperties (string filename) {\tproperties = null;\tif (file.exists (filename)) {\ttry {\tproperties = properties.load (filename);\t} catch (exception ex) {",
  "exception",
  1
 ],
 [
  "public static int m (params string[] args) {",
  "different type",
  1
 ],
 [
  "public void addparam12(object param, xslinputtype xslinputtype, readertype readertype, outputtype outputtype, navtype navtype) {\tstring baseline = path.combine(\"baseline\", (string)param);\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(\"myarg1\", szempty, \"test1\");\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);",
  "added value retrieved value",
  0
 ],
 [
  "for (int i = 0; i < direntrycount; i++) {\ticondirentry ide;\tide.width = reader.readbyte ();\tide.height = reader.readbyte ();\tide.colorcount = reader.readbyte ();\tide.reserved = reader.readbyte ();\tide.planes = reader.readuint16 ();\tide.bitcount = reader.readuint16 ();\tide.bytesinres = reader.readuint32 ();\tide.imageoffset = reader.readuint32 ();",
  "ide planes",
  0
 ],
 [
  "private static bool callsecondclassindexer() {\tint failcount = 0;\tverify.firstcalled = false;\tdynamic d = new firstclassreturnclass<int>();\tif ((!(((secondclass<int>)d.instanceproperty)[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "private static bool test7() {\tlong a = 1;\tdynamic b = a;\t--b;\tif (b == 0) return true;",
  "internal error at line",
  1
 ],
 [
  "public void attribute_13(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writeattributestring(\"xml\", \"space\", \"http: }\tcatch (argumentexception e) {\tcerror.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "tr",
  1
 ],
 [
  "jobpreparationandreleasetaskexecutioninformation jrtei = jobprepstatuslist.firstordefault();\tif ((jrtei == null) || (null == jrtei.jobreleasetaskexecutioninformation)) {\tthread.sleep(2000);\t}\telse {\tassert.notnull(jrtei);\tif (jrtei.jobreleasetaskexecutioninformation.state != jobreleasetaskstate.completed) {\tthread.sleep(5000);\t}\telse {",
  "lastmodified null",
  1
 ],
 [
  "state.ignorenew.add (new regex (\".*\"));\tstate.ignoreadded.add (new regex (\".*\"));\t}\tif (showhelp || extra == null || extra.count < 2 || extra.count > 3) {\tconsole.writeline ();\toptions.writeoptiondescriptions (console.out);\tconsole.writeline ();\tconsole.writeline ();\tconsole.writeline ();\tconsole.writeline ();",
  "other useless string",
  1
 ],
 [
  "static void trylldb (int pid, processdata data) {\tstring filename = path.gettempfilename ();\tusing (streamwriter sw = new streamwriter (new filestream (filename, filemode.open, fileaccess.write))) {",
  "did not throw exception",
  1
 ],
 [
  "stream responsestream = httpwebresponse.getresponsestream ();\tstreamreader responsestreamreader = new streamreader (responsestream);\tstring response = responsestreamreader.readline ();\tresponsestreamreader.close ();\tresponsestream.close ();\thttpwebresponse.close ();\t}\tcatch (webexception e) {\t}\tcatch (exception e) {",
  "check refs",
  1
 ],
 [
  "private void adelegate <t> (string param) {",
  "adelegate t called with param",
  0
 ],
 [
  "public static void main(string[] args) {",
  "hello world",
  0
 ],
 [
  "private void emitrecord(recorddef record) {\topenscope($\"public partial struct {record.name}\");",
  "internal record name handle handle",
  0
 ],
 [
  "if (s6.f2 != 2+9) {\treturn 2;\t}\tif (s6.f3 != 3+9) {\treturn 3;\t}\tif (s6.f4 != 4+9) {\treturn 4;\t}\tif (s6.f5 != 5+9) {",
  "got but expected",
  0
 ],
 [
  "public void ignoreslinespreceedinginitialization() {\tfor(;;) {",
  "two",
  0
 ],
 [
  "filteredassert? foundassert = findassertinlist(message);\tif (!foundassert.hasvalue) {\tbase.fail(message, detailmessage);\t}\telse {\tvar assert = foundassert.value;\tif (assert.handler == handlingoption.coverttoexception) {\tthrow new failedassertexception(message, assert.bugnumber);\t}\telse if (assert.handler == handlingoption.writetoconsole) {",
  "hit known assert bug",
  0
 ],
 [
  "protected bool endconversation (streamwriter writer, streamreader reader) {\tstring str = reader.readline ();\tif (str != \"quit\") {\twhere = \"quit\";\treturn false;\t}",
  "skipping adding of the service it has already been added",
  1
 ],
 [
  "using (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writecdata(\"\\ud812\");\t}\tcatch (argumentexception e) {\tutils.checkerrorstate(w.writestate);\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "static void dump (int i, bool ignore) {\tswitch (char.getunicodecategory ((char) i)) {\tcase unicodecategory.privateuse: case unicodecategory.surrogate: return;\t}\tstring s1 = \"\";\tstring s2 = new string ((char) i, 10);\tint ret = cultureinfo.invariantculture.compareinfo.compare (s1, s2, compareoptions.ignorecase);\tif ((ret == 0) == ignore) return;",
  "toplevelelement",
  1
 ],
 [
  "public void loadurl5(readertype readertype) {\ttry {\tloadxsl(\"    \", xslinputtype.uri, readertype, new xmlurlresolver());\t}\tcatch (system.argumentexception) {\treturn;\t}",
  "create tolboxservice",
  1
 ],
 [
  "public bool processevent (intptr callref, intptr eventref, intptr handle, uint kind, ref msg msg) {\tuint klass = eventhandler.geteventclass (eventref);\tbool result = true;\tif (klass == eventhandler.keventclasstextinput) {\tswitch (kind) {\tcase keventtextinputunicodeforkeyevent: processtext (eventref, ref msg);\tbreak;",
  "warning keyboardhandler processevent default handler for keventclasstextinput should not be reached",
  0
 ],
 [
  "static void dump_user (string username) {",
  "info for user",
  0
 ],
 [
  "private void completioncallback(object context) {\tif (boolflags[flag_disposed]) {\treturn;\t}\tlock (instancelockobject) {\tif (boolflags[flag_notifying]) {",
  "eventlog completionstatuschanged aborting because we re already notifying",
  0
 ],
 [
  "int x = 0;\tfor (int i = 0; i < 100; i++) x++;\tconsole.writeline (x);\tstring useless = \"useless string\";\tif (useless.equals (\"other useless\")) {\tuseless = string.empty;\t}\tuseless = string.concat (useless,\" 1\");\tfor (int j = 0; j < useless.length; j++) {\tif (useless[j] == 'u') console.writeline (\"i have detected an u char\");",
  "i have detected an useless char",
  0
 ],
 [
  "static void usage () {",
  "usage options dtdfile ns",
  0
 ],
 [
  "if (d1.mc.field != 12) ispass &= false;\td1.mc[0] = 0;\tif (d1.mc.field != 14) ispass &= false;\ttry {\td1.mc.myproperty2 = 0;\tispass &= false;\t}\tcatch (microsoft.csharp.runtimebinder.runtimebinderexception ex) {\tret = errorverifier.verify(errormessageid.inaccessiblesetter, ex.message, \"myclass.myproperty2\");\tif (!ret) {",
  "error message is wrong",
  0
 ],
 [
  "public void testcase6() {\tanalyze<stringcompareisculturespecificanalyzer>(@\" class test {\tvoid foo () {",
  "foo bar",
  0
 ],
 [
  "private static bool callsecondstructinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tif ((!(bool)(firstclassreturndynamicstruct<int>.staticmethod().instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public static void die (string format, params object[] args) {\tconsole.writeline ();\tif (args == null || args.length == 0) console.writeline (\"error: \" + format);",
  "this update",
  1
 ],
 [
  "private void dispose(bool disposing) {\tif (_handle != intptr.zero) {\t#if finalization_watch if (!disposing) {",
  "disposed through finalization",
  0
 ],
 [
  "}\tinternal void preparereplay() {\tresetsnapshotstate();\t}\t}\tprivate void dumpbuffer() {\tconsole.writeline(\"_inbytesread = {0}\", _inbytesread);\tconsole.writeline(\"_inbytesused = {0}\", _inbytesused);\tint cc = 0;\tint i;",
  "use commandset suite help command for help on a specific command",
  1
 ],
 [
  "assert.equal(grainid.tostring(), newlabel);\toutput.writeline($\"after 2nd call. newlabel = '{newlabel}'\");\tif (forcecreationinsecondary) {\tgrainsiloaddress = await grain.getruntimeinstanceid();\toutput.writeline( grainsiloaddress == primarysiloaddress ? \"recreated in primary\" : \"recreated in secondary\");\toutput.writeline( grainsiloaddress == primarysiloaddress ? \"recreated in primary\" : \"recreated in secondary\");\t}\t}\telse {\tvar secondex = await assert.throwsasync<orleansmessagerejectionexception>(() => grain.getlabel());",
  "branch",
  1
 ],
 [
  "}\tjobmanagertask ijm = jobspec.jobmanagertask;\tif (null == ijm) {\t}\telse {\tienumerable<environmentsetting> envsettings = ijm.environmentsettings;\tif (null != envsettings) {\tlist<environmentsetting> envsettingslist = new list<environmentsetting>(ijm.environmentsettings);\t}\telse {",
  "environmentsettings null",
  0
 ],
 [
  "header ();\thelp ();\treturn 1;\t}\tif (!quiet) {\theader ();\t}\treturn process ();\t}\tcatch (exception e) {",
  "error",
  0
 ],
 [
  "static void writeheader(streamwriter html, string title) {\thtml.writeline(\"  <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"listing.css\\\">\");\thtml.writeline(\"  <meta name=\\\"generator\\\" value=\\\"buildaddindocumentation\\\">\");",
  "got but expected",
  1
 ],
 [
  "try {\tbool haveanycancelled = false;\titemunloadingeventargs args = new itemunloadingeventargs (item);\tforeach (eventhandler<itemunloadingeventargs> handler in itemunloading.getinvocationlist ()) {\thandler (this, args);\thaveanycancelled |= args.cancel;\t}\treturn !haveanycancelled;\t}\tcatch (exception ex) {",
  "exception in itemunloading",
  0
 ],
 [
  "public void testaddbracestodowhile() {\ttest<addbracesaction>(@\"class testclass {\tvoid test () {\twhile (true);\t}\t}\", @\"class testclass {\tvoid test () {\tdo {",
  "expected",
  1
 ],
 [
  "public void emitsource() {\twriteline();",
  "void m string value system console writeline value void m string value console writeline value",
  1
 ],
 [
  "static void test(pgsqlconnection con, string sql, commandtype cmdtype, commandbehavior behavior, string testdesc) {\tpgsqlcommand cmd = null;\tpgsqldatareader rdr = null;\tint c;\tint results = 0;\tconsole.writeline(sql);\tcmd = new pgsqlcommand(sql, con);\tcmd.commandtype = cmdtype;\trdr = cmd.executereader(behavior);\tif(rdr == null) {",
  "idatareader has a null reference",
  0
 ],
 [
  "if (s17.f14 != 14+9) {\treturn 14;\t}\tif (s17.f15 != 15+9) {\treturn 15;\t}\tif (s17.f16 != 16+9) {\treturn 16;\t}\tif (s17.f17 != 17+9) {",
  "got but expected",
  0
 ],
 [
  "public void m() {\t#line 40 console.writeline(4);\t#line hidden console.writeline();",
  "c a b c d x cs",
  0
 ],
 [
  "public string getpfxpassword() {\tvar tag = \"-pfxfilepassword\";\tvar password = getargumentvalue( tag );\tif (password == string.empty) {",
  "priority",
  1
 ],
 [
  "public void getextobject11(xslinputtype xslinputtype, readertype readertype, outputtype outputtype, navtype navtype) {\tmyobject obj = new myobject(11, _output);\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addextensionobject(szdefaultns, obj);\tfor (int i = 0; i < 500; i++) {\tretobj = m_xsltarg.getextensionobject(szdefaultns);\tif (((myobject)retobj).myvalue() != obj.myvalue()) {",
  "set and retrieved value appear to be different after i tries",
  0
 ],
 [
  "return parent;\t}\twebformsexpressionstate.addexpressionnode (c, context);\tsettag (context, attstate.expression);\treturn null;\tcase attstate.percentdash: if (c == '-') {\tcontext.nodes.push (new webformsservercomment (context.locationminus (4)));\tsettag (context, attstate.comment);\treturn null;\t}",
  "malformed server comment",
  0
 ],
 [
  "public void stopthread() {",
  "warning not found",
  1
 ],
 [
  "string str = datareader.getattribute(datareader.attributecount + 1);\t}\tcatch (argumentoutofrangeexception exc) {\tcerror.writeline(exc + \" : \" + exc.message);\treturn test_pass;\t}\tcatch (exception e) {\tcerror.writeline(e + \" : \" + e.message);\tthrow new ctestexception(ctestbase.test_fail, wrong_exception);\t}",
  "no exception thrown",
  0
 ],
 [
  "protected virtual void renderbegincardtag(wmltextwriter writer) {",
  "card",
  0
 ],
 [
  "private static bool floattypewithnumbericconversionfromintinassignment() {\tint failcount = 0;\tint origin = int.maxvalue;\tdynamic d = origin;\tfloat result = d;\tif (result != origin) {\tfailcount++;",
  "test failed at call result",
  1
 ],
 [
  "tr.write(\"        \" + returntype + \" \" + decl.functionname + \"(\");\ttr.write(\"intptr thishandle\");\tforeach (parameter param in decl.parameters) {\ttr.write(\", \");\ttr.write(param.type.managedtypename + \" \" + param.name);\t}\ttr.writeline(\")\");\t}\ttr.writeline();\t#endif foreach (functiondecl decl in functiondata) {",
  "unmanagedfunctionpointerattribute default callingconvention",
  0
 ],
 [
  "protected override void onexit () {\thasexited = true;\tendlaunch ();\tif (vm != null) {\ttry {\tvm.exit (0);\t} catch (vmdisconnectedexception) {\t} catch (socketexception se) {\t} catch (ioexception ex) {",
  "drawimagecallback",
  1
 ],
 [
  "static void dumpjitoffsets(textwriter writer, astcontext ctx) {",
  "count logformatter printdate call logformatter printdate call",
  1
 ],
 [
  "public static void main(string[] args) {\tarraylist<int> list = new arraylist<int>(), copy1, copy2;\tlist.addall(new int[] { 2, 3, 5, 7, 11, 13, 17, 19 });\tcopy1 = (arraylist<int>)list.clone();\tcopy2 = (arraylist<int>)list.clone();\tconst int n = 7;\tforeach (int x in randomwith(list, n)) console.write(\"{0} \", x);",
  "without replacement",
  0
 ],
 [
  "static private void extendedhelp () {",
  "b date the date since when the certificate is valid notbefore",
  0
 ],
 [
  "{\tobject stringarray = new string[] { \"a\", \"b\", \"c\", \"d\" };\tstring result = string.empty;\tforeach (var s in (system.collections.generic.ienumerable<string>)stringarray) result += s;\tif (result != \"abcd\") {\treturn fail;\t}\t}\t{\tobject stringarray = new string[] { \"a\", \"b\", \"c\", \"d\" };",
  "testing ienumerable on array",
  0
 ],
 [
  "public void overflowcircularbuffertest() {\tstring datafilename = \"overflowdata.etl\";\tvar sessionname = path.getfilenamewithoutextension(datafilename) + \"session\";\tvar logger = adshutdowneventsourcetester.adshutdowneventsource.log;\tdatafilename = path.getfullpath(datafilename);",
  "creating data file",
  0
 ],
 [
  "static void externalauthenticationtest () {\tstring user = environment.username;\tif (!environment.userdomainname.equals(string.empty)) user = environment.userdomainname + \"\\\\\" + environment.username;\toracleconnection con = new oracleconnection(\"data source=palis;integrated security=true\");\ttry {\tcon.open();\toraclecommand cmd = con.createcommand();\tcmd.commandtext = \"select user from dual\";\toracledatareader reader = cmd.executereader();",
  "user user",
  0
 ],
 [
  "static void oninfomessage (object sender, oracleinfomessageeventargs e) {",
  "using system collections generic",
  1
 ],
 [
  "protected static string extensioncacheconverter(filterbase filter, string suggestedadproperty) {\tstringbuilder query = new stringbuilder();\tif (filter.value != null) {\textensioncache ec = (extensioncache)filter.value;\tforeach (keyvaluepair<string, extensioncachevalue> kvp in ec.properties) {\ttype type = kvp.value.type == null ? kvp.value.value.gettype() : kvp.value.type;",
  "adstorectx extensioncacheconverter match type",
  0
 ],
 [
  "assert.true(false);\t}\tm_xsltarg.addparam(\"myarg6\", szempty, d6);\tretobj = m_xsltarg.getparam(\"myarg6\", szempty);\tif (!d6.equals(retobj)) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg7\", szempty, d7);\tretobj = m_xsltarg.getparam(\"myarg7\", szempty);\tif (!d7.equals(retobj)) {",
  "get",
  1
 ],
 [
  "public void addparam14(inputtype inputtype, readertype readertype, transformtype transformtype, doctype doctype) {\tstring expected = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?><result> 1.test1 2.test2 3.no value specified 4.no value specified 5.no value specified 6.no value specified</result>\";\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(\"myarg1\", szempty, \"test1\");\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);\tif (retobj.tostring() != \"test1\") assert.true(false);\tm_xsltarg.addparam(\"myarg1\", szempty, \"test2\");\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);",
  "press enter to continue",
  1
 ],
 [
  "public void ignoreslinespreceedinginitialization() {",
  "failed to remove",
  1
 ],
 [
  "public void setlength_badvalue() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tcom.open();",
  "verifying setlength method throws exception with a bad value after a call to open",
  0
 ],
 [
  "public void discardnull_default_readline() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "both assembly are identical same digest for metadata",
  1
 ],
 [
  "public void parseassembly (byte[] data, string version, string name, string fullname, bool dump_asm, bool dump_ver, bool dump_guids_for_msbuild) {\tvar a = assembly.reflectiononlyload (data);\tvar m = a.getmodules ()[0];\tvar id = m.moduleversionid.tostring ().toupper ();\tvar hash_code = hash (id).tostring (\"x\");\tvar str = filetoenum (name);\tstring ver_str = version + \" \" + filetomoniker (fullname);\tvar ver = a.getname ().version;\tif (dump_ver) {\t} else if (dump_guids_for_msbuild) {",
  "name id ver major ver minor ver build ver revision",
  0
 ],
 [
  "public static void connectionpoolingtest2 () {\toracleconnection[] connections = null;\tint maxcon = max_connections;\tint i = 0;\tconnections = new oracleconnection[maxcon];\tfor (i = 0; i < maxcon; i++) {",
  "open connection",
  0
 ],
 [
  "if (s13.f8 != 8+9) {\treturn 8;\t}\tif (s13.f9 != 9+9) {\treturn 9;\t}\tif (s13.f10 != 10+9) {\treturn 10;\t}\tif (s13.f11 != 11+9) {",
  "failed",
  1
 ],
 [
  "public async task sms_limits_findmax_producers() {\tguid streamid = guid.newguid();\tstring streamprovidername = smsstreamprovidername;",
  "starting search for maxproducersperstream value using stream",
  0
 ],
 [
  "if (action == action.none) {\thelp (true);\t}\tstring dirname = environment.getfolderpath (environment.specialfolder.applicationdata);\tstring path = path.combine (dirname, \".mono\");\tpath = path.combine (path, \"httplistener\");\tif (false == directory.exists (path)) {\ttry {\tdirectory.createdirectory (path);\t} catch (exception e) {",
  "failed decimal",
  1
 ],
 [
  "private static int verify() {\tlock (test.locker) {\tif (test.s_field == null) {",
  "failed the finalizer hasn t executed",
  0
 ],
 [
  "private static bool test9() {\tchar a = 'b';\tdynamic b = a;\tb--;\tif (b == 'a') return true;",
  "got but expected",
  1
 ],
 [
  "public static int test_0_safehandle_return_exc () {\ttry {\tsafehandle x = mono_safe_handle_return_1 ();\t} catch (marshaldirectiveexception){\treturn 0;\t}",
  "run failed with",
  1
 ],
 [
  "if (!merge.iscommon (this.from)) return;\tsymvalue sv1 = merge.graph1.lookupwithoutmanifesting (this.from, this.function);\tsymvalue sv2 = merge.graph2.lookupwithoutmanifesting (this.from, this.function);\tif (debugoptions.debug) {\t}\tif (sv1 == null) {\tif (this.function.keepasbottomfield && merge.graph1.hasallbottomfields (this.from)) sv1 = merge.graph1.bottomplaceholder;\telse {\tif (sv2 == null || merge.widen || !this.function.manifestfield) return;\tif (debugoptions.debug) {",
  "actual nodetype",
  1
 ],
 [
  "static void dataadaptertest (oracleconnection connection) {\toraclecommand command = connection.createcommand ();\tcommand.commandtext = \"select * from scott.emp\";\toracledataadapter adapter = new oracledataadapter (command);\tdataset dataset = new dataset (\"emp\");\tadapter.fill (dataset);\tdatatable table = dataset.tables [0];",
  "category",
  1
 ],
 [
  "public void randomoperationstest() {\tint operationcount = this.randomoperationscount;\tvar expected = new sortedset<int>();\tvar actual = immutablesortedset<int>.empty;\tint seed = unchecked((int)datetime.now.ticks);\tvar random = new random(seed);\tfor (int iop = 0; iop < operationcount; iop++) {\tswitch ((operation)random.next((int)operation.last)) {\tcase operation.add: int value = random.next();",
  "test failed at call result",
  1
 ],
 [
  "public void var3() {\ttry {\tnew xslcompiledtransform().load((ixpathnavigable)null, xsltsettings.trustedxslt, (xmlresolver)null);\t}\tcatch (argumentnullexception) {\treturn;\t}\tcatch (exception e) {\t_output.writeline(e.tostring());",
  "did not throw argumentnullexception",
  0
 ],
 [
  "public static int main () {\ttest test = new test();\tthread thr=new thread(new threadstart(test.thread_func));\tthr.start();\tmonitor.enter(mon);\tmonitor.enter(mon);\tmonitor.wait(mon);",
  "main mon waited",
  0
 ],
 [
  "foreach (nativeformatmoduleinfo moduleinfo in modulelist.enumeratemodules()) {\texternalreferencestable externalfixupstable;\tnativehashtable typetemplateshashtable = loadhashtable(moduleinfo, reflectionmapblob.typetemplatemap, out externalfixupstable);\tif (typetemplateshashtable.isnull) continue;\tvar enumerator = typetemplateshashtable.lookup(hashcode);\tnativeparser entryparser;\twhile (!(entryparser = enumerator.getnext()).isnull) {\truntimetypehandle candidatetemplatetypehandle = externalfixupstable.getruntimetypehandlefromindex(entryparser.getunsigned());\ttypedesc candidatetemplate = concretetype.context.resolveruntimetypehandle(candidatetemplatetypehandle);\tif (canonform == candidatetemplate.converttocanonform(kind)) {",
  "outputtabs",
  1
 ],
 [
  "static void help () {",
  "hello world",
  1
 ],
 [
  "xmlwriter w = createwriter(doc);\txmlreader xr = createreader(path.combine(filepathutil.gettestdatapath(), path.combine(\"xmlwriter2\", \"xmlreader.xml\")));\twhile (xr.read()) {\tif (xr.localname == \"attributesgeneric\") {\tdo { xr.read(); } while (xr.localname != \"node\");\txr.movetoattribute(1);\tbreak;\t}\t}\tif (xr.nodetype != xmlnodetype.attribute) {",
  "warning",
  1
 ],
 [
  "boolean bf = (1 == 0);\tm_xsltarg.addparam(\"myarg3\", szempty, bf);\tretobj = m_xsltarg.getparam(\"myarg3\", szempty);\tif (!bf.equals(retobj)) {\tassert.true(false);\t}\tboolean bt = (1 == 1);\tm_xsltarg.addparam(\"myarg4\", szempty, bt);\tretobj = m_xsltarg.getparam(\"myarg4\", szempty);\tif (!bt.equals(retobj)) {",
  "access friend internal method ok",
  1
 ],
 [
  "private static bool callsecondclassinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturndynamicclass();\tif ((!(bool)((s + 1).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "v",
  1
 ],
 [
  "public void log (string msg) {",
  "process ps log",
  0
 ],
 [
  "tw.writeline(\"<entity4 att1='xxx&lt;xxx&#65;xxx&#x43;xxxe1fooxxx'>xxx&gt;xxx&#66;xxx&#x44;xxxe1fooxxx</entity4>\");\ttw.writeline(\"<entity5>e1foo e3bzee </entity5>\");\ttw.writeline(\"<attribute1 />\");\ttw.writeline(\"<attribute2 a1='a1value' />\");\ttw.writeline(\"<attribute3 a1='a1value' a2='a2value' a3='a3value' />\");\ttw.writeline(\"<attribute4 a1='' />\");\ttw.writeline(string.format(\"<attribute5 crlf='x{0}x' cr='x{0}x' lf='x\\nx' ms='x     x' tab='x\\tx' />\", environment.newline));\ttw.writeline(\"<skip1 /><afterskip1 />\");\ttw.writeline(\"<skip2></skip2><afterskip2 />\");\ttw.writeline(\"<chars1>0123456789</chars1>\");",
  "chars xxx pi yyy chars",
  0
 ],
 [
  "for (int i=0; i<100; i++) {\tisequenced<int> inner = new treeset<int>();\tinner.add(i); inner.add(i+1);\touter.add(inner);\t}\tisequenced<int> inner1 = new treeset<int>(), inner2 = new treeset<int>(), inner3 = new treeset<int>();\tinner1.addall<int>(new int[] { 2, 3, 5, 7, 11 });\tinner2.addall(inner1); inner2.add(13);\tinner3.addall(inner1);\touter.add(inner1);",
  "where available options are",
  1
 ],
 [
  "public int v1() {\tstring type = curvariation.params[0].tostring();",
  "test type",
  0
 ],
 [
  "protected sealed override async task<bool> onaddtoproject (cancellationtoken token) {\tint trycount = 1;\tbool keeptrying = true;\twhile (keeptrying) {\ttry {\tif (trycount > 1) {\t} else {\t}\tthis.compilation = await typesystemservice.getcompilationasync (this.service.project).configureawait (false);\tif (this.compilation == null) {",
  "could not get compilation object",
  0
 ],
 [
  "private delegate void readmethoddelegate(stream stream);\t#region test cases [conditionalfact(nameof(hasoneserialport))]\tpublic void readtimeout_defaultvalue() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tcom.open();\tstream stream = com.basestream;",
  "endproject",
  1
 ],
 [
  "public void discardnull_true_read_char_int_int_after() {",
  "verifying true discardnull with read char int int after open",
  0
 ],
 [
  "private void thread_func() {\tfor(int i=51200; i<102400; i++) {\tslot[i]=thread.allocatedataslot();\tthread.setdata(slot[i], i);\t}\tthread.sleep(5000);\tthread.setdata(slot[11111], 42);\tthread.setdata(slot[76801], 42);\tthread.sleep(20000);",
  "error parsing html response",
  1
 ],
 [
  "private static bool callsecondinterfaceinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tif ((!(bool)(((dynamic)firstclassreturninterface.staticproperty).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "specified timeout",
  1
 ],
 [
  "public override void statisticalcallchainstart (uint chaindepth) {",
  "statisticalcallchainstart",
  0
 ],
 [
  "static void main (string [] args) {\ttypenames.addrange (args [0].split (','));\tfor (int i = 1; i < args.length; i++) {\tassemblies.add (assemblydefinition.readassembly (args [i]));\t}\tif (typenames.count == 1) {",
  "failed to parse string",
  1
 ],
 [
  "fileinfo.delete();\t}\tcatch( exception ex ) {\t}\t}\tcachedir.attributes = fileattributes.normal;\ttry {\tcachedir.delete();\t}\tcatch( exception ex ) {",
  "bar",
  1
 ],
 [
  "idatareader reader;\tobject odatavalue;\ttry {\tdroptable (cnc);\t}\tcatch (pgsqlexception e) {\t}\ttry {\tcreatetable (cnc);\tinsertdata (cnc);",
  "sec items",
  1
 ],
 [
  "private void dochecktimeout() {\tint currentmillis = environment.tickcount;\tif (currentmillis < timeoutoccursat) return;\tif (0 > timeoutoccursat && 0 < currentmillis) return;\t#if dbg if (runregex.debug) {\tdebug.writeline(\"\");",
  "reader line exception line",
  1
 ],
 [
  "private static void appendil(methodinfo method, stringwriter sw, itypefactory typefactory) {\tilreader reader = ilreaderfactory.create(method);\texceptioninfo[] exceptions = reader.ilprovider.getexceptioninfos();\tvar writer = new richilstringtotextwriter(sw, exceptions);",
  "error adding local assembly",
  1
 ],
 [
  "if (!doinitialdialog (writer, reader, \"/home/someuser\", \"/home/someuser/\")) {\tclient.close ();\treturn;\t}\tstring str = reader.readline ();\tif (str.trim () != \"dele file.txt\") {\twhere = \"dele - \" + str;\tclient.close ();\treturn;\t}",
  "delete operation successful",
  0
 ],
 [
  "protected override bool onstyleattributerender (string name, string value, htmltextwriterstyle key) {",
  "onstyleattributerender",
  0
 ],
 [
  "public void disassemble(methodbody body, methoddebugsymbols debugsymbols) {\tmethoddefinition method = body.method;",
  "internal metadatareader reader",
  1
 ],
 [
  "public void setxmlnametabletonull() {\txmlschemavalidator val;\ttry {\tval = new xmlschemavalidator(null, new xmlschemaset(), new xmlnamespacemanager(new nametable()), allflags);\t}\tcatch (argumentnullexception) {\treturn;\t}",
  "pmdesignator",
  1
 ],
 [
  "private static bool inforstatement1() {\tint failcount = 0;\tc1 origin = new c1();\tdynamic d = origin;\tfor (; d;) {\tfailcount++;",
  "err exception caught in scenario",
  1
 ],
 [
  "public void var13() {\ttry {\t#pragma warning disable 0618 new xsltransform().transform((ixpathnavigable)null, (xsltargumentlist)null, (xmlwriter)null);\t#pragma warning restore 0618 }\tcatch (argumentnullexception) {\treturn;\t}\tcatch (exception e) {\t_output.writeline(e.tostring());",
  "did not throw argumentnullexception",
  0
 ],
 [
  "static void setupinstrumentation () {\tinstrumentationservice.enabled = runtime.preferences.enableinstrumentation;\tif (instrumentationservice.enabled) {\ttry {\tint port = instrumentationservice.publishservice ();",
  "assert failed",
  1
 ],
 [
  "sln.writeline (\"\\t\\tdebug|{0} = debug|{0}\", profile, profile);\tsln.writeline (\"\\t\\trelease|{0} = release|{0}\", profile, profile);\t}\tsln.writeline (\"\\tglobalsection(projectconfigurationplatforms) = postsolution\");\twriteprojectconfigurationplatforms (sln, jay_vcxproj_guid, \"win32\");\tforeach (var proj in libraries) {\twriteprojectconfigurationplatforms (sln, proj.projectguid, \"net_4_x\");\t}\tsln.writeline (\"\\tglobalsection(solutionproperties) = presolution\");\tsln.writeline (\"\\t\\thidesolutionnode = false\");",
  "endglobal",
  0
 ],
 [
  "static void writeblock(poblock block, streamwriter writer, pofile po, bool ismessages) {\tforeach (var item in block.metadata) writer.writeline(item);\tif (block.idplural != null) {",
  "test failed at call result",
  1
 ],
 [
  "context.statetag = ok;\tif (!element.isnamed && xmlchar.isfirstnamechar (c)) {\trollback = string.empty;\treturn namestate;\t}\tif (context.currentstatelength > 0 && xmlchar.isfirstnamechar (c)) {\trollback = string.empty;\treturn attributestate;\t}\tif (xmlchar.iswhitespace (c)) return null;",
  "http ok",
  1
 ],
 [
  "public pointf (float a, float b) {\tfa = a;\tfb = b;",
  "pointf created and",
  0
 ],
 [
  "private static bool callsecondclassinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturnclass();\tif ((!(bool)(((dynamic)s.instancemethod()).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test parameters",
  1
 ],
 [
  "manualresetevent pause1 = new manualresetevent(false);\tmanualresetevent pause2 = new manualresetevent(false);\tvar finish = new taskcompletionsource<bool>();\ttask<int> task1 = null;\ttask<int> task2 = null;\ttask join = null;\ttask wrapper = new task(() => {\ttask1 = task.run(() => {\tassert.notequal(scheduler, taskscheduler.current);\tpause1.waitone();",
  "task done",
  0
 ],
 [
  "protected void createassynames() {\tif (_assyinfo._name == null) {\tstring dir = componentinspectorproperties.convertedassemblydirectory;",
  "createassynames using name typelibkey",
  0
 ],
 [
  "public async task awaitwithstack2(task<int> task) {\tif (await this.simplebooltaskmethod()) {\t}\telse {\tint num = 1;",
  "adstorectx extensioncachetoldapconverter value implements icollection",
  1
 ],
 [
  "onlyclients.setattributevalue (\"key\", \"onlyclients\");\tappsettings.add (onlyclients);\t}\telse throw new exception (\"too many onlyclients appsettings clauses\");\tif (mode == \"client\") onlyclients.setattributevalue(\"value\",\"true\");\telse if (mode == \"inproc\") onlyclients.setattributevalue (\"value\", \"false\");\telse {\tthrow new exception (\"unrecognized mode: \" + mode);\t}\tconfig.save (file,saveoptions.disableformatting);",
  "successfully switched to mode",
  0
 ],
 [
  "public virtual void vf () {",
  "mono mget exe options url url",
  1
 ],
 [
  "filepath target = filepath.null;\ttry {\tsource = profile.getlocation (node.sourcekind).combine (node.sourcepath);\ttarget = userprofile.current.getlocation (node.targetkind).combine (node.targetpath);\tbool sourceisdirectory = directory.exists (source);\tif (sourceisdirectory) {\tif (directory.exists (target)) return;\t} else {\tif (file.exists (target) || directory.exists (target) || !file.exists (source)) return;\t}",
  "icontitlefont",
  1
 ],
 [
  "public void writeattributes_9(xmlwriterutils utils, string tokentype) {\tstring strxml = \"\";\tswitch (tokentype) {\tcase \"documenttype\": if (isxpathdatamodelreader()) {\treturn;\t}\tstrxml = \"<!doctype root[]><root/>\";\tbreak;\tcase \"cdata\": if (isxpathdatamodelreader()) {",
  "does not support cdata node",
  0
 ],
 [
  "public void writeafterclose() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {",
  "case writeafterclose verifying write method throws exception after a call to close",
  0
 ],
 [
  "grainreference reference = this.fixture.internalgrainfactory.getgrain(grainid.newid());\tvar data = teststoregrainstate.newrandomstate();\toutput.writeline(\"using store = {0}\", store.gettype().fullname);\tstopwatch sw = new stopwatch();\tvar keys = getkeys(name, reference);\tsw.restart();\tstring etag = store.writerow(keys, asdictionary(data.state), null);\toutput.writeline(\"write returned etag={0} after {1} {2}\", etag, sw.elapsed, storageproviderutils.printonewrite(keys, data, etag));\tsw.restart();\tvar storeddata = store.readrow(keys);",
  "overloaded unary operator",
  1
 ],
 [
  "if (s17.f3 != 3+9) {\treturn 3;\t}\tif (s17.f4 != 4+9) {\treturn 4;\t}\tif (s17.f5 != 5+9) {\treturn 5;\t}\tif (s17.f6 != 6+9) {",
  "got but expected",
  0
 ],
 [
  "public static void printlogfunction (string domain, loglevelflags level, string message) {",
  "cannot read after an invalid operation exception",
  1
 ],
 [
  "private async task batchrequestcancellationviaparametertestasync(methodinfo method, object o, timespan? clientrequesttimeoutviacustomtoken) {\tassert.notnull(clientrequesttimeoutviacustomtoken);\tusing (cancellationtokensource cancellationtokensource = new cancellationtokensource(clientrequesttimeoutviacustomtoken.value)) {\tbatchunittestcancellationexception e = await assert.throwsasync<batchunittestcancellationexception>( async () => await invokecancellationtokenmethodasync(method, o, cancellationtokensource.token));",
  "protocolversion",
  1
 ],
 [
  "public void ipinfotest_accessallipv4properties_noerrors() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfaceproperties ipproperties = nic.getipproperties();\tipv4interfaceproperties ipv4properties = ipproperties.getipv4properties();",
  "in outer",
  1
 ],
 [
  "public void writeattributes_8(xmlwriterutils utils) {\tif (isxpathdatamodelreader()) {",
  "does not support xmldecl node",
  0
 ],
 [
  "public static void threadmethod_a() {\tfor (int i=0;i<10;i++) {",
  "thread a trying to lock mutex",
  0
 ],
 [
  "string fragment = (string)options[readerfactory.ht_fragment];\tstringreader sr = (stringreader)options[readerfactory.ht_stringreader];\tif (rs == null) rs = new xmlreadersettings();\trs.dtdprocessing = dtdprocessing.ignore;\trs.checkcharacters = false;\txmlreadersettings wrs = new xmlreadersettings();\twrs.dtdprocessing = dtdprocessing.ignore;\twrs.checkcharacters = true;\twrs.conformancelevel = conformancelevel.auto;\tif (sr != null) {",
  "charcheckingreader string",
  0
 ],
 [
  "public void testdisable() {\tvar input = baseinput + @\" try {\tf ();\t} catch {\tthrow;\t} finally {",
  "inside finally",
  0
 ],
 [
  "static private void extendedhelp () {",
  "in name take the issuer s name from the specified parameter",
  0
 ],
 [
  "public async task<int> run (string[] arguments) {\tforeach (string s in arguments) readargument (s);\tif (help) {",
  "c configuration configuration name of the solution configuration to build",
  0
 ],
 [
  "if (stdout == null) {\tenvironment.exit (1);\t}\tvar regex = new regex (\"converting[^\\n]* method ([^\\n]+)\\n\");\tvar matches = regex.matches (stdout);\tvar methods = new list<string> ();\tforeach (match match in matches) {\tvar method = match.groups [1].value;\tmethods.add (method);\t}",
  "running with all methods just to make sure",
  0
 ],
 [
  "public void failure5 () {\tobject o = new object ();\tlock (locker) {\tlock (locker2) {",
  "foo",
  0
 ],
 [
  "tw.writeline(\"<attribute2 a1='a1value' />\");\ttw.writeline(\"<attribute3 a1='a1value' a2='a2value' a3='a3value' />\");\ttw.writeline(\"<attribute4 a1='' />\");\ttw.writeline(string.format(\"<attribute5 crlf='x{0}x' cr='x{0}x' lf='x\\nx' ms='x     x' tab='x\\tx' />\", environment.newline));\ttw.writeline(\"<skip1 /><afterskip1 />\");\ttw.writeline(\"<skip2></skip2><afterskip2 />\");\ttw.writeline(\"<chars1>0123456789</chars1>\");\ttw.flush();\ttw.writeline(\"<isdefault a1='a1value' />\");\ttw.writeline(\"<boolean3>1</boolean3>\");",
  "failed with wrong exception",
  1
 ],
 [
  "public void exepath_userlevelnone_null () {\t#if false sysconfig config = configurationmanager.openexeconfiguration (null);",
  "getting file",
  1
 ],
 [
  "public void testdisable () {\ttestwrongcontext<basemethodcallwithdefaultparameterissue> (@\" public class mybase {\tpublic virtual void foobar(int x = 12) {",
  "verifying true dtrenable after open",
  1
 ],
 [
  "failcount += 1;\t}\ttry {\tvar a = new wrongcasefriendassembly.internalclass(@internal: 0);\t} catch (memberaccessexception) {\tfailcount += 1;\t}\ttry {\twrongcasefriendassembly.internalclass.privatestaticmethod();\t} catch (memberaccessexception) {",
  "oops",
  1
 ],
 [
  "static void dumpsignature (signature s) {",
  "id",
  0
 ],
 [
  "static void dotest (smtpserver s, smtpclient c, mailmessage m) {\tthread t = new thread (s.run);\tt.start ();\tc.send (m);\tt.join ();",
  "rcpt to",
  0
 ],
 [
  "public static void main() {\tdns.gethostbyname(\"localhost\");",
  "bbb",
  0
 ],
 [
  "public void bytestowrite() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tasyncwriterndbytearray asyncwriterndbytearray = new asyncwriterndbytearray(com, byte_size_bytes_to_write);\tvar t = new task(asyncwriterndbytearray.writerndbytearray);",
  "server starting ssl authentication",
  1
 ],
 [
  "public static void print(xmlmembermapping mm) {",
  "typename",
  0
 ],
 [
  "reader = selectdata (cnc);\treaddata(reader);\treader = selectdatausingcommand(cnc);\treaddata(reader);\treader = selectdatausinginsertcommand(cnc);\treaddata(reader);\tobject obj = callstoredprocedure(cnc);\tdroptable (cnc);\t}\tcatch(exception e) {",
  "exception caught",
  0
 ],
 [
  "private void verifywritebuffersizebeforeopen(int newwritebuffersize) {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {",
  "verifying setting writebuffersize to",
  0
 ],
 [
  "public static void createlinenumbertestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<?xml version=\\\"1.0\\\" ?>\");\ttw.writeline(\" <element a0='a0&e1;v' a1='a1value' a2='a2&e1;v'><embedded /></element>\");\ttw.writeline(\"<?pi1?>\");\ttw.writeline(\"<base64>9f6hju++</base64>\");",
  "binhex binhex",
  0
 ],
 [
  "public void merge () {\tforeach (docsetchangeset dsc in changeset.docsetchangesets) {\tbool merged = false;\tforeach (string path in targetdirs) {\tif (file.exists (path.combine (path, dsc.docset + \".source\"))) {\tmerge (dsc, path);\tmerged = true;\tbreak;\t}\t}",
  "could not merge docset",
  0
 ],
 [
  "s9.f2 = 2;\ts9.f3 = 3;\ts9.f4 = 4;\ts9.f5 = 5;\ts9.f6 = 6;\ts9.f7 = 7;\ts9.f8 = 8;\ts9.f9 = 9;\ts9 = mono_return_float9(s9, 906);\tif (s9.f1 != 1+906) {",
  "please type without the quotes you shouldn t see it as you type",
  1
 ],
 [
  "public toolboxitemcollection gettoolboxitems(string category) {",
  "toolboxservice gettoolboxitems category",
  0
 ],
 [
  "int result = 1;\ttry {\theader ();\tresult = process (args);\tif (error == null) console.writeline (\"success\");\telse {\thelp ();\t}\t}\tcatch (exception e) {",
  "error",
  0
 ],
 [
  "xelement d = new xelement(\"a\");\tusing (xmlwriter w = d.createwriter()) {\ttry {\tw.writestartdocument();\t}\tcatch (invalidoperationexception) {\ttestlog.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "the unwrapped key is the same as the original key not",
  1
 ],
 [
  "throw adp.invalidsourcecolumn(nameof(sourcecolumn));\t}\tswitch (mappingaction) {\tcase missingmappingaction.passthrough: #if debug if (adapterswitches.dataschema.traceinfo) {\t}\t#endif return datacolumnmapping.getdatacolumnbyschemaaction(sourcecolumn, sourcecolumn, datatable, datatype, schemaaction);\tcase missingmappingaction.ignore: #if debug if (adapterswitches.dataschema.tracewarning) {\t}\t#endif return null;\tcase missingmappingaction.error: #if debug if (adapterswitches.dataschema.traceerror) {",
  "update values",
  1
 ],
 [
  "xmlreader datareader = getreader(pbinhexxml);\tpositiononelement(datareader, st_elem_name1);\tdatareader.read();\tif (!datareader.canreadbinarycontent) return true;\ttry {\tdatareader.readcontentasbinhex(buffer, iindex, icount);\t}\tcatch (exception e) {\tbpassed = (e.gettype().tostring() == exceptiontype.tostring());\tif (!bpassed) {",
  "actual exception",
  0
 ],
 [
  "indent++;\tif (e.hasget) {\tif (!iscurrentinterface) {\tindent++;\tgeneratevbstatements(e.getstatements);\te.name = propname;\tindent--;\t}\t}\tif (e.hasset) {",
  "test failed at call result",
  1
 ],
 [
  "break;\tcase \"embeddedresource\": string fname = finfo.name;\tif (string.compare (path.getextension (fname), \".resx\", true) == 0) fname = path.changeextension (fname, \".resources\");\twriter.writeline(\"\\\"-resource:{0},{1}\\\"\", fname, finfo.resourceid);\tbreak;\tdefault: continue;\t}\t}\t}\tforeach (import import in items.getall<import> ()) {",
  "was",
  1
 ],
 [
  "static object selectaggregate (idbconnection cnc, string agg) {\tidbcommand selectcommand = cnc.createcommand();\tobject data;",
  "aggregate",
  0
 ],
 [
  "public void writeattributes_14(xmlwriterutils utils) {\tstring strxml = \"<root attr='test' />\";\txmlreader xr = createreader(new stringreader(strxml));\txr.read();\txr.movetofirstattribute();\tif (xr.nodetype != xmlnodetype.attribute) {",
  "reader positioned on",
  0
 ],
 [
  "object processnode(xmlnode node, object parent) {\tobject ret=null;\tif (node is xmlelement) {\tstring ns=node.prefix;\tstring cname=node.localname;\ttype t=gettypebyname(ns, cname);\ttry {\tret=activator.createinstance(t);\t}\tcatch(exception) {",
  "validation failed",
  1
 ],
 [
  "public async void twoawaitswithdifferentawaitertypes() {",
  "before",
  0
 ],
 [
  "static void main(string[] args) {\tappdomain hostdomain = appdomain.createdomain(\"orleanshost\", null, new appdomainsetup {\tappdomaininitializer = initsilo, appdomaininitializerarguments = args, });",
  "orleans silo is running press enter to terminate",
  0
 ],
 [
  "private void workwithnolocalstate(long i, parallelloopstate state) {",
  "workwithnolocalstate long on index startindex real index",
  0
 ],
 [
  "public void initialize(icorprofilerinfo picorprofilerinfounk) {",
  "open connection using external authentication",
  1
 ],
 [
  "public void bug1771070_1771072_jobandpoollifetimestats() {\taction test = () => {\tusing (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {\tjobstatistics jobstatistics = batchcli.joboperations.getalllifetimestatistics();\tpoolstatistics poolstatistics = batchcli.pooloperations.getalllifetimestatistics();\tassert.notnull(jobstatistics);\tassert.notnull(poolstatistics);",
  "infomessage message",
  1
 ],
 [
  "static x509certificate clientcertificateselection (x509certificatecollection clientcertificates, x509certificate servercertificate, string targethost, x509certificatecollection serverrequestedcertificates) {",
  "exception thrown and caught",
  1
 ],
 [
  "private void writeservicepoint (string label, servicepoint sp) {\tconsole.writeline (\"\\n\" + label);",
  "protocolversion",
  0
 ],
 [
  "private xplatuix11_new() {\trefcount = 0;\tmessagequeues = hashtable.synchronized (new hashtable(7));\tif (xlib.xinitthreads() == 0) {",
  "failed xinitthreads the event loop will not function properly",
  0
 ],
 [
  "public static int getoperandtype (instruction self, methoddefinition method) {\tint i = 0;\tswitch (self.opcode.code) {\tcase code.ldarg_0: case code.ldarg_1: case code.ldarg_2: case code.ldarg_3: case code.ldarg: case code.ldarg_s: case code.ldarga: case code.ldarga_s: case code.starg: case code.starg_s: i = 1;\tbreak;\tcase code.conv_r4: case code.ldc_r4: case code.ldelem_r4: case code.ldind_r4: case code.stelem_r4: case code.stind_r4: i = 2;\tbreak;\tcase code.conv_r8: case code.ldc_r8: case code.ldelem_r8: case code.ldind_r8: case code.stelem_r8: i = 3;",
  "console writeline appdomain getcurrentthreadid console writeline appdomain getcurrentthreadid",
  1
 ],
 [
  "var context = new authenticationcontext(authority, tokencache);\tvar result = await context.acquiretokenasync(resource, clientcredential).configureawait(false);\treturn result.accesstoken;\t}\tpublic async task<string> getuseraccesstoken(string authority, string resource, string scope) {\tstring clientid = testconfigurationmanager.trygetenvironmentorappsetting(\"nativeclientid\");\tvar context = new authenticationcontext(authority, tokencache);\tif (_devicecodeforstoragetests == null) {\t_devicecodeforstoragetests = await context.acquiredevicecodeasync(resource, clientid).configureawait(false);\tdebug.writeline(\"############################################################################################\");",
  "formatted formatted",
  1
 ],
 [
  "for (int j = 0; j < useless.length; j++) {\tif (useless[j] == 'u') console.writeline (\"i have detected an u char\");\t}\ttry {\tforeach (string environmentvariable in environment.getenvironmentvariables ().keys) console.writeline (environmentvariable);\t}\tcatch (system.security.securityexception exception) {\tconsole.writeline (exception.message);\tconsole.writeline (exception);\t}",
  "can t clear recent projects list",
  1
 ],
 [
  "if (t is targetinvocationexception) {\tt = t.innerexception;\t}\tstring message = t.message;\tif (message == null) {\tmessage = t.gettype().name;\t}\tthrow new targetinvocationexception(sr.getstring(sr.errorpropertyaccessorexception, name, name, message), t);\t}\t}",
  "returning null",
  0
 ],
 [
  "private static int main() {\ttry {\tif (testtrycatch(15) || !testtrycatch(18)) {\treturn 1;\t}\tif (testtryfinally(19) || !testtryfinally(12)) {\treturn 2;\t}\t}\tcatch (exception) {",
  "failed w exception",
  0
 ],
 [
  "static void help () {",
  "blah foo bar returned",
  1
 ],
 [
  "public bool comparestring(string strexpected) {\tstring stractual = this.getstring();\tif (strexpected != stractual) {\tint explen = (strexpected == null ? 0 : strexpected.length);\tint actlen = (stractual == null ? 0 : stractual.length);\tint minlen = (explen < actlen ? explen : actlen);\tint i;\tfor (i = 0; i < minlen; i++) {\tif (strexpected[i] != stractual[i]) {",
  "actual char",
  0
 ],
 [
  "public unittestresult [] getresults (datetime startdate, datetime enddate) {\ttry {\tif (store != null) return store.getresults (test.activeconfiguration, test, startdate, enddate);\t} catch (exception ex) {",
  "test store query failed test history data may be corrupt",
  0
 ],
 [
  "public void stopbits_1_afteropen() {",
  "empty",
  1
 ],
 [
  "public static void main(string [] args) {\tforeach (string arg in args) if (arg == \"--decent-reader\") usedecentreader = true;\ttry {\texc14n = (cryptoconfig.createfromname (\"http: hmacmd5 = (cryptoconfig.createfromname (\"hmacmd5\") != null);\tmerlin ();\tconsole.writeline ();",
  "phaos",
  0
 ],
 [
  "public void pi_8(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writeprocessinginstruction(\"pi\", \"text\");\tw.writestartdocument(true);\t}\tcatch (invalidoperationexception e) {",
  "time show the time required for each page load",
  1
 ],
 [
  "usage ();\treturn 0;\t}\tstring compiler;\tif (!getoption (\"compiler\", args, true, out compiler)) {\tusage ();\treturn 1;\t}\titester tester;\ttry {",
  "loading",
  0
 ],
 [
  "public static bool log(object actual, object expected, string source, string message, string details, tagerrorlevel eerrorlevel) {\ttagerrorlevel rsavedlevel = errorlevel;\terrorlevel = eerrorlevel;\ttry {\tif (testconsole != null) {\ttestconsole.log(common.format(actual), common.format(expected), source, message, details, tagconsoleflags.console_text, \"fake_filename\", 999 );\t}\telse if (error != null) {",
  "got",
  1
 ],
 [
  "public void parity_mark_beforeopen() {",
  "verifying mark parity before open",
  0
 ],
 [
  "if (!eval(!directory.exists(mounteddirname), \"err_625ckx! directory {0} still exist: {1}\", mounteddirname, directory.exists(mounteddirname))) {\tmounthelper.unmount(mounteddirname);\tdeletedir(mounteddirname, true);\t}\t}\tfile.appendalltext(debugfilename, string.format(\"completed scenario {0}\", environment.newline));\t}\t}\tcatch (exception ex) {\ts_pass = false;",
  "skipping negotiatestream streamtostream kerberosauthdefaultcredentials success",
  1
 ],
 [
  "static void main(string[] args) {\tif (args.length == 1) {\tstring arg = args[0];\tint n = int.parse(arg);\tpoint[] pts = new point[n];\tfor (int i = 0; i < n; i++) pts[i] = point.random(500, 500);\tpoint[] chpts = convexhull.convexhull(pts);",
  "area is",
  0
 ],
 [
  "var indent = createengine(@\" namespace foobar {\tclass foo {\tvoid bar () {\tsystem.console.writeline ();\t}\t$ }\t}\t\", out sourcetext);\titextpastehandler handler = createtextpasteindentengine(indent, formattingoptionsfactory.createmono());\tvar text = handler.formatplaintext(sourcetext, indent.offset, \"void bar ()\\n{\\nsystem.console.writeline ();\\n}\", null);",
  "void bar system console writeline",
  0
 ],
 [
  "public static void runbuggyschedulertests() {\tbuggytaskscheduler bts = new buggytaskscheduler();\ttask t1 = new task(delegate { });\ttask t2 = new task(delegate { });",
  "testing task start buggy scheduler",
  0
 ],
 [
  "string cs = \"server=127.0.0.1;port=5432;protocol={0};user id=npgsql_tests;password=npgsql_tests;database=npgsql_tests;ssl={1}\";\tcs = string.format (cs, protocol, ssl);\tif ((verbose > 0) && !showcs) {\tshowcs = true;\t}\tnpgsqlconnection m_conn = new npgsqlconnection (cs);\tm_conn.open ();\tif (m_conn.state != connectionstate.open) return false;\tstring query = \"select * from wordlist\";\tnpgsqlcommand cmd = new npgsqlcommand (query, m_conn);",
  "npgsqldatareader executereader",
  0
 ],
 [
  "catch (argumentnullexception) {\tif (utils.writertype == writertype.customwriter) {\tcerror.compare(w.writestate, writestate.element, \"writestate should be element\");\t}\telse {\tutils.checkerrorstate(w.writestate);\t}\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "public void methodbegin(methodbase methinfo, isourcelineinfo sourceinfo, bool initwriters) {\tthis.methinfo = methinfo;\tthis.ilgen = xmlilmodule.definemethodbody(methinfo);\tthis.lastsourceinfo = null;\t#if debug if (xmliltrace.isenabled) {\tthis.numlocals = 0;\tthis.symbols = new hashtable();\tthis.lblnum = 0;\tthis.sourcefile = null;\tthis.writerdump = xmliltrace.gettracewriter(\"dump.il\");",
  "failed to fixup stronglytypedresourcebuilder resource id",
  1
 ],
 [
  "protected static void extensioncachetoldapconverter(principal p, string propertyname, directoryentry de, string suggestedadproperty) {\textensioncache cachevalues = (extensioncache)p.getvalueforproperty(propertyname);\tforeach (keyvaluepair<string, extensioncachevalue> kvp in cachevalues.properties) {\tif (!kvp.value.filter && null != kvp.value.value && kvp.value.value.length != 0) {\tif ((kvp.value.value.length == 1 && kvp.value.value[0] is icollection) || (kvp.value.value.length > 1)) {\tif (kvp.value.value.length > 1 && (kvp.value.value[0] is icollection)) throw new argumentexception(sr.invalidextensioncollectiontype);",
  "id",
  1
 ],
 [
  "protected virtual void onfilechooserbutton2focused (object o, gtk.focusedargs args) {",
  "is not provided using default value",
  1
 ],
 [
  "mounthelper.unmount(mounteddirname);\tdeletedir(mounteddirname, true);\t}\t}\telse {\t}\t}\tcatch (exception ex) {\ts_pass = false;\t}",
  "scenario current drive is mounted on current drive",
  0
 ],
 [
  "public void dumpreader (xmlreader xr, bool attvalue) {\tif (xr.nodetype == xmlnodetype.attribute) {\twhile (xr.readattributevalue ()) dumpreader (xr, true);",
  "attribute values end",
  0
 ],
 [
  "public override bool execute() {\tif (timeoutmiliseconds == 0) timeoutmiliseconds = default_task_timeout;\tthreadtask.task waitingtask = threadtask.task.run(() => {",
  "set and retrieved value appear to be different for urn my object",
  1
 ],
 [
  "}\ttry {\tvar b = new correctcasefriendassembly.internalclass(@public: 'a');\tb.internalmethod();\t} catch (memberaccessexception) {\tfailcount += 1;\t}\ttry {\tvar a = new wrongcasefriendassembly.internalclass(@private: false);\t} catch (memberaccessexception) {",
  "access internal class private ctor fail",
  0
 ],
 [
  "public void suitestarted(testname testname) {\tif ( level++ == 0 ) {\tmessages = new stringcollection();\ttestruncount = 0;\ttestignorecount = 0;\tfailurecount = 0;",
  "modulus or exponent not equal",
  1
 ],
 [
  "static private void help () {",
  "i url url for the signed file",
  0
 ],
 [
  "assert.equal(typeof(taskcanceledexception), ae.innerexception.gettype());\tassert.equal(taskstatus.canceled, asyncfuture.status);\ttask foo = task.factory.startnew(delegate {\ttask foo1 = task.factory.fromasync(fac.startwrite, fac.endwrite, (string)null, null, taskcreationoptions.attachedtoparent);\ttask foo2 = task.factory.fromasync(fac.startwrite, fac.endwrite, (string)null, 4, null, taskcreationoptions.attachedtoparent);\ttask foo3 = task.factory.fromasync(fac.startwrite, fac.endwrite, (string)null, 4, 4, null, taskcreationoptions.attachedtoparent);\ttask<string> foo4 = task<string>.factory.fromasync(fac.startread, fac.endread, -1, null, taskcreationoptions.attachedtoparent);\ttask<string> foo5 = task<string>.factory.fromasync(fac.startread, fac.endread, -1, (char[])null, null, taskcreationoptions.attachedtoparent);\ttask<string> foo6 = task<string>.factory.fromasync(fac.startread, fac.endread, -1, (char[])null, 200, null, taskcreationoptions.attachedtoparent);\t});",
  "runapmfactorytests waiting on task w faulted fromasync calls if we hang there is a problem",
  0
 ],
 [
  "for (int field = 0; field < fieldcount; field++) {\twriter.write(\"<td>\");\twriter.beginstylecontext();\twriter.enterstyle(labelstyle);\twriter.writetext(control.allfields[fieldindices[field]].title, true);\twriter.exitstyle(labelstyle);\twriter.endstylecontext();\twriter.write(\"</td>\");\t}\tif (itemrequiresmorebutton) {",
  "failed bool guid guid",
  1
 ],
 [
  "public static void usage (string message) {\tif (message != null) {\tconsole.writeline (\"{0}{1}{0}\", environment.newline, message);\t}",
  "total rows",
  1
 ],
 [
  "private static bool test13() {\tmyenum a = myenum.second;\tdynamic b = a;\tb++;\tif (b == myenum.third) return true;",
  "failed enum",
  0
 ],
 [
  "protected virtual void updatemethodwithcodedependency (location methodregion) {\tif (methodregion == null) return;\tvar sourcetree = methodregion.sourcetree;\tif (sourcetree == null) return;\tvar proj = this.service.project.getcodeanalysisproject ();\tif (proj == null) {",
  "could not get codeanalysisproject for the given project cannot modify code",
  0
 ],
 [
  "task t1 = task.run(() => {\ttinner = new task(() => { }, taskcreationoptions.attachedtoparent);\t});\tt1.wait();\ttinner.start();\ttinner.wait();\ttask<int> f1 = task.run(() => {\ttinner = new task(() => { }, taskcreationoptions.attachedtoparent);\treturn 42;\t});",
  "runruntests attachtoparentignored waiting on outer task int if we hang that s a failure",
  0
 ],
 [
  "assert.true(false);\t}\tcatch (xsltexception e1) {\t_output.writeline(e1.message);\treturn;\t}\tcatch (argumentnullexception e2) {\t_output.writeline(e2.message);\tif (xslinputtype == xslinputtype.uri) return;\telse {",
  "argumentnullexception is not supposed to be thrown for the input type",
  0
 ],
 [
  "public void testjsonsamples<tsample, tresource>(itestoutputhelper logger) {\tint failurecount = 0;\tint samplecount = 0;\tienumerable<jsonsampleinfo> samples = jsonsamplecommon.getjsonsamplesfromtype<tsample>();\tforeach (jsonsampleinfo sampleinfo in samples) {\tstring samplename = sampleinfo.name;\tstring serializedjson = string.empty;\tsamplecount++;\ttry {\ttestjsonsample<tresource>(sampleinfo);",
  "bad command line arguments supplied",
  1
 ],
 [
  "public static void main () {",
  "the compiler should complain error trying to use this outside context",
  0
 ],
 [
  "public void basictest_getipv4interfacestatistics_success() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipv4interfacestatistics stats = nic.getipv4statistics();",
  "starting test thread with priority to abovenormal",
  1
 ],
 [
  "public static int testinjectedenummethods() {",
  "testing context injected methods on enums",
  0
 ],
 [
  "public static void indent_roundtripsandaffectsoutput(int indent) {\tconst string tabstring = \"\\t\\t\";\tvar sb = new stringbuilder();\tvar sw = new stringwriter(sb);\tvar itw = new indentedtextwriter(sw, tabstring);\titw.indent = indent;\tassert.equal(indent >= 0 ? indent : 0, itw.indent);",
  "displayval",
  1
 ],
 [
  "} else {\treturn process (args);\t}\t}\tcatch (indexoutofrangeexception) {\thelp (null);\t}\tcatch (cryptographicexception ce) {\t}\tcatch (exception e) {",
  "nas",
  1
 ],
 [
  "tw.writeline(\"<entity4 att1='xxx&lt;xxx&#65;xxx&#x43;xxxe1fooxxx'>xxx&gt;xxx&#66;xxx&#x44;xxxe1fooxxx</entity4>\");\ttw.writeline(\"<entity5>e1foo e3bzee </entity5>\");\ttw.writeline(\"<attribute1 />\");\ttw.writeline(\"<attribute2 a1='a1value' />\");\ttw.writeline(\"<attribute3 a1='a1value' a2='a2value' a3='a3value' />\");\ttw.writeline(\"<attribute4 a1='' />\");\ttw.writeline(string.format(\"<attribute5 crlf='x{0}x' cr='x{0}x' lf='x\\nx' ms='x     x' tab='x\\tx' />\", environment.newline));\ttw.writeline(\"<skip1 /><afterskip1 />\");\ttw.writeline(\"<skip2></skip2><afterskip2 />\");\ttw.writeline(\"<chars1>0123456789</chars1>\");",
  "chars xxx cdata yyy zzz chars",
  0
 ],
 [
  "private static bool sbytetypewithidentityconversioninassignment() {\tint failcount = 0;\tdynamic d = (sbyte)-128;\tsbyte result = d;\tif (result != -128) {\tfailcount++;",
  "test failed at conversion result",
  0
 ],
 [
  "private async system.threading.tasks.task addtaskssimpletestasync( batchclient batchcli, string testname, int taskcount, batchclientparalleloptions paralleloptions = null, func<addtaskresult, cancellationtoken, addtaskresultstatus> resulthandlerfunc = null, stagingstorageaccount storagecredentials = null, ienumerable<string> localfilestostage = null, concurrentbag<concurrentdictionary<type, ifilestagingartifact>> filestagingartifacts = null, timespan? timeout = null, bool usejoboperations = true) {\tjoboperations joboperations = batchcli.joboperations;\tstring jobid = \"bulk-\" + testutilities.getmyname() + \"-\" + testname + \"-\" + usejoboperations;\ttry {\tcloudjob unboundjob = joboperations.createjob();",
  "initial job commit for job",
  0
 ],
 [
  "static void displaycertificate (x509certificate x509, bool machine, bool verbose) {\tif (verbose) {\tconsole.writeline (\"  algorithm parameters: {0}\", (x509.keyalgorithmparameters == null) ? \"none\" : cryptoconvert.tohex (x509.keyalgorithmparameters));",
  "oracleexception caught",
  1
 ],
 [
  "x509_ptr = x509.handle.stealhandle ();\treturn 1;\t} else {\tx509_ptr = intptr.zero;\treturn 0;\t}\t} finally {\tif (name_handle != null) name_handle.dispose ();\t}\t} catch (exception ex) {",
  "mono nunitreport exe input directory output file",
  1
 ],
 [
  "private static bool certificatevalidation (x509certificate certificate, int[] certificateerrors) {\tif (certificateerrors.length > 0) {\tconsole.writeline (certificate.tostring (true));",
  "valid from",
  0
 ],
 [
  "public void tracing () {\ttrace.indentlevel = 0;\ttrace.indentsize = 4;\tstring value = \"entering main\" + environment.newline + \"exiting main\" + environment.newline;",
  "hello world",
  1
 ],
 [
  "}\t}\telse if (argpos == 1) {\tthis.graphdatafile = new fileinfo(a);\targpos++;\tif (!graphdatafile.exists) {\tok = false;\t}\t}\telse {",
  "nativename",
  1
 ],
 [
  "northwind db=createdb();\tvar product = db.products.first(p=>p.productid = 1);\tconsole.writeline(\"~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\");\tconsole.writeline();\tvar otheruser_db = northwind(my.settings.northwindconnectionstring1) with {.log = db.log};\tvar otheruser_product = otheruser_db.products.first(p=>p.productid = 1);\totheruser_product.unitprice = 999.99d;\totheruser_product.unitsonorder = 10;\totheruser_db.submitchanges();\tconsole.writeline(\"~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\");",
  "press enter to terminate",
  1
 ],
 [
  "public static void bar (this foo self) {",
  "source",
  1
 ],
 [
  "public void m() {\t#line 40 console.writeline(4);\t#line hidden console.writeline();",
  "event counts pinchange rx error",
  1
 ],
 [
  "schedule schedule = new schedule();\tschedule.donotrununtil = datetime.now.addyears(1);\tunboundjobschedule.schedule = schedule;\tunboundjobschedule.commit();\ttry {\tcloudjobschedule boundjobschedule = batchcli.jobscheduleoperations.getjobschedule(jobscheduleid);\tassert.equal(originaldisplayname, boundjobschedule.displayname);\tassert.equal(originaldisplayname, boundjobschedule.jobspecification.displayname);\tassert.equal(originaldisplayname, boundjobschedule.jobspecification.jobmanagertask.displayname);\tassert.equal(originaldisplayname, boundjobschedule.jobspecification.poolinformation.autopoolspecification.poolspecification.displayname);",
  "attempting to set display names on job schedule job specification pool specification and job manager task",
  0
 ],
 [
  "public static int main () {\tdynamic d = new myobject ();\tvar g = d.getme;\tif (myobject.get != 1 && myobject.invoke != 0) return 1;\td.printf (\"hello, world!\");\tif (myobject.get != 1 && myobject.invoke != 1) return 2;",
  "did not find web server",
  1
 ],
 [
  "}\tu.start();\t});\trandom rand = new random();\tint count = 0;\tstopwatch stopwatch = stopwatch.startnew();\tdo {\tint i = rand.next(activeusers.count);\tsimulateduser u = activeusers[i];\tif (u == null) {",
  "user not found",
  0
 ],
 [
  "public void basictest_getipv4interfacestatistics_success() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipv4interfacestatistics stats = nic.getipv4statistics();",
  "nonunicastpacketssent",
  0
 ],
 [
  "if (startsentinel != null && startsentinel.next != endsentinel) {\tconsole.writeline(\"size == 0 but startsentinel.next != endsentinel\");\tretval = false;\t}\tif (endsentinel != null && endsentinel.prev != startsentinel) {\tconsole.writeline(\"size == 0 but endsentinel.prev != startsentinel\");\tretval = false;\t}\t}\tif (startsentinel == null) {",
  "null startsentinel",
  0
 ],
 [
  "public static int main () {\tobject o = 3;\tbool r = o is system.string t1;\tif (r) return 2;\tif (o is string t2) return 3;\tlong? l = 5;\tbool r3 = l is long t4;\tif (!r3) return 8;",
  "ok",
  0
 ],
 [
  "public static void creategenerictestfile(string strfilename) {\tmemorystream ms = new memorystream();\ttextwriter tw = new streamwriter(ms);\ttw.writeline(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"no\\\"?>\");\ttw.writeline(\"<!-- comment1 -->\");\ttw.writeline(\"<?pi1a?>\");\ttw.writeline(\"<?pi1b?>\");\ttw.writeline(\"<?pi1c?>\");",
  "notation gif system",
  0
 ],
 [
  "private static keybundle importkey(out string keyname) {\tvar vaultaddress = inputvalidator.getvaultaddress();\tkeyname = inputvalidator.getkeyname();\tvar ishsm = inputvalidator.getkeytype() == jsonwebkeytype.rsahsm;\tvar keybundle = inputvalidator.getimportkeybundle();\tvar name = keyname;\tvar importedkey = task.run(() => keyvaultclient.importkeyasync(vaultaddress, name, keybundle, ishsm)).configureawait(false).getawaiter().getresult();",
  "imported key",
  0
 ],
 [
  "public void static main (string[] args) {",
  "hello",
  0
 ],
 [
  "public static async task testecho( uri server, websocketmessagetype type, int timeoutmilliseconds, itestoutputhelper output) {\tvar cts = new cancellationtokensource(timeoutmilliseconds);\tstring message = \"hello websockets!\";\tstring closemessage = \"good bye!\";\tvar receivebuffer = new byte[100];\tvar receivesegment = new arraysegment<byte>(receivebuffer);\tusing (clientwebsocket cws = await getconnectedwebsocket(server, timeoutmilliseconds, output)) {",
  "testecho sendasync starting",
  0
 ],
 [
  "public async task negotiatestream_echoserver_ntlm_clientwriteread_successive_async_success() {\tif (!_isntlmavailable) {",
  "skipping negotiatestream echoserver ntlm clientwriteread successive async success",
  0
 ],
 [
  "ri.repeatdirection = repeatdirection;\tri.repeatlayout = repeatlayout;\tri.captionalign = captionalign;\tri.caption = caption;\tri.useaccessibleheader = useaccessibleheader;\tconsole.writeline (\"irepeatinfouser.hasfooter {0}\", (showfooter && (footertemplate != null)));\tconsole.writeline (\"irepeatinfouser.hasheader {0}\", (showheader && (headertemplate != null)));\tconsole.writeline (\"irepeatinfouser.hasseparators {0}\", (separatortemplate != null));\tfor (int i=0; i < items.count; i++) {\tdatalistitem dli = items [i];",
  "index type",
  0
 ],
 [
  "public void openclose_discardmethods() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {",
  "verifying calling discard methods after calling open and basestream close",
  0
 ],
 [
  "static void main(string[] args) {\tappdomain hostdomain = appdomain.createdomain(\"orleanshost\", null, new appdomainsetup {\tappdomaininitializer = initsilo, appdomaininitializerarguments = args, });",
  "actual nodetype",
  1
 ],
 [
  "thread.sleep(1000);\tif (after != threadpriority.abovenormal) res = 4;\telse {\tbefore = after;\ttestthread.priority=threadpriority.belownormal;\tafter = testthread.priority;\tthread.sleep(1000);\tif (after != threadpriority.belownormal) res = 5;\telse {\tbefore = after;",
  "error set and retrieved value appear to be different",
  1
 ],
 [
  "static int main () {\tstring step = \"abcde12345abcde12345abcde12345abcde12345\";\tstring expected = directory.getcurrentdirectory();\tstring current = \"\";\tdirectory.delete (step, true);*/ try {\tfor (int i = 0; i < 4000; ++i) {\tcurrent = directory.getcurrentdirectory ();\tif (!current.equals (expected)) {",
  "expected dir but got",
  0
 ],
 [
  "static bool savesettings () {",
  "todo where to save those settings",
  0
 ],
 [
  "static void showinfo() {\tconsole.writeline(\"               <key>=<value>\\n\");\tconsole.writeline(\"                     <value> = \\\"<stringvalue>\\\"\");\tconsole.writeline(\"                     <value> = <filename>\\n\");",
  "the file will be interpreted as an byte array",
  0
 ],
 [
  "try {\tunchecked {\tbyte b = (byte)d;\t}\t}\tcatch (system.overflowexception) {\texception = false;\t}\tfinally {\tif (exception) rez++;",
  "test failed",
  0
 ],
 [
  "public void dispose () {",
  "unicastpacketssent",
  1
 ],
 [
  "foreach(xmlschemaattribute attribute in derivedtype.attributeuses.values) {\txmlschemaattribute attributebase = (xmlschemaattribute)basetype.attributeuses[attribute.qualifiedname];\tif (attributebase != null) {\tcontinue;\t}\tif (baseattributewildcard == null || !baseattributewildcard.allows(attribute.qualifiedname)) {\t#if debug string position = string.empty;\tif (derivedtype.sourceuri != null) {\tposition = \" in \" + derivedtype.sourceuri + \"(\" + derivedtype.linenumber + \", \" + derivedtype.lineposition + \")\";\t}",
  "test failed at call result",
  1
 ],
 [
  "public void cdholding_default_afterclose() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (serialport com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "verifying default cdholding after close",
  0
 ],
 [
  "public int goo (bool hoo) {\tbool local_hoo = hoo;\texpression<func<bool>> a = () => hoo;\tif (a.compile ()()) return 1;\tif (true) {\texpression<func<bool>> b = () => local_hoo;\tif (b.compile ()()) return 2;\t}\texpression<func<int>> c = () => thismethod ();\tif (c.compile ()() != 33) return 3;",
  "consolelogger",
  1
 ],
 [
  "const string uia_winforms_method   = \"initialize\";\ttry {\ttype global_type = mwf_providers.gettype (uia_winforms_type, false);\tif (global_type != null) {\tinit_method = global_type.getmethod (uia_winforms_method, bindingflags.static | bindingflags.public);\tif (init_method != null) init_method.invoke (null, new object [] {});\telse throw new exception (string.format (\"method {0} not found in type {1}.\", uia_winforms_method, uia_winforms_type));\t}\telse throw new exception (string.format (\"type {0} not found in assembly {1}.\", uia_winforms_type, uia_winforms_assembly));\t} catch (exception ex) {",
  "error benchmark execution failed",
  1
 ],
 [
  "static void showinfo() {\tconsole.writeline(\"               <key>=<value>\\n\");\tconsole.writeline(\"                     <value> = \\\"<stringvalue>\\\"\");\tconsole.writeline(\"                     <value> = <filename>\\n\");",
  "message",
  1
 ],
 [
  "int readed\t= 0;\tint length\t= this.readint24();\twhile (readed < length) {\tint certlength = readint24();\treaded += 3;\tif (certlength > 0) {\tbyte[] buffer = this.readbytes(certlength);\tx509certificate certificate = new x509certificate(buffer);\tcertificates.add(certificate);\treaded += certlength;",
  "ok",
  1
 ],
 [
  "assert.areequal (\"text\", props[1].name, \"5\");\tconsole.writeline (props[1].gettype());\tconsole.writeline (\"text value = {0}\", props[1].getvalue (col));\tconsole.writeline (\"text converter = {0}\", props[1].converter);\tconsole.writeline (\"text localizable = {0}\", props[1].islocalizable);\tconsole.writeline (\"text readonly = {0}\", props[1].isreadonly);\tconsole.writeline (\"text type = {0}\", props[1].propertytype);\tconsole.writeline (\"text category = {0}\", props[1].category);\tconsole.writeline (\"text description = {0}\", props[1].description);\tconsole.writeline (\"text displaynem = {0}\", props[1].displayname);",
  "answer",
  1
 ],
 [
  "private simplerule findelementrule (simplemode mode, xmlreader reader) {\tsimplerule any = null;\tforeach (simplerule rule in mode.elementrules) {\tif (rule.matchns (reader.namespaceuri)) {\tif (!rule.isany) return rule;\telse any = rule;\t}\t}",
  "anynamespace rule being applied",
  0
 ],
 [
  "marshal.addref(dispptr);\tretval = gettypelib(dispptr);\t}\tfinally {\tif (dispptr != intptr.zero) marshal.release(dispptr);\t}\treturn retval;\t}\tprotected int gettypelib(intptr dispptr) {\tif (traceutil.if(this, tracelevel.info)) {",
  "too many command line arguments supplied",
  1
 ],
 [
  "public void generateoutput() {",
  "comclassinfo type",
  1
 ],
 [
  "public override int invoke (ienumerable<string> arguments) {\tvar extra   = new list<string> (arguments ?? new string [0]);\tvar _       = commandset.options.messagelocalizer;\tif (extra.count == 0) {\tcommandset.options.writeoptiondescriptions (commandset.out);\treturn 0;\t}\tvar command = commandset.contains (extra [0]) ? commandset [extra [0]]\t: null;\tif (command == this || extra [0] == \"--help\") {",
  "started recording",
  1
 ],
 [
  "try {\ttry {\t} finally {\thandle.set ();\tsleeploop ();\tfinally_done = true;\t}\tresult |= 0x10;\t} catch (exception e) {\tif (!(e is threadabortexception)) result |= 0x4;",
  "onalert",
  1
 ],
 [
  "static private void help () {",
  "throw createunknownnodeexception",
  1
 ],
 [
  "public static int main () {\tm2 m2 = new m2();\ttry {\tvar dll = assembly.loadfile(@\"test-multi-netmodule-3-dll2.dll\");\tvar m3type = dll.gettype(\"m3\");\tvar m3 = activator.createinstance(m3type);\tvar m3m1field = m3type.getfield(\"m1\");",
  "creating job",
  1
 ],
 [
  "writeline (\"\");\twritelineind (\"{\");\tforeach (generationresult res in generatedmaps) {\tif (res.mapping is xmltypemapping) {\twritelineuni (\"\");\t}\t}\twriteline (\"}\");\twritelineuni (\"}\");\twriteline (\"\");",
  "public override bool canserialize system type type",
  0
 ],
 [
  "static void main () {\tappdomain domain = appdomain.createdomain (\"new-domain\");\tdomain.docallback (run);\ttype sttype = typeof (something<string, string>);\tother<string, string> st = (other<string, string>) domain.createinstanceandunwrap (sttype.assembly.fullname, sttype.fullname);",
  "failed b yte",
  1
 ],
 [
  "private static bool callsecondinterfaceinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturndynamicinterface<int>();\tif ((!(bool)(s.instancemethod().instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public void testremovebracesfromelse() {\ttest<removebracescoderefactoringprovider>(@\"class testclass {\tvoid test() {\tif (true) {",
  "logged in",
  1
 ],
 [
  "}\tdouble3 s3;\ts3.f1 = 1;\ts3.f2 = 2;\ts3.f3 = 3;\ts3 = mono_return_double3(s3, 9);\tif (s3.f1 != 1+9) {\treturn 1;\t}\tif (s3.f2 != 2+9) {",
  "more tests",
  1
 ],
 [
  "public static void main () {",
  "dropping and recreating database with connectionstring",
  1
 ],
 [
  "public void pastemultilineatfirstcolumncorrection() {\tvar indent = createengine(\"class foo\\n{\\n$\\n}\");\titextpastehandler handler = new textpasteindentengine(indent, createinvariantoptions (), formattingoptionsfactory.createmono());\tvar text = handler.formatplaintext(indent.offset, \"void bar ()\\n{\\n\\tsystem.console.writeline ();\\n}\", null);",
  "void bar system console writeline",
  0
 ],
 [
  "output.write(\".hash algorithm 0x{0:x8}\", (int)asm.name.hashalgorithm);\tif (asm.name.hashalgorithm == assemblyhashalgorithm.sha1) output.write(\" output.writeline();\t}\tversion v = asm.name.version;\tif (v != null) {\t}\tcloseblock();\t}\tpublic void writeassemblyreferences(moduledefinition module) {\tforeach (var mref in module.modulereferences) {",
  "updated key",
  1
 ],
 [
  "public void sendchangecipherspec() {",
  "setting event",
  1
 ],
 [
  "public static int mm () {\tobject[] attrs = typeof (foo).getcustomattributes (typeof(mineattribute), true);\tmineattribute ma = (mineattribute) attrs [0];\tif (ma.types [0] != typeof (int)){\treturn 1;\t}\tif (ma.types [1] != typeof (string)){",
  "iendpointbehavior validate",
  1
 ],
 [
  "}\t}\tx509store store = null;\tstring storename = null;\tif (action != action.ssl) {\tif ((action == action.none) || (type == objecttype.none)) {\thelp ();\treturn;\t}\tif (type == objecttype.ctl) {",
  "generation complete",
  1
 ],
 [
  "public static async task removepackagedependencies (this dotnetproject project, ilist<ipackagedependency> dependencies) {\tif (project == null) throw new argumentnullexception (nameof (project));\tforeach (var dependency in dependencies) {",
  "removing package dependency from project",
  0
 ],
 [
  "static x509certificate clientcertificateselection (x509certificatecollection clientcertificates, x509certificate servercertificate, string targethost, x509certificatecollection serverrequestedcertificates) {\tint i = 1;\tforeach (x509certificate client in clientcertificates) console.writeline (\"#{0} - {1}\", i++, client.tostring (true));",
  "add in could not be loaded",
  1
 ],
 [
  "public static void addviewcontent(iviewcontent viewcontent){\tif (viewcontent == null) throw new argumentnullexception(\"viewcontent\");\tif (!initialised) initialise();\tif (standardsidetab == null) {",
  "creating reporting sidetab",
  0
 ],
 [
  "foreach (string name in sources){\ttry {\tassembly a = loadassemblyfile (name);\tif (a == null){\terror = true;\tcontinue;\t}\tassemblies.add (a.codebase);\t} catch (exception) {\tif (skip_scan) {",
  "file will not be scanned",
  0
 ],
 [
  "static ienumerable<itreenode<iclass>> findderivedclassestree(iclass baseclass, ienumerable<iprojectcontent> projectcontents, hashset<iclass> seenclasses) {\tbaseclass = baseclass.getcompoundclass();",
  "findderivedclasses tree for",
  0
 ],
 [
  "if (ismultiplesilospresent) {\tsecondaryactivation = await this.testcluster.client.gettesthooks(testcluster.secondarysilos[0]) .unregistergrainfortesting(grainreference);\t}\tassert.equal(0, primaryactivation + secondaryactivation);\tif (lazyderegistrationdelay > timespan.zero) {\ttimespan pause = lazyderegistrationdelay.multiply(2);\tawait task.delay(pause);\t}\tvar firstex = await assert.throwsasync<orleansmessagerejectionexception>(() => grain.getlabel());\tassert.contains(\"non-existent activation\", firstex.message);",
  "writer writeline",
  1
 ],
 [
  "stoppos = runregex.righttoleft ? runtextbeg : runtextend;\truntextpos = textstart;\tif (prevlen == 0) {\tif (runtextpos == stoppos) return match.empty;\truntextpos += bump;\t}\tstarttimeoutwatch();\tfor (; ;) {\t#if debug if (runregex.debug) {\tdebug.writeline(\"\");",
  "firstchar search starting at stopping at",
  0
 ],
 [
  "static void download (string url, x509store store) {",
  "error",
  1
 ],
 [
  "public static void main () {\tfoo_delegate d = new foo_delegate (function);\tasynccallback ac = new asynccallback (async_callback);\tiasyncresult ar1 = d.begininvoke (ac, \"foo\");",
  "waiting",
  0
 ],
 [
  "sw.writeline (@\"            <td><img src='media/pass.png' /></td>\");\t}\tif (failed_tests.count == 0) continue;\tsw.writeline (@\"        <tr id='el{0}' class='errorlist' style='display: none'>\", assembly);\tsw.writeline (@\"            <td colspan='4'>\");\tsw.writeline (@\"                <table cellpadding='2' cellspacing='0' width='100%'>\");\tint test_num = 0;\tforeach (failedtest ft in failed_tests.values) {\tsw.writeline (\"                    <tr onclick=\\\"toggle('as{0}ed{1}')\\\" onmouseover='highlight(this)' onmouseout='unhighlight(this)'>\", assembly, test_num);\tsw.writeline (@\"                        <td style='width: 17px'><img src='media/bullet.png' /></td>\");",
  "td td",
  0
 ],
 [
  "d = int.minvalue;\td2 = -1;\ttry {\tlong rez4 = unchecked(d / d2);\t}\tcatch (system.overflowexception) {\texception = true;\t}\tfinally {\tif (exception) rez++;",
  "test failed",
  0
 ],
 [
  "public void asciiencoding() {",
  "verifying read with bytes encoded with asciiencoding",
  0
 ],
 [
  "autopoolspecification = new autopoolspecification() {\tpoollifetimeoption = poollifetimeoption.job, poolspecification = new poolspecification() {\tcloudserviceconfiguration = new cloudserviceconfiguration(poolfixture.osfamily), virtualmachinesize = poolfixture.vmsize, targetdedicatedcomputenodes = 1 }\t}\t};\tcloudjob unboundjob = batchcli.joboperations.createjob(jobid, poolinfo);\tunboundjob.commit();\tcloudtask task = new cloudtask(\"bug1965363wat7osversionfeaturesquickjobwithautopooltask\", \"cmd /c echo bug1965363\");\tcloudjob boundjob = batchcli.joboperations.getjob(jobid);\tboundjob.addtask(task);",
  "getting pool name",
  0
 ],
 [
  "public static void createutf8encodedtestfile(string strfilename, encoding encode) {\tstream strm = new memorystream();\ttextwriter tw = new streamwriter(strm, encode);",
  "verifying read method throws exception without a call to open",
  1
 ],
 [
  "_currentresult = innerlist[_currentindex];\t_currentindex++;\treturn true;\t}\telse if (_cachefilled) {\treturn false;\t}\tif (!_endreached && _currentenumerator == null) {\t_currentenumerator = getnextchunk();\tif (_currentenumerator == null) {",
  "verifying default readtimeout with readbyte",
  1
 ],
 [
  "}\t}\telse if (a.contains(\"=\")) {\tstring[] split = a.split('=');\tif (string.isnullorempty(split[1])) {\treturn false;\t}\tswitch (split[0].tolowerinvariant()) {\tcase \"deploymentid\": deploymentid = split[1];\tbreak;",
  "bad command line arguments supplied",
  0
 ],
 [
  "public void transformstrstrresolver3(object param, xslinputtype xslinputtype, readertype readertype) {\tappcontext.setswitch(\"switch.system.xml.allowdefaultresolver\", true);\tstring szfullfilename = fullfilepath(\"fruits.xml\");\tstring baseline = path.combine(\"baseline\", (string)param);\tif (loadxsl(\"xmlresolver_document_function.xsl\", xslinputtype, readertype) == 1) {\txslt.transform(szfullfilename, \"out.xml\");\tverifyresult(baseline, _stroutfile);\treturn;\t}\telse {",
  "problem loading stylesheet with document function and default resolver",
  0
 ],
 [
  "public void failure6 (int j) {\tlock (locker) {\tlock (locker2) {\t}\tlock (locker2) {",
  "foo",
  0
 ],
 [
  "w.writesurrogatecharentity('\\udf41', '\\ud920');\t}\tcatch (invalidoperationexception) {\ttestlog.compare(w.writestate, writestate.error, \"error\");\ttry {\tw.writesurrogatecharentity('\\udf41', '\\ud920');\t}\tcatch (invalidoperationexception) { return; }\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "static bool bytearraycompare(byte[] ba1, byte[] ba2) {\tif (ba1 == null && ba2 == null) return true;\tif (ba1 == null) return false;\tif (ba2 == null) return false;\tif (ba1.length != ba2.length) return false;\tfor (int i = 0; i < ba1.length; i++) {",
  "i",
  0
 ],
 [
  "public void showmethodref (object sender, methodreferencedeventargs args) {",
  "error while formatting on save",
  1
 ],
 [
  "static void main(string[] args) {\tconst string basepath = @\"..\\..\\refactoringessentials\";\tusing (var missingmdwriter = new streamwriter(path.combine(basepath, \"missing.md\"), false, encoding.utf8)) {\tmissingmdwriter.writeline(\"=====================\");\tmissingmdwriter.writeline(\"\");\tvar coderefactorings = typeof(notportedyetattribute).assembly.gettypes() .where(t => !t.fullname.startswith(\"refactoringessentials.samples.\") && t.customattributes.any(a => a.attributetype.fullname == typeof(exportcoderefactoringproviderattribute).fullname)) .orderby(t => t.name);\tvar codeanalyzers = typeof(notportedyetattribute).assembly.gettypes() .where(t => !t.fullname.startswith(\"refactoringessentials.samples.\") && t.customattributes.any(a => a.attributetype.fullname == typeof(diagnosticanalyzerattribute).fullname)) .orderby(t => t.name);\tvar codefixes = typeof(notportedyetattribute).assembly.gettypes() .where(t => !t.fullname.startswith(\"refactoringessentials.samples.\") && t.customattributes.any(a => a.attributetype.fullname == typeof(exportcodefixproviderattribute).fullname) && codefixunrelatedtonranalyzer(t)) .orderby(t => t.name);\tmissingmdwriter.writeline(\"\");",
  "c",
  0
 ],
 [
  "oraclelob blob = reader.getoraclelob (1);\tbytes = new byte[6] { 0x31, 0x32, 0x33, 0x34, 0x35, 0x036 };\tblob.write (bytes, 0, bytes.length);\tblob.close ();\ttrans.commit ();\treadsimpletest(con, \"select * from mono_oracle_test\");\tstring varchar2_value = (string) readscalar (con,\"select max(varchar2_value) from mono_oracle_test\");\tdecimal number_whole_value = (decimal) readscalar (con,\"select max(number_whole_value) from mono_oracle_test\");\tdecimal number_scaled_value = (decimal) readscalar (con,\"select number_scaled_value from mono_oracle_test\");\tdatetime date_value = (datetime) readscalar (con,\"select date_value from mono_oracle_test\");",
  "locals init",
  1
 ],
 [
  "static private void help () {",
  "y provider type",
  0
 ],
 [
  "assert.areequal (test, uri.tostring (), \"tostring/\" + test);\t}\t}\t[test]\tpublic void unixlocalpath_wtf () {\tstring path = \"file: uri fileuri = new uri( path );\tassert.areequal (\"/tmp/foo/bar\", fileuri.absolutepath, path);\tstring path2 = \"file: fileuri = new uri (path2);\tassert.areequal (\"file: }\tpublic static void print (uri uri) {",
  "assert areequal maskedtextresulthint out",
  1
 ],
 [
  "if (_inputfilepaths.count == 0) throw new commandlineexception(\"no input files specified\");\t_verifier = new verifier(this);\t_verifier.setsystemmodulename(_systemmodule);\tforeach (var kvp in _inputfilepaths) {\tvar results = verifyassembly(new assemblyname(kvp.key), out ecmamodule module);\tint numerrors = 0;\tforeach (var result in results) {\tnumerrors++;\tprintresult(result, module, kvp.value);\t}",
  "all classes and methods in verified",
  0
 ],
 [
  "public static void createutf8encodedtestfile(string strfilename, encoding encode) {\tstream strm = new memorystream();\ttextwriter tw = new streamwriter(strm, encode);\ttw.write(\"\\u00a9\");",
  "orleansazuresilos onstart initializing config information",
  1
 ],
 [
  "public void getparam2() {\tm_xsltarg = new xsltargumentlist();\tretobj = m_xsltarg.getparam(null, szempty);\tif (retobj != null) {",
  "did not return null for null param name",
  0
 ],
 [
  "public static void threadmethod_a() {",
  "thread a started",
  0
 ],
 [
  "try {\tw.writestartelement(\"root\");\tw.writeendelement();\tw.writecdata(\"foo\");\t}\tcatch (invalidoperationexception) {\ttestlog.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "public static void main () {\tvar all = cultureinfo.getcultures (culturetypes.specificcultures | culturetypes.neutralcultures).orderby (l => l.lcid);\tconsole.outputencoding = encoding.utf8;\tvar writer = console.out;\tforeach (var c in all) {\tif (c.lcid == cultureinfo.invariantculture.lcid) continue;",
  "level",
  1
 ],
 [
  "public void resolvepeers () {\tbindingflags binding = bindingflags.declaredonly | bindingflags.instance | bindingflags.nonpublic | bindingflags.public;\tforeach (peer peer in peers) {\tif (peer.isopaque || peer.isvaluetype || peer.clrtype.basetype == null) continue;\tpeer.nearestbase = getpeer (peer.clrtype.basetype);\tif (peer.nearestbase == null) {",
  "starting cache testers",
  1
 ],
 [
  "var types = new list<type>();\tif (basetype == null) {\tbasetype = typeof(object);\t}\tloggingservice.debug(\"typediscoveryservice.gettypes for \" + basetype.fullname + \"excludeglobaltypes=\" + excludeglobaltypes.tostring());\tforeach (assembly asm in typeresolutionservice.designerassemblies.toarray()) {\tif (excludeglobaltypes) {\t}\taddderivedtypes(basetype, asm, types);\t}",
  "got but expected",
  1
 ],
 [
  "}\tforeach (categoryattribute attr in attrs) {\tif (exclude.containskey (attr.category)) skip = true;\t}\tif (skip) {\tnskipped ++;\tcontinue;\t}\t}\tfor (j = 5; j < name.length; ++j) if (!char.isdigit (name [j])) break;",
  "thread c sleeping for",
  1
 ],
 [
  "try {\tmonitor.begintask (gettextcatalog.getstring (\"rebasing\"), 5);\tif (!commonpremergerebase (options, monitor, out stashindex)) return;\tvar divergence = rootrepository.objectdatabase.calculatehistorydivergence (rootrepository.head.tip, rootrepository.branches [branch].tip);\tvar toapply = rootrepository.commits.queryby (new commitfilter {\tincludereachablefrom = rootrepository.head.tip, excludereachablefrom = divergence.commonancestor, sortby = commitsortstrategies.topological | commitsortstrategies.reverse }).toarray ();\trootrepository.reset (resetmode.hard, divergence.another);\tint count = toapply.length;\tint i = 1;\tforeach (var com in toapply) {",
  "running expected results",
  1
 ],
 [
  "public void validationcallback(object sender, validationeventargs args) {\tif (args.severity == xmlseveritytype.warning) {\t_warningcount++;\t_warninginnerexceptionset = (args.exception.innerexception != null);\t}\telse if (args.severity == xmlseveritytype.error) {",
  "extern const unsigned char assembly config",
  1
 ],
 [
  "public static void main () {\ta a = new a (8);\tb b = new b (9);\tb.setcount (10);",
  "b should return",
  0
 ],
 [
  "while (reader.read()) { }\tcerror.compare(bwarningcallback, false, \"warning count mismatch\");\tcerror.compare(berrorcallback, true, \"error count mismatch\");\tif (isimport == true) set.remove(((xmlschemaexternal)mainschema.includes[0]).schema);\txmlschema reparsedinclude = loadschema(include2, include1);\t((xmlschemaexternal)mainschema.includes[0]).schema = reparsedinclude;\tset.reprocess(mainschema);\tset.compile();\tbwarningcallback = false;\tberrorcallback = false;",
  "second validation",
  0
 ],
 [
  "}\tstopwatch stopwatch = new stopwatch();\tstopwatch.start();\tif (usejoboperations) {\tawait joboperations.addtaskasync( jobid, taskstoadd, paralleloptions: paralleloptions, filestagingartifacts: filestagingartifacts, timeout: timeout, additionalbehaviors: behaviors).configureawait(continueoncapturedcontext: false);\t}\telse {\tawait boundjob.addtaskasync( taskstoadd, paralleloptions: paralleloptions, filestagingartifacts: filestagingartifacts, timeout: timeout, additionalbehaviors: behaviors).configureawait(continueoncapturedcontext: false);\t}\tstopwatch.stop();",
  "found bagelementkind nongcstaticdatasize",
  1
 ],
 [
  "typedonor = null;\treturn (left & ~xslflags.typefilter) | xslflags.nodeset;\t}\tpublic virtual xslflags predicate(xslflags nodeset, xslflags predicate, bool isreversestep) {\ttypedonor = null;\treturn (nodeset & ~xslflags.typefilter) | xslflags.nodeset | (predicate & xslflags.sideeffects);\t}\tpublic virtual xslflags variable(string prefix, string name) {\ttypedonor = resolvevariable(prefix, name);\tif (typedonor == null) {",
  "unresolved variable error",
  0
 ],
 [
  "public xevent dequeue () {\tif (thread.currentthread != thread) {",
  "hwnd queue dequeue called from a different thread without locking",
  0
 ],
 [
  "private static void listcertificates() {\tvar vaultaddress = inputvalidator.getvaultaddress();\tvar numsecretsinvault = 0;\tvar maxresults = 1;",
  "list certificate",
  0
 ],
 [
  "foreach (object value in list) {\tconsole.write (value);\tconsole.write (environment.newline);\t}\tint x = 0;\tfor (int i = 0; i < 100; i++) x++;\tconsole.writeline (x);\tstring useless = \"useless string\";\tif (useless.equals (\"other useless\")) {\tuseless = string.empty;",
  "other useless string",
  0
 ],
 [
  "static string getpluralstringinternal (string singular, string plural, int number) {\tif (platform.iswindows && thread.currentthread.currentuiculture != uiculture) {\tthread.currentthread.currentuiculture = uiculture;\tsetthreaduilanguage (uiculture.lcid);\t}\ttry {\treturn catalog.getpluralstring (singular, plural, number);\t} catch (exception e) {",
  "failed to localize string",
  0
 ],
 [
  "else {\ttestoutputhelper.writeline(\"\");\tjobconstraints jobcon = jobspec.constraints;\tif (null == jobcon) {\t}\telse {\ttestoutputhelper.writeline(\"\");\t}\tjobmanagertask ijm = jobspec.jobmanagertask;\tif (null == ijm) {",
  "null",
  0
 ],
 [
  "public bool remove(t value) {\tmarkchange();\tforeach (valueel el in this.combinedvalues) {\tif (el.isinserted && el.insertedvalue.equals(value)) {",
  "using internal lowlevellinq",
  1
 ],
 [
  "private static void setparameteroracletype (oracleconnection con) {\tconsole.writeline();\toracleparameter p = con.createcommand().createparameter();",
  "p oracletype varchar",
  0
 ],
 [
  "static void usage (optionset options) {",
  "usage mdbrebase options assembly to fix",
  0
 ],
 [
  "static string internalgetcachedirectory (filepath filename) {\tcanonicalizepath (ref filename);\tvar assemblycacheroot = getassemblycacheroot (filename);\ttry {\tif (!directory.exists (assemblycacheroot)) return null;\tforeach (var dir in directory.enumeratedirectories (assemblycacheroot)) {\tstring result;\tif (checkcachedirectoryiscorrect (filename, dir, out result)) return result;\t}\t} catch (exception e) {",
  "error while getting derived data directories",
  0
 ],
 [
  "static asymmetricalgorithm privatekeyselection (x509certificate certificate, string targethost) {",
  "host",
  0
 ],
 [
  "using (streamwriter tc = new streamwriter (file.create (temp_c))) {\tstring prog = null;\tif (bundled_header) {\tconst char *name;\tconst unsigned char *data;\tconst unsigned int size;\t} monobundledassembly;\tvoid          mono_register_bundled_assemblies (const monobundledassembly **assemblies);\tvoid          mono_register_config_for_assembly (const char* assembly_name, const char* config_xml);\t\");",
  "define mono aot mode llvmonly",
  0
 ],
 [
  "static void dosqltest (idbconnection cnc) {\tidatareader reader;\tobject odatavalue;",
  "unable to locate fixture",
  1
 ],
 [
  "static actionmenuitem () {\ttry {\taddmenuimage = gdk.pixbuf.loadfromresource (\"add-menu.png\");\tremovemenuimage = gdk.pixbuf.loadfromresource (\"remove-menu.png\");\t} catch (exception e) {",
  "finally called",
  1
 ],
 [
  "static bool callsecondclassoperator() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturnclass<int>();\tif ( (!(bool)(((dynamic)(s + 1)) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "static int main () {\ttype t = typeof (t);\tt obj = new t ();\tmethodbase m1;\tobj.a = 2;\tobj.v = 5;\tm1 = t.getconstructor (type.emptytypes);\tm1.invoke (obj, null);",
  "after reinit v is",
  0
 ],
 [
  "public static void reporterror(string msg) {\tif (logfile != null) {\tlock (locallock) file.appendalltext(logfile, \"[error] \" + msg + environment.newline);\t}",
  "main reply locked",
  1
 ],
 [
  "static void main (string[] args) {",
  "xmlschemacollectiondatabase",
  1
 ],
 [
  "public override void dodragdrop(idataobject dataobject, dragdropeffects effect) {\tperforminitialization();\texpand();\ttry {\tif (dataobject.getdatapresent(typeof(filenode))) {\tfilenode filenode = (filenode)dataobject.getdata(typeof(filenode));",
  "invalid complextype attributes restriction",
  1
 ],
 [
  "protected void translatesids(string target, intptr[] psids) {",
  "got but expected",
  1
 ],
 [
  "public override object getvalue(object component) {\t#if debug if (propdescusageswitch.traceverbose) {\tstring compname = \"(null)\";\tif (component != null) compname = component.tostring();",
  "runs a set of nunit tests from the console",
  1
 ],
 [
  "static int main () {\tvar t = new thread (setuplinks);\tt.start ();\tt.join ();\tgc.collect ();\tbridge a, b;\ta = b = null;\tconsole.writeline (\"a is null {0}\", a == null);\tconsole.writeline (\"b is null {0}\", b == null);\tif (a == null || b == null) return 1;",
  "a test",
  0
 ],
 [
  "public void length_open_close() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tcom.open();\tstream serialstream = com.basestream;\tcom.close();",
  "verifying length property throws exception after open then close",
  0
 ],
 [
  "public int transform(string szxmlfile, outputtype outputtype, navtype navtype, bool errorcase) {\tszxmlfile = fullfilepath(szxmlfile);\tixpathnavigable xd = loadxml(szxmlfile, navtype);",
  "executing transform",
  0
 ],
 [
  "if (s11.f2 != 2+9) {\treturn 2;\t}\tif (s11.f3 != 3+9) {\treturn 3;\t}\tif (s11.f4 != 4+9) {\treturn 4;\t}\tif (s11.f5 != 5+9) {",
  "compiling lambda for",
  1
 ],
 [
  "public bool test () {",
  "start value",
  0
 ],
 [
  "public principal findone() {",
  "principalsearcher entering findone",
  0
 ],
 [
  "public static void execnegativetestwithbadops(dynamic dobj, string[] exp_msg, string tip, func<dynamic, dynamic> test) {\tint flag = 1;\ttry {\tdynamic dr = test(dobj);\t}\tcatch (microsoft.csharp.runtimebinder.runtimebinderexception ex) {\tif (errorverifier.verify(errormessageid.badbinaryops, ex.message, exp_msg)) {\tflag = 0;\t}\telse {",
  "catch an unexpected runtimebinderexception when testing",
  0
 ],
 [
  "byte[] buffer = new byte[3];\tint startpos = 0;\tint readsize = 3;\tint currentsize = 0;\tdatareader.read();\twhile (datareader.read()) {\tcurrentsize = datareader.readcontentasbinhex(buffer, startpos, readsize);\tcerror.equals(currentsize, 1, \"size\");\tcerror.equals(buffer[0], (byte)17, \"buffer\");\tif (!(isxpathnavigatorreader() || isxmlnodereader() || isxmlnodereaderdatadoc())) {",
  "linenumber",
  0
 ],
 [
  "public void transformgeneric7(inputtype inputtype, readertype readertype, transformtype transformtype, doctype doctype) {\ttry {\tloadxsl(\"forwardcomp2.xsl\", inputtype, readertype);\ttransform(\"data.xml\", true, transformtype, doctype);\t}\tcatch (xsltexception) {\treturn;\t}",
  "xsltexception xslt invalidxpath was expected",
  0
 ],
 [
  "static int main (string[] args) {\tif (args.length == 0) {\treturn 2;\t}\tstring filename = args [0];\tx509certificate2 cert = new x509certificate2 (filename);\tx509chain chain = x509chain.create ();\tbool result = chain.build (cert);",
  "skipping negotiatestream streamtostream kerberosauthentication success",
  1
 ],
 [
  "static void performcomparison () {\tint end = work_items.count;\tfor (int i = 0; i < end; i++) {\tstate state = work_items [i];\tif (interlocked.compareexchange (ref state.alreadycomparing, 1, 0) == 1) continue;",
  "comparing",
  0
 ],
 [
  "sc.removerecursive(parent);\tcerror.compare(sc.count, 1, \"count\");\tcerror.compare(sc.contains(\"ns-b\"), true, \"contains\");\tparent = sc.add(null, path.combine(testdata._root, \"import_v16_a.xsd\"));\tsc.removerecursive(parent);\tcerror.compare(sc.count, 1, \"count\");\tcerror.compare(sc.contains(\"ns-b\"), true, \"contains\");\treturn;\t}\tcatch (xmlschemaexception e) {",
  "inside finally",
  1
 ],
 [
  "public dummy assert (label pc, edgetag tag, source condition, textwriter data) {",
  "assert",
  0
 ],
 [
  "static void help () {",
  "ver",
  1
 ],
 [
  "static void fixupembeddedresourceid (codecompileunit ccu, string id) {\ttry {\tcodeobjectcreateexpression initexpr = getinitexpr (ccu);\tinitexpr.parameters [0] = new codeprimitiveexpression (id);\t} catch (exception ex) {",
  "show show the web page content on screen",
  1
 ],
 [
  "installedwindowssdks = windowssdks;\tinstalledcruntimesdks = cruntimesdks;\tif (!quiet && installedwindowssdks != null) {\tforeach (var windowssdk in installedwindowssdks) {\t}\tconsole.writeline (\"---------------\");\t}\tif (!quiet && installedcruntimesdks != null) {\tforeach (var cruntimesdk in installedcruntimesdks) {\tif (cruntimesdk.parentsdk != null) {",
  "id inputdirectory directory directory where dlls are located",
  1
 ],
 [
  "private static bool nullabledoubletypewithnumbericconversionfromfloatinassignment() {\tint failcount = 0;\tfloat? origin = +0.0f;\tdynamic d = origin;\tdouble? result = d;\tif (result != origin) {\tfailcount++;",
  "input xml document to canonalize",
  1
 ],
 [
  "bool retval = true;\tnode[] nodes = new node[size + 2];\tint i = 0;\tnode n = startsentinel;\twhile (n != null) {\tnodes[i++] = n;\tn = n.next;\t}\tforeach (linkedlist<t> view in views) {\tif (!view.isvalid) {",
  "invalid view hash offset size",
  0
 ],
 [
  "private static bool callsecondclassinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tdynamic d = new firstclassreturnclass<int>();\tif ((!(((secondclass<int>)d.instanceproperty).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public static void usage (string message) {\tif (message != null) {\tconsole.writeline (\"{0}{1}{0}\", environment.newline, message);\t}",
  "stream directly use the sslclientstream default",
  0
 ],
 [
  "}\twsettings.closeoutput = closeoutput;\txmlwriter w = writerhelper.create(\"writer.out\", wsettings, overrideasync: true, async: utils.async);\tw.writestartelement(\"root\");\tw.writeendelement();\tw.dispose();\tstream fs = null;\ttry {\tfs = filepathutil.getstream(\"writer.out\");/*new filestream(\"writer.out\", filemode.open, fileaccess.readwrite);*/ }\tcatch (exception e) {",
  "createdelegate success",
  1
 ],
 [
  "if (context.contexttype != _ctx.contexttype) {\tdebug.assert(this.unpersisted == true);\tthrow new invalidoperationexception(sr.savetomusthavesamecontexttype);\t}\tstorectx originalstorectx = getstorectxtouse();\t_ctx = context;\tstorectx newstorectx = getstorectxtouse();\tdebug.assert(newstorectx != null);\tdebug.assert(originalstorectx != null);\tif (this.unpersisted) {",
  "principal save context inserting new principal of type using",
  0
 ],
 [
  "public override void run() {",
  "orleansazureweb run",
  0
 ],
 [
  "public bool remove(intptr handle) {\tlock (this) {\tint hash = computehash(handle);\tif (compmodswitches.handleleak.level >= tracelevel.info) {\tdebug.writeline(\"-------------------------------------------------\");",
  "datatable",
  1
 ],
 [
  "public static void main (string[] args) {",
  "looking for member",
  1
 ],
 [
  "protected override string generatefullpathtotool() {\tstring path = toollocationhelper.getpathtodotnetframeworkfile(toolname, targetdotnetframeworkversion.versionlatest);\tif (path == null) {",
  "incrementing i",
  1
 ],
 [
  "{\tsw.write(\"<root><base64>\");\tsw.write(base64str);\tsw.write(\"</base64></root>\");\t}\tfilepathutil.addstream(filename, mems);\treloadsource(filename);\tint size = (totalfilesize - 30);\tint size64 = size * 3 / 4;\tdatareader.positiononelement(\"base64\");",
  "fill data set via adapter",
  1
 ],
 [
  "public void rtsenable_true_beforeopen() {",
  "verifying true rtsenable before open",
  0
 ],
 [
  "if (detailed) {\t}\twriteline ();\tif (detailed) {\t}\twriteline ();\tif (detailed) {\twriteline (\"\\t<assembly_display_name> is the name of the assembly (partial or\\n\" + \"\\tfully qualified) to remove from the global assembly cache. if a \\n\" + \"\\tpartial name is specified all matching assemblies will be uninstalled.\\n\" + \"\\texample: -u mydll,version=1.2.1.0\");\t}\twriteline ();",
  "uninstalls one or more assemblies from the global assembly cache",
  0
 ],
 [
  "public delegate void databaseconnectioncontextcallback (databaseconnectioncontext context, bool connected, object state);\tpublic static class queryservice {\tpublic static void raiseexception (exception exception) {\tmessageservice.showexception (exception);",
  "test failed at call result",
  1
 ],
 [
  "static private void help () {",
  "extended help for advanced options",
  0
 ],
 [
  "public static void main () {",
  "this should not appear since break was supposed to fire",
  1
 ],
 [
  "var t = counters.parserservice.objectdeserialized.begintiming (path);\ttry {\tusing (var fs = new filestream (path, system.io.filemode.open, fileaccess.read, fileshare.read, 4096, fileoptions.sequentialscan)) {\tusing (var reader = new binaryreaderwith7bitencodedints (fs)) {\tlock (sharedserializer) {\treturn (t)sharedserializer.deserialize (reader);\t}\t}\t}\t} catch (exception e) {",
  "error while trying to deserialize stack trace",
  0
 ],
 [
  "oraclelob clob = reader.getoraclelob (0);\tbyte[] bytes = null;\tunicodeencoding encoding = new unicodeencoding ();\tbytes = encoding.getbytes (\"mono is fun!\");\tclob.write (bytes, 0, bytes.length);\tclob.close ();\toraclelob blob = reader.getoraclelob (1);\tbytes = new byte[6] { 0x31, 0x32, 0x33, 0x34, 0x35, 0x036 };\tblob.write (bytes, 0, bytes.length);\tblob.close ();",
  "try finally test failed",
  1
 ],
 [
  "}\t}\tif (e.hasset) {\tif (!iscurrentinterface) {\tindent++;\tgeneratevbstatements(e.setstatements);\tindent--;\t}\t}\tindent--;",
  "exception",
  1
 ],
 [
  "{\tutilities utilities = batchcli.utilities;\ttaskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();\ttaskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(3));\tcloudtask mycompletedtask = new list<cloudtask>(boundjob.listtasks()).single();\tstring stdout = mycompletedtask.getnodefile(constants.standardoutfilename).readasstring();\tstring stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();\tthis.testoutputhelper.writeline(\"\");\tthis.testoutputhelper.writeline(stdout);\tthis.testoutputhelper.writeline(\"\");",
  "serverwritekey",
  1
 ],
 [
  "case \"sybaseclient\": con = new sybaseconnection();\tbreak;\treturn;\treturn;\t#endif }\tcon.connectionstring = constr;\ttry {\tcon.open();\t}\tcatch(sqlexception se) {",
  "errors",
  0
 ],
 [
  "public static int main () {\tif (\"hello\" != a.hello.tostring ()) return 1;\tif (5.tostring () != \"5\") return 2;\ty y = new y ();\tif (y.value.tostring () != \"3\"){\tstring x = y.value.tostring ();\treturn 3;\t}",
  "test ok",
  0
 ],
 [
  "ipendpoint endpoint = new ipendpoint(ipaddress.ipv6loopback, 0);\tvar server = new tcplistener(endpoint);\tserver.start();\tusing (var clientconnection = new tcpclient(addressfamily.internetworkv6)) {\tipendpoint serverendpoint = (ipendpoint)server.localendpoint;\ttask clientconnect = clientconnection.connectasync(serverendpoint.address, serverendpoint.port);\ttask<tcpclient> serveraccept = server.accepttcpclientasync();\tawait task.whenall(new task[] { clientconnect, serveraccept }).timeoutafter( testconfiguration.passingtesttimeoutmilliseconds);\tusing (tcpclient serverconnection = await serveraccept) using (sslstream sslclientstream = new sslstream(clientconnection.getstream())) using (sslstream sslserverstream = new sslstream( serverconnection.getstream(), false, allowanyservercertificate)) {\tstring servername = _servercertificate.getnameinfo(x509nametype.simplename, false);",
  "certificate removed from store",
  1
 ],
 [
  "var a = new wrongcasefriendassembly.internalclass(@private: false);\t} catch (memberaccessexception) {\t}\ttry {\tvar a = new wrongcasefriendassembly.internalclass(@internal: 0);\t} catch (memberaccessexception) {\tfailcount += 1;\t}\ttry {\tvar b = new wrongcasefriendassembly.internalclass(@public: 'a');",
  "warning keyboardhandler processevent default handler for keventclasstextinput should not be reached",
  1
 ],
 [
  "public static void dumpcodeinfo (imagecodecinfo codec) {",
  "invoke",
  1
 ],
 [
  "public static void main (string [] args) {\tif (args.length == 0) {",
  "pass path to web config",
  0
 ],
 [
  "foreach (var project in solution.projects) {\tforeach (var type in project.compilation.mainassembly.getalltypedefinitions()) {\ttestfindreferences(type);\tforeach (imember m in type.members) {\ttestfindreferences(m);\t}\tconsole.write('.');\t}\t}\tw.stop();",
  "findreferencesconsistencycheck is done",
  0
 ],
 [
  "connections = new oracleconnection[maxcon];\tfor (i = 0; i < maxcon; i++) {\tconnections[i] = new oracleconnection(constr);\tconnections[i].open ();\t}\tt = new thread(new threadstart(anotherthreadproc));\tt.start ();\tthread.sleep(100);\tfor (i = 0; i < maxcon; i++) {\tif (connections[i] != null) {",
  "log file save the report to the specified file",
  1
 ],
 [
  "private static bool nullablesbytetypewithidentityconversioninassignment() {\tint failcount = 0;\tsbyte? origin = 127;\tdynamic d = origin;\tsbyte? result = d;\tif (result != origin) {\tfailcount++;",
  "catch expected exception",
  1
 ],
 [
  "public static void main () {",
  "events test passes",
  1
 ],
 [
  "public void getparam20() {\tm_xsltarg = new xsltargumentlist();\tint i = 10;\tm_xsltarg.addparam(\"intarg\", \"\", i);\ttype exp = i.gettype();\ttype act = m_xsltarg.getparam(\"intarg\", \"\").gettype();",
  "returned type",
  0
 ],
 [
  "missingmdwriter.writeline(\"\");\tvar coderefactorings = typeof(notportedyetattribute).assembly.gettypes() .where(t => !t.fullname.startswith(\"refactoringessentials.samples.\") && t.customattributes.any(a => a.attributetype.fullname == typeof(exportcoderefactoringproviderattribute).fullname)) .orderby(t => t.name);\tvar codeanalyzers = typeof(notportedyetattribute).assembly.gettypes() .where(t => !t.fullname.startswith(\"refactoringessentials.samples.\") && t.customattributes.any(a => a.attributetype.fullname == typeof(diagnosticanalyzerattribute).fullname)) .orderby(t => t.name);\tvar codefixes = typeof(notportedyetattribute).assembly.gettypes() .where(t => !t.fullname.startswith(\"refactoringessentials.samples.\") && t.customattributes.any(a => a.attributetype.fullname == typeof(exportcodefixproviderattribute).fullname) && codefixunrelatedtonranalyzer(t)) .orderby(t => t.name);\tmissingmdwriter.writeline(\"\");\tmissingmdwriter.writeline(\"\");\twritetypelist(basepath, \"coderefactorings.html.template\", \"coderefactorings.csharp.html\", \"{0} code refactorings for c#\", coderefactorings.where(t => iscsharprelatedelement(t)), getrefactoringdescription, missingmdwriter);\tmissingmdwriter.writeline(\"\");\twritetypelist(basepath, \"coderefactorings.html.template\", \"coderefactorings.vb.html\", \"{0} code refactorings for visual basic\", coderefactorings.where(t => isvbrelatedelement(t)), getrefactoringdescription, null);\tmissingmdwriter.writeline(\"\");",
  "gonna do a read now",
  1
 ],
 [
  "public void outlinetype () {\tbool first, ns = !string.isnullorempty (t.namespace);\tif (ns){",
  "failed to add get a value for of type string",
  1
 ],
 [
  "public void clear5(object param, xslinputtype xslinputtype, readertype readertype, outputtype outputtype, navtype navtype) {\tstring baseline = path.combine(\"baseline\", (string)param);\tm_xsltarg = new xsltargumentlist();\tstring obj = \"test\";\tfor (int i = 0; i < 200; i++) {\tm_xsltarg.addparam(\"myarg2\", szempty, obj + i);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (retobj.tostring() != (obj + i)) {",
  "name name",
  1
 ],
 [
  "public override void run() {\ttry {\tbase.run();\t}\tcatch (exception exc) {",
  "run failed with",
  0
 ],
 [
  "public byte[] getsymmetrickey() {\tvar tag = \"-symkeyfile\";\tvar symmetrickeyfile = getargumentvalue( tag );\tvar symmetrickey = symmetricalgorithm.create().key;\tif ( symmetrickeyfile != string.empty ) {\tsymmetrickey = file.readallbytes( symmetrickeyfile );\t}\telse {",
  "mapping filter of sourcecolumn",
  1
 ],
 [
  "private static bool test1() {\tlong[] longvalues = new long[]\t{\tlong.minvalue, long.minvalue, 0 }\t;\tforeach (long a1 in longvalues) {\tforeach (long a2 in longvalues) {\tdynamic d1 = a1;\tif ((d1 < a2) != (a1 < a2)) {",
  "overridden",
  1
 ],
 [
  "result = (int)methods [i].invoke (null, null);\tif (do_timings) {\tend = datetime.now;\tlong tdiff = end.ticks - start.ticks;\tint mdiff = (int)tdiff/10000;\ttms += mdiff;\t}\tran++;\tif (result != expected) {\tfailed++;",
  "failed got expected",
  0
 ],
 [
  "streamwriter sw = new streamwriter(st);\tsw.write(\"<?xml version=\\\"1.0\\\" standalone=\\\"yes\\\"?><newdataset>\");\tsw.write(\"<table><employeeno>9</employeeno></table>\");\tsw.write(\"</newdataset>\");\tsw.flush();\tst.position=0;\tdataset ds = new dataset();\tds.readxml(st);\tds.tables[0].columns.add(\"valuelistvaluemember\", typeof(object), \"employeeno\");\tforeach( datarow row in ds.tables[0].rows ) {",
  "invoke obj",
  1
 ],
 [
  "public dockingmanager() {",
  "both aces are null",
  1
 ],
 [
  "public static ienumerable<object> tagserror () {\tstring tags;\ttags = \"\";\trunonthread (() => {\tusing (d u = new d (tags)) {",
  "no op",
  0
 ],
 [
  "}\ttry {\twrongcasefriendassembly.internalclass.privatestaticmethod();\t} catch (memberaccessexception) {\tfailcount += 1;\t}\ttry {\twrongcasefriendassembly.internalclass.internalstaticmethod();\t} catch (memberaccessexception) {\tfailcount += 1;",
  "ok",
  1
 ],
 [
  "static ienumerator getit (int [] args) {\tforeach (int arg in args) {\ta a = delegate {",
  "arg",
  0
 ],
 [
  "throw new invalidoperationexception();\t}\tif (actualreturntype != null) {\tif (actualreturntype.equals(returntype)) return;\tthrow new invalidoperationexception(\"inconsistent return types for explicitly-typed lambda\");\t}\tactualreturntype = returntype;\tvisitor.undecidedlambdas.remove(this);\tanalyze();\titype unpackedreturntype = isasync ? visitor.unpacktask(returntype) : returntype;",
  "applying return type to explicitly typed lambda",
  0
 ],
 [
  "protected virtual void focuscontent() {\tif (isactivecontent && !iskeyboardfocused) {\t#region focus on winforms content if (this.content is windowsformshost) {\t}\t#endregion dispatcher.begininvoke(dispatcherpriority.input, new threadstart(delegate {\tif (isactivecontent && !iskeyboardfocused) {\tif (defaultelement != null) {\tiinputelement kbfocused = keyboard.focus(defaultelement);\tif (kbfocused != null) debug.writeline(\"focused element \" + kbfocused);",
  "no focused element",
  0
 ],
 [
  "[testfixture]\tpublic class maskedtextprovidergeneratedtests {\t\");\ttab += 2;\t}\tstatic void writefilefooter () {\twritelinenonformat ( }\t}\t\");\ttab -= 2;",
  "expected nodetype",
  1
 ],
 [
  "if (!(t && f == false)) error++;\telse ok |= 16;\tint i = 0;\tw(3);\tdo {\ti++;\t} while (!(i > 5));\tif (i != 6) error ++;\telse ok |= 32;\tw(100);",
  "is a duplicate attribute name",
  1
 ],
 [
  "private static bool callsecondclassinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tif ((!(bool)(firstclassreturndynamicclass.staticproperty.instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public void ipinfotest_accessallipv6properties_noerrors() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {",
  "predecessor of b is",
  1
 ],
 [
  "}\tvar allpools = batchcli.pooloperations.listpools();\ttestutilities.displaypools(this.testoutputhelper, allpools);\tvar oddienum = batchcli.pooloperations.listpools(new odatadetaillevel() {\tfilterclause = \"startswith(id, 'odd')\", selectclause = \"id,state\" });\tlist<cloudpool> oddlist = new list<cloudpool>(oddienum);\ttestutilities.displaypools(this.testoutputhelper, oddienum);\tvar evenienum = batchcli.pooloperations.listpools(new odatadetaillevel() {\tfilterclause = \"startswith(id, 'even')\", selectclause = \"id,state\" });\tlist<cloudpool> evenlist = new list<cloudpool>(evenienum);",
  "published successfully",
  1
 ],
 [
  "public override string tostring() {\tstringwriter writer = new stringwriter(cultureinfo.invariantculture);",
  "validto",
  0
 ],
 [
  "static void dumpsignedinfo (signedinfo s) {",
  "canonicalizationmethod",
  0
 ],
 [
  "private static bool test7() {\tlong a = 1;\tdynamic b = a;\tb++;\tif (b == 2) return true;",
  "failed long",
  0
 ],
 [
  "if (s9.f2 != 2+90) {\treturn 2;\t}\tif (s9.f3 != 3+90) {\treturn 3;\t}\tif (s9.f4 != 4+90) {\treturn 4;\t}\tif (s9.f5 != 5+90) {",
  "resolved to",
  1
 ],
 [
  "closescope();\topenscope($\"public static implicit operator  handle({handlename} handle)\");\tclosescope(\"handle\");\topenscope(\"internal int offset\");\topenscope(\"get\");\tclosescope();\tclosescope(\"offset\");\topenscope($\"public {record.name} get{record.name}(metadatareader reader)\");\tclosescope($\"get{record.name}\");\topenscope(\"public bool isnull(metadatareader reader)\");",
  "initial job commit",
  1
 ],
 [
  "static void main(string[] args) {",
  "tests start",
  0
 ],
 [
  "assert.true(false);\t}\ti++;\t}\ti = 1;\tforeach (string str in szwhitespace) {\tm_xsltarg.addparam(\"myarg\" + i, szempty, \"test\");\tm_xsltarg.removeparam(\"myarg\" + str, szempty);\tretobj = m_xsltarg.getparam(\"myarg\" + str, szempty);\tif (retobj != null) {",
  "error removing case in the second batch from this test",
  0
 ],
 [
  "markup.appendtaggedtext (theme, documentation, 0, maxparamcolumncount);\tmarkup.append (\"</span>\");\t}\tif (currentparameter >= 0 && currentparameter < item.parameters.length) {\tvar p = item.parameters [currentparameter];\tif (p.documentationfactory != null) {\ttry {\tdocumentation = p.documentationfactory (canceltoken).tolist ();\t} catch (exception e) {\tdocumentation = emptytaggedtextlist;",
  "error while getting parameter documentation",
  0
 ],
 [
  "protected override void generatelabeledstatement(codelabeledstatement e) {",
  "set and retrieved value appear to be different",
  1
 ],
 [
  "};\tcoll.itemsadded += delegate(object c, itemcounteventargs<int> args) {\t};\tadditemsaddedcounter(coll);\tadditemsremovedcounter(coll);\tcoll.addall(bag1);\tcoll.removeall(new int[] { 2, 5, 6, 3, 7, 2 });\tcoll.clear();\ticollection<int> bag2 = new hashbag<int>();\tbag2.itemsadded += delegate(object c, itemcounteventargs<int> args) {",
  "storage sas definition attributes is enabled",
  1
 ],
 [
  "static bool callsecondinterfaceindexer() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturndynamicinterface();\tif ( (!(bool)(s.instanceproperty[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public static void encode (string dump_file, string data_name, string h_file) {\tpagedtableencoder.idata data;\tusing (textreader r = new streamreader (dump_file)) data = parsedump (r);\tpagedtableencoder pte = new pagedtableencoder (8, 8, 16, true, \"disable_astral\");\tpte.process (data, \"astral_index\");\tusing (textwriter w = new streamwriter (h_file)) {\tw.writeline (\"/*\");",
  "finished analyzing",
  1
 ],
 [
  "public async task getasync_allowautoredirectfalse_redirectfromhttptohttp_statuscoderedirect(int statuscode) {\thttpclienthandler handler = createhttpclienthandler();\thandler.allowautoredirect = false;\tusing (var client = new httpclient(handler)) {\turi uri = configuration.http.redirecturifordestinationuri( secure: false, statuscode: statuscode, destinationuri: configuration.http.remoteechoserver, hops: 1);",
  "if readnull return null",
  1
 ],
 [
  "public void generatereader (string readerclassname, arraylist maps) {\tif (_config == null || !_config.generateasinternal) writeline (\"public class \" + readerclassname + \" : xmlserializationreader\");\twritelineind (\"{\");\twriteline (\"static readonly system.reflection.methodinfo frombinhexstringmethod = typeof (xmlconvert).getmethod (\\\"frombinhexstring\\\", system.reflection.bindingflags.static | system.reflection.bindingflags.nonpublic, null, new type [] {typeof (string)}, null);\");",
  "static byte frombinhexstring string input",
  0
 ],
 [
  "static int test_0_root_keeps_child () {\tfinalizerhelpers.performnopinaction (setuplinks);\tgc.collect ();\tgc.waitforpendingfinalizers ();",
  "try get b",
  0
 ],
 [
  "privatekey pvk = privatekey.createfromfile (keyfile);\trsa = pvk.rsa;\t}\tcatch (cryptographicexception) {\tstring password = console.readline ();\ttry {\tprivatekey pvk = privatekey.createfromfile (keyfile, password);\trsa = pvk.rsa;\t}\tcatch (cryptographicexception) {",
  "invalid password",
  0
 ],
 [
  "private void read(string filename) {\txmlserializer ser=new xmlserializer(typeof(dataset));\tfilestream fs=new filestream(filename, filemode.open);\tdataset ds;\tds=(dataset)ser.deserialize(fs);\tfs.close();\tforeach(datatable t in ds.tables) {\tforeach(datacolumn c in t.columns) {",
  "installing",
  1
 ],
 [
  "if (dependency.status == status.notadded || !project.packageadded (dependency)) {\treturn;\t}\ttry {\tvar references = new list<string> ();\treferences.add (dependency.packageid);\tvar task = packagemanagementservices.projectoperations.uninstallpackagesasync (project, references, true);\tawait task.configureawait (false);\t} catch (invalidoperationexception) {\t} catch (exception ex) {",
  "could not queue package for uninstallation",
  0
 ],
 [
  "object vt = options[readerfactory.ht_validationtype];\tstring fragment = (string)options[readerfactory.ht_fragment];\tstringreader sr = (stringreader)options[readerfactory.ht_stringreader];\tif (rs == null) rs = new xmlreadersettings();\trs.dtdprocessing = dtdprocessing.ignore;\tif (sr != null) {\txmlreader reader = readerhelper.create(sr, rs, string.empty);\treturn reader;\t}\tif (stream != null) {",
  "stream",
  0
 ],
 [
  "public static ienumerable<string> yieldreturnwithnestedtryfinally(bool breakinmiddle) {\tyield return \"start of method\";\ttry {\tyield return \"within outer try\";\ttry {\tyield return \"within inner try\";\tif (breakinmiddle) yield break;\tyield return \"end of inner try\";",
  "end of inner try",
  0
 ],
 [
  "}\tvar tb = t as task<bool>;\tif (tb != null) {\tif (!tb.result) {\tconsole.writeline (\"failed (result={0})\", tb.result);\treturn false;\t}\t}\treturn true;\t} catch (exception e) {",
  "failed",
  0
 ],
 [
  "public static void createxmllangtestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<xmllang0 xml:lang=\\\"en-us\\\">what color is it?</xmllang0>\");\ttw.write(\"<xmllang1 xml:lang=\\\"en-gb\\\">what color is it?<a><b><c>language test</c><persona>dromio of ephesus</persona></b></a></xmllang1>\");",
  "noxmllang",
  0
 ],
 [
  "public static siloargs parsearguments(string[] args) {\tstring deploymentid = null;\tstring siloname = null;\tfor (int i = 0; i < args.length; i++) {\tstring arg = args[i];\tif (arg.startswith(\"-\") || arg.startswith(\"/\")) {\tswitch (arg.tolowerinvariant()) {\tcase \"/?\": case \"/help\": case \"-?\": case \"-help\": return null;",
  "bad command line arguments supplied arg",
  0
 ],
 [
  "w.writestartelement(\"root\");\tw.writeattributestring(\"xmlns\", \"x\", null, \"foo\");\tw.writeattributestring(\"xmlns\", \"x\", null, \"foo\");\tw.writeendelement();\t}\tcatch (xmlexception e) {\tcerror.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "public void save() {\tcheckdisposedordeleted();\tcheckfakeprincipal();\tif (_ctx == null) {\tdebug.assert(this.unpersisted == true);\tthrow new invalidoperationexception(sr.principalmustsetcontextforsave);\t}\tstorectx storectxtouse = getstorectxtouse();\tdebug.assert(storectxtouse != null);\tif (this.unpersisted) {",
  "principal save inserting principal of type using",
  0
 ],
 [
  "protected override void generateprimitiveexpression(codeprimitiveexpression e) {\tif (e.value == null) {",
  "connectionname",
  1
 ],
 [
  "keyboard = new x11keyboard(display, foster_hwnd.handle);\tdnd = new x11dnd (display, keyboard);\terrorexceptions = false;\terrorhandler = new xerrorhandler (handleerror);\txlib.xseterrorhandler (errorhandler);\tx11desktopcolors.initialize();\ttry {\txlib.xkbsetdetectableautorepeat (display, true, intptr.zero);\tdetectable_key_auto_repeat = true;\t} catch {",
  "got but expected",
  1
 ],
 [
  "console.outputencoding = encoding.utf8;\tvar writer = console.out;\tforeach (var c in all) {\tif (c.lcid == cultureinfo.invariantculture.lcid) continue;\tvar df = c.datetimeformat;\tdump (writer, df.abbreviateddaynames, \"abbreviateddaynames\");\tdump (writer, df.abbreviatedmonthgenitivenames, \"abbreviatedmonthgenitivenames\");\tdump (writer, df.abbreviatedmonthnames, \"abbreviatedmonthnames\");\tdump (writer, df.daynames, \"daynames\");\tdump (writer, df.getalldatetimepatterns (), \"getalldatetimepatterns\");",
  "longtimepattern",
  0
 ],
 [
  "private static bool testoropwithsametypeandreturntype() {\tclearflags();\tdynamic d1 = new myopclass();\tdynamic d2 = new myopclass();\tdynamic dr = d1 || d2;\tif (dr.gettype() != typeof(myopclass)) {",
  "failed got wrong return type",
  0
 ],
 [
  "public static void thrower () {\ttry {\tthrow new exception ();\t} finally {\theusl (new se ());",
  "found dispose check at",
  1
 ],
 [
  "static void writehelp () {\tconsole.writeline ();",
  "caught",
  1
 ],
 [
  "outputline (@\"                  oracle,postgresql,sqlite,sybase,tds)\");\toutputline (@\"       \\open to open the connection\");\toutputline (@\"       \\close to close the connection\");\toutputline (@\"       \\e to execute sql query (select)\");\toutputline (@\"       \\h to show help (all commands).\");\toutputline (@\"       \\defaults to show default variables.\");\toutputline (\"\");\t}\tpublic void showhelp () {\tconsole.writeline (\"\");",
  "oracle postgresql sqlite sybase firebird",
  0
 ],
 [
  "static int main (string[] args) {\tif (args.length == 0) {\treturn 2;\t}\tstring filename = args [0];\tx509certificate2 cert = new x509certificate2 (filename);\tx509chain chain = x509chain.create ();\tbool result = chain.build (cert);\tconsole.writeline ();",
  "chainstatus",
  0
 ],
 [
  "public string getvaultaddress() {\tvar tag = \"-vault\";\tstring keyvaultvaultaddress = getargumentvalue( tag );\tif ( keyvaultvaultaddress == string.empty ) {\tkeyvaultvaultaddress = configurationmanager.appsettings[\"vaulturl\"];",
  "failed to initialize orleans silo",
  1
 ],
 [
  "static bool certificatevalidation (object sender, x509certificate certificate, x509chain chain, sslpolicyerrors certificateerrors) {\tconsole.writeline (certificate.tostring (true));\tconsole.writeline (chain);",
  "assert areequal maskedtextresulthint out",
  1
 ],
 [
  "public static int main () {\ttry {\tbool x = true;\ttry {\tthrow new applicationexception ();\t} catch (nullreferenceexception) when (x) {\tthrow;\t}\treturn 1;\t} catch (applicationexception) {",
  "added value retrieved value",
  1
 ],
 [
  "file.setattributes(testfile, fileattributes.normal);\tfile.delete(testfile);\t}\t}\tif (loadxsl(\"xmlresolver_document_function_absolute_uri.xsl\", xslinputtype, readertype) == 1) {\tif (transformresolver(\"fruits.xml\", outputtype, navtype, new xmlurlresolver()) == 1) {\tverifyresult(expected);\treturn;\t}\telse {",
  "failed to resolve document function with absolute uri",
  0
 ],
 [
  "static void f1 () {\tv += 1;",
  "test",
  0
 ],
 [
  "}\tif (!compilerparameters.documentationfile.isnullorempty) appendquoted (sb, \"/doc:\", compilerparameters.documentationfile);\tif (!string.isnullorempty (compilerparameters.nowarnings)) appendquoted (sb, \"/nowarn:\", compilerparameters.nowarnings);\tif (runtime.runtimeid == \"ms.net\") {\tsb.appendline(\"/fullpaths\");\tsb.appendline(\"/utf8output\");\t}\tstring output = \"\";\tstring error  = \"\";\tfile.writealltext (responsefilename, sb.tostring ());",
  "exception",
  1
 ],
 [
  "static void onextensionchanged (object s, extensionnodeeventargs args) {\tif (args.change == extensionchange.add) {\ttry {\tif (typeof(commandhandler).isinstanceoftype (args.extensionobject)) typeof(commandhandler).getmethod (\"run\", system.reflection.bindingflags.nonpublic|system.reflection.bindingflags.instance, null, type.emptytypes, null).invoke (args.extensionobject, null);",
  "and more until the end",
  1
 ],
 [
  "var dir = path.getdirectoryname (typeof(macplatformservice).assembly.location);\tif (objcruntime.dlfcn.dlopen (path.combine (dir, \"libxammac.dylib\"), 0) == intptr.zero) loggingservice.logfatalerror (\"unable to load libxammac\");\tmimemap = new lazy<dictionary<string, string>> (loadmimemapasync);\tcarbon.setprocessname (brandingservice.applicationname);\tcheckgtkversion (2, 24, 14);\txwt.toolkit.currentengine.registerbackend<iextendedtitlebarwindowbackend,extendedtitlebarwindowbackend> ();\txwt.toolkit.currentengine.registerbackend<iextendedtitlebardialogbackend,extendedtitlebardialogbackend> ();\tvar description = xammacbuildinfo.value;\tif (string.isnullorempty (description)) {\t} else {",
  "main thread done",
  1
 ],
 [
  "directory.createdirectory (config_dir);\t} catch {}\ttry {\tfile.delete (settings_file);\t} catch {}\ttry {\tusing (filestream fs = file.create (settings_file)){\tserializer.serialize (fs, this);\t}\t} catch  (exception e){",
  "endif endif foreach var implementation in context implementations implementation writeheader writer context",
  1
 ],
 [
  "public iasyncresult begindisplayinitializationui (iclientchannel channel, asynccallback callback, object state) {",
  "begin",
  0
 ],
 [
  "var finish = new taskcompletionsource<bool>();\ttask<int> task1 = null;\ttask<int> task2 = null;\ttask join = null;\ttask wrapper = new task(() => {\ttask1 = task.run(() => {\tassert.notequal(scheduler, taskscheduler.current);\ttask.delay(1);\tassert.notequal(scheduler, taskscheduler.current);\tpause1.waitone();",
  "task done",
  0
 ],
 [
  "public bool verifynode(xmlnodetype eexpnodetype, string strexpname, string strexpvalue) {\tbool bpassed = true;\tif (nodetype != eexpnodetype) {\tbpassed = false;\t}\tif (name != strexpname) {",
  "test failed at call result",
  1
 ],
 [
  "foreach (type type in typeswithireadonlybase) {\tireadonly objectundertest = this.customizedobjectfactory.createinstance<ireadonly>(type);\tobjectundertest.isreadonly = true;\tienumerable<propertyinfo> properties = type.getproperties(bindingflags.public | bindingflags.instance);\tforeach (propertyinfo property in properties.where(p => p.name != \"custombehaviors\")) {\tif (property.canwrite) {\ttargetinvocationexception e = assert.throws<targetinvocationexception>(() => property.setvalue(objectundertest, null));\tassert.istype<invalidoperationexception>(e.innerexception);\t}\tif (property.canread) {",
  "attempting to read property",
  0
 ],
 [
  "s1.f1 = 1;\ts1 = mono_return_short1(s1, 90);\tif (s1.f1 != 1+90) {\treturn 1;\t}\tshort2 s2;\ts2.f1 = 1;\ts2.f2 = 2;\ts2 = mono_return_short2(s2, 90);\tif (s2.f1 != 1+90) {",
  "workflowdebugger does not have corresponding xaml node for",
  1
 ],
 [
  "public static int main () {\tbyte b;\tfor (b = 0; b < 255; b++){\tif (s (b) != 255 - b){",
  "ok",
  1
 ],
 [
  "iasyncresult result = null;\tif (try_recv_delegate == null) try_recv_delegate = new tryreceivedelegate (delegate (timespan tout, out requestcontext ctx) {\tlock (async_result_lock) {\tif (currentasyncresults.contains (result)) currentasyncthreads.add (thread.currentthread);\t}\ttry {\treturn tryreceiverequest (tout, out ctx);\t} catch (xmlexception ex) {\t} catch (socketexception ex) {\t} catch (ioexception ex) {",
  "i o exception dropped connection",
  0
 ],
 [
  "public static void main () {\tvar all = cultureinfo.getcultures (culturetypes.specificcultures | culturetypes.neutralcultures).orderby (l => l.lcid);\tconsole.outputencoding = encoding.utf8;\tvar writer = console.out;\tforeach (var c in all) {\tif (c.lcid == cultureinfo.invariantculture.lcid) continue;",
  "no match in actual values",
  1
 ],
 [
  "int x = 0;\tfor (int i = 0; i < 100; i++) x++;\tconsole.writeline (x);\tstring useless = \"useless string\";\tif (useless.equals (\"other useless\")) {\tuseless = string.empty;\t}\tuseless = string.concat (useless,\" 1\");\tfor (int j = 0; j < useless.length; j++) {\tif (useless[j] == 'u') console.writeline (\"i have detected an u char\");",
  "test",
  1
 ],
 [
  "private static async task<int> runmainasync() {\ttry {\tvar host = await startsilo();",
  "unmatched type vs",
  1
 ],
 [
  "public static int main () {\tassembly a = assembly.getexecutingassembly ();\tvar an = a.getname ();\tconsole.writeline (an.version);\tif (a.getname ().version != new version (7, 0, 0, 0)) return 1;\tif (an.hashalgorithm != assemblyhashalgorithm.md5) return 2;\tconsole.writeline (an.flags);\tif (an.flags != (assemblynameflags.publickey | assemblynameflags.enablejitcompileoptimizer | assemblynameflags.retargetable)) return 3;",
  "test failed at call result",
  1
 ],
 [
  "}\tif (total != 8) return 1;\ttotal = 0;\tforeach (int x in gets (3)){\ttotal += x;\t}\tif (total != 7) return 2;\ts s = new s();\ttotal = 0;\tforeach (int x in s.get (100)){",
  "include types",
  1
 ],
 [
  "idatareader reader;\tobject odatavalue;\ttry {\tdroptable (cnc);\t}\tcatch (pgsqlexception e) {\t}\ttry {\tcreatetable (cnc);\tinsertdata (cnc);",
  "ok",
  0
 ],
 [
  "static int main(string[] args) {\tstring cmd = environment.getcommandlineargs () [0];\tstring tool = path.getfilename(cmd);\tstring profile = path.getdirectoryname(cmd);\tint p = profile.lastindexof('\\\\');\tif (p == -1) {",
  "could not find the profile name from this",
  0
 ],
 [
  "public bool trygetcolor (string key, out hslcolor color) {\tpobject value;\tif (!settings.trygetvalue (key, out value)) {\tcolor = new hslcolor (0, 0, 0);\treturn false;\t}\ttry {\tcolor = hslcolor.parse (((pstring)value).value);\t} catch (exception e) {",
  "error while parsing color",
  0
 ],
 [
  "public static int main() {\tenvironment.exitcode = 2;\tappdomain domain=appdomain.createdomain(\"other\");",
  "about to execute",
  0
 ],
 [
  "public static int main () {\tint number = new foo () + new foo () ;\tconsole.writeline (number);\tfoo tmp = new foo ();\tint k = tmp;\tfloat f = tmp;\tif (f == 3) console.writeline (\"best implicit conversion selected correctly.\");",
  "f is",
  0
 ],
 [
  "unboundjob.poolinformation = new poolinformation() { poolid = this.poolfixture.poolid };\tunboundjob.commit();\ttry {\tcloudjob boundjob = batchcli.joboperations.getjob(jobid);\tassert.equal(originaldisplayname, boundjob.displayname);\ttestutilities.assertthrows<invalidoperationexception>(() => boundjob.displayname = updateddisplayname);\tstring taskid = testname + \"_task_\" + testutilities.getmyname();\tcloudtask unboundtask = new cloudtask(taskid, \"cmd /c echo hi\");\tunboundtask.displayname = originaldisplayname;\tassert.equal(originaldisplayname, unboundtask.displayname);",
  "adding task to job",
  0
 ],
 [
  "public void basictest_accessinstanceproperties_noexceptions_linux() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tstring description = nic.description;\tassert.false(string.isnullorempty(description), \"networkinterface.description should not be null or empty.\");\tstring id = nic.id;\tassert.false(string.isnullorempty(id), \"networkinterface.id should not be null or empty.\");",
  "reader positioned on",
  1
 ],
 [
  "public void logwarningfromtext (msbuildcontext bec, object p1, object p2, object p3, string projectfile, string warning) {",
  "orleans silo is running press enter to terminate",
  1
 ],
 [
  "public void loadxmlreader6() {\txslt = new xslcompiledtransform();\txmltextreader xrtemp = null;\ttry {\txslt.load(xrtemp);\t}\tcatch (system.argumentnullexception) {\treturn;\t}",
  "comclassinfo type",
  1
 ],
 [
  "public x () {\tint x, y;\ty = this.testme (out x).data;",
  "x is",
  0
 ],
 [
  "private static bool callsecondclassinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tif ((!(bool)(firstclassreturndynamicclass.staticmethod().instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "if (s13.f3 != 3+9) {\treturn 3;\t}\tif (s13.f4 != 4+9) {\treturn 4;\t}\tif (s13.f5 != 5+9) {\treturn 5;\t}\tif (s13.f6 != 6+9) {",
  "got but expected",
  0
 ],
 [
  "public async task negotiatestream_streamtostream_authtohttptarget_success() {\tif (!_iskrbavailable) {",
  "calling",
  1
 ],
 [
  "public void setusesimplereader (string[] parms) {\tif (parms.length != 2) {\treturn;\t}\tstring parm = parms[1].toupper ();\tif (parm.equals (\"true\")) usesimplereader = true;\telse if (parm.equals (\"false\")) usesimplereader = false;\t}\tpublic void setupsilentmode (string[] parms) {\tif (parms.length != 2) {",
  "error wrong number of parameters",
  0
 ],
 [
  "if (s6.f2 != 2+9) {\treturn 2;\t}\tif (s6.f3 != 3+9) {\treturn 3;\t}\tif (s6.f4 != 4+9) {\treturn 4;\t}\tif (s6.f5 != 5+9) {",
  "access friend private static method fail",
  1
 ],
 [
  "stringwriter expected = new stringwriter ();\texpected.writeline (\"\");\texpected.writeline (\"  -p, --indicator-style=value\");\texpected.writeline (\"      --color[=value]        controls color info\");\texpected.writeline (\"      --color2[=color]       set color\");\texpected.writeline (\"      --rk=value1:value2     required key/value option\");\texpected.writeline (\"      --rk2=key:value        required {foo} key/value option\");\texpected.writeline (\"      --rk3=value            required {foo}\");\texpected.writeline (\"      --rk4=val              required {foo} val\");\texpected.writeline (\"      --ok[=value1:value2]   optional key/value option\");",
  "andnowhitespaceshouldbesupportedevenwithlongdesc",
  0
 ],
 [
  "updatedjob.disable(disablejoboption.terminate);\twhile (updatedjob.state != jobstate.disabled) {\tthread.sleep(500);\tupdatedjob.refresh();\t}\tassert.equal(jobstate.disabled, updatedjob.state);\tbool updatedkeepalive = !originalkeepalive;\tupdatedjob.poolinformation.autopoolspecification.keepalive = updatedkeepalive;\tint updatedagainpriority = updatedpriority + 1;\tupdatedjob.priority = updatedagainpriority;",
  "color null",
  1
 ],
 [
  "}\t}\twriter.indent--;\twriter.writeline(\"}\");\tif (needdummyarraymethod) {\twriter.writeline();\twriter.write(\"object \");\twriter.write(dummyarraymethodname);\twriter.writeline(\"() {\");\twriter.indent++;",
  "failed to achieve write blocking on serial port no hardware flow control available",
  1
 ],
 [
  "e.handled = true;\t};\tapplicationevents.reopen += delegate (object sender, applicationeventargs e) {\tif (win != null) {\twin.deiconify ();\twin.visible = true;\te.handled = true;\t}\t};\t} catch (exception ex) {",
  "noncecache",
  1
 ],
 [
  "console.writeline ();\tif (assemblies.count == 1) console.writeline (\"one assembly processed in {0}.\", timetostring (total.elapsed));\tstring hint = string.empty;\tif (null != log_file || null != xml_file || null != html_file) {\tlist<string> files = new list<string> (new string [] { log_file, xml_file, html_file });\tfiles.removeall (string.isnullorempty);\thint = string.format (cultureinfo.currentculture, \"report{0} written to: {1}.\", (files.count > 1) ? \"s\" : string.empty, string.join (\",\", files.select (file => string.format (cultureinfo.currentculture, \"`{0}'\", file)).toarray ()));\t}\tif (defects.count == 0) console.writeline (\"no defect found. {0}\", hint);\telse if (defects.count == 1) console.writeline (\"one defect found. {0}\", hint);",
  "defects found",
  0
 ],
 [
  "throw new argumentexception(sr.format(sr.invalidparameter, nameof(machinename), machinename));\t}\tif (logname == null || logname.length == 0) logname = \"application\";\tif (!validlogname(logname, false)) throw new argumentexception(sr.badlogname);\tif (source == null || source.length == 0) throw new argumentexception(sr.format(sr.missingparameter, nameof(source)));\tif (source.length + eventlogkey.length > 254) throw new argumentexception(sr.format(sr.parametertoolong, nameof(source), 254 - eventlogkey.length));\tmutex mutex = null;\truntimehelpers.prepareconstrainedregions();\ttry {\tsharedutils.entermutex(eventlogmutexname, ref mutex);",
  "using system",
  1
 ],
 [
  "public void loadgeneric11(xslinputtype xslinputtype, readertype readertype, outputtype outputtype, navtype navtype) {\tif (navtype.tostring() == \"datadocument\") return;\telse {\tstring expected = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?><book> name </book>\";\tif (loadxsl(\"books_entity_ref.xsl\", xslinputtype.reader, readertype, new xmlurlresolver()) != 1) {",
  "extracting from",
  1
 ],
 [
  "private static intptr openprinter(string printer) {\ttry {\tintptr ptr = libcupsnative.cupsgetppd(printer);\tstring ppd_filename = marshal.ptrtostringansi(ptr);\tintptr ppd_handle = libcupsnative.ppdopenfile(ppd_filename);\treturn ppd_handle;\t}\tcatch (exception) {",
  "access friend private static method fail",
  1
 ],
 [
  "public void testcreateproperty (string input, string output) {\tstring result = runcontextaction (new createpropertyaction (), createmethoddeclarationtests.homogenizeeol (input));\tbool passed = result == output;\tif (!passed) {\tconsole.writeline (output);",
  "got",
  0
 ],
 [
  "private static bool objectwithreferenceconversionfromstringinassignment() {\tint failcount = 0;\tstring origin = \"aabb\";\tdynamic d = origin;\tobject result = d;\tif ((string)result != origin) {\tfailcount++;",
  "print",
  1
 ],
 [
  "static int main (string[] args) {\tappdomain.currentdomain.unhandledexception += (sender, exception_args) => {\tcustomexception exc = exception_args.exceptionobject as customexception;\tif (exc == null) {\t_exit (1);\t}\tconsole.writeline (exc.stacktrace);\tif (string.isnullorempty (exc.stacktrace)) {\t_exit (2);\t} else {",
  "success stacktrace is not null for unhandled exception",
  0
 ],
 [
  "static private void extendedhelp () {",
  "accepted incomplete element",
  1
 ],
 [
  "public static int test_0_abort_other () {\ttest test = (test) domain.createinstanceandunwrap (typeof (test).assembly.fullname, typeof (test).fullname);\tif (!remotingservices.istransparentproxy (test)) {\treturn 1;\t}\ttry {\ttest.abortother ();",
  "test failed at call result",
  1
 ],
 [
  "j++;\tcontinue;\t}\tif (text [i] != expected [j]) {\tbreak;\t}\ti++;j++;\t}\tbool passed = i == text.length && j == expected.length;\tif (!passed) {",
  "expected",
  0
 ],
 [
  "private static bool test11() {\tdouble a = 2.10d;\tdynamic b = a;\tb--;\tif (b == 1.10d) return true;",
  "failed double",
  0
 ],
 [
  "public virtual void dispose() {\tif (!_disposed) {\tif ((this.underlyingsearcher != null) && (this.underlyingsearcher is idisposable)) {",
  "principalsearcher dispose disposing underlying searcher of type",
  0
 ],
 [
  "if (compare (\"clear\", mask, ref stateindex, arguments, ref more_states)) {\tcontinue;\t}\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;\tif (with_result) {\tmtp.clear (out resulthint);",
  "assert areequal resulthint",
  0
 ],
 [
  "fail(\"error!!!: expected to read {0} bytes actually read {1}\", xmitbytebuffer.length, numread);\t}\tfor (int i = 0; i < xmitbytebuffer.length; i++) {\tif (xmitbytebuffer[i] != rcvbytebuffer[i]) {\tfail(\"error!!!: expected to read {0}  actual read  {1} at {2}\", (int)xmitbytebuffer[i], (int)rcvbytebuffer[i], i);\t}\t}\tassert.equal(0, com1.bytestoread);\tif(!retvalue) {\tfor(int i=0; i<xmitcharbuffer.length; ++i) {",
  "char",
  0
 ],
 [
  "public static int mainmethod() {\tint failcount = 0;\tdynamic d = new c1();\tif ((!(bool)(((c5)((dynamic)(((c2)d.m1()).p2 + 3))[4]).p5[6] + 7)) || (testcount.callcount != 7)) {\tfailcount++;",
  "handle is",
  1
 ],
 [
  "public int bar (int i, int j) {",
  "multicast addresses",
  1
 ],
 [
  "break;\tcase \"ns\": w.writestartattribute(\"xmlns\", \"foo\", null);\tbreak;\t}\tw.writebase64(buffer, 0, 5);\t}\tcatch (invalidoperationexception) {\treturn;\t}\t}",
  "bs left top",
  1
 ],
 [
  "public void parity_space_beforeopen() {",
  "did not throw exception",
  1
 ],
 [
  "private void extractcontractsinternal (method method, ref list<requires> preconditions, ref list<ensures> postconditions) {\tif (method == null) return;\tblock body = method.body;\tif (body == null || body.statements == null || body.statements.count <= 0) return;\tint lastblockcontainingcontract;\tint laststatementcontainingcontract;\tint begin = 0;\tbool contractsfound = findlastblockwithcontracts (body.statements, begin, out lastblockcontainingcontract, out laststatementcontainingcontract);\tif (!contractsfound) {",
  "no contracts found",
  0
 ],
 [
  "static public datacolumn getdatacolumnbyschemaaction(string sourcecolumn, string datasetcolumn, datatable datatable, type datatype, missingschemaaction schemaaction) {\tif (null == datatable) {\tthrow adp.argumentnull(\"datatable\");\t}\tif (adp.isempty(datasetcolumn)) {\t#if debug if (adapterswitches.dataschema.tracewarning) {",
  "the category of the new record is",
  1
 ],
 [
  "static private void help () {",
  "adding to the set",
  1
 ],
 [
  "static void run() {\tprocess proc = new process();\tbool ret;\tproc.startinfo.filename=\"wibble-redir\";\tproc.startinfo.arguments=\"arg1    arg2\\targ3 \\\"arg4a arg4b\\\"\";\tproc.startinfo.useshellexecute=false;\tproc.startinfo.redirectstandardinput=true;\tret=proc.start();",
  "successor of b is",
  1
 ],
 [
  "} catch (applicationexception) {\tconsole.writeline (\"x1a\");\tcounter = 1;\tawait task.delay (1);\tconsole.writeline (\"x2a\");\tcounter = 3;\tthrow;\t} catch {\tcounter = 9;\tawait task.delay (1);",
  "verifying read method throws exception after a call to cloes",
  1
 ],
 [
  "assert.true(false, string.format(\"    > failed.  no exception thrown (async).\"));\t}\tcatch (aggregateexception ae) {\tif (!(ae.innerexceptions[0] is taskschedulerexception)) {\tassert.true(false, string.format(\"    > failed.  wrong inner exception thrown from wait() (async): {0}\", ae.innerexceptions[0].gettype().name));\t}\t}\tcatch (exception e) {\tassert.true(false, string.format(\"    > failed.  wrong exception thrown (async): {0}\", e));\t}",
  "got but expected",
  1
 ],
 [
  "engine = info.engine;\tprojectinstance = engine.createprojectinstance (info.project);\ttry {\tforeach (var gpp in msbuildprojectservice.globalpropertyproviders) {\tforeach (var prop in gpp.getglobalproperties ()) engine.setglobalproperty (projectinstance, prop.key, prop.value);\t}\tforeach (var prop in globalproperties) engine.setglobalproperty (projectinstance, prop.key, prop.value);\tengine.evaluate (projectinstance, onlyevaluateproperties);\tsyncbuildproject (info.itemmap, info.engine, projectinstance);\t} catch (exception ex) {",
  "msbuild project could not be evaluated",
  0
 ],
 [
  "protected override void generateconditionstatement (codeconditionstatement statement) {\ttextwriter output = output;\toutput.write (\"if \");\tgenerateexpression (statement.condition);",
  "then",
  0
 ],
 [
  "methodinfo mi = a.entrypoint;\tif (mi == null) {\treturn;\t}\ttry {\tmi.invoke (null, null);\t}\tcatch (targetinvocationexception ex) {\t}\tcatch (exception ex) {",
  "failed",
  0
 ],
 [
  "public void log (string msg) {",
  "did not throw exception",
  1
 ],
 [
  "private async task operation(int opnumber) {\tif (operationsinprogress > 0) assert.true(false, $\"1: operation {opnumber} found {operationsinprogress} operationsinprogress.\");\toperationsinprogress++;\tvar delay = random.nexttimespan(timespan.fromseconds(2));\tawait task.delay(delay);\tif (operationsinprogress != 1) assert.true(false, $\"2: operation {opnumber} found {operationsinprogress} operationsinprogress.\");",
  "warning no relevant assemblies found for nukpkg nupkg",
  1
 ],
 [
  "public void writeattributes_8(xmlwriterutils utils) {\tif (isxpathdatamodelreader()) {\treturn;\t}\tusing (xmlwriter w = utils.createwriter()) {\tusing (xmlreader xr = createreader(\"simple.xml\")) {\txr.read();\tif (xr.nodetype != xmlnodetype.xmldeclaration) {",
  "pass path to machine config",
  1
 ],
 [
  "public void addextobject15(xslinputtype xslinputtype, readertype readertype, outputtype outputtype, navtype navtype) {\tmyobject obj = new myobject(15, _output);\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addextensionobject(szsimple, obj);\ttry {\tif ((loadxsl(\"myobjectdef.xsl\", xslinputtype, readertype) == 1)) transform_arglist(\"fruits.xml\", outputtype, navtype, true);\t}\tcatch (system.xml.xsl.xsltexception) {\treturn;\t}",
  "did not throw expected exception",
  0
 ],
 [
  "public static void main () {",
  "the compiler should complain error trying to use this outside context",
  0
 ],
 [
  "case \"-tp\": an = assemblyname.getassemblyname (args [i++]);\tbyte [] token = an.getpublickeytoken ();\tif (token == null) {\t} else {\t}\tbreak;\tcase \"-v\": filename = args [i++];\treturn verify (filename, false, quiet);\tcase \"-vf\": filename = args [i++];\treturn verify (filename, true, quiet);",
  "vl",
  0
 ],
 [
  "public static bool verifynode(xmlreader r, xmlnodetype eexpnodetype, string strexpname, string strexpvalue) {\tbool bpassed = true;\tif (r.nodetype != eexpnodetype) {\tbpassed = false;\t}\tif (r.name != strexpname) {",
  "expected name",
  0
 ],
 [
  "if (platformid.unix == environment.osversion.platform) info.environmentvariables [\"mono_iomap\"] = \"drive\";\tpw = runtime.processservice.startprocess (info, sw, sw, null);\t} catch (system.componentmodel.win32exception ex) {\treturn new compilererror (fname, 0, 0, string.empty, ex.message);\t}\tpw.waitforoutput ();\tif (pw.exitcode == 0) {\tfname = path.changeextension (fname, \".resources\");\t} else {\tstring output = sw.tostring ();",
  "unable to compile to resources reason",
  0
 ],
 [
  "public void mapped_execonfiguration_null () {\tsysconfig config = configurationmanager.openmappedexeconfiguration(null, configurationuserlevel.none);",
  "null mapped application config path",
  0
 ],
 [
  "public override void writeentry (string [] replacementstrings, eventlogentrytype type, uint instanceid, short category, byte [] rawdata) {\tlock (lockobject) {\tstring logdir = findlogstore (coreeventlog.log);\tint index = getlatestindex () + 1;\tstring logpath = path.combine (logdir, index.tostring (cultureinfo.invariantculture) + \".log\");\ttry {\tusing (textwriter w = file.createtext (logpath)) {",
  "entrytype",
  0
 ],
 [
  "public static void savehelpconfiguration() {\tstring configfile = system.io.path.combine(propertyservice.configdirectory, \"mshelpsystem.xml\");\ttry {\txmlserializer serialize = new xmlserializer(typeof(help3configuration));\ttextwriter file = new streamwriter(configfile);\tserialize.serialize(file, config);\tfile.close();",
  "helpviewer configuration successfully saved",
  0
 ],
 [
  "s15 =\"\";\ts15 = s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14;\tdump();\ti0 =0;\twhile (i0++ < i2) {\tgenerate();\tdump();\t}\tend = datetime.now;\tn2 = (end-start).totalmilliseconds;",
  "locked",
  1
 ],
 [
  "var v2 = checked(a.y1 += 1);\tret++;\t}\tcatch (system.overflowexception) {\t}\ttry {\tvar v3 = checked(a.z -= 1);\tret++;\t}\tcatch (system.overflowexception) {",
  "value of removed object is not as expected",
  1
 ],
 [
  "xattribute[] coreclratrs = actualxelement.attributes().orderby(m => m.value).toarray();\tif (deskatrs.length != coreclratrs.length) {\treturn false;\t}\tfor (int i = 0; i < deskatrs.length; i++) {\tif (deskatrs[i].isnamespacedeclaration != coreclratrs[i].isnamespacedeclaration) {\treturn false;\t}\tif (deskatrs[i].isnamespacedeclaration) {\tif (0 != string.compare(deskatrs[i].name.namespacename, coreclratrs[i].name.namespacename)) {",
  "error while saving monitor views xml",
  1
 ],
 [
  "public void loadgeneric3(inputtype inputtype, readertype readertype, transformtype transformtype, doctype doctype) {\tstring expected = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?><result> 1.no value specified 2.no value specified 3.no value specified 4.no value specified 5.no value specified 6.no value specified</result>\";\tif (loadxsl_resolver(\"showparam.xsl\", null, inputtype, readertype) == 1) {\tif (transform(\"fruits.xml\", transformtype, doctype) == 1) {\tverifyresult(expected);\treturn;\t}\telse assert.true(false);\t}\telse {",
  "failed to load style sheet",
  0
 ],
 [
  "cmd.parameters.add(\"@blob\", sqldbtype.varbinary, datasize);\tcmd.parameters[\"@blob\"].direction = parameterdirection.input;\tcmd.parameters[\"@blob\"].value = ms;\ttask t = cmd.executenonqueryasync(cts.token);\tif (!t.iscompleted) cts.cancel();\ttry {\tt.wait();\t}\tcatch (aggregateexception ae) {\tif (ae.innerexception is invalidoperationexception) {",
  "positioned on wrong element",
  1
 ],
 [
  "for (int i = 0; i < args.length; i++) {\tcmd.commandtext = system.io.file.readalltext(args[i]);\tcnn.open();\tcmd.executenonquery();\tcnn.close();\t}\tcmd.dispose();\tcnn.dispose();\t}\t#else if (args.length != 4) {",
  "calling close without first calling open",
  1
 ],
 [
  "public static void main(string[] args) {\tilist<char> lst = new arraylist<char>();\tlst.addall<char>(new char[] { 'a', 'b', 'c', 'd' });\tilist<char> v1 = lst.view(1, 1);\tconsole.writeline(\"v1 = {0}\", v1);\tinsertbeforefirst(v1, '<', 'b');\tinsertafterfirst(v1, '>', 'b');\tconsole.writeline(\"v1 = {0}\", v1);\tchar x;",
  "comobjinfo settype",
  1
 ],
 [
  "xmlvalidatingreader xvr = new xmlvalidatingreader (xtr);\txtr.normalization = true;\tdoc.load (xvr);\ttry {\txmlnodelist nodelist = doc.getelementsbytagname (\"signature\", signedxml.xmldsignamespaceurl);\txmlelement signature = (xmlelement) nodelist [0];\tsignedxml s = new signedxml ();\ts.loadxml (signature);\thmacsha1 mac = new hmacsha1 (key);\tif (s.checksignature (mac)) {",
  "else",
  1
 ],
 [
  "return true;\t}\tthis.changestatus (status.adding);\ttry {\tawait this.adddependencies (cancellationtoken.none).configureawait (false);\tawait this.onaddtoproject ().configureawait (false);\tawait this.storeaddedstate ().configureawait (false);\tthis.changestatus (this.getisaddedtoproject() ? status.added : status.notadded);\treturn true;\t} catch (exception ex) {",
  "an error occurred while adding the service to the project",
  0
 ],
 [
  "using (tcpclient serverconnection = await serveraccept) using (sslstream sslclientstream = new sslstream(clientconnection.getstream())) using (sslstream sslserverstream = new sslstream( serverconnection.getstream(), false, allowanyservercertificate)) {\tstring servername = _servercertificate.getnameinfo(x509nametype.simplename, false);\ttask clientauthentication = sslclientstream.authenticateasclientasync( servername, null, clientsslprotocols, false);\ttask serverauthentication = sslserverstream.authenticateasserverasync( _servercertificate, true, serversslprotocols, false);\ttry {\tawait clientauthentication.timeoutafter(timeout);\t}\tcatch (exception ex) {\t}\tawait serverauthentication.timeoutafter(timeout);",
  "server authenticated with encryption cipher bit strength",
  0
 ],
 [
  "while (receivedbatches < numbatches) {\tvar messages = receiver.getqueuemessagesasync(sqsstorage.max_number_of_message_to_peak).result.toarray();\tif (!messages.any()) {\tcontinue;\t}\tforeach (var message in messages.cast<sqsbatchcontainer>()) {\tstreamsperqueue.addorupdate(queueid, id => new hashset<istreamidentity> { new streamidentity(message.streamguid, message.streamguid.tostring()) }, (id, set) => {\tset.add(new streamidentity(message.streamguid, message.streamguid.tostring()));\treturn set;\t});",
  "queue received message on stream",
  0
 ],
 [
  "const int foo = 10;\tint j = blah.i;\tif (j != 5) return 1;\tif (foo != 10) return 1;\tfor (int i = 0; i < 5; ++i){\tconst int bar = 15;\tconsole.writeline (bar);\tconsole.writeline (foo);\t}\tif ((aaa + bbb) != 3) return 2;",
  "nic",
  1
 ],
 [
  "configuration.loadeddefaultproviders.add (pname);\tinitializing++;\tontoolboxcontentschanged ();\tsystem.threading.threadpool.queueuserworkitem (delegate {\tif (!runtime.initialized) return;\tlist<itemtoolboxnode> nodes = new list<itemtoolboxnode> ();\ttry {\tienumerable<itemtoolboxnode> newitems = provider.getdefaultitems ();\tif (newitems != null) nodes.addrange (newitems);\t} catch (exception ex) {",
  "error getting default items from a itoolboxdefaultprovider",
  0
 ],
 [
  "public void add(intptr handle) {\tlock (this) {\tint hash = computehash(handle);\tif (compmodswitches.handleleak.level >= tracelevel.info) {\tdebug.writeline(\"-------------------------------------------------\");",
  "name uri value",
  1
 ],
 [
  "static void trygdb (int pid, processdata data) {\tstring filename = path.gettempfilename ();\tusing (streamwriter sw = new streamwriter (new filestream (filename, filemode.open, fileaccess.write))) {",
  "attach",
  0
 ],
 [
  "private static bool callsecondstructinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturndynamicstruct();\tif ((!(bool)(s[1].instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "appdomain.currentdomain.assemblyresolve += new resolveeventhandler (myresolveeventhandler);\tevent_handler_count = 0;\ttry {\tassembly a = assembly.loadfile (path.combine (directory.getcurrentdirectory (), \"assemblyresolve_asm.dll\"));\tforeach (type t in a.gettypes ()) {\t}\t} catch (exception ex) {\treturn 1;\t}\tif (event_handler_count != expected_count) {",
  "expected myresolveeventhandler to be called expected count but was called event handler count",
  0
 ],
 [
  "static void main(string[] args) {\ttcplistener listener = new tcplistener(port);\tlistener.start();",
  "waiting for test to begin",
  0
 ],
 [
  "if (testrunner.test == null) {\ttestrunner.unload();\treturn fixture_not_found;\t}\teventcollector collector = new eventcollector( options, outwriter, errorwriter );\ttestfilter testfilter = testfilter.empty;\tif ( options.run != null && options.run != string.empty ) {\ttestfilter = new simplenamefilter( options.run );\t}\tif ( options.include != null && options.include != string.empty ) {",
  "included categories",
  0
 ],
 [
  "public new virtual void writebreak() {\tif (usedivsforbreaks) {\tif((string)device[\"usepoverdiv\"] == \"true\") writeline(\"<br/>\");\t}\telse {",
  "calling printname",
  1
 ],
 [
  "public void getextobject11(xslinputtype xslinputtype, readertype readertype, outputtype outputtype, navtype navtype) {\tmyobject obj = new myobject(11, _output);\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addextensionobject(szdefaultns, obj);\tfor (int i = 0; i < 500; i++) {\tretobj = m_xsltarg.getextensionobject(szdefaultns);\tif (((myobject)retobj).myvalue() != obj.myvalue()) {",
  "numsucceededtasks",
  1
 ],
 [
  "public void stopbits_2_beforeopen() {",
  "verifying stopbits before open",
  0
 ],
 [
  "private static bool test3() {\tdecimal[] decimalvalues = new decimal[]\t{\t1m, 10.10m, 100.01m, 0m }\t;\tforeach (decimal a2 in decimalvalues) {\tdynamic d2 = a2;\tif ((2m * d2) != (2m * a2)) {",
  "failed decimal decimal",
  0
 ],
 [
  "}\t});\tthread.start ();\tdriver.mre1.waitone ();\tif (driver.mre2.waitone (500)) {\tenvironment.exit (4);\t}\tthread.join ();\ttry {\tisstaticconstructor2viable ();",
  "test type",
  1
 ],
 [
  "public virtual void validate(csharpastresolver resolver, syntaxtree syntaxtree) {\tforeach (astnode node in syntaxtree.descendantsandself.except(resolvednodes.keys)) {\tif (!csharpastresolver.isunresolvablenode(node)) {\tif (!node.ancestors.any(a => a is preprocessordirective)) {",
  "forgot to resolve",
  0
 ],
 [
  "usage ();\treturn false;\t}\tif (opts.appname == null){\tstring t = path.changeextension (opts.assembly, null);\tint p = t.indexof (path.directoryseparatorchar);\tif (p != -1) t = t.substring (p+1);\topts.appname = t;\t}\tif (directory.exists (path.combine (opts.output, string.format (\"{0}.app\", opts.appname)))) {",
  "error that application already exists please delete it first",
  0
 ],
 [
  "string monolibrarypath = getmonolibrarypath (program, staticlinkmono, staticlinkcruntime);\tif (!file.exists (monolibrarypath) && program.isvstoolchain) {\tstring gcccompiler = target64bitapplication () ? \"x86_64-w64-mingw32-gcc.exe\" : \"i686-w64-mingw32-gcc.exe\";\tprogram = new toolchainprogram (gcccompiler, gcccompiler);\t}\treturn program;\t}\tstatic toolchainprogram getlibrarian () {\ttoolchainprogram vclibrarian = visualstudiosdktoolchainhelper.getinstance ().getvclibrarian ();\tif (vclibrarian == null || vclibrarian.path.length == 0) {",
  "err exception caught in scenario",
  1
 ],
 [
  "try {\tthread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();\t} finally {\t}\ttry {\tthread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();",
  "abort reset",
  0
 ],
 [
  "ts.writeline ();\t}\tts.close ();\tif (compress) tc.writeline (\"\\nstatic const compressedassembly *compressed [] = {\");\telse tc.writeline (\"\\nstatic const monobundledassembly *bundled [] = {\");\tforeach (string c in c_bundle_names){\ttc.writeline (\"\\t&{0},\", c);\t}\tforeach (string asm in aot_names){\t}",
  "static void install aot modules void",
  0
 ],
 [
  "public void preservesbody() {\ttest<removecatchexceptioncoderefactoringprovider>(@\" class testclass {\tpublic void f() {\ttry {\t} $catch (system.exception e) {",
  "assert areequal resulthint",
  1
 ],
 [
  "public void attach(designerview viewcontent) {\tif (viewcontent == null) throw new argumentnullexception(\"viewcontent\");",
  "designergenerator attach",
  0
 ],
 [
  "private static bool inwhilestatement0() {\tint failcount = 0;\tc origin = new c(0);\tdynamic d = origin;\twhile (!d) {\tfailcount++;",
  "verifying read method throws argumentexcpetion with a null newline string",
  1
 ],
 [
  "if (servertotalbytesreceived < 5) {\treturn task.fromresult<string>(null);\t}\telse {\treturn task.fromresult(httpstestserver.options.defaultresponsestring);\t}\t});\tstring requesturistring = \"https: tasks[1] = client.getstringasync(requesturistring);\tawait task.whenall(tasks).timeoutafter(15 * 1000);\tif (serverauxrecorddetectedinconclusive) {",
  "onunload",
  1
 ],
 [
  "try {\tvd.m(dynpara, str);\t}\tcatch (microsoft.csharp.runtimebinder.runtimebinderexception e) {\tif (errorverifier.verify(errormessageid.cantinfermethtypeargs, e.message, \"s.m<t>(t, t)\")) ret--;\t}\tdynpara = null;\tint n = 0;\ttry {\tvv.m(dynpara, n);",
  "no ex",
  0
 ],
 [
  "const int iterations = 2000;\twritealot_async(testname, 3, iterations, iterations);\tstopwatch sw = stopwatch.startnew();\tvar data = manager.readalltableentriesasync() .waitforresultwiththrow(azuretabledefaultpolicies.tablecreationtimeout).select(tuple => tuple.item1);\tsw.stop();\tint count = data.count();\tassert.true(count >= iterations, $\"readallshould return some data: found={count}\");\tsw = stopwatch.startnew();\tmanager.cleartableasync().waitwiththrow(azuretabledefaultpolicies.tablecreationtimeout);\tsw.stop();",
  "adstorectx cannotchangepwdtoldapconverter remove deny world",
  1
 ],
 [
  "public override bool onstart() {",
  "status",
  1
 ],
 [
  "thread.resetabort();\t} finally {\t}\ttry {\tthread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();\t} finally {\t}\ttry {",
  "thread running",
  0
 ],
 [
  "static void main(string[] args) {\ttry {\t_configuration cfg = configurationmanager.openexeconfiguration (configurationuserlevel.none);\tcompilationsection section = (compilationsection)cfg.getsection (\"system.web/compilation\");\tsection = (compilationsection)cfg.getsection (\"system.web/compilation\");",
  "mvid directory should include one assembly",
  1
 ],
 [
  "public void writeformatheader(solutionformatversion version) {\twriter.writeline();\tswitch (version) {\tbreak;\tbreak;",
  "bad view hash offset size end index underlying size",
  1
 ],
 [
  "static void main (string[] args) {\tif (args.length < 2) {\tconsole.writeline ();\tenvironment.exit (1);\t}\tif (!directory.exists (args [0])) {",
  "sequence directory cannot be found",
  0
 ],
 [
  "foreach (xmlschemaattribute attribute in derivedtype.attributeuses.values) {\txmlschemaattribute attributebase = (xmlschemaattribute)basetype.attributeuses[attribute.qualifiedname];\tif (attributebase != null) {\tcontinue;\t}\tif (baseattributewildcard == null || !baseattributewildcard.allows(attribute.qualifiedname)) {\t#if debug string position = string.empty;\tif (derivedtype.sourceuri != null) {\tposition = \" in \" + derivedtype.sourceuri + \"(\" + derivedtype.linenumber + \", \" + derivedtype.lineposition + \")\";\t}",
  "test failed conversion result is incorrect",
  1
 ],
 [
  "static void generate_receptors () {\tforeach (string t in types){\tw (\"\\tstatic void receive_\" + t + \" (\" + t + \" a)\\n\\t{\\n\");\tw (\"\\t\\tconsole.write (\\\"        \\\");\\n\");",
  "verifying bytestowrite with successive calls to write",
  1
 ],
 [
  "public void getparam8() {\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(\"myarg1\", szempty, \"test8\");\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);",
  "loaded custom generator type",
  1
 ],
 [
  "public void getparam6() {\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(szlongstring, szempty, \"test6\");\tretobj = m_xsltarg.getparam(szlongstring, szempty);",
  "incorrect at",
  1
 ],
 [
  "}\tpublic static ienumerable<test> operator + (test test, test foo) {\tyield return test;\tyield return foo;\t}\tpublic ienumerable<int> foo {\tget {\tyield return 3;\t}\tset {",
  "assembly is strongnamed",
  1
 ],
 [
  "nativemethods.postmessage(new handleref(this, mainwindowhandle), nativemethods.wm_close, intptr.zero, intptr.zero);\treturn true;\t}\t#endif void releaseprocesshandle(safeprocesshandle handle) {\tif (handle == null) {\treturn;\t}\tif (haveprocesshandle && handle == m_processhandle) {\treturn;\t}",
  "wins addresses",
  1
 ],
 [
  "static int test_0_root_keeps_child () {\tfinalizerhelpers.performnopinaction (setuplinks);\tgc.collect ();\tgc.waitforpendingfinalizers ();\tconsole.writeline (\"a is null {0}\", a == null);\tconsole.writeline (\"b is null {0}\", b == null);\tif (a == null || b == null) return 1;",
  "finally in domain",
  1
 ],
 [
  "}\tstringwriter sw = new stringwriter ();\tif (statusline.startswith (\"post /original/\")) {\tendpoint ep = socket.localendpoint;\tsw.flush ();\t} else if (statusline.startswith (\"get /moved/\")) {\tsw.writeline ();\tsw.write (\"looks ok\");\tsw.flush ();\t} else {",
  "visit unknown expression",
  1
 ],
 [
  "public void swallowerrorscatchingallnoemptycatchblock () {\ttry {\tfile.open (\"foo.txt\", filemode.open);\t}\tcatch {",
  "has happened an exception",
  0
 ],
 [
  "private void checkrowversion(datarow dr) {\tconsole.writeline(\"\");",
  "has",
  0
 ],
 [
  "private static bool nullabledecimaltypewithnumbericconversionfromulonginassignment() {\tint failcount = 0;\tulong? origin = ulong.maxvalue;\tdynamic d = origin;\tdecimal? result = d;\tif (result != origin) {\tfailcount++;",
  "test failed at conversion result",
  0
 ],
 [
  "static ldapbackuprequest() {\ttry {\tldapextendedresponse.register( backuprestoreconstants.nldap_ldap_backup_response, type.gettype(\"novell.directory.ldap.extensions.ldapbackupresponse\"));\t}\tcatch (typeloadexception e) {",
  "could not register extended response class not found",
  0
 ],
 [
  "public void publicmethod () {",
  "got but expected",
  1
 ],
 [
  "while (pendingpollcount < 11) {\tvar pendingcertificateresponse = task.run(() => keyvaultclient.getcertificateoperationasync(vaultaddress, pendingcertificate.certificateoperationidentifier.name)) .configureawait(false).getawaiter().getresult();\tprintoutcertificateoperation(pendingcertificateresponse);\tif (0 == string.compare(pendingcertificateresponse.status, \"inprogress\", true)) {\tthread.sleep(timespan.fromseconds(5));\tpendingpollcount++;\tcontinue;\t}\tif (0 == string.compare(pendingcertificateresponse.status, \"completed\", true)) {\tvar certbundle = task.run(() => keyvaultclient.getcertificateasync(pendingcertificateresponse.target)).configureawait(false).getawaiter().getresult();",
  "failed float",
  1
 ],
 [
  "public void ipinfotest_accessallproperties_noerrors() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {",
  "supports",
  0
 ],
 [
  "}\tif (generatortype == null) error (generatortypenotfound, typename);\t}\tif (generatortype != null) {\tif (!generatortype.issubclassof (typeof (codedomprovider))) error (generatortypeisnotcodegenerator, typename);\ttry {\tprovider = (codedomprovider) activator.createinstance (generatortype, null);\t} catch (exception ex) {\terror (generatorthrewexception, generatortype.assemblyqualifiedname.tostring () + \" --> \" + ex.message);\t}",
  "null exception argumentnullexception throws as expected when trying to pass taskmanager to startnew on",
  1
 ],
 [
  "_foreignresultset = null;\treturn true;\t}\telse {\tif (!_groupsvisited.contains(de.path) && !_groupstovisit.contains(de.path)) _groupstovisit.add(de.path);\tneedtoretry = true;\tcontinue;\t}\t}\telse {",
  "verifying setting breakstate to true then false",
  1
 ],
 [
  "public override string tostring () {\tstringwriter sw = new stringwriter ();",
  "warningtotal",
  0
 ],
 [
  "public void logblockend (functionid functionid, logmessage logmessage, int uniquepairid, int delta, cancellationtoken cancellationtoken) {",
  "roslyn error",
  0
 ],
 [
  "private static void printhelp() {\tconsole.writeline();\tconsole.writeline();\tconsole.writeline();",
  "the compiler should complain error trying to use this outside context",
  1
 ],
 [
  "public void var4() {\ttry {\t#pragma warning disable 0618 new xsltransform().load((xmlreader)null, (xmlresolver)null);\t#pragma warning restore 0618 }\tcatch (argumentnullexception) {\treturn;\t}\tcatch (exception e) {\t_output.writeline(e.tostring());",
  "public class driver",
  1
 ],
 [
  "} else if (file == this.primaryfile || this.sourcecodestorage.containsfile(file)) {\tif (this.loader != null && this.loader.loading) {\tthrow new invalidoperationexception(\"designer loading a source code file while designerloader is loading and the view is not in a master load operation. this must not happen.\");\t}\tif (this.designsurface != null) {\tthis.unloaddesigner();\t}\tthis.inmasterloadoperation = true;\ttry {\tthis.sourcecodestorage.loadfile(file, stream);",
  "success",
  1
 ],
 [
  "if (services.projectservice.isworkspaceitemfile (projectfile)) {\titem = await services.projectservice.readworkspaceitem (monitor, projectfile);\tif (projects.count > 0) {\tsolution sol = item as solution;\tif (sol == null) {\treturn 1;\t}\tfor (int n=0; n<projects.count; n++) {\tstring pname = projects [n];\tif (pname.length == 0) {",
  "error removing case in the second batch from this test",
  1
 ],
 [
  "public static int test_0_abort_finally_and_cancel () {\tfinally_done = false;\tresult = 0;\taction ac = guardfromeh1;\thandle = new manualresetevent (false);\tvar res = ac.begininvoke (null, null);\thandle.waitone ();\tthread.abort ();",
  "eventlog openforread",
  1
 ],
 [
  "outputline (@\"       \\close to close the connection\");\toutputline (@\"       \\e to execute sql query (select)\");\toutputline (@\"       \\h to show help (all commands).\");\toutputline (@\"       \\defaults to show default variables.\");\toutputline (\"\");\t}\tpublic void showhelp () {\tconsole.writeline (\"\");\tif (!waitforenterkey ()) return;\tif (!waitforenterkey ()) return;",
  "generate code for",
  1
 ],
 [
  "public basicmethoddriver (method method, ibasicanalysisdriver parent) {\tthis.method = method;\tthis.parent = parent;\trawlayer = codelayerfactory.create ( this.parent.subroutinefacade.getcontrolflowgraph (method).getdecoder (parent.metadataprovider), parent.metadataprovider, parent.contractprovider, dummy => \"\", dummy => \"\");\tif (debugoptions.debug) {\trawlayer.ildecoder.contextprovider.methodcontext.cfg.print (console.out, rawlayer.printer, null, null);\t}\tstacklayer = codelayerfactory.create ( stackdepthfactory.create (rawlayer.ildecoder, rawlayer.metadataprovider), rawlayer.metadataprovider, rawlayer.contractprovider, (i => \"s\" + i.tostring ()), i => \"s\" + i.tostring () );\tif (debugoptions.debug) {",
  "chars zzz chars",
  1
 ],
 [
  "return resultaction;\t};\tawait synchronizationcontexthelper.runtestasync(async () => {\tstagingstorageaccount storagecredentials = testutilities.getstoragecredentialsfromenvironment();\tusing (batchclient batchcli = await testutilities.openbatchclientfromenvironmentasync()) {\tbatchclientparalleloptions paralleloptions = new batchclientparalleloptions() {\tmaxdegreeofparallelism = 2 };\tawait this.addtaskssimpletestasync( batchcli, testname, 1281, paralleloptions, resulthandlerfunc, storagecredentials, new list<string> { \"testresources\\\\data.txt\" }, usejoboperations: usejoboperations).configureawait(false);\t}\t}, longtesttimeout);",
  "forced a total of tasks to retry",
  0
 ],
 [
  "public void saveviews () {\ttry {\txmldataserializer ser = new xmldataserializer (new datacontext ());\tser.serialize (configfile, views);\t} catch (exception ex) {",
  "convert from got result string object",
  1
 ],
 [
  "private void runtest() {",
  "starting test tvptest",
  0
 ],
 [
  "public static void main() {\te = new manualresetevent(false);\tthreadstart thread_1 = new threadstart(threadmethod_waiter_1);\tthreadstart thread_2 = new threadstart(threadmethod_waiter_2);",
  "main creating second thread",
  0
 ],
 [
  "assert.true(false);\t}\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writestartattribute(\"attr\");\tw.writeattributes(xr, false);\tw.writeendelement();\t}\tcatch (exception e) {",
  "exception",
  0
 ],
 [
  "private static void printoutstorageaccount(storagebundle storagebundle) {",
  "arm storage account resource id",
  0
 ],
 [
  "public void foo () {",
  "test failed conversion result is incorrect",
  1
 ],
 [
  "if (myparameter3.value == dbnull.value) sinoutvalue = \"dbnull.value\";\telse {\tinoutvalue = (datetime)myparameter3.value;\tsinoutvalue = inoutvalue.tostring(\"yyyy-mm-dd hh:mm:ss\");\t}\tif (myparameter4.value == dbnull.value) sreturnvalue = \"dbnull.value\";\telse {\treturnvalue = (datetime)myparameter4.value;\tsreturnvalue = returnvalue.tostring(\"yyyy-mm-dd hh:mm:ss\");\t}",
  "value should be dbnull value",
  0
 ],
 [
  "writestatus(string.format(\"**lookupgrain finished ok. lookup result is:\"));\tvar list = lookupresult.addresses;\tif (list == null) {\twritestatus(string.format(\"**the returned activation list is null.\"));\treturn;\t}\tif (list.count == 0) {\twritestatus(string.format(\"**the returned activation list is empty.\"));\treturn;\t}",
  "from p in db products orderby p productname select p",
  1
 ],
 [
  "if (eh.filterstart != null) continue;\ttypereference ctype = eh.catchtype;\tif (!(ctype == null || ctype.isnamed (\"system\", \"object\") || ctype.isnamed (\"system\", \"exception\"))) continue;\tint start_index = instructions.indexof (eh.trystart);\tint end_index = instructions.indexof (eh.tryend);\tfor (int j = start_index; j < end_index; j++) is_safe [j] = true;\t}\t}\tvalid_ex_handler = !is_safe.contains (false);\tfor (int i = 0; i < is_safe.count; i++) {",
  "y n",
  0
 ],
 [
  "private static bool callsecondclassinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturnclass();\tif ((!(bool)(((dynamic)s[1]).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "root",
  1
 ],
 [
  "foreach (peer peer in peer_map.peers) {\tdg.addnode (peer);\tif (peer.nearestbase != null) dg.addedge (peer.nearestbase, peer);\tforeach (peerfield field in peer.fields) {\tif (field.peer.isvaluetype) dg.addedge (field.peer, peer);\t}\t}\tforeach (peer peer in dg.topologicalsort ()) {\tif (peer.isopaque) continue;\tif (peer.isenum) {",
  "componentlibraryloader loadtoolcomponentlibrary",
  1
 ],
 [
  "xmlreadersettings wrs = new xmlreadersettings();\twrs.dtdprocessing = dtdprocessing.ignore;\twrs.checkcharacters = true;\twrs.conformancelevel = conformancelevel.auto;\tif (sr != null) {\txmlreader r = readerhelper.create(sr, rs, string.empty);\txmlreader wr = readerhelper.create(r, wrs);\treturn wr;\t}\tif (stream != null) {",
  "charcheckingreader stream",
  0
 ],
 [
  "private bool movenextqueryprimarygroupmember() {\tbool f = false;\tif (_primarygroupmemberssearcher != null) {\tif (_querymembersresults == null) {",
  "visit unknown expression",
  1
 ],
 [
  "public static void write(pofile po, string outpath) {\tusing (var stream = file.open(outpath, filemode.create)) using (var writer = new streamwriter(stream)) {\tforeach (var line in po.copyrightheader) writer.writeline(line);",
  "message",
  1
 ],
 [
  "cloudjobschedule boundjobschedule = null;\t{\tstring jobscheduleid = microsoft.azure.batch.constants.defaultconvenienceprefix + testutilities.getmyname() + \"-\" + testname;\ttry {\tcloudpool pool = pooloperations.getpool(this.poolfixture.poolid);\tpool.metadata = new list<metadataitem>();\tpool.metadata.add(new metadataitem(\"test\", \"test\"));\tpool.commit();\tpool = pooloperations.getpool(this.poolfixture.poolid);\tassert.equal(1, pool.metadata.count);",
  "creating job schedule",
  0
 ],
 [
  "string [] list = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\" };\tint top = 0;\tforeach (string s in tester){\tif (s != list [top]){\treturn 1;\t}\ttop++;\t}\tif (top != list.length){\t}",
  "typedserializers add res mapping getkey new",
  1
 ],
 [
  "public static bool writefile(intptr hfile, byte [] lpbuffer, uint nnumberofbytestowrite, out uint lpnumberofbyteswritten, intptr lpoverlapped) {",
  "atsp",
  1
 ],
 [
  "public override void run() {",
  "adstorectx cannotchangepwdfromldapconverter fallback assume user can change pwd",
  1
 ],
 [
  "}\tcatch( filenotfoundexception ex ) {\tconsole.writeline( ex.message );\treturn consoleui.file_not_found;\t}\tcatch( exception ex ) {\treturn consoleui.unexpected_error;\t}\tfinally {\tif(options.wait) {",
  "hit enter key to continue",
  0
 ],
 [
  "writer.write(mappings.length.tostring(cultureinfo.invariantculture));\twriter.writeline(\"];\");\tinitializevaluetypes(\"p\", mappings);\tif (haswrapperelement) {\twritereadnonroots();\tif (membersmapping.validaterpcwrapperelement) {\twriter.write(\"if (!\");\twritexmlnodeequal(\"reader\", element.name, element.form == xmlschemaform.qualified ? element.namespace : \"\");\t}\twriter.writeline(\"bool isemptywrapper = reader.isemptyelement;\");",
  "reader readstartelement",
  0
 ],
 [
  "int prelistnodefilescount = interceptorcount;\tvar files = batchcli.joboperations.listnodefiles(bug1959324jobid, taskidhello, recursive: true).tolist();\tassert.true(interceptorcount > prelistnodefilescount);\tint prelistjobscount = interceptorcount;\tvar jobs = batchcli.joboperations.listjobs().tolist();\tassert.true(interceptorcount > prelistjobscount);\tint prelistpoolscount = interceptorcount;\tvar pools = batchcli.pooloperations.listpools().tolist();\tassert.true(interceptorcount > prelistpoolscount);\tprotocol.batchrequestmodificationintercepthandler yieldinjectioninterceptor = baserequest => {",
  "assert areequal out",
  1
 ],
 [
  "public async void voidmethodwithoutawait() {",
  "allocationstate",
  1
 ],
 [
  "static void dopostgrestest (idbconnection cnc) {\tidatareader reader;\tobject odatavalue;\ttry {\tdroptable (cnc);\t}\tcatch (pgsqlexception e) {\t}\ttry {",
  "test failed at call result",
  1
 ],
 [
  "finally {\tmounthelper.unmount(mounteddirname);\tdeletedir(mounteddirname, true);\t}\t}\telse {\t}\t}\tcatch (exception ex) {\ts_pass = false;",
  "err exception caught in scenario",
  0
 ],
 [
  "public void basictest_getipinterfacestatistics_success() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfacestatistics stats = nic.getipstatistics();",
  "incomingpacketswitherrors",
  0
 ],
 [
  "await call ();\tconsole.writeline (\"x2a\");\t++counter;\t} catch {\tconsole.writeline (\"x1b\");\tcounter += 4;\tawait call ();\tconsole.writeline (\"x2b\");\tcounter += 7;\t}",
  "main thread exiting",
  1
 ],
 [
  "public void printoutput () {\tforeach (string outputline in output) {\tconsole.writeline (outputline);\t}",
  "output end",
  0
 ],
 [
  "public async task bug1360227_addtasksbatchretry(bool usejoboperations) {\tconst string testname = \"bug1360227_addtasksbatchretry\";\trandom rand = new random();\tobject randlock = new object();\tint numberoftaskswhichhitclienterror = 0;\tint numberoftaskswhichwereforcedtoretry = 0;\tfunc<addtaskresult, cancellationtoken, addtaskresultstatus> resulthandlerfunc = (result, token) => {",
  "task got status code",
  0
 ],
 [
  "catch (sqlexception se) {\tdropserverobjects(tvpperm);\titer++;\tcontinue;\t}\ttry {\tparam.value = createlistofrecords(tvpperm, basevalues);\texecuteandverify(cmd, tvpperm, basevalues, null);\t}\tcatch (argumentexception ae) {",
  "argument exception in value setup",
  0
 ],
 [
  "try {\tint interceptorcount = 0;\tbatchcli.custombehaviors.add(new protocol.requestinterceptor((o) => { interceptorcount++; this.testoutputhelper.writeline(\"test: random interceptor\"); }));\tstring taskidhello;\t{\tint presetupcount = interceptorcount;\tcloudpool sharedpool = batchcli.pooloperations.getpool(this.poolfixture.poolid);\ttestutilities.helloworld(batchcli, this.testoutputhelper, sharedpool, out bug1959324jobid, out taskidhello, deletejob: false);\tassert.true(interceptorcount > presetupcount);\t}",
  "listnodefiles",
  0
 ],
 [
  "public static implicit operator short (blah i) {",
  "test f from delegate",
  1
 ],
 [
  "private static bool userdefinedenumwithidentityconversioninassignment() {\tint failcount = 0;\te origin = e.one;\tdynamic d = origin;\te result = d;\tif (result != origin) {\tfailcount++;",
  "value should be dbnull value",
  1
 ],
 [
  "public static void printlogfunction (string domain, loglevelflags level, string message) {",
  "message",
  0
 ],
 [
  "public static void main () {",
  "out",
  0
 ],
 [
  "_currentforeign = null;\treturn true;\t}\tif (_foreigngroups.count > 0) {\t_foreignresultset.dispose();\t_foreignresultset = null;\tdebug.assert(_foreignmembers.count == 0);\tneedtoretry = true;\t}\telse {",
  "dfs",
  1
 ],
 [
  "}\t}\tusing (exceptionbox box = new exceptionbox(exception, message, mustterminate)) {\tif (sd.mainthread.invokerequired) {\tbox.showdialog();\t} else {\tbox.showdialog(sd.winforms.mainwin32window);\t}\t}\t} catch (exception ex) {",
  "datatype",
  1
 ],
 [
  "private static void dumpdecimalhelperparts(int index) {\tsqldecimal sqldecimalvalue = 10;\tconsole.writeline(\"private static readonly uint32[] {0} = {{\", helpernames[index]);\tfor (int precision = 2; precision <= sqldecimal.maxprecision; precision++){",
  "uninstalls one or more assemblies from the global assembly cache",
  1
 ],
 [
  "public static int main() {\tint[] arr = {1};\ttype t = arr.gettype ();",
  "type is",
  0
 ],
 [
  "public toolboxservice() {",
  "create tolboxservice",
  0
 ],
 [
  "public bool editfile (filepath filepath, action<itextdocument> operation) {\tif (operation == null) throw new argumentnullexception (\"operation\");\tbool isopen;\tvar data = gettexteditordata (filepath, out isopen);\toperation (data);\tif (!isopen) {\ttry {\tdata.save ();\t} catch (exception e) {",
  "fillcolortable mygetsystempaletteentries failed",
  1
 ],
 [
  "private void checkparticlederivation(xmlschemacomplextype complextype) {\txmlschemacomplextype basetype = complextype.basexmlschematype as xmlschemacomplextype;\tif (basetype != null && basetype != xmlschemacomplextype.anytype && complextype.derivedby == xmlschemaderivationmethod.restriction) {\tif (!isvalidrestriction(complextype.contenttypeparticle, basetype.contenttypeparticle)) {\t#if debug if (complextype.contenttypeparticle != null && basetype.contenttypeparticle != null) {\tstring position = string.empty;\tif (complextype.sourceuri != null) {\tposition = \" in \" + complextype.sourceuri + \"(\" + complextype.linenumber + \", \" + complextype.lineposition + \")\";\t}",
  "invalid complextype content restriction",
  0
 ],
 [
  "console.writeline($\"orleans-codegen - options {environment.newline}\\tinputlib={options.inputassembly.fullname}{environment.newline}\\toutputfilename={options.outputfilename}\");\tbool referencesorleans = options.inputassembly.name.equals(codegenerator.orleansassemblyfilename);\tforeach (string assembly in options.referencedassemblies) {\tvar filename = path.getfilename(assembly);\tconsole.writeline(\"\\t{0} => {1}\", filename, assembly);\tif (filename != null && filename.equals(codegenerator.orleansassemblyfilename)) referencesorleans = true;\t}\tvar stopwatch = stopwatch.startnew();\tif (referencesorleans) {\tif (!codegenerator.generatecode(options)) {",
  "mdict count is",
  1
 ],
 [
  "public async void twoawaitswithdifferentawaitertypes() {",
  "before",
  0
 ],
 [
  "static void generate_receptors () {\tforeach (string t in types){\tw (\"\\tstatic void receive_\" + t + \" (\" + t + \" a)\\n\\t{\\n\");\tw (\"\\t\\tconsole.write (\\\"        \\\");\\n\");",
  "reader does not appear to be at the end of file",
  1
 ],
 [
  "private bool parsearguments(string[] args) {\tstring deploymentid = null;\tstring siloname = dns.gethostname();\tint argpos = 1;\tfor (int i = 0; i < args.length; i++) {\tstring a = args[i];\tif (a.startswith(\"-\") || a.startswith(\"/\")) {\tswitch (a.tolowerinvariant()) {\tcase \"/?\": case \"/help\": case \"-?\": case \"-help\": return false;",
  "hello",
  1
 ],
 [
  "openfiledialog dlg = new openfiledialog (\"export rules\", monodevelop.components.filechooseraction.save);\tdlg.initialfilename = \"rules.html\";\tif (!dlg.run ()) return;\tdictionary<codediagnosticdescriptor, diagnosticseverity?> severities = new dictionary<codediagnosticdescriptor, diagnosticseverity?> ();\tvar language = coderefactoringservice.mimetypetolanguage (lang);\tforeach (var node in options.alldiagnostics.where (x => x.languages.contains (language))) {\tseverities [node] = node.diagnosticseverity;\t}\tvar grouped = severities.keys.oftype<codediagnosticdescriptor> () .groupby (node => node.getprovider ().supporteddiagnostics.first ().category) .orderby (g => g.key, stringcomparer.ordinal);\tusing (var sw = new streamwriter (dlg.selectedfile)) {",
  "updated storage account",
  1
 ],
 [
  "public int variation_18() {\treloadsource();\tstring strempty = string.empty;\tobject objadded = datareader.nametable.add(strempty);\tobject objadded1 = datareader.nametable.add(strempty.tochararray(), 0, strempty.length);\tobject objactual1 = datareader.nametable.get(strempty.tochararray(), 0, strempty.length);\tobject objactual2 = datareader.nametable.get(strempty);",
  "thread a started",
  1
 ],
 [
  "public static void creategenerictestfile(string strfilename) {\tfilepathutil.addstream(strfilename, new memorystream());\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"no\\\"?>\");\ttw.writeline(\"<!-- comment1 -->\");\ttw.writeline(\"<?pi1a?>\");\ttw.writeline(\"<?pi1b?>\");\ttw.writeline(\"<?pi1c?>\");",
  "error removing case from this test",
  1
 ],
 [
  "static void function () {",
  "delegate method",
  0
 ],
 [
  "if (configuration.hra) {\tappdomain.currentdomain.unhandledexception += new unhandledexceptioneventhandler (rootdomainunhandledexceptionhandler);\t}\tif (configuration.dt) {\tthread thread = new thread (new threadstart (this.runtest));\tthread.start ();\tthread.join ();\t} else {\truntest ();\t}",
  "continuing in main thread after the exception was thrown",
  0
 ],
 [
  "output.writeline(\"{\");\toutput.indent();\tbool oldisintype = isintype;\tisintype = true;\twriteattributes(type.customattributes);\twritesecuritydeclarations(type);\tif (type.haslayoutinfo) {\toutput.writeline();\t}\tif (type.hasnestedtypes) {",
  "foreach var nestedtype in type nestedtypes",
  0
 ],
 [
  "private static bool test5() {\tbool[] boolvalues = new bool[]\t{\ttrue, false }\t;\tforeach (bool a1 in boolvalues) {\tforeach (bool a2 in boolvalues) {\tdynamic d1 = a1;\tdynamic d2 = a2;\tif ((d1 ^ d2) != (a1 ^ a2)) {",
  "unparseable template",
  1
 ],
 [
  "writelineuni (\"}\");\twritelineuni (\"}\");\twriteline (\"\");\twritelineind (\"if (readmethods == null) {\");\twriteline (\"readmethods = new system.collections.hashtable ();\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twriteline (\"\");",
  "get",
  0
 ],
 [
  "outputline (@\"       \\open to open the connection\");\toutputline (@\"       \\close to close the connection\");\toutputline (@\"       \\e to execute sql query (select)\");\toutputline (@\"       \\h to show help (all commands).\");\toutputline (@\"       \\defaults to show default variables.\");\toutputline (\"\");\t}\tpublic void showhelp () {\tconsole.writeline (\"\");\tif (!waitforenterkey ()) return;",
  "defaults to show default variables such as",
  0
 ],
 [
  "dv.rowstatefilter = dataviewrowstate.currentrows;\tdt.rows.add (new object [] {1, 3});\tdt.rows.add (new object [] {2, 2});\tdt.rows.add (new object [] {3, 1});\tdatarowview drv = dv.addnew ();\teventwriter.writeline (dv.count);\tdrv [0] = 0;\tdrv.endedit ();\teventwriter.writeline (dv.count);\tdt.rows [dt.rows.count - 1] [0] = 4;",
  "value changed to appear",
  0
 ],
 [
  "northwind db = new northwind(new fbconnection(connstr));\tvar x = db.orderdetails.first();\tobjectdumper.write(x);\tconsole.clear();\tvar q2 = from p in db.products orderby p.productname select p;\tforeach (var v in q2) objectdumper.write(v);\tconsole.readkey();\tconsole.clear();\tvar q3 = from c in db.customers from o in c.orders where c.city == \"london\" select new { c, o };\tforeach (var v in q3) objectdumper.write(v);",
  "did not throw an exception for null argument",
  1
 ],
 [
  "public void addparam5() {\tm_xsltarg = new xsltargumentlist();\ttry {\tm_xsltarg.addparam(szinvalid, szempty, \"test1\");\t}\tcatch (system.xml.xmlexception) {\treturn;\t}",
  "raised",
  1
 ],
 [
  "break;\treturn 1;\t}\tvar paths = profile.substring (0, p).split (new char [] { '-' });\tstringbuilder sb = new stringbuilder ();\tforeach (string dir in paths){\tif (sb.length != 0) sb.append (\";\");\tsb.append (root_mcs + \"\\\\class\\\\lib\\\\\" + dir);\t}\tenvironment.setenvironmentvariable (\"mono_path\", sb.tostring ());",
  "compiler",
  0
 ],
 [
  "static void main (string [] args) {\tif (!file.exists (\"genproj.cs\")) {\tenvironment.exit (1);\t}\tif (args.length == 1 && args [0].tolower ().contains (\"-h\")) {",
  "no statistical hits reported on items",
  1
 ],
 [
  "if (servertotalbytesreceived < 5) {\treturn task.fromresult<string>(null);\t}\telse {\treturn task.fromresult(httpstestserver.options.defaultresponsestring);\t}\t});\tstring requesturistring = \"https: tasks[1] = client.getstringasync(requesturistring);\tawait task.whenall(tasks).timeoutafter(15 * 1000);\tif (serverauxrecorddetectedinconclusive) {",
  "test inconclusive the operating system preferred a non cbc or null cipher",
  0
 ],
 [
  "public void refreshpackages () {\ttry {\tcancelcurrentrefresh ();\tgetinstalledpackages ();\t} catch (exception ex) {",
  "key attributes is the key enabled expiry date enable date",
  1
 ],
 [
  "private static void invalidvalueinoutparam(string connectionstring) {\tusing (var connection = new sqlconnection(connectionstring)) {\tconnection.open();\tusing (var command = new sqlcommand(\"set @decimal = 1.23\", connection)) {\tvar decimalparam = new sqlparameter(\"decimal\", new decimal(2.34)) { sqldbtype = sqldbtype.decimal, direction = parameterdirection.output, scale = 2, precision = 5 };\tcommand.parameters.add(decimalparam);\tdecimalparam.value = \"not a decimal\";\tcommand.executenonquery();\tif (((decimal)decimalparam.value) != new decimal(1.23)) {",
  "fail value is incorrect",
  0
 ],
 [
  "public static int main(string[] args) {\tfoolist l = new foolist();\tfoo f1 = new foo(\"first\");\tfoo f2 = new foo(\"second\");\tl.add(f1);\tl.add(f2);\tforeach (foo f in l) {\t}\tif (foolist.foo_current_called != true) return 1;\tif (foolist.ienumerator_current_called != false) return 2;",
  "test passes",
  0
 ],
 [
  "else {\t_expansionmode = expansionmode.asq;\treturn expandforeigngroupsearcher();\t}\t}\telse {\treturn false;\t}\t}\tif (foreignprincipal is groupprincipal) {",
  "addnlinkedattrset movenextforeign foreign member is a group",
  0
 ],
 [
  "public static bool log(object actual, object expected, string source, string message, string details, tagerrorlevel eerrorlevel) {\ttagerrorlevel rsavedlevel = errorlevel;\terrorlevel = eerrorlevel;\ttry {\tif (testconsole != null) {\ttestconsole.log(common.format(actual), common.format(expected), source, message, details, tagconsoleflags.console_text, \"fake_filename\", 999 );\t}\telse if (error != null) {",
  "output csv file is decimal format",
  1
 ],
 [
  "retobj = m_xsltarg.getextensionobject(\"urn:my-object\");\tif (((myobject)retobj).myvalue() != obj.myvalue()) {\tassert.true(false);\t}\tretobj = m_xsltarg.getextensionobject(\"urn:my-object\");\tif (retobj != null) {\tassert.true(false);\t}\tretobj = m_xsltarg.getextensionobject(\"urn:my-object\");\tif (retobj != null) {",
  "set and retrieved value appear to be different for urn my object",
  0
 ],
 [
  "foreach (object value in list) {\tconsole.write (value);\tconsole.write (environment.newline);\t}\tint x = 0;\tfor (int i = 0; i < 100; i++) x++;\tconsole.writeline (x);\tstring useless = \"useless string\";\tif (useless.equals (\"other useless\")) {\tuseless = string.empty;",
  "other useless string",
  0
 ],
 [
  "readhandle = null;\t}\tif (writehandle != null) {\ttry {\twritehandle.close();\t}\tcatch (ioexception) {\tthrow sharedutils.createsafewin32exception();\t}\twritehandle = null;",
  "system string",
  1
 ],
 [
  "static void help () {",
  "quiet used to disable progress and other information which is normally written to stdout",
  0
 ],
 [
  "public async task awaitwithstack2(task<int> task) {\tif (await this.simplebooltaskmethod()) {\t}\telse {\tint num = 1;",
  "instrumentation failure in packagemanagement",
  1
 ],
 [
  "public static extern int getversionex2 (ref osversioninfo2 osvi);\t}\tpublic class test {\tpublic static int main() {\tosversioninfo osvi = new osversioninfo();\tosvi.a = 1;\tosvi.b = 2;\tif (libwrap.getversionex (osvi) != 5) return 1;\tif (osvi.a != 2) return 2;\tif (osvi.b != 3) return 3;",
  "error while creating quick fix menu",
  1
 ],
 [
  "protected override void generatemethodreturnstatement(codemethodreturnstatement e) {\tif (e.expression != null) {\toutput.write(\"return \");\tgenerateexpression(e.expression);\toutput.writeline();\t}\telse {",
  "deleting task",
  1
 ],
 [
  "public void difftwoxmlstrings(string source, string target) {\t_diff.option = xmldiffoption.ignoreattributeorder;\txmlreadersettings rs = new xmlreadersettings();\trs.conformancelevel = conformancelevel.fragment;\txmlreader src = xmlreader.create(new stringreader(source), rs);\txmlreader tgt = xmlreader.create(new stringreader(target), rs);\tbool retval = _diff.compare(src, tgt);\tif (!retval) {",
  "test failed at conversion result",
  1
 ],
 [
  "private xplatuix11_new() {\trefcount = 0;\tmessagequeues = hashtable.synchronized (new hashtable(7));\tif (xlib.xinitthreads() == 0) {",
  "monthdaypattern",
  1
 ],
 [
  "if (verbose) {\tconsole.writeline (\"  algorithm parameters: {0}\", (x509.keyalgorithmparameters == null) ? \"none\" : cryptoconvert.tohex (x509.keyalgorithmparameters));\tconsole.writeline (\"  algorithm parameters: {0}\", (x509.signaturealgorithmparameters == null) ? \"none\" : cryptoconvert.tohex (x509.signaturealgorithmparameters));\trsacryptoserviceprovider rsacsp = x509.rsa as rsacryptoserviceprovider;\trsamanaged rsamanaged = x509.rsa as rsamanaged;\tconsole.writeline (\"  private key:\t\t\t{0}\", ((rsacsp != null && !rsacsp.publiconly) || (rsamanaged != null && !rsamanaged.publiconly)));\tcspparameters cspparams = new cspparameters ();\tcspparams.keycontainername = cryptoconvert.tohex (x509.hash);\tcspparams.flags = machine ? cspproviderflags.usemachinekeystore : 0;\tkeypairpersistence kpp = new keypairpersistence (cspparams);",
  "done processing data file",
  1
 ],
 [
  "restrictionerrormsg = null;\tif (basetype != null && basetype != xmlschemacomplextype.anytype && complextype.derivedby == xmlschemaderivationmethod.restriction) {\txmlschemaparticle derivedparticle = cannonicalizepointlessroot(complextype.contenttypeparticle);\txmlschemaparticle baseparticle = cannonicalizepointlessroot(basetype.contenttypeparticle);\tif (!isvalidrestriction(derivedparticle, baseparticle)) {\t#if debug if(complextype.contenttypeparticle != null && basetype.contenttypeparticle != null) {\tstring position = string.empty;\tif (complextype.sourceuri != null) {\tposition = \" in \" + complextype.sourceuri + \"(\" + complextype.linenumber + \", \" + complextype.lineposition + \")\";\t}",
  "failure",
  1
 ],
 [
  "public void teststringformatiteminverbatimstringcolor() {",
  "failed bool string string",
  1
 ],
 [
  "double d2 = double.negativeinfinity;\tdouble d3 = double.nan;\tdouble d4 = 2.000001;\tdouble d5 = 0.00;\tdouble d6 = double.maxvalue;\tdouble d7 = double.minvalue;\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(\"myarg1\", szempty, d1);\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);\tif (!double.ispositiveinfinity((double)retobj)) {",
  "onsolutionitemadded failed",
  1
 ],
 [
  "public static void usage (string message) {",
  "tlstest copyright c novell",
  0
 ],
 [
  "}\t}\tpublic void writemoduleheader(moduledefinition module) {\tif (module.hasexportedtypes) {\tforeach (exportedtype exportedtype in module.exportedtypes) {\toutput.write(\".class extern \");\tif (exportedtype.isforwarder) output.write(\"forwarder \");\toutput.write(exportedtype.declaringtype != null ? exportedtype.name : exportedtype.fullname);\topenblock(false);\tif (exportedtype.declaringtype != null) output.writeline(\".class extern {0}\", disassemblerhelpers.escape(exportedtype.declaringtype.fullname));",
  "assembly extern",
  0
 ],
 [
  "if (retobj.tostring() != (obj + i)) {\t_output.writeline(\"{0} : {1}\", retobj, obj + i);\tassert.true(false);\t}\tm_xsltarg.clear();\t}\tfor (int i = 0; i < 200; i++) {\tm_xsltarg.addparam(\"myarg\" + i, szempty, obj + i);\tretobj = m_xsltarg.getparam(\"myarg\" + i, szempty);\tif (retobj.tostring() != (obj + i)) {",
  "certificate removed",
  1
 ],
 [
  "private void writehelp() {\tconsole.out.writeline(sr.format(sr.helpdescription));\tconsole.out.writeline(sr.format(sr.helpdevoptions));",
  "tests pass",
  1
 ],
 [
  "static void writeunhandledexception (appdomain appdomain, exception exception) {",
  "foo bar",
  1
 ],
 [
  "public async task<bool> simplebooltaskmethod() {",
  "before",
  0
 ],
 [
  "static void version () {\tstring version = assembly.getexecutingassembly ().getname ().version.tostring ();",
  "mono jscript compiler version",
  0
 ],
 [
  "public bufferedgraphics allocate(graphics targetgraphics, rectangle targetrectangle) {\tif (shouldusetempmanager(targetrectangle)) {",
  "i have detected an useless char",
  1
 ],
 [
  "foreach (profilereventhandler.gcstatistics gcs in gcstatistics) {\tif (gcs.newheapsize == null) {\tulong gcstartclicks = gcs.startcounter - data.startcounter;\t} else {\t}\t}\t}\tallocationsummary [] allocationsummaries = data.allocationsummaries;\tif (allocationsummaries.length > 0) {\tprintseparator (writer);",
  "reporting allocation summaries for collections",
  0
 ],
 [
  "public static int main() {\tdoh doh;\tdoh3 doh2 = new doh3 ();\tbool success = false;\tdoh.a1 = doh.a2 = doh.a3 = doh.a4 = 0;\tdoh.a = 1;\tif (doh.a1 == 1 && doh.a2 == 0 && doh.a3 == 0 && doh.a4 == 0) {\tsuccess = true;\t} else if (doh.a1 == 0 && doh.a2 == 0 && doh.a3 == 0 && doh.a4 == 1) {",
  "workerprocess starting",
  1
 ],
 [
  "int failcount = 0;\tbool ispass = false;\tforeach (var v in testingreturnienumerable(25)) {\tif ((byte)v == 25) {\tispass = true;\t}\tbreak;\t}\tif (!ispass) {\tfailcount++;",
  "test",
  1
 ],
 [
  "return 1;\t}\tdouble2 s2;\ts2.f1 = 1;\ts2.f2 = 2;\ts2 = mono_return_double2(s2, 9);\tif (s2.f1 != 1+9) {\treturn 1;\t}\tif (s2.f2 != 2+9) {",
  "got but expected",
  0
 ],
 [
  "oraclelob clob = reader.getoraclelob (0);\tbyte[] bytes = null;\tunicodeencoding encoding = new unicodeencoding ();\tbytes = encoding.getbytes (\"mono is fun!\");\tclob.write (bytes, 0, bytes.length);\tclob.close ();\toraclelob blob = reader.getoraclelob (1);\tbytes = new byte[6] { 0x31, 0x32, 0x33, 0x34, 0x35, 0x036 };\tblob.write (bytes, 0, bytes.length);\tblob.close ();",
  "commit trans for table mono adapter test",
  0
 ],
 [
  "string filename = ( args.length == 0 ) ? \"xmlchartype.bin\" : args[0];\tconsole.write( \"writing xmlchartype character properties to {0}...\", filename );\tfilestream fs = new filestream( filename, filemode.create );\tfor ( int i = 0; i < charpropertiessize; i += 4096 ) {\tfs.write( s_charproperties, i, 4096 );\t}\tfs.close();\t}\tcatch ( exception e ) {\tconsole.writeline();",
  "exception",
  0
 ],
 [
  "private bool movenextmemberenum() {",
  "could not save solution",
  1
 ],
 [
  "using (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartdocument();\tw.writecdata(\"invalid\");\t}\tcatch (invalidoperationexception e) {\tcerror.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "droptable (cnc);\t}\tcatch (sqlexception e) {\t}\ttry {\tcreatetable (cnc);\tinsertdata (cnc);\tupdatedata (cnc);\tinsertdata (cnc);\tinsertedgecasedata (cnc);",
  "ok",
  0
 ],
 [
  "if (!typemap.typedata.isvaluetype) {\twriteline (typemap.typedata.csharpfullname + \" ob = null;\");\tif (generatereadhook (hooktype.type, typemap.typedata.type)) {\treturn;\t}\tif (_format == serializationformat.literal) {\twriteline (\"\");\twritelineind (\"{\");\t}\telse {",
  "stats for",
  1
 ],
 [
  "public static void testpersistsucurityinfo3() {\toracleconnection con = new oracleconnection(\"data source=palis;user id=scott;password=tiger\");\tcon.open();\tcon.close();",
  "internal error at line",
  1
 ],
 [
  "private async task<gatewayresource> createandconfiguregateway(servermanagementclient client, string gatewayname) {\tgatewayresource gateway;\tgateway = await client.gateway.createasync( resourcegroup, gatewayname, upgrademode: upgrademode.automatic, location: location );\tassert.notnull(gateway);\tvar profile = await client.gateway.getprofileasync(resourcegroup, gatewayname);\tif (testinginteractively) {\tstopgateway();",
  "profile",
  0
 ],
 [
  "static void dispatcher_unhandledexception(object sender, system.windows.threading.dispatcherunhandledexceptioneventargs e) {",
  "monodevelop build tool",
  1
 ],
 [
  "console.writeline (e.message);\treturn;\t}\tif (show_help) {\tp.writeoptiondescriptions (console.out);\treturn;\t}\tforeach (var m in (from k in macros.keys orderby k select k)) {\tconsole.writeline (\"\\t{0}={1}\", m, macros [m] ?? \"<null>\");\t}",
  "skipping negotiatestream echoserver clientwriteread successive sync success",
  1
 ],
 [
  "private void read(string filename) {\txmlserializer ser=new xmlserializer(typeof(employees));\tfilestream fs=new filestream(filename, filemode.open);\temployees emps;\temps=(employees)ser.deserialize(fs);\tfs.close();\tforeach(employee emp in emps) {",
  "returning",
  1
 ],
 [
  "public static void creategenerictestfile(string strfilename) {\tmemorystream ms = new memorystream();\ttextwriter tw = new streamwriter(ms);\ttw.writeline(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"no\\\"?>\");\ttw.writeline(\"<!-- comment1 -->\");\ttw.writeline(\"<?pi1a?>\");\ttw.writeline(\"<?pi1b?>\");\ttw.writeline(\"<?pi1c?>\");",
  "abort reset",
  1
 ],
 [
  "public void getparam18() {\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(\"myarg1\", szempty, \"test1\");\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);\tm_xsltarg.addparam(\"myarg1\", \"http: retobj = m_xsltarg.getparam(\"myarg1\", \"http: _output.writeline(\"added value:{0}\\nretrieved value: {1}\", \"test2\", retobj);\tif (retobj.tostring() != \"test2\") assert.true(false);\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);",
  "retrieve original value actual retrieved value",
  0
 ],
 [
  "}\tschedule sched = curwi.schedule;\tif (null == sched) {\t}\telse {\t}\tjobschedulestatistics stats = curwi.statistics;\tif (null == stats) {\t}\telse {",
  "expected exception",
  1
 ],
 [
  "engine = info.engine;\tprojectinstance = engine.createprojectinstance (info.project);\ttry {\tforeach (var gpp in msbuildprojectservice.globalpropertyproviders) {\tforeach (var prop in gpp.getglobalproperties ()) engine.setglobalproperty (projectinstance, prop.key, prop.value);\t}\tforeach (var prop in globalproperties) engine.setglobalproperty (projectinstance, prop.key, prop.value);\tengine.evaluate (projectinstance, onlyevaluateproperties);\tsyncbuildproject (info.itemmap, info.engine, projectinstance);\t} catch (exception ex) {",
  "test failed at call result",
  1
 ],
 [
  "private istreamreliabilitytestgrain<int> creategrainonsilo(silohandle silo) #else private istreamreliabilitytestgrain creategrainonsilo(siloaddress silo) #endif {\tistreamreliabilitytestgrain newgrain;\tlong kp = random.next();\twhile (true) {\tnewgrain = getgrain(++kp);\tsiloaddress loc = newgrain.getlocation().result;\tif (loc.equals(silo)) break;\t}",
  "test failed at call result",
  1
 ],
 [
  "public static void main (string[] args) {\tswitch (1) {\tdefault: switch (2) {\tdefault: int flag = 1;\tif (flag == 1) {\tbreak;\t}\telse  goto lbl;\t}\tbreak;",
  "this should not appear since break was supposed to fire",
  0
 ],
 [
  "public void basictest_accessinstanceproperties_noexceptions_osx() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tstring description = nic.description;\tassert.false(string.isnullorempty(description), \"networkinterface.description should not be null or empty.\");\tstring id = nic.id;\tassert.false(string.isnullorempty(id), \"networkinterface.id should not be null or empty.\");\tassert.throws<platformnotsupportedexception>(() => nic.isreceiveonly);\tassert.inrange(nic.speed, 0, long.maxvalue);",
  "supportsmulticast",
  0
 ],
 [
  "public void reset() {",
  "trackedcollectionenumerator reset",
  0
 ],
 [
  "public void addparam17(inputtype inputtype, readertype readertype, transformtype transformtype, doctype doctype) {\tstring expected = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?><result> 1.test 2.test 3.test 4.test 5.test 6.no value specified</result>\";\tint i = 1;\tint errcount = 0;\tm_xsltarg = new xsltargumentlist();\tforeach (string str in szwhitespace) {\ttry {\tm_xsltarg.addparam(\"myarg\" + i, szempty, \"test\" + str);\t}\tcatch (system.xml.xmlexception) {",
  "select values from the database",
  1
 ],
 [
  "}\t}\tcatch (exception exc) {\t}\t}\tvar watcher = new gameobserver();\tawait game.subscribeforgameupdates( await client.createobjectreference<igameobserver>(watcher));\treturn client;\t}\tcatch (exception exc) {",
  "designerloader write called",
  1
 ],
 [
  "public void surrogateentity_7(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writesurrogatecharentity('\\ud9a2', '\\ude34');\t}\tcatch (argumentexception e) {",
  "null",
  1
 ],
 [
  "public void charencoding() {\tstring chars = \"\\u1234 \\u4567 \\uabcd \\r \\n \\t \\\\ \\\" \\' \\0 \\u2028 \\u2029 \\u0084 \\u0085 \\u00010f00\";\tvar main = new codeentrypointmethod();",
  "public static void main system console writeline",
  0
 ],
 [
  ";\tguid[] guidvalues = new guid[]\t{\tguid.newguid(), guid.newguid(), default (guid)}\t;\tforeach (bool a1 in boolvalues) {\tforeach (guid a3 in guidvalues) {\tbool d1 = a1;\tdynamic d3 = a3;\tif ((d1 ? default(guid) : d3) != (a1 ? default(guid) : a3)) {",
  "failed bool guid guid",
  0
 ],
 [
  "}\t#if dbg public bool debug {\tget {\tif (_regex == null) return false;\treturn _regex.debug;\t}\t}\tinternal virtual void dump() {\tint i,j;\tfor (i = 0; i < _matchcount.length; i++) {",
  "capnum",
  0
 ],
 [
  "public value getvalue() {\tif (cachedvalue == null || cachedvalueprocess.debuggeestate != cachedvaluedebuggeestate) {\tstopwatch watch = new stopwatch();\twatch.start();\tcachedvalue = this.getvalue().getpermanentreference(windowsdebugger.evalthread);\tcachedvalueprocess = cachedvalue.process;\tcachedvaluedebuggeestate = cachedvalue.process.debuggeestate;",
  "evaluated node in ms result cached",
  0
 ],
 [
  "if (length == 0) {\thandleerror();\tcontinue;\t}\tmodule.filename = (length >= 4 && chars[0] == '\\\\' && chars[1] == '\\\\' && chars[2] == '?' && chars[3] == '\\\\') ? new string(chars, 4, length - 4) : new string(chars, 0, length);\tmodules.add(module);\t}\treturn modules;\t}\tfinally {",
  "process closehandle process",
  0
 ],
 [
  "public void writeverboseline_showverbosemessage_messagewrittentoconsole() {\tcreatehostuserinterface();\thostui.writeverboseline(\"test\");",
  "test",
  0
 ],
 [
  "static void help (string details) {\tswitch (details) {\tbreak;\tbreak;\tbreak;\tbreak;",
  "help options",
  0
 ],
 [
  "static void main(string[] args) {\tstring programfiles = environment.getfolderpath(environment.specialfolder.programfiles);\tstring databasepath = path.combine(programfiles, string connstr = string.format(\"server={0};database={1};user={2};password={3}\", \"localhost\", databasepath, \"sysdba\", \"masterkey\");\tnorthwind db = new northwind(new fbconnection(connstr));\tvar x = db.orderdetails.first();\tobjectdumper.write(x);\tconsole.clear();",
  "from p in db products orderby p productname select p",
  0
 ],
 [
  "public void readtimeout_0_read_byte_int_int() {",
  "verifying readtimeout with read byte buffer int offset int count",
  0
 ],
 [
  "public static int heusl (se x) {",
  "within",
  0
 ],
 [
  "int i = 8;\tm_xsltarg.addparam(\"myarg2\", szempty, i);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (!i.equals(retobj)) {\tassert.true(false);\t}\tif (i.gettype() != j.gettype()) assert.true(false);\tboolean bf = (1 == 0);\tm_xsltarg.addparam(\"myarg3\", szempty, bf);\tretobj = m_xsltarg.getparam(\"myarg3\", szempty);",
  "added value retrieved value",
  0
 ],
 [
  "int value = 0;\ttry {\tfor (int i = 0; i < 8; ++i) {\ttry {\ttry {\tvalue += await yieldvalue (1);\tconsole.writeline (\"i = \" + i);\tif (i < 2) continue;\tif (i > 1) throw new applicationexception ();\t} catch (applicationexception) {",
  "test failed at call result",
  1
 ],
 [
  "public void basictest_getipv4interfacestatistics_success() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipv4interfacestatistics stats = nic.getipv4statistics();",
  "logging more than of events",
  1
 ],
 [
  "public void testalreadypresentifnotnullcheck5() {",
  "loading of tasks views failed",
  1
 ],
 [
  "public void unregistercommand (command command) {\tif (!commands.contains (command)) {",
  "schema filter of datacolumn datasetcolumn",
  1
 ],
 [
  "public override string getsavedlicensekey(type type, assembly resourceassembly) {\tif (savedlicensekeys == null || savedlicensekeys[type.assemblyqualifiedname]==null) {",
  "not run invalid ignored skipped",
  1
 ],
 [
  "protected override void generatenamespacestart(codenamespace e) {",
  "codenamespacestart",
  0
 ],
 [
  "validationeventhandler validation = (sender, e) => { debug.writeline(e.message); errors++; };\txmlschema.read(new xmlnodereader(doc.documentelement), validation).compile(validation);\tif (errors == 0) {\tusing (xmltextwriter writer = new xmltextwriter(path.combine(srcdir, \"..\\\\data\\\\schemas\\\\addin.xsd\"), system.text.encoding.utf8)) {\twriter.formatting = formatting.indented;\twriter.indentchar = '\\t';\twriter.indentation = 1;\tdoc.save(writer);\t}\t} else {",
  "finished with errors",
  0
 ],
 [
  "static int main () {\tvar t = new thread (createfirstbridge);\tt.start ();\tt.join ();\tgc.collect ();\tgc.waitforpendingfinalizers ();",
  "gc done",
  0
 ],
 [
  "testthread.start();\tthreadpriority after = testthread.priority;\tif (before != threadpriority.normal) res = 1;\telse if (after != threadpriority.abovenormal) res = 2;\telse {\ttestthread.priority = threadpriority.normal;\tafter = testthread.priority;\tthread.sleep(1000);\tif (after != threadpriority.normal) res = 3;\telse {",
  "setting test thread priority to abovenormal",
  0
 ],
 [
  "static int test_0_child_goes_away () {\tfinalizerhelpers.performnopinaction (setuplinks2);\tgc.collect ();\tgc.waitforpendingfinalizers ();",
  "usage it gsharp agent filen",
  1
 ],
 [
  "private principalsearchresult<principal> findall(bool returnone) {\tglobaldebug.writelineif(globaldebug.info, \"principalsearcher\", \"entering findall, returnone=\" + returnone.tostring());\tif (_qbefilter == null) throw new invalidoperationexception(sr.principalsearchermustsetfilter);\tif (!_qbefilter.unpersisted) throw new invalidoperationexception(sr.principalsearcherpersistedprincipal);\tif (hasreferentialpropertiesset()) throw new invalidoperationexception(sr.principalsearchernonreferentialprops);",
  "extended help for advanced options",
  1
 ],
 [
  "public list<keyoperationtype> getkeyoperations() {\tlist<keyoperationtype> keyoperations = new list<keyoperationtype>();\tforeach ( var arg in args ) {\tvar result = new keyoperationtype();\tif ( enum.tryparse<keyoperationtype>( arg, true, out result ) ) {\tkeyoperations.add( result );\t}\t}\tif ( keyoperations.count == 0 ) {",
  "no operation is provided executing all the key and secret operations",
  0
 ],
 [
  "static private void extendedhelp () {",
  "eku oid oid add some extended key usage oid to the certificate",
  0
 ],
 [
  "public static void print(xmlmembermapping mm) {",
  "usage hello name",
  1
 ],
 [
  "writer.write(mappings.length.tostring(cultureinfo.invariantculture));\twriter.writeline(\"];\");\tinitializevaluetypes(\"p\", mappings);\tif (haswrapperelement) {\twritereadnonroots();\tif (membersmapping.validaterpcwrapperelement) {\twriter.write(\"if (!\");\twritexmlnodeequal(\"reader\", element.name, element.form == xmlschemaform.qualified ? element.namespace : \"\");\t}\twriter.writeline(\"bool isemptywrapper = reader.isemptyelement;\");",
  "reader readstartelement",
  0
 ],
 [
  "if (t is targetinvocationexception) {\tt = t.innerexception;\t}\tstring message = t.message;\tif (message == null) {\tmessage = t.gettype().name;\t}\tthrow new targetinvocationexception(sr.getstring(sr.errorpropertyaccessorexception, name, name, message), t);\t}\t}",
  "i am a foo",
  1
 ],
 [
  "private void verifyoutput(string expected) {\tstring actual = _strwriter.tostring();\tif (actual != expected) {",
  "actual",
  0
 ],
 [
  "public void staticfieldisnullorempty () {",
  "threeletterisoregionname",
  1
 ],
 [
  "if (!double.isnegativeinfinity((double)retobj)) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg3\", szempty, d3);\tretobj = m_xsltarg.getparam(\"myarg3\", szempty);\tif (!double.isnan((double)retobj)) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg4\", szempty, d4);\tretobj = m_xsltarg.getparam(\"myarg4\", szempty);",
  "added value retrieved value",
  0
 ],
 [
  "public static void dump (policyassertioncollection assertions) {",
  "assertion",
  0
 ],
 [
  "static autosave () {\ttry {\tif (!directory.exists (autosavepath)) directory.createdirectory (autosavepath);\t} catch (exception e) {",
  "threadabortexception finally",
  1
 ],
 [
  "notrun = xwt.drawing.image.fromresource (\"unit-skipped-16.png\");\tsuccess = xwt.drawing.image.fromresource (\"unit-success-16.png\");\tsuccessandfailure = xwt.drawing.image.fromresource (\"unit-mixed-results-16.png\");\tloading = xwt.drawing.image.fromresource (\"unit-loading-16.png\");\tinconclusive = xwt.drawing.image.fromresource (\"unit-inconclusive-16.png\");\toldfailure = failure.withalpha (0.4);\toldsuccess = success.withalpha (0.4);\toldsuccessandfailure = successandfailure.withalpha (0.4);\toldinconclusive = inconclusive.withalpha (0.4);\t} catch (exception e) {",
  "test failed at call result",
  1
 ],
 [
  "methodcallmessagewrapper mcm = new methodcallmessagewrapper ((imethodcallmessage) msg);\tmcm.uri = remotingservices.getobjecturi ((marshalbyrefobject) target);\tmarshalbyrefobject objrem = (marshalbyrefobject) activator.createinstance (getproxiedtype ());\tremotingservices.executemessage ((marshalbyrefobject) objrem, (imethodcallmessage) msg);\timessage rtnmsg = null;\ttry {\trtnmsg = _sink.syncprocessmessage (msg);\t} catch (exception e) {\tconsole.writeline (e.message);\t}",
  "wde failure in debugcontroller attachtoconduit call stack",
  1
 ],
 [
  "public void showpad(paddescriptor content) {",
  "workbenchlayout showpad not implemented",
  0
 ],
 [
  "public void printstatistics() {",
  "containment checks set operations intersections unions differences",
  0
 ],
 [
  "\"usage: git [--version] ... <command> [<args>]\", \"\", \"common options:\", { \"version\", \"show version info\", v => showversion = v != null }, { \"help\", \"show this message and exit\", v => showhelp = v != null }, \"\", \"these are common git commands used in various situations:\", \"\", \"start a working area (see also: git help tutorial)\", new command (\"clone\", \"clone a repository into a new directory\"), new command (\"init\",  \"create an empty git repository or reinitialize an existing one\"), new command (\"thisisaverylongcommandnameinordertoinducewrapping\", \"create an empty git repository or reinitialize an existing one. let's make this really long to cause a line wrap, shall we?\"), };\tvar expectedhelp = new stringwriter ();\texpectedhelp.writeline (\"\");\texpectedhelp.writeline (\"\");\texpectedhelp.writeline (\"\");\tassert.areequal (0, git.run (new [] { \"help\" }));\tassert.areequal (expectedhelp.tostring (), o.tostring ());\tvar expectedhelphelp    = new stringwriter ();\texpectedhelphelp.writeline ();\texpectedhelphelp.writeline ();",
  "did not throw exception",
  1
 ],
 [
  "if (s9.f6 != 6+90) {\treturn 6;\t}\tif (s9.f7 != 7+90) {\treturn 7;\t}\tif (s9.f8 != 8+90) {\treturn 8;\t}\tif (s9.f9 != 9+90) {",
  "got but expected",
  0
 ],
 [
  "static void readresult(idatareader rdr, datatable dt) {\tforeach (datarow schemarow in dt.rows) {\tforeach (datacolumn schemacol in dt.columns) console.writeline(schemacol.columnname + \" = \" + schemarow[schemacol]);\tconsole.writeline();\t}\tint nrows = 0;\tint c = 0;\tstring output, metadatavalue, datavalue;\twhile(rdr.read()) {",
  "description",
  1
 ],
 [
  "public void xmlresolver2(xslinputtype xslinputtype, readertype readertype) {\ttry {\tloadxsl(\"xmlresolver_main.xsl\", xslinputtype, readertype, null);",
  "authzset sidlist got groups in domains",
  1
 ],
 [
  "public int getextnobject1(object args) {\tobject retobj;\tfor (int i = 1; i <= 100; i++) {\tretobj = xsltarg1.getextensionobject(((object[])args)[1].tostring());\tif (((myobject)retobj).myvalue() != 1) {",
  "error set and retrieved value appear to be different",
  0
 ],
 [
  "case \"-n\": case \"-appname\": options.appname = value;\tbreak;\tcase \"-o\": case \"-output\": options.output = value;\tbreak;\tcase \"-a\": case \"-assembly\": options.assembly = value;\tbreak;\tcase \"-i\": case \"-icon\": options.icon = value;\tbreak;\tcase \"-r\": case \"-resource\": foreach (string ss in value.split (new char [] {','})) resources.add (ss);\tbreak;",
  "about macpack by geoff norton",
  0
 ],
 [
  "public void dumpstat() {\tif (datareader == null) {\treturn;\t}",
  "got but expected",
  1
 ],
 [
  "public static void main(string[] args) {\tstring[] cities = { \"tokyo\", \"beijing\", \"hangzhou\", \"kyoto\", \"beijing\", \"copenhagen\", \"seattle\" };\tilist<string> alst = new arraylist<string>();\talst.addall<string>(cities);\tforeach (int i in mysort.getpermutation1(alst)) console.write(\"{0} \", i);\tconsole.writeline();\tilist<string> llst = new linkedlist<string>();\tllst.addall<string>(cities);\tforeach (int i in mysort.getpermutation2(llst)) console.write(\"{0} \", i);\tconsole.writeline();",
  "total columns",
  1
 ],
 [
  "protected void serializer_unknownnode(object sender, xmlnodeeventargs e) {",
  "verifying isopen after open and close have been called",
  1
 ],
 [
  "protected override void generatelinepragmaend(codelinepragma e) {\toutput.writeline();",
  "eku oid oid add some extended key usage oid to the certificate",
  1
 ],
 [
  "return false;\t}\tprivate class bug957878replacementinterceptorbox {\tpublic int numtimescalled { get; private set; }\tprivate readonly itestoutputhelper testoutputhelper;\tpublic bug957878replacementinterceptorbox(itestoutputhelper testoutputhelper) {\tthis.testoutputhelper = testoutputhelper;\t}\tinternal void bug957878requestreplacementinterceptoropcontextfactory(ref protocol.ibatchrequest batchrequest) {\tthis.numtimescalled++;",
  "binaryform null",
  1
 ],
 [
  "protected void markconverted() {\tlock (typeof(typelibrary)) {\tif (!_converted) {",
  "connectionstring after close",
  1
 ],
 [
  "public static void creategenerictestfile(string strfilename) {\tfilepathutil.addstream(strfilename, new memorystream());\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"no\\\"?>\");\ttw.writeline(\"<!-- comment1 -->\");\ttw.writeline(\"<?pi1a?>\");\ttw.writeline(\"<?pi1b?>\");\ttw.writeline(\"<?pi1c?>\");",
  "attlist root xmlns something cdata fixed xmlns my cdata fixed xmlns dt cdata fixed",
  0
 ],
 [
  "public new void queuedraw () {\tbase.queuedraw ();",
  "invalidated entire widget",
  0
 ],
 [
  "public void emitsource() {",
  "adding task",
  1
 ],
 [
  "public static void taskconfigurableawaiter() {\tmanualresetevent mre = new manualresetevent(false);\tmanualresetevent mre2 = new manualresetevent(false);\tmanualresetevent mre3 = new manualresetevent(false);\ttask t1 = task.factory.startnew(() => { mre.waitone(); });\ttask<int> t11 = task.factory.startnew(() => { mre.waitone(); return 1; });\tt1.configureawait(false).getawaiter().unsafeoncompleted(() => { mre2.set(); });\tt11.configureawait(false).getawaiter().unsafeoncompleted(() => { mre3.set(); });\tmre.set();",
  "wait on the scenario to finish",
  0
 ],
 [
  "public void noargument() {\ttest<extractmethodaction>(@\"class testclass {\tvoid testmethod () {\tint i = 5;",
  "hours",
  1
 ],
 [
  "static void main(string[] args) {",
  "directory is missing and can t be removed",
  1
 ],
 [
  "static bool callsecondclassindexer() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturndynamicclass<int>();\tif ( (!(bool)(s.instanceproperty[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "copyright c novell",
  1
 ],
 [
  "if (loadxsl(\"xmlresolver_document_function_absolute_uri.xsl\", xslinputtype, readertype) == 1) {\tif (transform((string) \"fruits.xml\", (outputtype) outputtype, navtype) == 1) {\tverifyresult(expected);\treturn;\t}\telse {\tassert.true(false);\t}\t}\telse {",
  "failed to load style sheet",
  0
 ],
 [
  "private async task<bool> processhttp(func<string, task<string>> httpconversation) {\twhile (true) {\tvar requestbuffer = new byte[2048];\tint bytesread = await stream.readasync(requestbuffer, 0, requestbuffer.length).configureawait(false);\tstring requeststring = encoding.utf8.getstring(requestbuffer, 0, bytesread);\tif (bytesread == 0) {",
  "server received eof",
  0
 ],
 [
  "if (resolvedname != null) {\ts = resourceassembly.getmanifestresourcestream(resolvedname);\t}\t}\tif (s != null) {\tdesigntimelicensecontextserializer.deserialize(s, filename.toupper(cultureinfo.invariantculture), this);\t}\t}\t}\tif (licensefile != null) {",
  "opening licenses file over uri",
  0
 ],
 [
  "private static bool inifstatement0() {\tint failcount = 0;\tc origin = new c(0);\tdynamic d = origin;\tif (!d) {\tfailcount++;",
  "assert areequal scan",
  1
 ],
 [
  "string path = string.empty;\ttry {\tint length = filename_max + 1;\tstringbuilder location = new stringbuilder(length);\tint hr = msigetproductinfow(productcode, installproperty_installlocation, location, ref length);\tint error = marshal.getlastwin32error();\tif (hr == 0) {\tpath = location.tostring();\t}\telse {",
  "error loading install directory",
  0
 ],
 [
  "public static int main(string[] args) {\tif (args.length == 0 || args [0] == \"--help\" || args [0] == \"help\") {\tconsole.writeline ();",
  "ib",
  1
 ],
 [
  "public void testnullnode() {\ttestwrongcontext<addbracesaction>(@\"class testclass {\tvoid test () {\tif (true) {",
  "hello",
  0
 ],
 [
  "static async task runasync(isilohost silo, iclusterclient client, string mapfilename) {\tawait silo.startasync();\tawait client.connect();\tadventure adventure = new adventure(client);\tadventure.configure(mapfilename).wait();",
  "adventure setup completed",
  0
 ],
 [
  "return 1;\t}\tbreak;\t}\t}\t}\tint i = 0;\ttry {\tfor (i = 1; i <= iter; i++) {\tif (!connect (protocol, ssl, verbose)) {",
  "failed ulong",
  1
 ],
 [
  "public static filewriteablestate getwriteablestate (filepath filename) {\tdebug.assert (!string.isnullorempty (filename));\ttry {\treturn getfilesystemforpath (filename, false).getwriteablestate (filename);\t} catch (exception ex) {",
  "file can t be written",
  0
 ],
 [
  "methoddesc method = methodcodenodeneedingcode.method;\tif (logger.isverbose) {\tstring methodname = method.tostring();\t}\ttry {\t_corinfo.compilemethod(methodcodenodeneedingcode);\t}\tcatch (typesystemexception ex) {\tmethodil throwingil = typesystemthrowingilemitter.emitil(method, ex);\t_corinfo.compilemethod(methodcodenodeneedingcode, throwingil);",
  "warning method method will always throw because ex message",
  0
 ],
 [
  "public static int main () {\tconstructorinfo mi = typeof(c).getconstructors ()[0];\tmethodbody mb = mi.getmethodbody();\tif (mb.getilasbytearray ().length != 7) {",
  "optimization failed",
  0
 ],
 [
  "if (leastindexreachable >= startind) console.writeline(\"articulation point: {0} (least index reachable via {3} is {1} >= this index {2})\", e.start, leastindexreachable, startind, e);\tif (leastindexreachablefrom[startind] > leastindexreachable) leastindexreachablefrom[startind] = leastindexreachable;\t}\t};\taction<edge<string, int>> onnotfollowed = delegate(edge<string, int> e) {\tint startind = index[e.start], endind = index[e.end];\tif (leastindexreachablefrom[startind] > endind) leastindexreachablefrom[startind] = endind;\t};\tstring root = \"c\";\tg.depthfirstsearch(root, beforevertex, aftervertex, onfollow, onfollowed, onnotfollowed);",
  "failed short",
  1
 ],
 [
  "assert.equal(originaldisplayname, boundjobschedule.jobspecification.poolinformation.autopoolspecification.poolspecification.displayname);\ttestutilities.assertthrows<invalidoperationexception>(() => boundjobschedule.displayname = updateddisplayname);\tboundjobschedule.jobspecification.displayname = updateddisplayname;\tboundjobschedule.jobspecification.jobmanagertask.displayname = updateddisplayname;\tboundjobschedule.jobspecification.poolinformation.autopoolspecification.poolspecification.displayname = updateddisplayname;\tassert.equal(updateddisplayname, boundjobschedule.jobspecification.displayname);\tassert.equal(updateddisplayname, boundjobschedule.jobspecification.jobmanagertask.displayname);\tassert.equal(updateddisplayname, boundjobschedule.jobspecification.poolinformation.autopoolspecification.poolspecification.displayname);\t}\tfinally {",
  "exexml filename to execute sql and save output to xml file",
  1
 ],
 [
  "public static void displayjobschedulelong(itestoutputhelper testoutputhelper, cloudjobschedule curwi) {\t{\tjobscheduleexecutioninformation wiexinfo = curwi.executioninformation;\trecentjob rj = wiexinfo.recentjob;\tif (null == rj) {",
  "did not throw exception",
  1
 ],
 [
  "}\tjobmanagertask ijm = jobspec.jobmanagertask;\tif (null == ijm) {\t}\telse {\tienumerable<environmentsetting> envsettings = ijm.environmentsettings;\tif (null != envsettings) {\tlist<environmentsetting> envsettingslist = new list<environmentsetting>(ijm.environmentsettings);\t}\telse {",
  "using internal lowlevellinq",
  1
 ],
 [
  "public chirperperformancecounters(string instancename) {\tchirpspersecond = new chirperperformancecounterlong(null);\tif (performancecountercategory.exists(categoryname)) {\ttry {\tchirpspersecond = new chirperperformancecounterlong(new performancecounter(categoryname, chirpspersecondname, instancename, false));\t}\tcatch {",
  "file is not a project or solution",
  1
 ],
 [
  "static ienumerator getit (int [] args) {\tforeach (int arg in args) {\ta a = delegate {",
  "hello world from global method",
  1
 ],
 [
  "public void emitsource() {\twriteline();",
  "using system io",
  0
 ],
 [
  "int failcount = 0;\ttry {\ttestinginreturn();\tfailcount++;\t}\tcatch (microsoft.csharp.runtimebinder.runtimebinderexception e) {\tif (!errorverifier.verify(errormessageid.valuecantbenull, e.message, \"bool\")) failcount++;\t}\tcatch (exception e) {\tfailcount++;",
  "could not find json compilation database",
  1
 ],
 [
  "public void dowork() {",
  "helloworld",
  0
 ],
 [
  "using (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (serialport com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\trandom rndgen = new random(-55);\tbyte[] bytestowrite = new byte[numrndbytestoread];\tchar[] expectedchars;\tasciiencoding encoding = new asciiencoding();\tfor (int i = 0; i < bytestowrite.length; i++) {\tbyte randbyte = (byte)rndgen.next(0, 256);\tbytestowrite[i] = randbyte;\t}\texpectedchars = encoding.getchars(bytestowrite, 0, bytestowrite.length);",
  "verifying bytestoread with a buffer of",
  0
 ],
 [
  "_typelib = typelib;\tif (name == null) {\tcomclassinfo clsinfo = typelib.getclassinfofromclsid(_guid);\tname = clsinfo.name;\t}\ttype type = typelib.findtypebyname(name, typelibrary.find_class);\tif (type == null) {\t_typefailedexception = new exception(\"clr type not found in \" + _container + \" for activex type \" + this + \".\\n\\nthis is likely caused by \" + \"the assembly corresponding to \" + \"this type library not being \" + \"available.\");\tthrow _typefailedexception;\t}",
  "comclassinfo type",
  0
 ],
 [
  "public void emitsource() {\twriteline();",
  "using system threading",
  0
 ],
 [
  "public static void createxmlspacetestfile(string strfilename) {\tstream s = new memorystream();\ttextwriter tw = new streamwriter(s);",
  "calling close after calling open",
  1
 ],
 [
  "public void testremovebracesfromif() {\ttest<removebracesaction>(@\"class testclass {\tvoid test () {\t$if (true) {",
  "exception not generated for non existent file parameter name",
  1
 ],
 [
  "private static void shutdown() {\tdebug.indent();\tif (initialized) {",
  "not already shutdown",
  0
 ],
 [
  "private static void setparameteroracletype (oracleconnection con) {\tconsole.writeline();\toracleparameter p = con.createcommand().createparameter();\tp.oracletype = oracletype.clob;\tp.value = \"somestring\";",
  "p oracletype clob",
  0
 ],
 [
  "public void bug2342986_starttaskmissingoncomputenode() {\taction test = () => {\tusing (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {\tcloudpool pool = batchcli.pooloperations.getpool(this.poolfixture.poolid);\tstarttask poolstarttask = pool.starttask;\tassert.notnull(poolstarttask);\tassert.notnull(poolstarttask.environmentsettings);\tienumerable<computenode> computenodes = pool.listcomputenodes();\tassert.true(computenodes.any());\tforeach (computenode computenode in computenodes) {",
  "unable to load nuget config",
  1
 ],
 [
  "public override bool execute() {\tusing (filestream fs = new filestream(this.outputfile, filemode.create, fileaccess.write, fileshare.none)) using (streamwriter sw = new streamwriter(fs, encoding.utf8)) {\tsw.writeline();",
  "namespace core",
  0
 ],
 [
  "assert.true(false);\t}\ti++;\t}\ttry {\tif ((loadxsl(\"myobjectdef.xsl\", xslinputtype, readertype) == 1)) transform_arglist(\"fruits.xml\", outputtype, navtype, true);\t}\tcatch (system.xml.xsl.xsltexception) {\treturn;\t}",
  "did not exception for object that could not be executed",
  0
 ],
 [
  "public async task<bool> execute (progressmonitor monitor, workspaceobject entry, executioncontext context, configurationselector configuration) {\tprocessexecutioncommand cmd = createexecutioncommand (entry, configuration);",
  "job priority is",
  1
 ],
 [
  "if (mrr != null) {\tresolvedmember = mrr.resolvedmember;\t} else {\tlocalresolveresult lrr = rr as localresolveresult;\tif (lrr != null) {\tresolvedmember = lrr.field;\t}\t}\t}\tif (resolvedmember != null) {",
  "a hash select hash algorithm only and default are supported",
  1
 ],
 [
  "public void callback1(object sender, validationeventargs args) {\tif (args.severity == xmlseveritytype.warning) {",
  "com create x",
  1
 ],
 [
  "outputline (@\"       \\open to open the connection\");\toutputline (@\"       \\close to close the connection\");\toutputline (@\"       \\e to execute sql query (select)\");\toutputline (@\"       \\h to show help (all commands).\");\toutputline (@\"       \\defaults to show default variables.\");\toutputline (\"\");\t}\tpublic void showhelp () {\tconsole.writeline (\"\");\tif (!waitforenterkey ()) return;",
  "nil",
  1
 ],
 [
  "writer.write(\"public void \");\twriter.write(methodname);\twriter.indent++;\twriter.writeline(\"if (o == null) {\");\twriter.indent++;\tif (element.isnullable) {\tif (mapping.issoap) writeencodednulltag(element.name, (element.form == xmlschemaform.qualified ? element.namespace : \"\"));\telse writeliteralnulltag(element.name, (element.form == xmlschemaform.qualified ? element.namespace : \"\"));\t}\telse writeemptytag(element.name, (element.form == xmlschemaform.qualified ? element.namespace : \"\"));",
  "system console writeline",
  1
 ],
 [
  "p = process.start (pi);\t} catch (exception e) {\tenvironment.exit (1);\t}\tif (p.standardoutput == null){\treturn true;\t}\tstring pkgout = p.standardoutput.readtoend ();\tp.waitforexit ();\tif (p.exitcode != 0) {",
  "error running pkg config check the above output",
  0
 ],
 [
  "static byte [] notmodifiedsincehandler (socket socket) {\tstringwriter sw = new stringwriter ();",
  "not modified since sun feb gmt",
  0
 ],
 [
  "public static void refcursortest4(oracleconnection connection) {",
  "setup test package and data for",
  0
 ],
 [
  "public void loadurl1(xslinputtype xslinputtype, readertype readertype) {\ttry {\tloadxsl(\"idontexist.xsl\", xslinputtype.uri, readertype, new xmlurlresolver());",
  "no exception was thrown",
  0
 ],
 [
  "public void testgettransportobjectdoesntmissproperties() {\tconst int objectstovalidate = 100;\ttype itransportobjectprovidertype = typeof(itransportobjectprovider<>);\tienumerable<type> types = gettypeswhichimplementinterface(itransportobjectprovidertype.gettypeinfo().assembly, itransportobjectprovidertype, requirepublicconstructor: false);\tforeach (type type in types) {",
  "is bad",
  1
 ],
 [
  "uint modekey;\tgdk.modifiertype modemod;\tuint key;\tgdk.modifiertype mod;\tif (!keybindingmanager.bindingtokeys (accelkey, out modekey, out modemod, out key, out mod)) {\titem.keyequivalent = \"\";\titem.keyequivalentmodifiermask = (nseventmodifiermask) 0;\treturn;\t}\tif (modekey != 0) {",
  "mac menu cannot display accelerators with mode keys",
  0
 ],
 [
  "region region = new region (rect);\tintptr hrgn = region.gethrgn (null);\tmsg.message = msg.wm_ncpaint;\tmsg.wparam = hrgn == intptr.zero ? (intptr)1 : hrgn;\tmsg.refobject = region;\t}\treturn true;\tcase xeventname.destroynotify: hwnd = (x11hwnd)hwnd.objectfromhandle(xevent.destroywindowevent.window);\tif ((hwnd != null) && (hwnd.clientwindow == xevent.destroywindowevent.window)) {\tcleanupcachedwindows (hwnd);",
  "failed didn t get runtimebinderexception",
  1
 ],
 [
  "} else if (s [0] == '-') {\treturn 1;\t} else {\tif (filename != null) {\treturn 1;\t}\tfilename = s;\t}\t}\tif (filename == null) {",
  "error solution file not specified",
  0
 ],
 [
  "isequenced<int> inner = new treeset<int>();\tinner.add(i); inner.add(i+1);\touter.add(inner);\t}\tisequenced<int> inner1 = new treeset<int>(), inner2 = new treeset<int>(), inner3 = new treeset<int>();\tinner1.addall<int>(new int[] { 2, 3, 5, 7, 11 });\tinner2.addall(inner1); inner2.add(13);\tinner3.addall(inner1);\touter.add(inner1);\tinner1.add(13);",
  "done all things good",
  1
 ],
 [
  "public void writenode_xmlreader25(xmlwriterutils utils) {\txmlreader xr = createreaderignorews(\"xmlreader.xml\");\twhile (xr.read()) {\tif (xr.localname == \"pinode\") {\txr.read();\tbreak;\t}\t}\tif (xr.nodetype != xmlnodetype.processinginstruction) {",
  "x y x y x y x y",
  1
 ],
 [
  "public async task negotiatestream_streamtostream_ntlmauthentication_fallback_success() {\tif (!_isntlmavailable) {",
  "foo",
  1
 ],
 [
  "}\tmemberresolveresult mrr = this.resolve(assignmentexpression.left) as memberresolveresult;\tif (mrr != null && mrr.resolvedmember is ifield && !((ifield)mrr.resolvedmember).islocalvariable) {\tpropertydeclaration pd;\t#endif if (data as bool? ?? false) {\t#endif this.associatedmember = mrr.resolvedmember;\t} else if ((pd = (data as propertydeclaration)) != null) {\tif (this.membertofind.compareto(mrr.resolvedmember) == 0) {\tmemberresolveresult prr = nrefactoryastcacheservice.resolvelowlevel(this.filename, this.filecontent, pd.startlocation.y, pd.startlocation.x+1, null, pd.name, expressioncontext.default) as memberresolveresult;\tif (prr != null) {",
  "orleansazureweb run",
  1
 ],
 [
  "public void encoding_isciiassemese() {",
  "verifying isciiassemese encoding",
  0
 ],
 [
  "private static void assertisnotinvalidoperationexception(exception thrownexception, string expectedmessagesubstring) {\texception e = thrownexception.getbaseexception();",
  "nested exception type",
  0
 ],
 [
  "writer.writeline (\"{0}. {1}\", index, rule.name);\twriter.writeline ();\tendcolor ();\tbegincolor (consolecolor.darkred);\twriter.write (\"problem: \");\tendcolor ();\twriter.write (rule.problem);\twriter.writeline ();\tif (defect.location != defect.target) writer.writeline (\"* location: {0}\", defect.location);\tstring source = defect.source;",
  "source",
  0
 ],
 [
  "uint cliheaderstart = pointertorawdata + (cliheaderrva - virtualaddress);\tf.position = cliheaderstart + 16;\tint runtimeflags = r.readint32();\tif ((runtimeflags & 2) == 2) {\treturn false;\t} else {\treturn true;\t}\t}\t}",
  "bit detection failed could not find section containing cli header",
  0
 ],
 [
  "public void testemptycatchwithfinally() {\ttest<redundantcatchclauseanalyzer>(baseinput + @\" try {\tf ();\t} catch {\tthrow;\t} finally {",
  "inside finally",
  0
 ],
 [
  "public void add (filepath[] localpaths, bool recurse, progressmonitor monitor) {\ttry {\tonadd (localpaths, recurse, monitor);\t} catch (exception e) {",
  "drop table",
  1
 ],
 [
  "public void document_8(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartdocument();\tw.writeenddocument();\t}\tcatch (invalidoperationexception e) {",
  "caught exception while deserializing",
  1
 ],
 [
  "public void openexeconfiguration1_userlevel_peruserroamingandlocal () {\tsysconfig config = configurationmanager.openexeconfiguration(configurationuserlevel.peruserroamingandlocal);",
  "source",
  1
 ],
 [
  "public static int main (string[] args) {\tint result = addabunchofints (__arglist ( 2, 3, 4 ));\tif (result != 9) return 1;\tresult = addasecondbunchofints (16, __arglist ( 2, 3, 4 ));\tif (result != 9) return 2;\tclass1 s = new class1 ();\tresult = s.instaddabunchofints (__arglist ( 2, 3, 4, 5 ));",
  "answer",
  0
 ],
 [
  "private void checklibrary (methodbase method, dllimportattribute attribute, assemblycheckinfo report) {\tstring library = attribute.value;\tstring entrypoint = attribute.entrypoint;\tstring type = method.declaringtype.fullname;\tstring mname = method.name;\tstring found = null;\tstring error = null;",
  "generateconditionstatement",
  1
 ],
 [
  "public assemblydefinition tryresolve(assemblynamereference reference) {\ttry {\treturn resolve(reference);\t} catch (assemblyresolutionexception are) {",
  "open connection using external authentication",
  1
 ],
 [
  "public object afterreceiverequest (ref message request, iclientchannel channel, instancecontext instancecontext) {",
  "begin message received by host",
  0
 ],
 [
  "public string getencryptionalgorithm() {\tvar tag = \"-algo\";\tvar algorithm = getargumentvalue( tag );\tif ( algorithm == string.empty ) {\talgorithm = jsonwebkeyencryptionalgorithm.rsaoaep;",
  "is not provided using default value",
  0
 ],
 [
  "public void getparam12() {\tm_xsltarg = new xsltargumentlist();\tstring obj = \"0.00\";\tm_xsltarg.addparam(\"myarg1\", szempty, obj);\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);",
  "added value retrieved value",
  0
 ],
 [
  "public void addparam4(inputtype inputtype, readertype readertype, transformtype transformtype, doctype doctype) {\tstring expected = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?><result> 1.test1</result>\";\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(szlongstring, szempty, \"test1\");\tretobj = m_xsltarg.getparam(szlongstring, szempty);",
  "added value retrieved value",
  0
 ],
 [
  "public static void main() {\ttest1 ();\ttest2 ();\ttry {\treturn;\t} catch (exception) {}",
  "shouldn t get here",
  0
 ],
 [
  "icons [name] = img = getmissingicon ();\treturn img;\t}\tif (name[0] == '#') {\ticons [name] = img = createcolorblock (name, gtk.iconsize.dialog).toxwtimage ();\treturn img;\t}\tensurestockiconisloaded (name);\tif (icons.trygetvalue (name, out img)) return img;\tif (generatedefaulticon) {",
  "unknown icon",
  0
 ],
 [
  "static bool certificatevalidation (x509certificate certificate, int[] certificateerrors) {",
  "error reading command from file",
  1
 ],
 [
  "datatable schematable = null;\tint resultset = 0;\tdo {\tresultset++;\toutputline (\"display the result set \" + resultset);\tschematable = reader.getschematable ();\tif (reader.fieldcount > 0) {\toutputqueryresult (reader, schematable);\t}\telse if (reader.recordsaffected >= 0) {",
  "sql command records affected",
  0
 ],
 [
  "#if debug if (adapterswitches.dataschema.traceinfo) {\t}\t#endif return columnmappings.items[index].getdatacolumnbyschemaaction(datatable, datatype, schemaaction);\t}\t}\tif (adp.isempty(sourcecolumn)) {\tthrow adp.invalidsourcecolumn(\"sourcecolumn\");\t}\tswitch (mappingaction) {\tcase missingmappingaction.passthrough: #if debug if (adapterswitches.dataschema.traceinfo) {",
  "mapping passthrough of sourcecolumn sourcecolumn",
  0
 ],
 [
  "this.testoutputhelper.writeline(stdout);\tthis.testoutputhelper.writeline(\"\");\tthis.testoutputhelper.writeline(stderr);\tthis.testoutputhelper.writeline(\"\");\ttaskconstraints comptc = mycompletedtask.constraints;\tassert.notnull(comptc);\tif (null == comptc) {\t}\telse {\tthis.testoutputhelper.writeline(\"\");",
  "maxtaskretrycount null",
  0
 ],
 [
  "try {\tconfiguration config = configurationmanager.openexeconfiguration (configurationuserlevel.none);\tappsettingssection sect = (appsettingssection)config.getsection(\"appsettings\");\tforeach (string key in sect.settings.allkeys) {\tkeyvalueconfigurationelement e = sect.settings[key];\tconsole.writeline (\"{0} = {1}\", e.key, e.value);\t}\tconsole.writeline (\"lockallattributesexcept = '{0}'\", sect.lockallattributesexcept.attributelist);\t}\tcatch (exception e) {",
  "step",
  1
 ],
 [
  "private static void responsecallback (iasyncresult result) {\tstate state = ((state) result.asyncstate);\thttpwebresponse response = (httpwebresponse) state.request.endgetresponse (result);\tstream stream = response.getresponsestream ();\tstreamreader sr = new streamreader (stream, encoding.utf8);\tstring received = sr.readtoend ();\tif (data.length != received.length) {",
  "process ps msg",
  1
 ],
 [
  "public async task serverallownoencryption_clientallownoencryption_connectwithencryption() {\tusing (var serverallownoencryption = new dummytcpserver( new ipendpoint(ipaddress.loopback, 0), encryptionpolicy.allownoencryption)) using (var client = new tcpclient()) {\tawait client.connectasync(serverallownoencryption.remoteendpoint.address, serverallownoencryption.remoteendpoint.port);\tusing (var sslstream = new sslstream(client.getstream(), false, allowanyservercertificate, null, encryptionpolicy.allownoencryption)) {\tawait sslstream.authenticateasclientasync(\"localhost\", null, sslprotocolsupport.defaultsslprotocols, false);",
  "hello",
  1
 ],
 [
  "catch (invalidoperationexception) {\tflag = false;\t}\tif (flag) {\treturn test_fail;\t}\ttry {\tdatareader.read();\t}\tcatch (xmlexception) {",
  "cannot read after an invalid operation exception",
  0
 ],
 [
  "public static bool stop(bool waitforexit) {\ttry {\tprocess[] managers = process.getprocessesbyname(\"helplibmanager\");\tforeach (process manager in managers) {\tmanager.kill();\tif (waitforexit) manager.waitforexit();\t}\tloggingservice.debug(string.format(\"helpviewer: {0} helplibrarymanager {1} stopped\", managers.length, (managers.length == 1)?\"process\":\"processes\"));\t}\tcatch (exception ex) {",
  "unknown attribute set error",
  1
 ],
 [
  "float4_nested sn4;\tsn4.nested1.f1 = 1;\tsn4.f2 = 2;\tsn4.f3 = 3;\tsn4.nested2.f4 = 4;\tsn4 = mono_return_float4_nested(sn4, 906);\tif (sn4.nested1.f1 != 1+906) {\treturn 1;\t}\tif (sn4.f2 != 2+906) {",
  "nested got but expected",
  0
 ],
 [
  "private void dochecktimeout() {\tint currentmillis = environment.tickcount;\tif (currentmillis < timeoutoccursat) return;\tif (0 > timeoutoccursat && 0 < currentmillis) return;\t#if dbg if (runregex.debug) {\tdebug.writeline(\"\");",
  "search pattern",
  0
 ],
 [
  "public static bool log(object actual, object expected, string source, string message, string details, tagerrorlevel eerrorlevel) {\ttagerrorlevel rsavedlevel = errorlevel;\terrorlevel = eerrorlevel;\ttry {\tif (testconsole != null) {\ttestconsole.log(common.format(actual), common.format(expected), source, message, details, tagconsoleflags.console_text, \"fake_filename\", 999 );\t}\telse if (error != null) {",
  "details",
  0
 ],
 [
  "static bool isstatic (type t) {\ttype type = typeof (staticclass);\tif (!type.isabstract || !type.issealed) {",
  "is not abstract sealed",
  0
 ],
 [
  "myobject obj = new myobject(i, _output);\tm_xsltarg.addextensionobject(szdefaultns + str, obj);\ti++;\t}\ttry {\tif ((loadxsl(\"myobjectdef.xsl\", xslinputtype, readertype) == 1)) transform_arglist(\"fruits.xml\", outputtype, navtype, true);\t}\tcatch (system.xml.xsl.xsltexception) {\treturn;\t}",
  "testing assembly",
  1
 ],
 [
  "public static ienumerable<string> yieldreturnwithnestedtryfinally(bool breakinmiddle) {\tyield return \"start of method\";\ttry {\tyield return \"within outer try\";\ttry {\tyield return \"within inner try\";\tif (breakinmiddle) yield break;\tyield return \"end of inner try\";\t} finally {",
  "inner finally",
  0
 ],
 [
  "}\tswitch (parameters[0].tolowerinvariant()) {\tcase \"deploymentid\": deploymentid = parameters[1];\tbreak;\tcase \"name\": siloname = parameters[1];\tbreak;\treturn null;\t}\t}\telse {",
  "bad command line arguments supplied arg",
  0
 ],
 [
  "public static void testpersistsucurityinfo1() {\tconsole.writeline(\"\\ntestpersistsucurityinfo1 - persist security info=false\");\toracleconnection con = new oracleconnection(\"data source=palis;user id=scott;password=tiger;persist security info=false\");\tcon.open();\tcon.close();",
  "accountinfo unlockaccount sending unlock request",
  1
 ],
 [
  "private static bool callsecondclassinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturndynamicclass();\tif ((!(bool)(s.instancemethod().instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public void discardnull_true_readline_before() {",
  "waited",
  1
 ],
 [
  "string str = datareader[datareader.attributecount + 1];\t}\tcatch (argumentoutofrangeexception exc) {\tcerror.writeline(exc + \" : \" + exc.message);\treturn test_pass;\t}\tcatch (exception e) {\tcerror.writeline(e + \" : \" + e.message);\tthrow new ctestexception(ctestbase.test_fail, wrong_exception);\t}",
  "no exception thrown",
  0
 ],
 [
  "private static void testsafehandle() {",
  "xmlschemamanager cannot register two schemas with the same namespace",
  1
 ],
 [
  "static private void help () {",
  "ack",
  1
 ],
 [
  "if (module.hasexportedtypes) {\tforeach (exportedtype exportedtype in module.exportedtypes) {\toutput.write(\".class extern \");\tif (exportedtype.isforwarder) output.write(\"forwarder \");\toutput.write(exportedtype.declaringtype != null ? exportedtype.name : exportedtype.fullname);\topenblock(false);\tif (exportedtype.declaringtype != null) output.writeline(\".class extern {0}\", disassemblerhelpers.escape(exportedtype.declaringtype.fullname));\tcloseblock();\t}\t}",
  "module",
  0
 ],
 [
  "public static bool flushfilebuffers (intptr hfile) {",
  "actual",
  1
 ],
 [
  "private static bool inconditionaloperator0() {\tint failcount = 0;\tc origin = new c();\tdynamic d = origin;\tif (!(d ? true : false)) {\tfailcount++;",
  "bad view hash offset size startsentinel should be",
  1
 ],
 [
  "public static void creategenerictestfile(string strfilename) {\tfilepathutil.addstream(strfilename, new memorystream());\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"no\\\"?>\");\ttw.writeline(\"<!-- comment1 -->\");\ttw.writeline(\"<?pi1a?>\");\ttw.writeline(\"<?pi1b?>\");\ttw.writeline(\"<?pi1c?>\");\ttw.writeline(\"]>\");",
  "play",
  0
 ],
 [
  "static int main () {\ttype t = typeof (t);\tt obj = new t ();\tmethodbase m1;",
  "test failed at call result",
  1
 ],
 [
  "public abstract void whitespace ();\tpublic abstract void validatestartelement ();\tpublic abstract void validateendelement ();\tpublic abstract void validatetext ();\tpublic abstract void validatewhitespace ();\tpublic abstract void endsection ();\t}\tinternal class nvdlresultinterp : nvdlinterpretation {\tnvdlresulttype type;\tpublic nvdlresultinterp (nvdldispatcher dispatcher, simplemode createdmode, simpleresultaction resultaction, nvdlinterpretation parent) : base (dispatcher, createdmode, resultaction, parent) {",
  "licensefile",
  1
 ],
 [
  "public void at6_readblob() {",
  "foo",
  1
 ],
 [
  "private static bool callsecondstructinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturnstruct();\tif ((!(bool)(((dynamic)(s + 1)).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "return true;\t}\tthis.changestatus (status.adding);\ttry {\tawait this.adddependencies (cancellationtoken.none).configureawait (false);\tawait this.onaddtoproject ().configureawait (false);\tawait this.storeaddedstate ().configureawait (false);\tthis.changestatus (this.getisaddedtoproject() ? status.added : status.notadded);\treturn true;\t} catch (exception ex) {",
  "explicit filtering of sourcetable sourcetable",
  1
 ],
 [
  "public void getparam16() {\tm_xsltarg = new xsltargumentlist();\tint i = 0;\tm_xsltarg.addparam(\"myarg1\", szempty, \"test16\");\tfor (i = 0; i < 200; i++) {\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);\tif (retobj.tostring() != \"test16\") {\tassert.true(false);\t}\t}",
  "verifying beginwrite throws invalidoperationexception while in a break",
  1
 ],
 [
  "public static void usage (string message) {\tif (message != null) {\tconsole.writeline (\"{0}{1}{0}\", environment.newline, message);\t}",
  "select values from the database",
  1
 ],
 [
  "private void dochecktimeout() {\tint currentmillis = environment.tickcount;\tif (currentmillis < timeoutoccursat) return;\tif (0 > timeoutoccursat && 0 < currentmillis) return;\t#if dbg if (runregex.debug) {\tdebug.writeline(\"\");",
  "typedserializers add res mapping getkey new",
  1
 ],
 [
  "if (generatedmaps.count == 0) return;\tgenerationresult main = (generationresult) generatedmaps[0];\tstring baseserializername = main.baseserializerclassname;\tstring access_mod = (_config == null || !_config.generateasinternal) ? \"public\" : \"internal\";\twriteline (\"\");\twritelineind (\"{\");\twritelineuni (\"}\");\twriteline (\"\");\twritelineuni (\"}\");\twriteline (\"\");",
  "return true",
  0
 ],
 [
  "private async task connecttohostasync(tcpclient tcp) {\tstring hostname = null;\tif (_options.remoteendpoint is dnsendpoint) {\tvar dns = (dnsendpoint)_options.remoteendpoint;\thostname = dns.host;",
  "bar test foo is not a tp error",
  1
 ],
 [
  "static bool callsecondclassindexer() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturnclass();\tif ( (!(bool)(((dynamic)s[1])[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "}\t}\tif (adp.isempty(sourcetable)) {\tthrow adp.invalidsourcetable(\"sourcetable\");\t}\tswitch (mappingaction) {\tcase missingmappingaction.passthrough: #if debug if (adapterswitches.dataschema.traceinfo) {\t}\t#endif return new datatablemapping(sourcetable, datasettable);\tcase missingmappingaction.ignore: #if debug if (adapterswitches.dataschema.tracewarning) {",
  "mapping filter of sourcetable sourcetable",
  0
 ],
 [
  "while (cursor.movenext()) {\texception ex;\tmessagecount++;\tibatchcontainer batch = cursor.getcurrent(out ex);\tassert.true(batch.sequencetoken.compareto(lasttoken) >= 0, $\"order check for event {messagecount}\");\tlasttoken = batch.sequencetoken;\tif (messagecount == 10) {\ttenthincache = batch.sequencetoken;\t}\t}",
  "on queue we received a total of message on stream",
  0
 ],
 [
  "public static void main (string[] argv) {\tif (argv.length == 1) {\tbitmap bmp = new bitmap (argv[0]);\tbmp.save (\"bmpsave.bmp\", imageformat.bmp);\t}\telse {",
  "usage bmpsave exe filename",
  0
 ],
 [
  "s15.f11 = 11;\ts15.f12 = 12;\ts15.f13 = 13;\ts15.f14 = 14;\ts15.f15 = 15;\ts15 = mono_return_sbyte15(s15, 9);\tif (s15.f1 != 1+9) {\treturn 1;\t}\tif (s15.f2 != 2+9) {",
  "tcp channel already registered an add in may have registered it",
  1
 ],
 [
  "public void formsreportcontains_4_sections() {\treportcreator.buildexportlist();\tvar x = reportcreator.pages[0].exporteditems;\tvar y = from s in x where s.gettype() == typeof(exportcontainer) select s;\tassert.that(y.tolist().count,is.equalto(4));",
  "publicstaticmethod",
  1
 ],
 [
  "public static mytypefinder create(openedfile file) {\tmytypefinder f = new mytypefinder();\tf.file = file;\tf.importfrom(createwpftypefinder());\tvar compilation = sd.parserservice.getcompilationforfile(file.filename);\tforeach (var referencedassembly in compilation.referencedassemblies) {\ttry {\tvar assembly = f.typeresolutionservice.loadassembly(referencedassembly);\tif (assembly != null) f.registerassembly(assembly);\t} catch (exception ex) {",
  "error loading assembly",
  0
 ],
 [
  "if (line == null || line.length == 0 || column < 0) return 0;\tvar wrapper = getlayout (line);\tuint curindex = 0;\tuint byteindex = 0;\tint index;\tpango.rectangle pos;\ttry {\tindex = (int)translatetoutf8index (wrapper.text, (uint)system.math.min (system.math.max (0, column), wrapper.text.length), ref curindex, ref byteindex);\tpos = wrapper.indextopos (index);\t} catch (exception ex) {",
  "verifying bytestowrite with one call to write",
  1
 ],
 [
  "s8.f4 = 4;\ts8.f5 = 5;\ts8.f6 = 6;\ts8.f7 = 7;\ts8.f8 = 8;\ts8 = mono_return_float8(s8, 906);\tif (s8.f1 != 1+906) {\treturn 1;\t}\tif (s8.f2 != 2+906) {",
  "executing",
  1
 ],
 [
  "try {\tloadxsl_resolver(\"showparam.xsl\", xslinputtype, readertype, null);\ttransform((string) \"fruits.xml\", (outputtype) outputtype, navtype);\tverifyresult(baseline, _stroutfile);\treturn;\t}\tcatch (argumentnullexception e) {\t_output.writeline(e.tostring());\tif (xslinputtype == xslinputtype.uri) return;\telse {",
  "argumentnullexception is not supposed to be thrown for the input type",
  0
 ],
 [
  "public async task bug1360227_addtasksbatchfailure(bool usejoboperations) {\tconst string testname = \"bug1360227_addtasksbatchfailure\";\tint count = 0;\tconst int counttofailat = 102;\tconst int taskcount = 407;\thashset<string> taskidsexpectedtofail = new hashset<string>();\tfunc<addtaskresult, cancellationtoken, addtaskresultstatus> resulthandlerfunc = (result, token) => {",
  "task got status code",
  0
 ],
 [
  "public void invalidifnotypecast() {\ttestwrongcontext<canbereplacedwithtrycastandcheckfornullissue>(@\" class bar {\tpublic bar baz (object foo) {\tif (foo is bar) {",
  "the path not found",
  1
 ],
 [
  "public static void main (string[] args) {\tmycollection mycollection = new mycollection ();\tforeach (mytype item in mycollection) {",
  "success",
  0
 ],
 [
  "private void registerorremoveplugin(object sender, pluginregistereventargs e) {\tif (e.register) {",
  "registerhelpplugin",
  0
 ],
 [
  "public void testdonotwarncase () {\ttestwrongcontext<basemethodcallwithdefaultparameterissue>(@\" public class mybase {\tpublic virtual void foobar(int x = 12) {",
  "foo",
  1
 ],
 [
  "statusline = l;\t} else if (l.startswith (\"authorization:\")) {\thave_auth = true;\t} else if (l.startswith (\"content-length:\")) {\tcl = int32.parse (l.substring (\"content-length: \".length));\t}\t}\t}\tstringwriter sw = new stringwriter ();\tif (!have_auth) {",
  "error",
  1
 ],
 [
  "if (logname == null || logname.length==0) logname = \"application\";\tif (!validlogname(logname, false)) throw new argumentexception(sr.getstring(sr.badlogname));\tif (source == null || source.length==0) throw new argumentexception(sr.getstring(sr.missingparameter, \"source\"));\tif (source.length + eventlogkey.length > 254) throw new argumentexception(sr.getstring(sr.parametertoolong, \"source\", 254 - eventlogkey.length));\teventlogpermission permission = new eventlogpermission(eventlogpermissionaccess.administer, machinename);\tpermission.demand();\tmutex mutex = null;\truntimehelpers.prepareconstrainedregions();\ttry {\tsharedutils.entermutex(eventlogmutexname, ref mutex);",
  "private nativereader reader",
  1
 ],
 [
  "public static void testpersistsucurityinfo6() {\tstring user = environment.username;\tif (!environment.userdomainname.equals(string.empty)) user = environment.userdomainname + \"\\\\\" + environment.username;\toracleconnection con = new oracleconnection(\"data source=palis;integrated security=true\");\ttry {\tcon.open();\toraclecommand cmd = con.createcommand();\tcmd.commandtext = \"select user from dual\";\toracledatareader reader = cmd.executereader();",
  "unhandled type in process",
  1
 ],
 [
  "foreach (gatewayipaddressinformation gateway in ipproperties.gatewayaddresses) {\t_log.writeline(\"-- \" + gateway.address.tostring());\t}\tassert.notnull(ipproperties.multicastaddresses);\tforeach (ipaddressinformation multi in ipproperties.multicastaddresses) {\t_log.writeline(\"-- \" + multi.address.tostring());\t}\tassert.notnull(ipproperties.unicastaddresses);\tforeach (unicastipaddressinformation uni in ipproperties.unicastaddresses) {\t_log.writeline(\"-- \" + uni.address.tostring());",
  "valid lifetime",
  0
 ],
 [
  "static void help (string details) {\tswitch (details) {\tbreak;\tbreak;\tbreak;\tbreak;",
  "error could not install resource file",
  1
 ],
 [
  "static int indexofversion (userdatamigrationnode node, string version) {\tfor (int i=0; i < userprofile.profileversions.length; i++) {\tif (string.equals (userprofile.profileversions[i], version)) {\treturn i;\t}\t}\tif (node != null) {",
  "migration in addin refers to unknown version",
  0
 ],
 [
  "public void bug1771070_1771072_jobandpoollifetimestats() {\taction test = () => {\tusing (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {\tjobstatistics jobstatistics = batchcli.joboperations.getalllifetimestatistics();\tpoolstatistics poolstatistics = batchcli.pooloperations.getalllifetimestatistics();\tassert.notnull(jobstatistics);\tassert.notnull(poolstatistics);",
  "chars xxx pi yyy zzz chars",
  1
 ],
 [
  "private static bool callsecondinterfaceinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturninterface<int>();\tif ((!(bool)(((dynamic)(s + 1)).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "m_xsltarg.addparam(\"myarg1\", szempty, d1);\tm_xsltarg.removeparam(\"myarg1\", szempty);\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);\tif (retobj != null) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg2\", szempty, d2);\tm_xsltarg.removeparam(\"myarg2\", szempty);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (retobj != null) {",
  "system drawing graphics object disposed through finalization",
  1
 ],
 [
  "tw.writeline(\"<entity4 att1='xxx&lt;xxx&#65;xxx&#x43;xxxe1fooxxx'>xxx&gt;xxx&#66;xxx&#x44;xxxe1fooxxx</entity4>\");\ttw.writeline(\"<entity5>e1foo e3bzee </entity5>\");\ttw.writeline(\"<attribute1 />\");\ttw.writeline(\"<attribute2 a1='a1value' />\");\ttw.writeline(\"<attribute3 a1='a1value' a2='a2value' a3='a3value' />\");\ttw.writeline(\"<attribute4 a1='' />\");\ttw.writeline(string.format(\"<attribute5 crlf='x{0}x' cr='x{0}x' lf='x\\nx' ms='x     x' tab='x\\tx' />\", environment.newline));\ttw.writeline(\"<skip1 /><afterskip1 />\");\ttw.writeline(\"<skip2></skip2><afterskip2 />\");\ttw.writeline(\"<chars1>0123456789</chars1>\");",
  "chars xxx zzz chars",
  0
 ],
 [
  "static void async_callback (iasyncresult ar) {",
  "chain",
  1
 ],
 [
  "if (s13.f1 != 1+9) {\treturn 1;\t}\tif (s13.f2 != 2+9) {\treturn 2;\t}\tif (s13.f3 != 3+9) {\treturn 3;\t}\tif (s13.f4 != 4+9) {",
  "got but expected",
  0
 ],
 [
  "public void print () {",
  "no allocations reported on classes",
  1
 ],
 [
  "public static void main (string[] args) {\tfoo f = new foo();\tbar b = new bar();",
  "b is not a tp error",
  0
 ],
 [
  "public void openreceivedataandrts() {\tusing (cancellationtokensource cts = new cancellationtokensource()) {\tvar workertask = new task(() => openreceivedataandrts_workerthread(cts.token));\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {",
  "open and close port while the port is recieving data and the rts pin is changing states",
  0
 ],
 [
  "writer = getwriter (dest, dname);\tint rescount = 0;\tforeach (dictionaryentry e in reader) {\trescount++;\tobject val = e.value;\tif (val is string) writer.addresource ((string)e.key, (string)e.value);\telse writer.addresource ((string)e.key, e.value);\t}\treader.close ();\twriter.close ();",
  "test failed conversion result is incorrect",
  1
 ],
 [
  "else {\trunninghash.add(obj, obj);\t}\tcomobjinfo = (comobjectinfo) objectinfofactory.getobjectinfo(true, obj);\tcomobjinfo.calcrunningobjname(rot, bc, moniker, monikername);\tprogress.updateprogresstext(comobjinfo.getmonikername());\tprogress.updateprogress(1);\trunningobjects.add(comobjinfo);\t}\tcatch (exception ex) {",
  "outputqueuelength",
  1
 ],
 [
  "name = ipconfigname, privateipallocationmethod = ipallocationmethod.dynamic, publicipaddress = new subresource() {\tid = nic1publicip.id }, subnet = new subresource() {\tid = getsubnetresponse.id }\t}\t}, sku = new virtualnetworkgatewaysku() {\tname = \"standard\", tier = \"standard\" }, bgpsettings = new bgpsettings() {\tasn = 1337, bgppeeringaddress = null, peerweight = 5 }\t};\tvar putvirtualnetworkgatewayresponse = networkmanagementclient.virtualnetworkgateways.createorupdate(resourcegroupname, virtualnetworkgatewayname, virtualnetworkgateway);\tassert.equal(\"succeeded\", putvirtualnetworkgatewayresponse.provisioningstate);",
  "class",
  1
 ],
 [
  "}\tforeach (code code in casts) {\tcasts.set (code);\tthrowers.set (code);\t}\tthrowers.set (code.throw);\tforeach (code code in overflow) {\tthrowers.set (code);\toverflow.set (code);\t}",
  "overflow",
  0
 ],
 [
  "public void testtostring() {\tassert.areequal(mystring1, myuint16_1.tostring(), \"a1\");\tassert.areequal(mystring2, myuint16_2.tostring(), \"a2\");\tassert.areequal(mystring3, myuint16_3.tostring(), \"a3\");\tfor (int i=0; i < formats1.length; i++) {",
  "using system",
  1
 ],
 [
  "for (int i = 0; i < md.body.instructions.count; i ++) {\tinstruction ins = md.body.instructions[i];\tif (ins.opcode == opcodes.call) {\tmethoddefinition method_operand = ins.operand as methoddefinition;\tif (method_operand == null) continue;\tpinvokeinfo pinfo = method_operand.pinvokeinfo;\tif (pinfo == null) continue;\timportkey key = new importkey (pinfo.module.name, pinfo.entrypoint);\tif (imports.containskey (key)) {\tif (map.containskey (key)) {",
  "dict",
  1
 ],
 [
  "public static void threadmethod_waiter_1() {",
  "resourcetoolkit nrefactoryresourceresolver getresourcesetreference could not determine the project for the source file null",
  1
 ],
 [
  "else html.writeline(\"       <th colspan=2>condition name:</td>\");\tbool lastwasattribute = false;\tforeach (xmlelement sub in e) {\tswitch (sub.name) {\tcase \"summary\": case \"example\": break;\tcase \"attribute\": if (!lastwasattribute) {\tlastwasattribute = true;\thtml.writeline(\"    <tr><td colspan=3><hr><h3>attributes:</h3></td></tr>\");\t}\tif (sub.hasattribute(\"use\")) {",
  "th name td",
  0
 ],
 [
  "sel.size = 7;\tassert.areequal (7, sel.size, \"size\");\tsel.value = \"*8*\";\tassert.areequal (string.empty, sel.value, \"value\");\tassert.areequal (5, sel.attributes.count, \"attributes.count\");\tforeach (string key in sel.attributes.keys) {\t}\tstatebag sb = sel.getviewstate ();\tassert.areequal (5, sb.count, \"viewstate count\");\tforeach (string key in sb.keys) {",
  "vs key is",
  0
 ],
 [
  "object x = d;\td.invoke (dispatcherpriority.normal, new action (mine));\t};\td.begininvoke (dispatcherpriority.normal, (action) delegate {\t});\td.begininvoke (dispatcherpriority.normal, (action) delegate {\td.invokeshutdown ();\t});\td.begininvoke (dispatcherpriority.send, (action) delegate {\td.begininvoke (dispatcherpriority.send, (action) delegate {",
  "print each parm",
  1
 ],
 [
  "public peerservicesettingsinfo getcustomservicesettings () {",
  "task",
  1
 ],
 [
  "datatable table;\ttable = reader.getschematable();\tfor(int c = 0; c < reader.fieldcount; c++) {\tdatarow row = table.rows[c];\tstring strcolumnname = row[\"columnname\"].tostring();\tstring strbasecolumnname = row[\"basecolumnname\"].tostring();\tstring strcolumnsize = row[\"columnsize\"].tostring();\tstring strnumericscale = row[\"numericscale\"].tostring();\tstring strnumericprecision = row[\"numericprecision\"].tostring();\tstring strdatatype = row[\"datatype\"].tostring();",
  "grant",
  1
 ],
 [
  "static void dumpsignedinfo (signedinfo s) {",
  "assert areequal",
  1
 ],
 [
  "public void utf8encoding() {",
  "verifying read with bytes encoded with",
  0
 ],
 [
  "public void basictest_getipinterfacestatistics_success_osx() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfacestatistics stats = nic.getipstatistics();",
  "extended help for advanced options",
  1
 ],
 [
  "static void printmethodallocationsperclass (textwriter writer, loadedclass.allocationspermethod allocationspermethod, bool jittime, bool printstacktraces, double stacktracetreshold) {\tif (! jittime) {",
  "bytes instances from",
  0
 ],
 [
  "if (s11.f8 != 8+9) {\treturn 8;\t}\tif (s11.f9 != 9+9) {\treturn 9;\t}\tif (s11.f10 != 10+9) {\treturn 10;\t}\tif (s11.f11 != 11+9) {",
  "got but expected",
  0
 ],
 [
  "private static bool verifyreadwrite(serialport com1, serialport com2) {\ttry {\tcom1.readtimeout = 1000;\tcom2.readtimeout = 1000;\tcom1.writetimeout = 1000;\tcom2.writetimeout = 1000;",
  "ping",
  0
 ],
 [
  "public static void usage (string message) {\tif (message != null) {\tconsole.writeline (\"{0}{1}{0}\", environment.newline, message);\t}",
  "not in same directory performing",
  1
 ],
 [
  "public nulltransform (null algo, bool encryption, byte[] key, byte[] iv) : base (algo, encryption, iv) {\t_block = 0;\t_debug = (environment.getenvironmentvariable (\"mono_debug\") != null);\tif (_debug) {",
  "key",
  0
 ],
 [
  "s9.f8 = 8;\ts9.f9 = 9;\ts9 = mono_return_short9(s9, 90);\tif (s9.f1 != 1+90) {\treturn 1;\t}\tif (s9.f2 != 2+90) {\treturn 2;\t}\tif (s9.f3 != 3+90) {",
  "got but expected",
  0
 ],
 [
  "paralleloptions.cancellationtoken = cts.token;\tcounter = 0;\taction a2 = delegate {\tint incrementedvalue = interlocked.increment(ref counter);\tif (incrementedvalue >= 1) cts.cancel();\t};\tfor (int i = 0; i < numactions; i++) actions[i] = a2;\tassert.throws<operationcanceledexception>(() => {\tparallel.invoke(paralleloptions, actions);\t});",
  "saw counter get incremented to with degrees of parallelism",
  0
 ],
 [
  "public static void thread() {\tthread.sleep(500);\tthread.sleep(500);\tthread.sleep(500);",
  "deleting job",
  1
 ],
 [
  "try {\tw.writestartelement(\"root\");\tw.writeattributestring(\"xml\", \"space\", null, \"preserve\");\tw.writeattributestring(\"xml\", \"space\", null, \"default\");\t}\tcatch (xmlexception) {\ttestlog.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "exception expected",
  0
 ],
 [
  "type type = typeof (brushes);\tpropertyinfo[] properties = type.getproperties ();\tint count = 1;\tforeach (propertyinfo property in properties) {\tconsole.writeline(\"\\n\\t\\t\\tbr = brushes.\" + property.name + \";\");\tconsole.writeline(\"\\t\\t\\tsolid = (solidbrush) br;\");\tif (property.name != \"red\") {\tconsole.writeline(\"\\t\\t\\tsolid.color = color.red;\");\t} else {\tconsole.writeline(\"\\t\\t\\tsolid.color = color.white;\");",
  "got but expected",
  1
 ],
 [
  "for (int i = 0; i < direntrycount; i++) {\ticondirentry ide;\tide.width = reader.readbyte ();\tide.height = reader.readbyte ();\tide.colorcount = reader.readbyte ();\tide.reserved = reader.readbyte ();\tide.planes = reader.readuint16 ();\tide.bitcount = reader.readuint16 ();\tide.bytesinres = reader.readuint32 ();\tide.imageoffset = reader.readuint32 ();",
  "nil",
  1
 ],
 [
  "static private void help () {",
  "console writeline appdomain getcurrentthreadid console writeline appdomain getcurrentthreadid",
  1
 ],
 [
  "public void m() {\t#line 40 console.writeline(4);\t#line hidden console.writeline();",
  "c a b x cs",
  0
 ],
 [
  "private void writeservicepoint (servicepoint sp) {",
  "currentconnections",
  0
 ],
 [
  "byte[] buffer = new byte[ibuffersize];\txmlreader datareader = getreader(pbinhexxml);\tpositiononelement(datareader, st_elem_name1);\tif (!datareader.canreadbinarycontent) return true;\ttry {\tdatareader.readelementcontentasbinhex(buffer, iindex, icount);\t}\tcatch (exception e) {\tbpassed = (e.gettype().tostring() == exceptiontype.tostring());\tif (!bpassed) {",
  "actual exception",
  0
 ],
 [
  "{ \"h|?|help\", \"show this message and exit.\", v => help = v != null }, { \"v|verbose\", \"increase message verbosity.\", v => { ++verbose; } }, { \"n=\", \"must be an int\", (int n) => { /* ignore */ } }, { \"v|version\", \"output version information and exit.\", v => version = v != null }, };\ttry {\tp.parse (args);\t}\tcatch (optionexception e) {\tconsole.write (\"localization: \");\tconsole.writeline (e.message);\treturn;\t}\tif (help) p.writeoptiondescriptions (console.out);",
  "message level",
  0
 ],
 [
  "public static void clobtest (oracleconnection connection) {",
  "begin transaction",
  0
 ],
 [
  "public async task taskmethodwithoutawaitbutwithexceptionhandling() {\ttry {\tusing (new stringwriter()) {",
  "scenario vanilla different drive is mounted on the current drive",
  1
 ],
 [
  "case \"writevalue\": w.writevalue(invalidxml[3].tostring());\tw.writeendelement();\tw.dispose();\tassert.true(utils.comparereader(\"<root>&#xc;</root>\"));\treturn;\tdefault: cerror.compare(false, \"invalid param value\");\tbreak;\t}\t}\tcatch (argumentexception e) {",
  "exception",
  0
 ],
 [
  "public void basictest_accessinstanceproperties_noexceptions_linux() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tstring description = nic.description;\tassert.false(string.isnullorempty(description), \"networkinterface.description should not be null or empty.\");\tstring id = nic.id;\tassert.false(string.isnullorempty(id), \"networkinterface.id should not be null or empty.\");\tassert.throws<platformnotsupportedexception>(() => nic.isreceiveonly);\ttry {",
  "principalsearchresult dispose disposing",
  1
 ],
 [
  "public void charencoding() {\tstring chars = \"\\u1234 \\u4567 \\uabcd \\r \\n \\t \\\\ \\\" \\' \\0 \\u2028 \\u2029 \\u0084 \\u0085 \\u00010f00\";\tvar main = new codeentrypointmethod();",
  "try get b",
  1
 ],
 [
  "if (copypixeloperation != copypixeloperation.sourcecopy) throw new notimplementedexception (\"operation not implemented under x11\");\tif (gdiplus.display == intptr.zero) {\tgdiplus.display = gdiplus.xopendisplay (intptr.zero);\t}\twindow = gdiplus.xrootwindow (gdiplus.display, 0);\tdefvisual = gdiplus.xdefaultvisual (gdiplus.display, 0);\txvisualinfo visual = new xvisualinfo ();\tvisual.visualid = gdiplus.xvisualidfromvisual(defvisual);\tvptr = gdiplus.xgetvisualinfo (gdiplus.display, 0x1 /* visualidmask */, ref visual, ref nitems);\tvisual = (xvisualinfo) marshal.ptrtostructure(vptr, typeof (xvisualinfo));",
  "removing all mo files",
  1
 ],
 [
  "sbyte4 s4;\ts4.f1 = 1;\ts4.f2 = 2;\ts4.f3 = 3;\ts4.f4 = 4;\ts4 = mono_return_sbyte4(s4, 9);\tif (s4.f1 != 1+9) {\treturn 1;\t}\tif (s4.f2 != 2+9) {",
  "raised",
  1
 ],
 [
  "onstatechanged (true);\tonoperationstartedevent (this);\tonmessageevent (\"loading {0}\", uri);\tvar result = await run (uri, cts.token);\tif (result != null) onmessageevent (result);\telse onmessageevent (\"loaded {0}.\", uri);\t} catch (taskcanceledexception) {\tonmessageevent (\"cancelled!\");\t} catch (exception ex) {\tonmessageevent (\"error: {0}\", ex.message);",
  "key",
  1
 ],
 [
  "private static bool callsecondclassinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tif ((!(bool)(((dynamic)firstclassreturnclass.staticmethod()).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "samstorectx updategroupmembership removing",
  1
 ],
 [
  "}\t}\t}\t\";\tvar unit = syntaxtree.parse(code);\tvar type = unit.members.first() as typedeclaration;\tvar method = type.members.first() as methoddeclaration;\tvar stmt = method.body.statements.first () as returnstatement;\tbool passed = stmt.expression is objectcreateexpression;\tif (!passed) {",
  "expected",
  0
 ],
 [
  "console.writeline (\");\");\tif (c [0] != 'v') console.writeline ($\"\\t*({typetosigtype (c [0])}*)margs->retval = res;\");\tconsole.writeline (\"\\n}\\n\");\t}\tconsole.writeline (\"{\");\tfor (int i = 0; i < cookies.length; ++i) {\tvar c = cookies [i];\tconsole.write (\"\\t\");\tif (i > 0) console.write (\"else \");\t}",
  "else",
  0
 ],
 [
  "public void baudrate_default() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "verifying default baudrate",
  0
 ],
 [
  "assert.notnull(results[0]);\tassert.true((bool)results[0].baseobject);\tassert.notnull(results[1]);\tassert.true((bool)results[1].baseobject);\tassert.notnull(results[2]);\tassert.true(results[2].baseobject is imanagementgrain);\tvar statuses = results[3].baseobject as dictionary<siloaddress, silostatus>;\tassert.notnull(statuses);\tassert.true(statuses.count > 0);\tforeach (var pair in statuses) {",
  "you must specify only one attribute from destinationfiles and destinationfolder",
  1
 ],
 [
  "#endif return tables[index];\t}\tswitch (schemaaction) {\tcase missingschemaaction.add: case missingschemaaction.addwithkey: #if debug if (adapterswitches.dataschema.traceinfo) {\t}\t#endif return new datatable(datasettable);\tcase missingschemaaction.ignore: #if debug if (adapterswitches.dataschema.tracewarning) {\t}\t#endif return null;\tcase missingschemaaction.error: #if debug if (adapterswitches.dataschema.traceerror) {",
  "fail expected aggregateexception on task wait for cancelled task",
  1
 ],
 [
  "public foo () {\tmy_a = totalinstances++;",
  "instance ctor",
  0
 ],
 [
  "s3.f2 = 2;\ts3.f3 = 3;\ts3 = mono_return_double3(s3, 9);\tif (s3.f1 != 1+9) {\treturn 1;\t}\tif (s3.f2 != 2+9) {\treturn 2;\t}\tif (s3.f3 != 3+9) {",
  "exception",
  1
 ],
 [
  "finally {\tmounthelper.unmount(mounteddirname);\tdeletedir(mounteddirname, true);\t}\t}\telse {\t}\t}\tcatch (exception ex) {\ts_pass = false;",
  "end",
  1
 ],
 [
  "static void test5 () {\tint i = 8;\tswitch (10) {\tcase 5: if (i != 10) throw new applicationexception ();\tconsole.writeline (5);\tbreak;\tcase 10: i = 10;\tconsole.writeline (10);\tgoto default;",
  "default",
  0
 ],
 [
  "public static void main(string[] args) {\timagecodecinfo info = null;\tbitmap pages = null;\tforeach(imagecodecinfo ice in imagecodecinfo.getimageencoders()) if(ice.mimetype==\"image/tiff\") info = ice;\tif (info == null) {",
  "couldn t get codec for image tiff",
  0
 ],
 [
  "private static void accepttypedref(typedreference tr) {",
  "value is",
  0
 ],
 [
  "public int read8() {\tstring filename = path.combine(testdata, \"common\", \"bug_65660a.xml\");\ttry {\treloadsource(filename);\twhile (datareader.read()) ;\treturn test_fail;\t}\tcatch (xmlexception e) {",
  "it works",
  1
 ],
 [
  "assertequals (\"eval3 #4\", databinder.eval (echo, \"['test']\"), \"test\");\tassertequals (\"eval3 #5\", databinder.eval (echo, \"['test\\\"]\"), \"'test\\\"\");\tassertequals (\"eval3 #6\", databinder.eval (echo, \"[\\\"test']\"), \"\\\"test'\");\t}\t#if !nunit void assert (string msg, bool result) {\tif (!result) console.writeline (msg);\t}\tvoid assertequals (string msg, object expected, object real) {\tif (expected == null && real == null) return;\tif (expected != null && expected.equals (real)) return;",
  "expected got",
  0
 ],
 [
  "public void refreshexpiredpassword() {\tif (_owningprincipal.unpersisted) {",
  "passwordinfo refreshexpiredpassword saving until persisted",
  0
 ],
 [
  "const string taskid = \"bug1770926_updatetask_task1\";\tstring jobid = constants.defaultconvenienceprefix + testutilities.getmyname() + \"-\" + testname;\ttaskconstraints defaultconstraints = new taskconstraints(timespan.maxvalue, timespan.maxvalue, 0);\ttry {\tcloudjob jobschedule = batchcli.joboperations.createjob(jobid, new poolinformation());\tjobschedule.poolinformation = new poolinformation() {\tpoolid = \"poolwhodoesntexist\" };\tjobschedule.commit();\tcloudjob boundjob = batchcli.joboperations.getjob(jobid);\tcloudtask mytask = new cloudtask(taskid, \"cmd /c echo hello world\");",
  "adding task",
  0
 ],
 [
  "public override void writepropertybeforeset(codewriter writer, dblinq.schema.dbml.column property, generationcontext context) {",
  "on changing value",
  0
 ],
 [
  "var classnode = root.findnode (classregion.sourcespan) as classdeclarationsyntax;\tif (classnode == null) return;\tvar newclassnode = classnode;\tnewclassnode = newclassnode.withmembers (newclassnode.members.add (newmethod ()));\tif (newclassnode != classnode) {\tvar newroot = root.replacenode<syntaxnode> (classnode, newclassnode);\tnewroot = formatter.format (newroot, proj.solution.workspace);\tvar newsolution = proj.solution.withdocumentsyntaxroot (docid, newroot);\tif (!proj.solution.workspace.tryapplychanges (newsolution)) {\tif (proj.solution.workspace.currentsolution.version != newsolution.version) {",
  "solution version is different",
  0
 ],
 [
  "public void basictest_getipinterfacestatistics_success() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfacestatistics stats = nic.getipstatistics();",
  "incomingunknownprotocolpackets",
  0
 ],
 [
  "protected async task<bool> checkgraincounts() {\t#if use_generics string graintype = typeof(streamreliabilitytestgrain<int>).fullname;\t#else string graintype = typeof(streamreliabilitytestgrain).fullname;\t#endif imanagementgrain mgmtgrain = this.grainfactory.getgrain<imanagementgrain>(0);\tsimplegrainstatistic[] grainstats = await mgmtgrain.getsimplegrainstatistics();",
  "eventlog close closed write handle",
  1
 ],
 [
  "try {\tconfiguration config = configurationmanager.openexeconfiguration (configurationuserlevel.none);\tconnectionstringssection sect = config.connectionstrings;\tconnectionstringsettingscollection connectionstrings = sect.connectionstrings;\tconnectionstrings.add (new connectionstringsettings (\"fromtest\", \"connectionstringhere\"));\tforeach (connectionstringsettings cs in connectionstrings) {\tconsole.writeline (\"connectionstring[{0}] = `{1}',`{2}'\", cs.name, cs.providername, cs.connectionstring);\t}\t}\tcatch (exception e) {",
  "raised",
  0
 ],
 [
  "public void loadgeneric11(inputtype inputtype, readertype readertype, transformtype transformtype, doctype doctype) {\tstring expected = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?><book> name </book>\";\tif (doctype.tostring() == \"datadocument\") return;\telse {\tif (loadxsl(\"books_entity_ref.xsl\", inputtype.reader, readertype) != 1) {",
  "row",
  1
 ],
 [
  "{\tforeach (string poolid in poolidstocreate) {\tcloudpool unboundpool = batchcli.pooloperations.createpool( poolid, poolfixture.vmsize, new cloudserviceconfiguration(poolfixture.osfamily), targetdedicatedcomputenodes: 0);\tunboundpool.commit();\t}\tvar allpools = batchcli.pooloperations.listpools();\ttestutilities.displaypools(this.testoutputhelper, allpools);\tvar oddienum = batchcli.pooloperations.listpools(new odatadetaillevel() {\tfilterclause = \"startswith(id, 'odd')\", selectclause = \"id,state\" });\tlist<cloudpool> oddlist = new list<cloudpool>(oddienum);",
  "exe options file",
  1
 ],
 [
  "private void processcall ([nonnull] instruction insn, bool warn, bool indirect, [nonnull] nullderefframe frame) {\timethodsignature csig = (imethodsignature)insn.operand;\tif(indirect) frame.popstack(); /* function pointer */ foreach(parameterdefinition param in csig.parameters) {\tnullity n = frame.popstack();\tif(warn && nnacollector.hasnonnullattribute(method, param)) {",
  "saved to",
  1
 ],
 [
  "private static opcodebitmask comparisonsbitmask () {\topcodebitmask mask = new opcodebitmask ();\tmask.set (code.cgt);\tmask.set (code.ceq);\tmask.set (code.clt);\tmask.set (code.ble);\tmask.set (code.ble_s);\tmask.set (code.bge);\tmask.set (code.bge_s);",
  "comparisonsbitmask",
  0
 ],
 [
  "static void main(string[] args) {\ttry {\tnamevaluecollection appsettings = configurationmanager.appsettings;\tconfiguration config = configurationmanager.openexeconfiguration (configurationuserlevel.none);\tappsettingssection appsettings = config.appsettings;",
  "exception",
  1
 ],
 [
  "private void generatecompileunitstart(codecompileunit e) {\tif (e.startdirectives.count > 0) {\tgeneratedirectives(e.startdirectives);\t}\toutput.write(\" output.write(sr.autogen_comment_line3);\toutput.writeline(environment.version.tostring());",
  "output write",
  0
 ],
 [
  "}\tif (resolvedname != null) {\ts = resourceassembly.getmanifestresourcestream(resolvedname);\t}\t}\tif (s != null) {\tdesigntimelicensecontextserializer.deserialize(s, filename.toupper(cultureinfo.invariantculture), this);\t}\t}\t}",
  "verify exception testname e",
  1
 ],
 [
  "public void writetimeout_infinite_write_byte_int_int() {",
  "set values in the new datarow",
  1
 ],
 [
  "public basicmethoddriver (method method, ibasicanalysisdriver parent) {\tthis.method = method;\tthis.parent = parent;\trawlayer = codelayerfactory.create ( this.parent.subroutinefacade.getcontrolflowgraph (method).getdecoder (parent.metadataprovider), parent.metadataprovider, parent.contractprovider, dummy => \"\", dummy => \"\");\tif (debugoptions.debug) {",
  "position",
  1
 ],
 [
  "public static int main () {\tconstructorinfo mi = typeof(c).getconstructors ()[0];\tmethodbody mb = mi.getmethodbody();\tif (mb.getilasbytearray ().length != 7) {\treturn 3;\t}\tbool b = default (datetime?) == default (datetime?);\tif (!b) return 19;",
  "error loading",
  1
 ],
 [
  "oldtg = node.taggroup;\ttaggroupsize = 1;\t}\telse {\ttaggroupsize++;\t}\t}\t#endif prev = node;\tnode = node.next;\tif (node == null) {",
  "null next pointer at node",
  0
 ],
 [
  "protected virtual string loadfile (string path) {\tif (!file.exists (path)) {\treturn string.empty;\t}\ttry {\treturn file.readalltext (path);\t} catch (exception ex) {",
  "argumentnullexception is not supposed to be thrown for the input type",
  1
 ],
 [
  "++indent;\tgeneratestatements (property.getstatements);\t--indent;\t}\tif (property.hasset) {\t++indent;\tgeneratestatements (property.setstatements);\t--indent;\t}\t--indent;",
  "end property",
  0
 ],
 [
  "static void main(string[] args) {\ttry {\tconsole.writeline (\"1\");\tconfiguration config = configurationmanager.openexeconfiguration (configurationuserlevel.none);\tconsole.writeline (\"2\");\tcustomsection sect = (customsection)config.getsection(\"customsection\");\tconsole.writeline (\"longsetting = {0}\", sect.longsetting);\t}\tcatch (exception e) {",
  "bad command line arguments supplied",
  1
 ],
 [
  "break;\treturn;\treturn;\t#endif }\tcon.connectionstring = constr;\ttry {\tcon.open();\t}\tcatch(sqlexception se) {\tforeach(sqlerror error in se.errors) {",
  "copy bytes from to",
  1
 ],
 [
  "static void help () {",
  "drag delegate received draggingexited",
  1
 ],
 [
  "public void savesettings () {\tif (settings == null) return;\ttry {\tvar doc = new xdocument ( new xelement (\"root\", shell.savehistory (), new xelement (\"width\", allocation.width), new xelement (\"height\", allocation.height), new xelement (\"panevisible\", panevisible ? 1 : 0), new xelement (\"paneposition\", hpaned.position)));\tdoc.save (settings, saveoptions.disableformatting);\t} catch (exception e ) {",
  "oops",
  0
 ],
 [
  "if (!environment.userdomainname.equals(string.empty)) user = environment.userdomainname + \"\\\\\" + environment.username;\toracleconnection con = new oracleconnection(\"data source=palis;integrated security=true\");\ttry {\tcon.open();\toraclecommand cmd = con.createcommand();\tcmd.commandtext = \"select user from dual\";\toracledatareader reader = cmd.executereader();\tcon.close();\t}\tcatch (exception e) {",
  "exception caught",
  0
 ],
 [
  "{\"help\", \"show this help.\", v => showoptions = v != null}, {\"assembly=\", \"assembly to check.\", v => options.assembly = v}, {\"method=\", \"method name (if you want to check only it).\", v => options.method = v}, {\"debug=\", \"show debug information\", v=> options.showdebug = v != null}\t};\ttry {\toptionset.parse (args);\t} catch (optionexception e) {\tshowoptions = true;\tshowmsg = e.message;\t}\tif (showoptions) {\tconsole.writeline ();",
  "null deref at",
  1
 ],
 [
  "public void transformstrstr4(inputtype inputtype, readertype readertype) {\tif (loadxsl(\"showparam.xsl\", inputtype, readertype) == 1) {\ttry {\tcalltransform(xslt, \"idontexist.xsl\", _stroutfile);\t}\tcatch (system.io.filenotfoundexception) {\treturn;\t}\t}",
  "exception not generated for invalid input file",
  0
 ],
 [
  "_output.writeline(e.tostring());\tif (xslinputtype == xslinputtype.uri) return;\telse {\tassert.true(false);\t}\t}\tcatch (xsltexception e3) {\t_output.writeline(e3.message);\tif (xslinputtype == xslinputtype.uri) return;\telse {",
  "xmlexception is not supposed to be thrown for the input type",
  0
 ],
 [
  "else {\texitcode = prog.run();\t}\t}\tcatch (exception exc) {\tprog.logmessage(string.format(\"{0} halting due to error - {1}\", thisprog.name, exc));\tprog.flushlog();\texitcode = 1;\t}\tif (!prog.automated) {",
  "ok",
  1
 ],
 [
  "public static int main (string[] args) {\tsbyte1 s1;\ts1.f1 = 1;\ts1 = mono_return_sbyte1(s1, 9);\tif (s1.f1 != 1+9) {",
  "total result sets",
  1
 ],
 [
  "mydict<string, object> autoids = new mydict<string, object>();\tlist<string> attnames = new list<string>();\tlist<string> attscopes = new list<string>();\tstring stractual = this.getstring();\tint explen = (strexpected == null ? 0 : strexpected.length);\tint actlen = (stractual == null ? 0 : stractual.length);\tint minlen = (explen < actlen ? explen : actlen);\tint i, j = 0;\tfor (i = 0; i < actlen; i++) {\tif (j >= explen) {",
  "output longer than expected",
  0
 ],
 [
  "}\tmemberresolveresult mrr = this.resolve(expr) as memberresolveresult;\tif (mrr != null && mrr.resolvedmember is ifield) {\tpropertydeclaration pd;\t#endif if (data as bool? ?? false) {\t#endif this.associatedmember = mrr.resolvedmember;\t} else if ((pd = (data as propertydeclaration)) != null) {\tif (this.membertofind.compareto(mrr.resolvedmember) == 0) {\tmemberresolveresult prr = nrefactoryastcacheservice.resolvelowlevel(this.filename, this.filecontent, pd.startlocation.y, pd.startlocation.x+1, null, pd.name, expressioncontext.default) as memberresolveresult;\tif (prr != null) {",
  "resourcetoolkit propertyfieldassociationvisitor inside propertygetregion resolved property",
  0
 ],
 [
  "xdocument doc = new xdocument();\tusing (xmlwriter w = createwriter(doc)) {\ttry {\tw.writestartelement(\"xml\", \"root\", \"blah\");\t}\tcatch (argumentexception) {\ttestlog.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "test type",
  1
 ],
 [
  "private void intellisensetextbox_keydown(object sender, keyeventargs e) {\tstring currentvalue = this.text;\tint selectionstart = this.selectionstart;\tint selectionlength = this.selectionlength;\tstringbuilder removedstring = new stringbuilder(currentvalue.substring(selectionstart, selectionlength));\tstringbuilder projectedvalue = new stringbuilder(currentvalue.substring(0, selectionstart));\tprojectedvalue.append(currentvalue.substring(selectionstart + selectionlength));",
  "keycode keydata keyvalue",
  0
 ],
 [
  "private void writeservicepoint (servicepoint sp) {",
  "done",
  1
 ],
 [
  "public void testunsafestatement () {\ttest<redundantunsafecontextissue>(@\" class foo {\tpublic static void main (string[] args) {\tunsafe {\t}\t}\t}\t\", @\" class foo {\tpublic static void main (string[] args) {",
  "hello",
  0
 ],
 [
  "tw.write(\"<entity1 att1='xxx&lt;xxx&#65;xxx&#x43;xxxe1fooxxx'>xxx&gt;xxx&#66;xxx&#x44;xxxe1fooxxx</entity1>\");\ttw.writeline(\"<entity2 att1='xxx&lt;xxx&#65;xxx&#x43;xxxe1fooxxx'>xxx&gt;xxx&#66;xxx&#x44;xxxe1fooxxx</entity2>\");\ttw.writeline(\"<entity3 att1='xxx&lt;xxx&#65;xxx&#x43;xxxe1fooxxx'>xxx&gt;xxx&#66;xxx&#x44;xxxe1fooxxx</entity3>\");\ttw.writeline(\"<entity4 att1='xxx&lt;xxx&#65;xxx&#x43;xxxe1fooxxx'>xxx&gt;xxx&#66;xxx&#x44;xxxe1fooxxx</entity4>\");\ttw.writeline(\"<entity5>e1foo e3bzee </entity5>\");\ttw.writeline(\"<attribute1 />\");\ttw.writeline(\"<attribute2 a1='a1value' />\");\ttw.writeline(\"<attribute3 a1='a1value' a2='a2value' a3='a3value' />\");\ttw.writeline(\"<attribute4 a1='' />\");\ttw.writeline(string.format(\"<attribute5 crlf='x{0}x' cr='x{0}x' lf='x\\nx' ms='x     x' tab='x\\tx' />\", environment.newline));",
  "elem",
  0
 ],
 [
  "public async task usecallback_validcertificate_expectedvaluesduringcallback(uri url, bool checkrevocation) {\tif (!backendsupportscustomcertificatehandling) {",
  "skipping nameof usecallback validcertificate expectedvaluesduringcallback url checkrevocation",
  0
 ],
 [
  "static void printmethodallocationsperclass (textwriter writer, loadedclass.allocationspermethod allocationspermethod, bool jittime, bool printstacktraces, double stacktracetreshold) {\tif (! jittime) {\t} else {",
  "regression tests ran failed in",
  1
 ],
 [
  "public override void garbagecollectionmarkend (uint collection, uint generation, ulong counter) {",
  "garbagecollectionmarkend",
  0
 ],
 [
  "public void endelement () {",
  "error while creating derived data directories",
  1
 ],
 [
  "case callconversionoperation.opcode.return_integer_byvalue_from_localblock_x_pointer_y_of_size_z: {\t#if x86 callconverterthunk.setupcalleractualreturndata(locals.transitionblockptr);\tfixed (returnblock* retblk = &callconverterthunk.t_nonargregisterreturnspace) {\tbuffer.memorycopy(locals.getlocalblock(op.x).getrawmemorypointer()[op.y].topointer(), retblk, op.z, op.z);\t}\tlocals.intptrreturnval = callconverterthunk.returnintegerpointreturnthunk;\t#else byte* returnblock = locals.transitionblockptr + transitionblock.getoffsetofargumentregisters();\tmemoryhelpers.memset((intptr)returnblock, intptr.size, 0);\tbuffer.memorycopy(locals.getlocalblock(op.x).getrawmemorypointer()[op.y].topointer(), returnblock, op.z, op.z);\tlocals.intptrreturnval = callconverterthunk.returnintegerpointreturnthunk;",
  "name id ver major ver minor ver build ver revision",
  1
 ],
 [
  "public static void createbigelementtestfile(string strfilename) {\tstream s = new memorystream();\ttextwriter tw = new streamwriter(s);\tstring str = new string('z', (1 << 20) - 1);\ttw.write(\"<\");\ttw.write(str);\ttw.flush();\ttw.write(\"<\");\ttw.write(str);",
  "root",
  0
 ],
 [
  "public static int main () {\tint r;\ta a = new a (1);\tif (a.value != 500) return 1;\tr = a.test (1);\tif (r != 2) return 2;\tr = a [0];\tif (r != 2) return 3;",
  "ok",
  0
 ],
 [
  "executeandverify(cmd, tvpperm, basevalues, null);\t}\tcatch (argumentexception ae) {\t}\tif (!runonlydatarecordtest) {\ttry {\tparam.value = new tvprestartablereader(createlistofrecords(tvpperm, basevalues));\texecuteandverify(cmd, tvpperm, basevalues, null);\t}\tcatch (argumentexception ae) {",
  "skipping nameof manual sendclientcertificatewithclientauthekutoremoteserver ok",
  1
 ],
 [
  "if (s7.f1 != 1+90) {\treturn 1;\t}\tif (s7.f2 != 2+90) {\treturn 2;\t}\tif (s7.f3 != 3+90) {\treturn 3;\t}\tif (s7.f4 != 4+90) {",
  "got but expected",
  0
 ],
 [
  "public override string tostring() {\tstringwriter writer = new stringwriter(cultureinfo.invariantculture);",
  "imports system class somedata public property subdata as somesubdata end class class somesubdata public property name as string end class class testclass public sub testmethod dim data as new somedata console writeline data subdata name end sub end class imports system class somedata public property subdata as somesubdata end class class somesubdata public property name as string end class class testclass public sub testmethod dim data as new somedata if data subdata isnot nothing then console writeline data subdata name end if end sub end class",
  1
 ],
 [
  "stringwriter expected = new stringwriter ();\texpected.writeline (\"\");\texpected.writeline (\"  -p, --indicator-style=value\");\texpected.writeline (\"      --color[=value]        controls color info\");\texpected.writeline (\"      --color2[=color]       set color\");\texpected.writeline (\"      --rk=value1:value2     required key/value option\");\texpected.writeline (\"      --rk2=key:value        required {foo} key/value option\");\texpected.writeline (\"      --rk3=value            required {foo}\");\texpected.writeline (\"      --rk4=val              required {foo} val\");\texpected.writeline (\"      --ok[=value1:value2]   optional key/value option\");",
  "long iwantthisdescriptiontobreakinsideawordgeneratingau",
  0
 ],
 [
  "typeconverter converter;\tconverter = typedescriptor.getconverter (o);\t#if trace trace.writeline (string.format (\"type converter: '{0}' (to string: {1}; from {2}: {3})\", converter, converter != null ? converter.canconvertto (typeof (string)) : false, t, converter != null ? converter.canconvertfrom (t) : false));\t#endif if (converter == null || converter.gettype () == typeof (typeconverter) || !converter.canconvertto (typeof (string)) || !converter.canconvertfrom (typeof (string))) fmt = binaryobjectformatter;\telse {\ttypeconverterformatter.converter = converter;\tfmt = typeconverterformatter;\t}\t}\t}",
  "writing with formatter",
  0
 ],
 [
  "case typecode.datetime: code = \"new system.datetime (\" + ((datetime) value).ticks + \")\"; break;\tcase typecode.dbnull: code = \"system.dbnull.value\" ; break;\tcase typecode.object: code = null;\tif (value is exception) {\twriter.writeline (tab + \"\\tobject zxf = {0}.{1};\", showname, name);\twriter.writeline (tab + \"}\");\t} else {\tif (maxrecursive > level) {\tdumpobject (value, ((memberinfo)members [name]).declaringtype, showname + \".\" + name, writer, tabs, prefix, done, maxrecursive, level + 1);\t} else {",
  "error loading install directory",
  1
 ],
 [
  "string controllertype = typeof(controllablebootstrapprovider).fullname;\tsilohandle[] silos = hostedcluster.getactivesilos().toarray();\tint numsilos = silos.length;\tstring args = \"onesetofargs\";\timanagementgrain mgmtgrain = grainfactory.getgrain<imanagementgrain>(0);\tobject[] replies = await mgmtgrain.sendcontrolcommandtoprovider(controllertype, controllername, (int) controllablebootstrapprovider.commands.echoarg, args);\tassert.equal(numsilos, replies.length);\tassert.true(replies.all(reply => reply.tostring().equals(args)), $\"got args {args}\");\targs = \"differentsetofargs\";\treplies = await mgmtgrain.sendcontrolcommandtoprovider(controllertype, controllername, (int) controllablebootstrapprovider.commands.echoarg, args);",
  "got replies",
  0
 ],
 [
  "static byte [] notmodifiedsincehandler (socket socket) {\tstringwriter sw = new stringwriter ();",
  "test failed at call result",
  1
 ],
 [
  "arguments = new object [] { i, j, int32_out, maskedtextresulthint_out };\tif (compare (\"removeat\", mask, ref stateindex, arguments, ref more_states)) {\tcontinue;\t}\tdont_write = false;\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;",
  "waiting for the task to complete",
  1
 ],
 [
  "public void testbug3952() {\tstring code = @\" class foo {\tvoid bar() {\ttest(new foo ( }\t}\";\tvar unit = syntaxtree.parse(code);\tvar type = unit.members.first() as typedeclaration;\tvar method = type.members.first() as methoddeclaration;\tbool passed = !method.body.isnull;\tif (!passed) {",
  "expected",
  0
 ],
 [
  "try {\timported_algenfilters = (delegate_algenfilters)marshal.getdelegateforfunctionpointer(al.getprocaddress(\"algenfilters\"), typeof(delegate_algenfilters));\timported_aldeletefilters = (delegate_aldeletefilters)marshal.getdelegateforfunctionpointer(al.getprocaddress(\"aldeletefilters\"), typeof(delegate_aldeletefilters));\timported_alisfilter = (delegate_alisfilter)marshal.getdelegateforfunctionpointer(al.getprocaddress(\"alisfilter\"), typeof(delegate_alisfilter));\timported_alfilteri = (delegate_alfilteri)marshal.getdelegateforfunctionpointer(al.getprocaddress(\"alfilteri\"), typeof(delegate_alfilteri));\timported_alfilterf = (delegate_alfilterf)marshal.getdelegateforfunctionpointer(al.getprocaddress(\"alfilterf\"), typeof(delegate_alfilterf));\timported_algetfilteri = (delegate_algetfilteri)marshal.getdelegateforfunctionpointer(al.getprocaddress(\"algetfilteri\"), typeof(delegate_algetfilteri));\timported_algetfilterf = (delegate_algetfilterf)marshal.getdelegateforfunctionpointer(al.getprocaddress(\"algetfilterf\"), typeof(delegate_algetfilterf));\t}\tcatch (exception e) {",
  "foo",
  1
 ],
 [
  "public static void installaddins(list<string> disabled) {\tif (!directory.exists(addininstalltemp)) return;",
  "addinmanager installaddins started",
  0
 ],
 [
  "static private void help () {",
  "exception in",
  1
 ],
 [
  "public task<string> e3method() {",
  "calling",
  0
 ],
 [
  "public void writeattributes_14() {\txdocument doc = new xdocument();\tstring strxml = \"<root attr='test' />\";\txmlreader xr = createreader(new stringreader(strxml));\txr.read();\txr.movetofirstattribute();\tif (xr.nodetype != xmlnodetype.attribute) {",
  "error getting assembly name for user assembly",
  1
 ],
 [
  "t4.start();\ttask i5 = null;\ttask t5 = t3.continuewith(_ => {\ti5 = new task(() => { }, taskcreationoptions.attachedtoparent);\t}, taskcontinuationoptions.denychildattach);\ttask i6 = null;\ttask t6 = t4.continuewith<int>(_ => {\ti6 = new task(() => { }, taskcreationoptions.attachedtoparent);\treturn 42;\t}, taskcontinuationoptions.denychildattach);",
  "rundenychildattachtests waiting on parents if we hang something went wrong",
  0
 ],
 [
  "public void basictest_accessinstanceproperties_noexceptions_osx() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tstring description = nic.description;\tassert.false(string.isnullorempty(description), \"networkinterface.description should not be null or empty.\");\tstring id = nic.id;\tassert.false(string.isnullorempty(id), \"networkinterface.id should not be null or empty.\");\tassert.throws<platformnotsupportedexception>(() => nic.isreceiveonly);",
  "type",
  0
 ],
 [
  "public static void save (textwriter writer, editortheme theme) {\twriter.writeline (\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\");\twriter.writeline (\"<!doctype plist public \\\"- writer.writeline (\"<plist version=\\\"1.0\\\">\");\tforeach (var setting in theme.settings) {\tif (setting.name != null) {\t}\tif (setting.scopes.count > 0) {\t}\tif (setting.settings.count > 0) {\tforeach (var kv in setting.settings) {",
  "key key",
  0
 ],
 [
  "int minlen = (explen < actlen ? explen : actlen);\tint i;\tfor (i = 0; i < minlen; i++) {\tif (strexpected[i] != stractual[i]) {\tbreak;\t}\t}\tif (i == minlen) {\treturn false;\t}",
  "compiling",
  1
 ],
 [
  "static void main (string [] args) {\tif (args.length != 1) usage ();\tvar asm = args [0];\tif (!file.exists (asm)) usage ();\ttry {\tconverter.convert (asm);\t} catch (filenotfoundexception ex) {\tusage ();\t} catch (portablepdbnotsupportedexception) {",
  "error a portable pdb can t be converted to mdb",
  0
 ],
 [
  "public static void runtests () {\tstring assembly = file.readalltext ($\"{appdomain.currentdomain.basedirectory}/testassembly.txt\");",
  "testing assembly",
  0
 ],
 [
  "public void methodwithunusedparameters (ienumerable enumerable, int x) {",
  "method with unused parameters",
  0
 ],
 [
  "ms.position = 0;\tstring statusline = null;\tusing (streamreader sr = new streamreader (ms, encoding.utf8)) {\tstatusline = sr.readline ();\t}\tstringwriter sw = new stringwriter ();\tif (statusline.startswith (\"post /original/\")) {\tendpoint ep = socket.localendpoint;\tsw.flush ();\t} else if (statusline.startswith (\"get /moved/\")) {",
  "http ok",
  0
 ],
 [
  "}\tif (ps == null) return false;\tienumerator ee = ev.gethostenumerator ();\twhile (ee.movenext ()) {\tiidentitypermissionfactory ipf = (ee.current as iidentitypermissionfactory);\tif (ipf != null) {\tipermission p = ipf.createidentitypermission (ev);\tps.addpermission (p);\t}\t}",
  "grant",
  0
 ],
 [
  "public static void main (string[] args) {",
  "hello world",
  0
 ],
 [
  "private static void loadassemblies () {\ttypes = new hashtable ();\tforeach (string filename in assemblies) {\tassembly assembly;\tfileinfo info = null;\tforeach (string path in assembly_paths) {\tinfo = new fileinfo (path.combine (path, filename));\tif (info.exists) break;\t}\tif (!info.exists) {",
  "error assembly not found",
  0
 ],
 [
  "}\t}\tforeach (directoryinfo di in dirs) {\tforeach (fileinfo fi in di.getfiles (\"*.xml\")) {\ttry {\txmltextreader xtr = new xmltextreader (fi.fullname);\txtr.namespaces = false;\txtr.normalization = true;\txmlvalidatingreader xr = new xmlvalidatingreader (xtr);\twhile (!xr.eof) xr.read ();",
  "incorrectly valid",
  0
 ],
 [
  "if (datareader.getattribute(\"xmlns\") == null) {\tthrow new testexception(testresult.failed, \"\");\t}\t}\twhile (datareader.read()) ;\tdatareader.dispose();\treturn;\tcase \"ns\": datareader.readtodescendant(\"e:elem\");\tif (datareader.hasattributes) {\tif (datareader.getattribute(\"xmlns:e\") == null) {",
  "positioned on wrong element not on ns",
  0
 ],
 [
  "public static void dumpcodeinfo (imagecodecinfo codec) {",
  "hello world",
  1
 ],
 [
  "public void test_unknown() {\talltypes db = createdb();\tvar result = from p in db.othertypes orderby p.datetime select p.blob;\tforeach (var blob in result) {",
  "blob",
  0
 ],
 [
  "public void indent_28(xmlwriterutils utils) {\tint i;\tfor (i = 0; i < 4; i++) {\txmlwritersettings wsettings = new xmlwritersettings();\twsettings.omitxmldeclaration = true;\twsettings.indent = true;\twsettings.conformancelevel = (i % 2) == 0 ? conformancelevel.auto : conformancelevel.document;\tusing (xmlwriter w = utils.createwriter(wsettings)) {\tif (i > 1) {",
  "verifying beginread with a callback that calls endread",
  1
 ],
 [
  "public void attrnamespace_6(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writeattributestring(\"xml\", \"lang\", \"foo\", \"en\");\tw.writeendelement();\t}\tcatch (argumentexception e) {",
  "exception",
  0
 ],
 [
  "static void writelogo () {",
  "td td",
  1
 ],
 [
  "cmd2.commandtext = \"alter session set nls_date_format = 'yyyy-mm-dd hh24:mi:ss'\";\tcmd2.executenonquery ();\ttry {\tcmd2.commandtext = \"drop table mono_test_table7\";\tcmd2.executenonquery ();\t}\tcatch(oracleexception) {\t}\tcmd2.commandtext = \"create table mono_test_table7(\" + \" col1 varchar2(8) not null, \" + \" col2 varchar2(32), \" + \" col3 number(18,2) not null, \" + \" col4 number(18,2), \" + \" col5 date not null, \" + \" col6 date, \" + \" col7 blob not null, \" + \" col8 blob, \" + \" col9 clob not null, \" + \" col10 clob \" + \")\";\tcmd2.executenonquery ();",
  "test failed at call result",
  1
 ],
 [
  "public static void main (string[] args) {\tfoo f = new foo();\tbar b = new bar();",
  "verifying calling discard methods after calling open and basestream close",
  1
 ],
 [
  "else if (arg.startswith(\"/loglevel:\")) {\tvar levelstring = arg.substring(arg.indexof(':') + 1);\tif (!enum.tryparse(ignorecase: true, value: levelstring, result: out loglevel level)) {\tvar validvalues = string.join(\", \", enum.getnames(typeof(loglevel)).select(v => v.tostring()));\treturn 1;\t}\toptions.loglevel = level;\t}\t}\telse {",
  "level",
  1
 ],
 [
  "static void showurls () {\ttry {\turlssection myurlssection = configurationmanager.getsection (\"myurls\") as urlssection;\tif (myurlssection == null) console.writeline (\"failed to load urlssection.\");\telse {",
  "my urls",
  0
 ],
 [
  "private static byte[] timeouthandler (socket socket) {\tsocket.receive (new byte[4096]);\tthread.sleep (three_seconds_in_milliseconds * 2);\tvar sw = new stringwriter ();",
  "opening licenses file over uri",
  1
 ],
 [
  "try {\tmaps.add (imp.importtypemapping (t));\tusertypes.add (t);\tif (verbose) console.writeline( \" - \" + t );\t} catch (invalidoperationexception ex) {\t} catch (notimplementedexception ex) {\tif (verbose) {\tconsole.writeline (\"   \" + ex.message);\t}\t} catch (notsupportedexception ex) {",
  "warning",
  0
 ],
 [
  "protected virtual void ensureexited () {\ttry {\tif (vm != null && vm.targetprocess != null && !vm.targetprocess.hasexited) vm.targetprocess.kill ();\t} catch (exception ex) {",
  "error force terminating soft debugger process",
  0
 ],
 [
  "protected override void test() {",
  "card",
  1
 ],
 [
  "private static bool callsecondinterfaceinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tdynamic d = new firstclassreturninterface<int>();\tif ((!(((secondinterface<int>)d.instancemethod()).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "test test=new test();\tthread thr=new thread(new threadstart(test.thread_func));\tthr.start();\tfor(int i=0; i<51200; i++) {\tslot[i]=thread.allocatedataslot();\tthread.setdata(slot[i], i);\t}\tthread.setdata(slot[11111], 69);\tthread.setdata(slot[26801], 69);\tthread.sleep(10000);",
  "slot contains",
  0
 ],
 [
  "protected virtual void onfilechooserbutton2focused (object o, gtk.focusedargs args) {",
  "got focus",
  0
 ],
 [
  "public void longrunning_removepoolcomputenodesresizetimeout_resizeerrorspopulated() {\taction test = () => {\tusing (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {\tstring poolid = \"bug2251050_testremovecomputenodesresizetimeout_lr\" + testutilities.getmyname();\tstring jobid = \"bug2251050job-\" + testutilities.getmyname();\tconst int targetdedicated = 2;\ttry {\tcloudpool pool = batchcli.pooloperations.createpool(poolid, poolfixture.vmsize, new cloudserviceconfiguration(poolfixture.osfamily), targetdedicatedcomputenodes: targetdedicated);\tpool.commit();",
  "created pool",
  0
 ],
 [
  "protected override void performload(idesignerserializationmanager serializationmanager){",
  "couldn t find file",
  1
 ],
 [
  "static void dumpsignedinfo (signedinfo s) {",
  "about to throw regexmatchtimeoutexception",
  1
 ],
 [
  "if (parms.length < 2) {\treturn;\t}\tstring parm = parms[1];\tstringbuilder ps = new stringbuilder ();\tfor (int i = 2; i < parms.length; i++) ps.append (parms[i]);\tinternalvariables[parm] = ps.tostring ();\t}\tpublic void unsetinternalvariable(string[] parms) {\tif (parms.length != 2) {",
  "policy load failed",
  1
 ],
 [
  "}\t}\tif (adp.isempty(sourcecolumn)) {\tthrow adp.invalidsourcecolumn(\"sourcecolumn\");\t}\tswitch (mappingaction) {\tcase missingmappingaction.passthrough: #if debug if (adapterswitches.dataschema.traceinfo) {\t}\t#endif return new datacolumnmapping(sourcecolumn, sourcecolumn);\tcase missingmappingaction.ignore: #if debug if (adapterswitches.dataschema.tracewarning) {",
  "in outer",
  1
 ],
 [
  "public void element_5(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(null);\t}\tcatch (argumentexception e) {\tcerror.compare(w.writestate, (utils.writertype == writertype.charcheckingwriter) ? writestate.start : writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "try {\tvar packages = this.dependencies.reverse ().oftype<packagedependency> ().cast<ipackagedependency> ().tolist ();\tforeach (var dependency in this.dependencies.reverse ()) {\tif (packages.contains (dependency)) {\tcontinue;\t}\tawait dependency.removefromproject (token).configureawait (false);\t}\tawait this.project.removepackagedependencies (packages).configureawait (false);\t} catch (exception ex) {",
  "refreshing job",
  1
 ],
 [
  "protected override void oneventcommand(eventcommandeventargs command) {",
  "err exception caught in scenario",
  1
 ],
 [
  "private void about () {",
  "warning requesting icon that not been tuned",
  1
 ],
 [
  "console.write (\"func (\");\tfor (int i = 1; i < c.length; ++i) {\tchar p = c [i];\tif (i > 1) console.write (\", \");\tconsole.write (ctx.emit (p));\t}\tconsole.writeline (\");\");\tif (c [0] != 'v') console.writeline ($\"\\t*({typetosigtype (c [0])}*)margs->retval = res;\");\tconsole.writeline (\"\\n}\\n\");\t}",
  "static void icall trampoline dispatch const char cookie void target func interpmethodarguments margs",
  0
 ],
 [
  "legartifactscountlist.add(artifacts.count);\tthread.sleep(timespan.fromseconds(1));\t}\t});\tawait synchronizationcontexthelper.runtestasync(async () => {\tstagingstorageaccount storagecredentials = testutilities.getstoragecredentialsfromenvironment();\tusing (batchclient batchcli = await testutilities.openbatchclientfromenvironmentasync()) {\tawait this.addtaskssimpletestasync( batchcli, testname, taskcount, paralleloptions: new batchclientparalleloptions() { maxdegreeofparallelism = 2 }, storagecredentials: storagecredentials, localfilestostage: localfilestostage, filestagingartifacts: artifacts, usejoboperations: usejoboperations).configureawait(false);\tcts.cancel();\tawait t.configureawait(false);",
  "tool not found",
  1
 ],
 [
  "try {\tstreamwriter sw = new streamwriter (outfilename);\tsw.writeline (buff);\tsw.close ();\t}\tcatch (exception e) {\t}\t}\tpublic void setuseparameters (string[] parms) {\tif (parms.length != 2) {",
  "ms",
  1
 ],
 [
  "static void shutdown () {\tvar helper = new invokerhelper {\tfunc = () => {\ttry {\tif (beforeshutdown != null) beforeshutdown (null, eventargs.empty);\t} catch (exception ex) {",
  "unexpected error during beforeshutdown",
  0
 ],
 [
  "static void dump_user (string username) {\tmembershipuser user = membership.getuser (username, false);",
  "last password changed date",
  0
 ],
 [
  "public void performancecounter_counters () {",
  "performancecounter counters start",
  0
 ],
 [
  "public void addparam6() {\tm_xsltarg = new xsltargumentlist();\ttry {\tm_xsltarg.addparam(\"myarg1\", null, \"test1\");\t}\tcatch (system.argumentnullexception) {\treturn;\t}",
  "system argumentnullexception not thrown for null namespace system xml tests",
  0
 ],
 [
  "foreach (symvalue sv in this.unmodifiedsinceentry.elements) tw.write (\"{0} \", sv);\ttw.writeline ();\tforeach (symvalue sv in this.unmodifiedfieldssinceentry.elements) tw.write (\"{0} \", sv);\ttw.writeline ();\tif (this.modifiedatcall != null) {\tforeach (symvalue sv in this.modifiedatcall.elements) tw.write (\"{0} \", sv);\ttw.writeline ();\t}\tif (olddomain == null) return;\tolddomain.egraph.dump (tw);",
  "end old domain",
  0
 ],
 [
  "case 2: if (c == '>') {\tcontext.statetag = 1;\t}\treturn null;\tdefault: throw new invalidoperationexception ();\t}\t}\tdoc = (xdoctype)context.nodes.pop ();\tif (c == '<') {\trollback = string.empty;",
  "missing argument to repeat command line option",
  1
 ],
 [
  "public static void main () {\tobject o = \"hello world\";",
  "index type",
  1
 ],
 [
  "public static int main(){\tint i = 0;\ttry{\ttry {\tthrow new notimplementedexception();\t}\tfinally {\ti++;",
  "finally called",
  0
 ],
 [
  "private static void showhelp (bool detailed) {\tif (detailed) {\t}\twriteline ();",
  "gettypenames in",
  1
 ],
 [
  "public void comment_5(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writecomment(\"\\ud812\");\tw.writeendelement();\t}\tcatch (argumentexception e) {",
  "e date the date until when the certificate is valid notafter",
  1
 ],
 [
  "outputparameters(e.parameters);\toutput.write(\"]\");\t}\telse {\toutputidentifier(e.name);\t}\toutputstartingbrace();\tindent++;\tif (e.hasget) {\tif (iscurrentinterface || (e.attributes & memberattributes.scopemask) == memberattributes.abstract) {",
  "get",
  0
 ],
 [
  "private static bool test6() {\tuint a = 2;\tdynamic b = a;\tb--;\tif (b == 1) return true;",
  "fully open instantiation of static type not the same of the generic type definition",
  1
 ],
 [
  "private static bool callsecondstructinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturnstruct();\tif ((!(bool)(((dynamic)s.instancemethod()).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "static asymmetricalgorithm privatekeyselection (x509certificate certificate, string targethost) {",
  "privatekeyselection",
  0
 ],
 [
  "private void doapplicationdirectoryinit() {\tdebug.assert(_contexttype == contexttype.applicationdirectory);\tif (_container == null) {",
  "sdscache getcontext reftocontext is gced disposed removing",
  1
 ],
 [
  "cloudjob unboundjob = batchcli.joboperations.createjob(jobid, new poolinformation());\tunboundjob.poolinformation.poolid = this.poolfixture.poolid;\tunboundjob.commit();\tcloudjob boundjob = batchcli.joboperations.getjob(jobid);\tcloudtask mytask = new cloudtask(taskid, \"cmd /c echo hello world\");\tcloudtask directorycreationtask1 = new cloudtask(directorycreationtaskid1, string.format(\"cmd /c mkdir {0} && echo test > {0}/testfile.txt\", directorynameone));\tcloudtask directorycreationtask2 = new cloudtask(directorycreationtaskid2, string.format(\"cmd /c mkdir {0} && echo test > {0}/testfile.txt\", directorynametwo));\tboundjob.addtask(mytask);\tboundjob.addtask(directorycreationtask1);\tboundjob.addtask(directorycreationtask2);",
  "hello",
  1
 ],
 [
  "mineattribute ma = (mineattribute) attrs [0];\tif (ma.types [0] != typeof (int)){\treturn 1;\t}\tif (ma.types [1] != typeof (string)){\treturn 2;\t}\tif (ma.types [2] != typeof (object [])){\treturn 3;\t}",
  "credentials",
  1
 ],
 [
  "captureview.willdisplayimage = (view, image) => {\tif (videopreviewfilterdescription == null) return image;\tvar selectedfilter = (nsstring) videopreviewfilterdescription [filternamekey];\tvar filter = cifilter.fromname (selectedfilter);\tfilter.setdefaults ();\tfilter.setvalueforkey (image, cifilterinputkey.image);\treturn (ciimage) filter.valueforkey (cifilteroutputkey.image);\t};\tmoviefileoutput = new qtcapturemoviefileoutput ();\tmoviefileoutput.willstartrecording += delegate {",
  "if mono strict",
  1
 ],
 [
  "foreach (object value in list) {\tconsole.write (value);\tconsole.write (environment.newline);\t}\tint x = 0;\tfor (int i = 0; i < 100; i++) x++;\tconsole.writeline (x);\tstring useless = \"useless string\";\tif (useless.equals (\"other useless\")) {\tuseless = string.empty;",
  "td td",
  1
 ],
 [
  "public void utf8encoding() {",
  "verifying read with bytes encoded with",
  0
 ],
 [
  "xmldocument xml = new xmldocument();\txml.load(file.fullname);\txmlnodelist n = xml.selectnodes(\"/querymanifest[@version=\\\"1.0\\\"]/catalogs/catalog\");\tforeach (xmlnode node in n) {\tcatalogs.add( new help3catalog(node.attributes[\"productid\"].innertext, node.attributes[\"productversion\"].innertext, node.attributes[\"productlocale\"].innertext, node.attributes[\"productdisplayname\"].innertext, node.selectsinglenode(\"catalogpath\").innertext, node.selectsinglenode(\"contentpath\").innertext, node.selectsinglenode(\"brandingpackagefilename\").innertext) );\t}\t}\tloggingservice.debug(string.format(\"helpviewer: {0} {1} loaded\", catalogs.count, (catalogs.count == 1)?\"catalog\":\"catalogs\"));\t}\tcatch (exception ex) {",
  "helpviewer",
  0
 ],
 [
  "float4 s4;\ts4.f1 = 1;\ts4.f2 = 2;\ts4.f3 = 3;\ts4.f4 = 4;\ts4 = mono_return_float4(s4, 906);\tif (s4.f1 != 1+906) {\treturn 1;\t}\tif (s4.f2 != 2+906) {",
  "got but expected",
  0
 ],
 [
  "public void testunsafestatement () {\ttest<redundantunsafecontextissue>(@\" class foo {\tpublic static void main (string[] args) {\tunsafe {",
  "hello",
  0
 ],
 [
  "schemaelementdecl currentelementdecl = _context.elementdecl;\tstring localname = _context.localname;\tstring namespaceuri = _context.namespace;\tfor (int i = _startidconstraint; i < _validationstack.length; i++) {\tif (((validationstate)(_validationstack[i])).constr == null) {\tcontinue;\t}\tconstraintstruct[] constraintstructures = ((validationstate)_validationstack[i]).constr;\tfor (int j = 0; j < constraintstructures.length; ++j) {\tif (constraintstructures[j].axisselector.movetostartelement(localname, namespaceuri)) {",
  "selector match",
  0
 ],
 [
  "while ((line = s.readline ()) != null) {\tstring name = line.trim ();\tif (name.length == 0) continue;\tuninstall (line, package, gacdir, libdir, true, ref uninstalled, ref failed);\t}\twriteline (\"assemblies processed = {0}\", uninstalled+failed);\twriteline (\"assemblies uninstalled = {0}\", uninstalled);\twriteline (\"failures = {0}\", failed);\treturn (failed == 0);\t} catch (ioexception) {",
  "incomingunknownprotocolpackets",
  1
 ],
 [
  "public static int main () {\tif (values.count != 3) return 1;",
  "ok",
  0
 ],
 [
  "public static int main () {\tx x = new x ();\t((ia) x).draw ();\tif (x.ib_called) return 1;\tif (!x.ia_called) return 2;\tx y = new x ();\t((ib) y).draw ();",
  "got but expected",
  1
 ],
 [
  "object [] arguments;\targuments = new object [] { str, int32_out, maskedtextresulthint_out };\tif (compare (\"set\", mask, ref stateindex, arguments, ref more_states)) {\tcontinue;\t}\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;",
  "valuecollectionenumerator entering dispose",
  1
 ],
 [
  "public idictionary<string, iresourcefilecontent> getlocalizedcontents(string filename) {",
  "assert areequal bits get i maskedtextprovider isvalidinputchar char i i tostring",
  1
 ],
 [
  "public bool postest1() {\tbool retval = true;\tcompareresult expectedvalue = compareresult.equal;\tcompareresult actualvalue;\ttestlibrary.testframework.beginscenario(\"postest1:get the property and verify its fields\");\ttry {\topcode opcode = opcodes.tailcall;\tactualvalue = compareopcode(opcode, \"tail.\", stackbehaviour.pop0, stackbehaviour.push0, operandtype.inlinenone, opcodetype.prefix, 2, (byte)0xfe, (byte)0x14, flowcontrol.meta);\tif (expectedvalue != actualvalue) {",
  "usage servicename displayname create delete",
  1
 ],
 [
  "w.writestartelement(\"root\");\tw.writestring(invxml);\tw.dispose();\tdoc.save(new memorystream());\t}\tcatch (argumentexception) {\tcheckclosedstate(w.writestate);\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "public void testaddbracestoelse() {\ttest<addbracesaction>(@\"class testclass {\tvoid test () {\tif (true) {",
  "hello",
  0
 ],
 [
  "static void main (string[] args) {\tvar failcount = 0;\ttry {\tvar a = new correctcasefriendassembly.publicclass ();\ta.internalmethod ();\t} catch (memberaccessexception) {\tfailcount += 1;\t}\ttry {\tvar a = new correctcasefriendassembly.internalclass(@internal: 0);",
  "access internal class internal ctor ok",
  0
 ],
 [
  "static void dumpkeyinfoclause (keyinfoclause kic) {\tkeyinfoname kn = kic as keyinfoname;\tif (kn != null) {\treturn;\t}\tkeyinfox509data k509 = kic as keyinfox509data;\tif (k509 != null) {\tconsole.writeline (\"*** keyinfox509data ***\");",
  "hello",
  1
 ],
 [
  "icount++;\t}\ttry {\txslt.transform(szfullfilename, \".\");\t}\tcatch (system.exception) {\ticount++;\t}\t}\tif (icount.equals(2)) return;",
  "foo",
  1
 ],
 [
  "private static bool dynamicobjectinfirstoperand() {\tint failcount = 0;\tbyte origin = 24;\tdynamic d = origin;\tlong? second = 2;\tif ((long)(d ?? second) != 24) {\tfailcount++;",
  "x",
  1
 ],
 [
  "schemaelementdecl currentelementdecl = context.elementdecl;\tstring localname = context.localname;\tstring namespaceuri = context.namespace;\tfor (int i = this.startidconstraint; i < this.validationstack.length; i ++) {\tif (((validationstate)(this.validationstack[i])).constr == null) {\tcontinue;\t}\tconstraintstruct[] constraintstructures = ((validationstate)this.validationstack[i]).constr;\tfor (int j = 0; j < constraintstructures.length; ++j) {\tif (constraintstructures[j].axisselector.movetostartelement(localname, namespaceuri)) {",
  "rangeretriever entering movenext",
  1
 ],
 [
  "}\tconsole.writeline(\"\\\";\");\tconsole.writeline();\tstring filename = ( args.length == 0 ) ? \"xmlchartype.bin\" : args[0];\tconsole.write( \"writing xmlchartype character properties to {0}...\", filename );\tfilestream fs = new filestream( filename, filemode.create );\tfor ( int i = 0; i < charpropertiessize; i += 4096 ) {\tfs.write( s_charproperties, i, 4096 );\t}\tfs.close();",
  "state",
  1
 ],
 [
  "public void parity_int32minvalue() {",
  "onclientfocus",
  1
 ],
 [
  "public int getparam2(object args) {\tobject retobj;\tfor (int i = 1; i <= 100; i++) {\tretobj = xsltarg1.getparam(((object[])args)[1].tostring(), szempty);\tstring expected = \"test\" + ((object[])args)[0];\tif (retobj.tostring() != expected) {",
  "error",
  0
 ],
 [
  "static void oninfomessage (object sender, oracleinfomessageeventargs e) {",
  "infomessage code",
  0
 ],
 [
  "public void basictest_getipv4interfacestatistics_success_osx() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipv4interfacestatistics stats = nic.getipv4statistics();\tassert.throws<platformnotsupportedexception>(() => stats.outgoingpacketsdiscarded);",
  "socket exception dropped connection",
  1
 ],
 [
  "private void elementidentityconstraints () {\tfor (int i = this.startidconstraint; i < this.validationstack.length; i ++) {\tif (((validationstate)(this.validationstack[i])).constr == null) {\tcontinue;\t}\tconstraintstruct[] constraints = ((validationstate)this.validationstack[i]).constr;\tfor (int j = 0; j < constraints.length; ++j) {\tif (constraints[j].axisselector.movetostartelement(reader.localname, reader.namespaceuri)) {",
  "selector match",
  0
 ],
 [
  "public static void createxmlspacetestfile(string strfilename) {\tstream s = new memorystream();\ttextwriter tw = new streamwriter(s);",
  "persona dromio of syracuse persona",
  0
 ],
 [
  "public static bool verifynode(xmlreader r, xmlnodetype eexpnodetype, string strexpname, string strexpvalue) {\tbool bpassed = true;\tif (r.nodetype != eexpnodetype) {\tbpassed = false;\t}\tif (r.name != strexpname) {",
  "typefullname",
  1
 ],
 [
  "public void dtrenable_true_false_beforeopen() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "couldn t read file",
  1
 ],
 [
  "system.console.writeline(indent + curvar.desc);\ttestmodule.skipcount++;\t}\t}\tcatch (ctestskippedexception tse) {\tsystem.console.writeline(indent + curvar.desc);\ttestmodule.skipcount++;\t}\tcatch (exception e) {\tsystem.console.writeline(indent + curvar.desc);",
  "warning your site may be blocked from updating if you abuse",
  1
 ],
 [
  "static void main () {\ttype type = typeof (brushes);\tpropertyinfo[] properties = type.getproperties ();\tint count = 1;\tforeach (propertyinfo property in properties) {\tconsole.writeline(\"\\n\\t\\t\\tbr = brushes.\" + property.name + \";\");\tconsole.writeline(\"\\t\\t\\tsolid = (solidbrush) br;\");\tif (property.name != \"red\") {\tconsole.writeline(\"\\t\\t\\tsolid.color = color.red;\");",
  "assert areequal color red brushes as solidbrush color p count",
  0
 ],
 [
  "cmd.transaction.commit();\toraclecommand select = con.createcommand ();\tselect.commandtext = \"select blob_column from blobtest2\";\toracledatareader reader = select.executereader ();\telse {\toraclelob lob = reader.getoraclelob (0);\tif (lob == oraclelob.null) console.writeline(\"lob is oraclelob.null\");\telse {\tbyte[] blob = (byte[]) lob.value;\tstring result = gethexstring(blob);",
  "ignored assembly hash code str",
  1
 ],
 [
  "public void addparam17(inputtype inputtype, readertype readertype, transformtype transformtype, doctype doctype) {\tstring expected = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?><result> 1.test 2.test 3.test 4.test 5.test 6.no value specified</result>\";\tint i = 1;\tint errcount = 0;\tm_xsltarg = new xsltargumentlist();\tforeach (string str in szwhitespace) {\ttry {\tm_xsltarg.addparam(\"myarg\" + i, szempty, \"test\" + str);\t}\tcatch (system.xml.xmlexception) {",
  "improperly reported an exception for a whitespace value",
  0
 ],
 [
  "static string getkeyfromexpression(expression expr, out bool isprefixonly) {\tisprefixonly = false;\t#endif indexerexpression indexer = expr as indexerexpression;\tif (indexer != null) {\tforeach (expression index in indexer.indexes) {\tprimitiveexpression p = index as primitiveexpression;\tif (p != null) {\tstring key = p.value as string;\tif (key != null) {",
  "resourcetoolkit bclnrefactoryresourceresolver found key",
  0
 ],
 [
  "public static byte[] getasbytes(this idatarecord datarecord, int index) {\tif (datarecord.isdbnull(index)) return new byte[0];\tobject obj = datarecord.getvalue(index);\tif (obj == null) return new byte[0];\tbyte[] bytes = obj as byte[];\tif (bytes != null) return bytes;",
  "getfloat",
  1
 ],
 [
  "public static void thread() {\tthread.sleep(500);",
  "thread running",
  0
 ],
 [
  "using (tcpclient serverconnection = await serveraccept) using (sslstream sslclientstream = new sslstream(clientconnection.getstream())) using (sslstream sslserverstream = new sslstream( serverconnection.getstream(), false, allowanyservercertificate)) {\tstring servername = _servercertificate.getnameinfo(x509nametype.simplename, false);\ttask clientauthentication = sslclientstream.authenticateasclientasync( servername, null, clientsslprotocols, false);\ttask serverauthentication = sslserverstream.authenticateasserverasync( _servercertificate, true, serversslprotocols, false);\ttry {\tawait clientauthentication.timeoutafter(timeout);\t}\tcatch (exception ex) {\t}\tawait serverauthentication.timeoutafter(timeout);",
  "test end",
  1
 ],
 [
  "public static int main () {\tmain_thread_id = thread.currentthread.managedthreadid;\tmre = new manualresetevent (false);\tmre2 = new manualresetevent (false);\ttcs = new taskcompletionsource<bool> ();\ttask.factory.startnew (new func<task> (executeasync), new cancellationtoken (), taskcreationoptions.longrunning, taskscheduler.default);\tif (!mre.waitone (1000)) return 1;\tthread.sleep (10);",
  "main set result",
  0
 ],
 [
  "if ((!adutils.isofobjectclass(memberde, \"group\")) && (!adutils.isofobjectclass(memberde, \"user\")) && (!adutils.isofobjectclass(memberde, \"foreignsecurityprincipal\"))) {\tneedtoretry = true;\tdisposememberde = true;\t}\telse if (_recursive && adutils.isofobjectclass(memberde, \"group\")) {\tif (!_groupsvisited.contains(memberdn) && !_groupstovisit.contains(memberdn)) _groupstovisit.add(memberdn);\tneedtoretry = true;\tdisposememberde = true;\t}\telse if (_recursive && adutils.isofobjectclass(memberde, \"foreignsecurityprincipal\")) {",
  "addnlinkedattrset movenextmemberenum foreign principal adding to foreignmembers",
  0
 ],
 [
  "private static bool test2() {\tbool[] boolvalues = new bool[]\t{\ttrue, false }\t;\tforeach (bool a1 in boolvalues) {\tdynamic d1 = a1;\tif ((false || d1) != (false || a1)) {",
  "failed bool bool",
  0
 ],
 [
  "public void generatecontract (arraylist generatedmaps) {\tif (generatedmaps.count == 0) return;\tgenerationresult main = (generationresult) generatedmaps[0];\tstring baseserializername = main.baseserializerclassname;\tstring access_mod = (_config == null || !_config.generateasinternal) ? \"public\" : \"internal\";\twriteline (\"\");\twritelineind (\"{\");",
  "return new",
  0
 ],
 [
  "c1 = t1.continuewith(_ => { }, cts.token, options, taskscheduler.default);\t}\telse if (usecontinuewhenany) {\tc1 = task.factory.continuewhenany(new task[] { t1 }, _ => { }, cts.token, options, taskscheduler.default);\t}\telse {\tc1 = task.factory.continuewhenall(new task[] { t1 }, _ => { }, cts.token, options, taskscheduler.default);\t}\tassert.true(c1.iscompleted != uselazycancellation, \"runlazycancellationtests: before t1.start(), c1.iscompleted = \" + c1.iscompleted);\tt1.start();",
  "voiceover on idetheme accessibilityenabled",
  1
 ],
 [
  "public void notifyevent (string eventname) {\ttry {\tclient.notifyevent (eventname);\t}\tcatch (exception ex) {",
  "instrumentation service started",
  1
 ],
 [
  "public void newline_crlf_crstr() {\tusing (serialport com1 = tcsupport.initfirstserialport()) using (serialport com2 = tcsupport.initsecondserialport(com1)) {",
  "verifying read method with newline and a string containing just",
  0
 ],
 [
  "private static void initializewithretries(clientconfiguration config, int initializeattemptsbeforefailing) {\tint attempt = 0;\twhile (true) {\ttry {\tgrainclient.initialize(config);\tbreak;\t}\tcatch (silounavailableexception) {\tattempt++;",
  "attempt attempt of initializeattemptsbeforefailing failed to initialize the orleans client",
  0
 ],
 [
  "private static void testarrays() {\tconst int arraysize = 100;\tint[] arr = new int[arraysize];\tfor (int i = 0; i < arraysize; i++) arr[i] = i;\tthrowifnotequals(0, checkincremental(arr, arraysize), \"array marshalling failed\");",
  "failed to resolve document function with absolute uri",
  1
 ],
 [
  "private static bool test6() {\tuint a = 1;\tdynamic b = a;\tb++;\tif (b == 2) return true;",
  "failed uint",
  0
 ],
 [
  "using (xmlwriter w = createwriter(doc)) {\ttry {\tw.writestartelement(\"xmlns\", \"localname\", \"uri:bogus\");\tw.writeendelement();\t}\tcatch (exception) {\ttestlog.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "cancelioex finished with error code",
  1
 ],
 [
  "static bool callsecondclassoperator() {\tint failcount = 0; verify.firstcalled = false;\tif ( (!(bool)(((dynamic)firstclassreturnclass<int>.staticproperty) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "private static bool test2() {\tint?[] intnvalues = new int?[]\t{\tint.maxvalue, int.minvalue, 0, null }\t;\tforeach (int? a1 in intnvalues) {\tdynamic d1 = a1;\tdynamic d2 = a1;\tif (d1 != d2) {",
  "failed nullable int",
  0
 ],
 [
  "public static void threadmethod_waiter_2() {\te.waitone();",
  "thread b i m after wait for event",
  0
 ],
 [
  "else {\tbefore = after;\ttestthread.priority=threadpriority.abovenormal;\tafter = testthread.priority;\tthread.sleep(1000);\tif (after != threadpriority.abovenormal) res = 4;\telse {\tbefore = after;\ttestthread.priority=threadpriority.belownormal;\tafter = testthread.priority;",
  "getextensionobject thread iteration value returned",
  1
 ],
 [
  "public override object getvalue(object component) {\t#if debug if (propdescusageswitch.traceverbose) {\tstring compname = \"(null)\";\tif (component != null) compname = component.tostring();",
  "getvalue",
  0
 ],
 [
  "public static void main(string[] args) {\tvar foo = new foo();\tsystem.console.writeline(foo.bar());\tvar goo = new goo();",
  "hello",
  0
 ],
 [
  "private static void setparameteroracletype (oracleconnection con) {\tconsole.writeline();\toracleparameter p = con.createcommand().createparameter();",
  "press",
  1
 ],
 [
  "catch {\tfailed = true;\t}\tif (selfsign) {\tstore = getstorefromname (x509stores.names.trustedroot, machine);\t} else if (i == 0) {\tstore = getstorefromname (x509stores.names.otherpeople, machine);\t} else {\tstore = getstorefromname (x509stores.names.intermediateca, machine);\t}",
  "got but expected",
  1
 ],
 [
  "public static void main () {\tfoo_delegate d = new foo_delegate (function);\tasynccallback ac = new asynccallback (async_callback);\tiasyncresult ar1 = d.begininvoke (ac, \"foo\");\tar1.asyncwaithandle.waitone();\tthread.sleep(1000);\td.endinvoke(ar1);",
  "test failed at conversion result",
  1
 ],
 [
  "if (!found) {\treturn;\t}\tconnectionstring = sb.connectionstring;\t}\tpublic void run (string[] args) {\tdealwithargs (args);\tstring entry = \"\";\tbuild = null;\tif (silent == false) {",
  "tr",
  1
 ],
 [
  "static void readresult(idatareader rdr, datatable dt) {\tforeach (datarow schemarow in dt.rows) {\tforeach (datacolumn schemacol in dt.columns) console.writeline(schemacol.columnname + \" = \" + schemarow[schemacol]);\tconsole.writeline();\t}\tint nrows = 0;\tint c = 0;\tstring output, metadatavalue, datavalue;\twhile(rdr.read()) {",
  "row",
  0
 ],
 [
  "private static void verifycallstack( (string callermembername, string sourcefilepath, int sourcelinenumber) expectedstackframe, string reportedcallstack, int skipframes) {",
  "foo bar",
  1
 ],
 [
  "private static bool test5() {\tint a = -1;\tdynamic b = a;\t--b;\tif (b == -2) return true;",
  "failed int",
  0
 ],
 [
  "public void writestring_14(xmlwriterutils utils) {\tchar[] invalidxml = { 'a', 'b', '\\uda34' };\tstring invxml = new string(invalidxml);\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writestring(invxml);\t}\tcatch (argumentexception e) {",
  "skipped",
  1
 ],
 [
  "int tests_passed = populatefailuretable (file, failed_tests, ignored_tests);\tfail_total += failed_tests.count;\tpass_total += tests_passed;\trun_total += failed_tests.count + tests_passed;\tif (failed_tests.count > 0) {\tsw.writeline (\"        <tr class='errorrow' onclick=\\\"toggle('el{0}')\\\" onmouseover='highlight(this)' onmouseout='unhighlight(this)'>\", assembly);\tsw.writeline (@\"            <td><img src='media/fail.png' /></td>\");\t} else {\tsw.writeline (@\"            <td><img src='media/pass.png' /></td>\");\t}",
  "td td",
  0
 ],
 [
  "static private void help () {\tconsole.writeline ();",
  "del remove a certificate crl or ctl to specified store",
  0
 ],
 [
  "public void basictest_getipv4interfacestatistics_success_linux() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipv4interfacestatistics stats = nic.getipv4statistics();\tassert.throws<platformnotsupportedexception>(() => stats.incomingunknownprotocolpackets);\tassert.throws<platformnotsupportedexception>(() => stats.nonunicastpacketssent);",
  "did not return a null value for a non existent uri",
  1
 ],
 [
  "using (sqlcommand cmd = new sqlcommand()) {\tcmd.connection = conn;\tcmd.commandtext = \"select 1 / 0;\";\tcmd.commandtimeout = 3;\tconn.open();\ttry {\tvar output = cmd.executenonquery();\t}\tcatch (exception e) {\t}",
  "oncreatenewwindow",
  1
 ],
 [
  "public async task sched_ac_waittest() {\tint n = 0;\tbool insidetask = false;\tunittestschedulingcontext context = new unittestschedulingcontext();\tthis.orleanstaskscheduler = testinternalhelper.initializeschedulerfortesting(context, this.performancemetrics, this.loggerfactory);\tvar result = new taskcompletionsource<bool>();\tthis.orleanstaskscheduler.queueworkitem(new closureworkitem(() => {\tvar task1 = task.factory.startnew(() => {",
  "starting",
  0
 ],
 [
  "break;\tcase \"-pvk\": if (pvkfile != null) {\thelp (true);\t}\tif (p12file != null) {\thelp (true);\t}\tpvkfile = args [++i];\tbreak;\tcase \"-cert\": if (certfile != null) {",
  "error more than one cer file specified",
  0
 ],
 [
  "}\t}\tvar appxamlxml = xmlreader.create(new stringreader(node.innerxml));\tvar appxamlcontext = new xamldesigncontext(appxamlxml, settings);\tvar dict = (resourcedictionary) appxamlcontext.rootitem.component;\tdesigner.designpanel.resources.mergeddictionaries.add(dict);\t}\t}\t}\tcatch (exception ex) {",
  "error in loading app xaml",
  0
 ],
 [
  "public void writelog (string message) {",
  "logging for",
  0
 ],
 [
  "static void main(string[] args) {\tappdomain hostdomain = appdomain.createdomain(\"orleanshost\", null, new appdomainsetup() {\tappdomaininitializer = initsilo });\tdosomeclientwork();",
  "orleans silo is running press enter to terminate",
  0
 ],
 [
  "foreach (var member in record.members) {\tif ((member.flags & memberdefflags.notpersisted) != 0) continue;\tstring membertype = member.getmembertype();\tstring fieldtype = member.getmembertype(membertypekind.readerfield);\tstring fieldname = member.getmemberfieldname();\tstring description = member.getmemberdescription();\tif (description != null) writedoccomment(description);\topenscope($\"public {membertype} {member.name}\");\topenscope(\"get\");\tif (fieldtype != membertype) writeline($\"return ({membertype}){fieldname};\");",
  "return fieldname",
  0
 ],
 [
  "if ((resolveresult = nrefactoryastcacheservice.resolvenextouterexpression(ref expressionresult, caretline, caretcolumn, filename, filecontent, expressionfinder)) != null) {\treturn resolveresource(resolveresult, expr);\t} else {\treturn null;\t}\t}\t}\t} else {\tlanguageproperties lp = nrefactoryresourceresolver.getlanguagepropertiesforfile(filename);\tif (lp != null && !string.isnullorempty(lp.indexerexpressionstarttoken) && lp.indexerexpressionstarttoken[0] == chartyped) {",
  "thread b i now set again the event to let other thread continue",
  1
 ],
 [
  "public void onchanged (object o, xmlnodechangedeventargs e) {",
  "waited",
  1
 ],
 [
  "public void utf8encoding() {",
  "create designergenerator",
  1
 ],
 [
  "public static int main() {\tthread thr=new thread(new threadstart(foo.thread));\tthr.start();\tthread.sleep(1200);",
  "expecting got",
  1
 ],
 [
  "public void dispose () {\tforeach (assemblydefinition asm in cachedassemblies.values) asm.dispose ();\tvar redundant = loadcounter.where (c => c.value > 1).select (c => c.value - 1).sum ();",
  "redundant loads",
  0
 ],
 [
  "private void emitrecord(recorddef record) {\topenscope($\"public partial struct {record.name}\");\topenscope($\"public {record.name}handle handle\");\topenscope(\"get\");",
  "return handle",
  0
 ],
 [
  "private static bool callsecondstructinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturndynamicstruct<int>();\tif ((!(bool)(s.instanceproperty.instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "var command = args.length > 0 ? args[0].tolowerinvariant() : \"\";\tif (string.isnullorempty(command) || command.equals(\"/?\") || command.equals(\"-?\")) {\tprintusage();\tenvironment.exit(-1);\t}\ttry {\truncommand(command, args);\tenvironment.exit(0);\t}\tcatch (exception exc) {",
  "decimal decimal",
  1
 ],
 [
  "public void transformstrstrresolver2(inputtype inputtype, readertype readertype) {\tstring expected = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?><result></result>\";\tstring szfullfilename = fullfilepath(\"fruits.xml\");\tif (loadxsl(\"xmlresolver_document_function.xsl\", inputtype, readertype) == 1) {\tcalltransform(xslt, szfullfilename, _stroutfile, null);\tverifyresult(expected);\treturn;\t}\telse {",
  "problem loading stylesheet",
  0
 ],
 [
  "int status = 0;\tforeach (string url in urls) {\tstring filename = path.getfilename (url);\tif (filename.length == 0) filename = \"default\";\tstring savename = filename;\tint n = 1;\twhile (file.exists (savename)) {\tsavename = string.concat (filename, \".\", n.tostring ());\tn++;\t}",
  "isvisible point",
  1
 ],
 [
  "public void writenode_xmlreader23(xmlwriterutils utils) {\txmlreader xr = createreaderignorews(\"xmlreader.xml\");\twhile (xr.read()) {\tif (xr.localname == \"middle\") {\txr.read();\txr.read();\tbreak;\t}\t}\tif (xr.nodetype != xmlnodetype.text) {",
  "reader positioned on",
  0
 ],
 [
  "mineattribute ma = (mineattribute) attrs [0];\tif (ma.types [0] != typeof (int)){\treturn 1;\t}\tif (ma.types [1] != typeof (string)){\treturn 2;\t}\tif (ma.types [2] != typeof (object [])){\treturn 3;\t}",
  "ok",
  0
 ],
 [
  "static void main (string[] args) {",
  "hello world",
  0
 ],
 [
  "public override void onstop() {",
  "uri",
  1
 ],
 [
  "public override void writeto(itextoutput output) {",
  "try",
  0
 ],
 [
  "public async task dependenttransaction() {\tlong id1 = this.transactionmanager.starttransaction(timespan.fromticks(this.storagedelay.ticks * 2));\tlong id2 = this.transactionmanager.starttransaction(timespan.fromticks(this.storagedelay.ticks * 4));\tvar info = new transactioninfo(id1);\tstopwatch sw = stopwatch.startnew();\tthis.transactionmanager.committransaction(info);\tsw.stop();",
  "did not throw exception",
  1
 ],
 [
  "public static void createxmlspacetestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<xmlspace1 xml:space=\\'default\\'>&lt; &gt;</xmlspace1>\");\ttw.write(\"<xmlspace2 xml:space=\\'preserve\\'>&lt; &gt;<a><b><c>space test</c><persona>dromio of syracuse</persona></b></a></xmlspace2>\");\ttw.writeline(\"<empty_xmlspace attr0=\\\"0\\\" xml:space=\\'default\\' />\");\ttw.writeline(\"<xmlspace2a xml:space=\\'default\\'>&lt; <xmlspace3 xml:space=\\'preserve\\'>  &lt; &gt; <xmlspace4 xml:space=\\'default\\'>  &lt; &gt;  </xmlspace4> test </xmlspace3> &gt;</xmlspace2a>\");",
  "pgroup",
  0
 ],
 [
  "s5.f4 = 4;\ts5.f5 = 5;\ts5 = mono_return_short5(s5, 90);\tif (s5.f1 != 1+90) {\treturn 1;\t}\tif (s5.f2 != 2+90) {\treturn 2;\t}\tif (s5.f3 != 3+90) {",
  "got but expected",
  0
 ],
 [
  "static void loadcache() {\tdict = new dictionary<string, usagestruct>();\tsd.projectservice.solutionclosed += delegate { savecache(); };\tstring cachefilename = codecompletiondatausagecache.cachefilename;\tif (string.isnullorempty(cachefilename) || !file.exists(cachefilename)) return;\tusing (filestream fs = new filestream(cachefilename, filemode.open, fileaccess.read)) {\tusing (binaryreader reader = new binaryreader(fs)) {\tif (reader.readint64() != magic) {",
  "codecompletiondatausagecache wrong file magic",
  0
 ],
 [
  "_currentparsetree = args.generatorresults.document;\t_lastchangeowner = null;\t}\tdebug.assert(args != null, \"event arguments cannot be null\");\teventhandler<documentparsecompleteeventargs> handler = documentparsecomplete;\tif (handler != null) {\ttry {\thandler(this, args);\t}\tcatch (exception ex) {",
  "adstorectx extensioncacheconverter match type",
  1
 ],
 [
  "public static int main () {\tbutton b = new button ();\tb.clicked += delegate {",
  "public override system xml serialization xmlserializationwriter writer",
  1
 ],
 [
  "private static int main() {\ttry {\tif (testtrycatch(15) || !testtrycatch(18)) {\treturn 1;\t}\tif (testtryfinally(19) || !testtryfinally(12)) {\treturn 2;\t}\t}\tcatch (exception) {",
  "ok",
  1
 ],
 [
  "private static bool inpropertyget() {\tint failcount = 0;\ttestingproperty = 33;\tif (testingproperty != 33) {\tfailcount++;",
  "test failed conversion result is incorrect",
  0
 ],
 [
  "public void testtextreadbase64_24() {\tbyte[] buffer = new byte[5000];\tstring strxml = \"<b>\" + new string('c', 5000);\ttry {\txmlreader datareader = getreaderstr(strxml);\tpositiononelement(datareader, \"b\");\tif (!datareader.canreadbinarycontent) return;\tdatareader.readelementcontentasbase64(buffer, 0, 5000);",
  "accepted incomplete element",
  0
 ],
 [
  "public void failure8 (int i, int j) {\tbool ret = false;\tlock (locker) {\tlock (locker2) {\tret = true;\t}\tlock (locker2) {\tobject o = new object ();\tobject o2 = new object ();\tlock (o) {",
  "foo",
  0
 ],
 [
  "public static void main (string[] args) {\tif (args.length == 0) {",
  "usage mono tlsmulti exe url",
  0
 ],
 [
  "static async task testfinallywithreturnnovalue (int value) {\tfin = false;\ttry {\tif (value > 4) return;\tvalue += 10;\t} finally {\tfin = true;",
  "failed int",
  1
 ],
 [
  "public static int main () {\tint total = 0;\tforeach (int i in getit (new int [] { 1, 2, 3})){",
  "got",
  0
 ],
 [
  "public void printfullreport() {\twriter.writeline();",
  "assembly found for the assembly name",
  1
 ],
 [
  "public string resolvecomreference(assemblyname assyname) {\tstring refstr = assyname.name + \".dll\";\ttypelibrary typelib = (typelibrary)_primaryinteroptypelibs[assyname.tostring()];\tif (typelib != null) refstr = typelib._assy.location;",
  "cdata",
  1
 ],
 [
  "};\tspn.mousemoved += (sender, e) => movedoverspn = true;\tspn.buttonpressed += handlebuttonpressed;\tspn.buttonreleased += handlebuttonreleased;\tspn.mousescrolled += handlemousescrolled;\tpackstart (btn);\tpackstart (resbtn);\tbtn.mouseentered += (sender, e) =>  {\tinsidebutton = true;\tapplication.timeoutinvoke (100, checkmouseoverbutton);",
  "mouse entered",
  0
 ],
 [
  "object val = e.value;\tif (val is string) writer.addresource ((string)e.key, (string)e.value);\telse writer.addresource ((string)e.key, e.value);\t}\treader.close ();\twriter.close ();\t} catch (exception e) {\texception inner = e.innerexception;\txmlexception xex = (inner as xmlexception);\tif (xex != null) {",
  "waithandle has a limit of handles so you cannot process urls",
  1
 ],
 [
  "foreach (object value in list) {\tconsole.write (value);\tconsole.write (environment.newline);\t}\tint x = 0;\tfor (int i = 0; i < 100; i++) x++;\tconsole.writeline (x);\tstring useless = \"useless string\";\tif (useless.equals (\"other useless\")) {\tuseless = string.empty;",
  "total referenced",
  1
 ],
 [
  "additemsaddedcounter(coll);\tadditemsremovedcounter(coll);\tcoll.addall(bag1);\tcoll.removeall(new int[] { 2, 5, 6, 3, 7, 2 });\tcoll.clear();\ticollection<int> bag2 = new hashbag<int>();\tbag2.itemsadded += delegate(object c, itemcounteventargs<int> args) {\t};\tbag2.addall(bag1);\tbag2.itemsremoved += delegate(object c, itemcounteventargs<int> args) {",
  "copies of removed",
  0
 ],
 [
  "else if (targetframework != null) {\ttargetframework newfx = runtime.systemassemblyservice.gettargetframework (targetframework);\tif (newfx == null) inconsistentframeworks = true;\telse {\tif (newfx.canreferenceassembliestargetingframework (commonframework)) commonframework = newfx;\telse if (!commonframework.canreferenceassembliestargetingframework (newfx)) inconsistentframeworks = true;\t}\t}\tif (inconsistentframeworks) break;\t}",
  "inconsistent target frameworks found in",
  0
 ],
 [
  "string satdir = path.combine (outputdir, culture);\tstring outputfile = defaultns + \".resources.dll\";\tdirectory.createdirectory (satdir);\tusing (stringwriter sw = new stringwriter ()) {\tstring args = string.format (\"/t:lib {0} \\\"/out:{1}\\\" /culture:{2}\", pair.value, outputfile, culture);\tprocesswrapper pw = null;\ttry {\tprocessstartinfo info = runtime.processservice.createprocessstartinfo ( al, args, satdir, false);\tpw = runtime.processservice.startprocess (info, sw, sw, null);\t} catch (system.componentmodel.win32exception ex) {",
  "error while trying to invoke to generate satellite assembly for culture",
  0
 ],
 [
  "membersmapping membersmapping = (membersmapping)element.mapping;\tmembermapping[] mappings = membersmapping.members;\tbool haswrapperelement = membersmapping.haswrapperelement;\tbool writeaccessors = membersmapping.writeaccessors;\tstring methodname = nextmethodname(element.name);\twriter.writeline();\twriter.write(\"public object[] \");\twriter.write(methodname);\twriter.writeline(\"() {\");\twriter.indent++;",
  "reader movetocontent",
  0
 ],
 [
  "task.wait();\tinitran();\tbool cancel = false;\ttask cont = continuationmaker(task);\ttry { cont.wait(); }\tcatch (aggregateexception ex) { if (ex.innerexceptions[0] is taskcanceledexception) cancel = true; }\tif (expect != ranvalue() || expect == cancel) {\tassert.true(false, string.format(\"runcontinuewithbase: >> failed: continuation didn't run or get canceled when expected: ran = {0}, cancel = {1}\", ranvalue(), cancel));\t}\t}",
  "continuewith before task finishes successfully",
  0
 ],
 [
  "using (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writecharentity('\\udd12');\t}\tcatch (argumentexception e) {\tcerror.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "create command",
  1
 ],
 [
  "}\tif (dotpos < 0) return null;\ttypedefinition type = findtype(module, key.substring(2, dotpos - 2));\tif (type == null) return null;\tstring shortname;\tif (parenpos > 0) {\tshortname = key.substring(dotpos + 1, parenpos - (dotpos + 1));\t} else {\tshortname = key.substring(dotpos + 1);\t}",
  "searching in type for",
  0
 ],
 [
  "if (s9.f1 != 1+906) {\treturn 1;\t}\tif (s9.f2 != 2+906) {\treturn 2;\t}\tif (s9.f3 != 3+906) {\treturn 3;\t}\tif (s9.f4 != 4+906) {",
  "got but expected",
  1
 ],
 [
  "public static void main (string[] args) {\tif (args.length != 3) {\tenvironment.exit (1);\t}\tstring map_assembly_name = args[0];\tstring input_assembly_name = args[1];\tstring output_assembly_name = args[2];",
  "building list of mapdllimports from map assembly",
  0
 ],
 [
  "writeline($\"if (!(htype == 0 || htype == handletype.{record.name} || htype == handletype.null))\");\twriteline($\"_value = (value & 0x00ffffff) | (((int)handletype.{record.name}) << 24);\");\tclosescope();\topenscope($\"public static implicit operator  handle({handlename} handle)\");\tclosescope(\"handle\");\topenscope(\"internal int offset\");\topenscope(\"get\");\tclosescope();\tclosescope(\"offset\");\topenscope($\"public {record.name} get{record.name}(metadatareader reader)\");",
  "return reader get record name this",
  0
 ],
 [
  "private static string[] createcsfiles (string[] source_text, string[] source_name) {\tarraylist temp_file_list = new arraylist ();\tfor (int i=0; i<source_text.length; i++) {\tstring temp_path = path.gettempfilename ();\tstreamwriter writer = null;\ttry {\twriter = new streamwriter (temp_path);",
  "unknown option",
  1
 ],
 [
  "protected override void generatetypeconstructor (codetypeconstructor constructor) {\tif (iscurrentdelegate || iscurrentenum || iscurrentinterface) {\treturn;\t}\t#if net_2_0 outputattributes (constructor.customattributes, null, linehandling.continueline);\tindent++;\tgeneratestatements (constructor.statements);\tindent--;",
  "end sub",
  0
 ],
 [
  "public override void execute(object parameter) {\tif (parameter == null) throw new argumentnullexception(\"parameter\");\tfiletemplateresult result = (filetemplateresult)parameter;\tvar openedfile = result.newopenedfiles.single();\tvar wizardviewmodel = new reportwizardcontext();\tvar reportwizard = new icsharpcode.reporting.addin.reportwizard.dialog.reportwizard(wizardviewmodel);\treportwizard.showdialog();\tif (reportwizard.dialogresult.hasvalue && reportwizard.dialogresult.value){",
  "reportwizard createreport",
  0
 ],
 [
  "if ((0 <= index) && (index < tables.count)) {\t#if debug if (adapterswitches.dataschema.traceinfo) {\t}\t#endif return tables[index];\t}\tswitch (schemaaction) {\tcase missingschemaaction.add: case missingschemaaction.addwithkey: #if debug if (adapterswitches.dataschema.traceinfo) {\t}\t#endif return new datatable(datasettable);\tcase missingschemaaction.ignore: #if debug if (adapterswitches.dataschema.tracewarning) {",
  "line default",
  1
 ],
 [
  "public registerresponseinfo register (registerinfo registerinfo) {\tvar r = registerinfo;",
  "assert areequal mtp tostring true false true false true false",
  1
 ],
 [
  "foreach (string res_name in assembly.getmanifestresourcenames ()) {\tmanifestresourceinfo res_info = assembly.getmanifestresourceinfo (res_name);\tif ((res_info.resourcelocation & resourcelocation.embedded) == 0) {\tif (!file.exists (res_info.filename)) {\treturn false;\t}\tresources.add (res_info);\t}\t}\tif (check_refs && !checkreferencedassemblies (an)) {",
  "attempt to install an assembly that references non strong named assemblies with check refs enabled",
  0
 ],
 [
  "int x = 0;\tfor (int i = 0; i < 100; i++) x++;\tconsole.writeline (x);\tstring useless = \"useless string\";\tif (useless.equals (\"other useless\")) {\tuseless = string.empty;\t}\tuseless = string.concat (useless,\" 1\");\tfor (int j = 0; j < useless.length; j++) {\tif (useless[j] == 'u') console.writeline (\"i have detected an u char\");",
  "i have detected an useless char",
  0
 ],
 [
  "public virtual void showexception(exception ex, string message) {\tloggingservice.error(message, ex);",
  "stack trace of last exception log",
  0
 ],
 [
  "foreach (itaskitem source in sources) {\tstring sourcefile = source.itemspec;\tstring outputfile = source.getmetadata (\"autogen\").equals (\"true\", stringcomparison.ordinalignorecase) ? source.itemspec.replace ('\\\\', '.').replace ('/', '.') : path.changeextension (sourcefile, \"resources\");\tif (isresgenrequired (sourcefile, outputfile)) result &= compileresourcefile (sourcefile, outputfile);\titaskitem newitem = new taskitem (source);\tnewitem.itemspec = outputfile;\ttemporaryfileswritten.add (newitem);\t}\t} else {\tif (sources.length != outputresources.length) {",
  "sources count is different than outputresources count",
  0
 ],
 [
  "public static void main (string[] args) {\tfoo f = new foo();\tbar b = new bar();\tb.test(f);",
  "f equals b failed error",
  0
 ],
 [
  "private void dochecktimeout() {\tif (--_timeoutcheckstoskip != 0) return;\t_timeoutcheckstoskip = timeoutcheckfrequency;\tint currentmillis = environment.tickcount;\tif (currentmillis < _timeoutoccursat) return;\tif (0 > _timeoutoccursat && 0 < currentmillis) return;\t#if debug if (runregex.debug) {\tdebug.writeline(\"\");",
  "input",
  0
 ],
 [
  "public static explicit operator double (blah i) {",
  "hostnametype",
  1
 ],
 [
  "static private void help () {",
  "show data in hexadecimal",
  0
 ],
 [
  "static bool callsecondclassoperator() {\tint failcount = 0; verify.firstcalled = false;\tif ( (!(bool)(((dynamic)firstclassreturnclass<int>.staticmethod()) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "private void writeisstarttag(string name, string ns) {\twriter.write(\"if (reader.isstartelement(\");\twriteid(name);\twriter.write(\", \");\twriteid(ns);\twriter.writeline(\")) {\");\twriter.indent++;\t}\tprivate void writeunknownnode(string func, string node, elementaccessor e, bool anyifs) {\tif (anyifs) {",
  "verifying default breakstate",
  1
 ],
 [
  "try {\tchecked {\tbyte b = (byte)d;\t}\t}\tcatch (system.overflowexception) {\texception = true;\t}\tfinally {\tif (exception) rez++;",
  "test failed",
  0
 ],
 [
  "protected override string renderbeforecontent () {",
  "renderbeforecontent",
  0
 ],
 [
  "int results = 0;\tif(rdr == null) {\t}\telse {\tdo {\tdatatable dt = rdr.getschematable();\tif(rdr.recordsaffected != -1) {\t}\telse if(dt == null) console.writeline(\"result is from a sql command not (insert,update,delete).   records affected: \" + rdr.recordsaffected);\telse {",
  "numsucceededtasks",
  1
 ],
 [
  "sn16.f9 = 9;\tsn16.f10 = 10;\tsn16.f11 = 11;\tsn16.f12 = 12;\tsn16.f13 = 13;\tsn16.f14 = 14;\tsn16.f15 = 15;\tsn16.nested2.f16 = 16;\tsn16 = mono_return_sbyte16_nested(sn16, 9);\tif (sn16.nested1.f1 != 1+9) {",
  "ex tostring",
  1
 ],
 [
  "public static int main () {\tint [] a = new int [10];\tint [] b = new int [2];\tfor (int i = 0; i < 10; i++) a [i] = 10 + i;\tfor (int j = 0; j < 2; j++) b [j] = 50 + j;\tif (test_single (a) != 145) return 1;\tif (test_single (b) != 101) return 2;\tif (test_continue (a) != 131){",
  "expecting got",
  0
 ],
 [
  "public void dispose() {",
  "c",
  0
 ],
 [
  "} else {\tresult = new symgraph<tfunc, tadomain> (commontail);\tmergestate = new mergeinfo<tfunc, tadomain> (result, egraph, that, widen);\tmergestate.replayeliminations (commontail);\tmergestate.addmapping (egraph.const_root, that.const_root, result.const_root);\tmergestate.joinsymbolicvalue (egraph.const_root, that.const_root, result.const_root);\tmergestate.commit ();\t}\tmergeinfo = mergestate;\tif (debugoptions.debug) {",
  "result update size",
  0
 ],
 [
  "outputline (@\"       \\close to close the connection\");\toutputline (@\"       \\e to execute sql query (select)\");\toutputline (@\"       \\h to show help (all commands).\");\toutputline (@\"       \\defaults to show default variables.\");\toutputline (\"\");\t}\tpublic void showhelp () {\tconsole.writeline (\"\");\tif (!waitforenterkey ()) return;\tif (!waitforenterkey ()) return;",
  "use the complete name of its assembly and",
  0
 ],
 [
  "jointhread.start ();\tconst int makethreads = 10*1000;\tfor (int i = 0; i < makethreads; ++i) {\tthread t = new thread (() => { thread.yield (); });\tt.start ();\tthreads.add (t);\t}\tthreads.add (null);\tjointhread.join ();\tjoincount += makethreads;",
  "performed gcs created threads finished",
  0
 ],
 [
  "}\tprotected virtual void onclientaccepted(tcpclient client) {\t}\tprivate void onauthenticate(task result, clientstate state) {\tsslstream sslstream = (sslstream)state.stream;\ttry {\tresult.getawaiter().getresult();\tsslstream.beginread(state.receivebuffer, 0, state.receivebuffer.length, onreceive, state);\t}\tcatch (authenticationexception authex) {",
  "server disconnecting from client during authentication no shared ssl tls algorithm",
  0
 ],
 [
  "public void testcase4() {\ttest<stringcompareisculturespecificissue>(@\" class test {\tvoid foo () {",
  "got but expected",
  1
 ],
 [
  "timer.begintiming ();\tvar dir = path.getdirectoryname (typeof(macplatformservice).assembly.location);\tif (objcruntime.dlfcn.dlopen (path.combine (dir, \"libxammac.dylib\"), 0) == intptr.zero) loggingservice.logfatalerror (\"unable to load libxammac\");\tmimemap = new lazy<dictionary<string, string>> (loadmimemapasync);\tcarbon.setprocessname (brandingservice.applicationname);\tcheckgtkversion (2, 24, 14);\txwt.toolkit.currentengine.registerbackend<iextendedtitlebarwindowbackend,extendedtitlebarwindowbackend> ();\txwt.toolkit.currentengine.registerbackend<iextendedtitlebardialogbackend,extendedtitlebardialogbackend> ();\tvar description = xammacbuildinfo.value;\tif (string.isnullorempty (description)) {",
  "unknown command",
  1
 ],
 [
  "protected override void writedatacontexttable(codewriter writer, dblinq.schema.dbml.table table) {",
  "public table get return gettable",
  0
 ],
 [
  "public static int main () {\tif (a != 5 || b != 0) return 1;\tif ((typeof (x2).attributes & typeattributes.beforefieldinit) == 0) return 2;",
  "ok",
  0
 ],
 [
  "public iasyncresult beginsendchangecipherspec(asynccallback callback, object state) {",
  "hello world",
  1
 ],
 [
  "private async task batchrequestcancellationviaparametertestasync(methodinfo method, object o, timespan? clientrequesttimeoutviacustomtoken) {\tassert.notnull(clientrequesttimeoutviacustomtoken);\tusing (cancellationtokensource cancellationtokensource = new cancellationtokensource(clientrequesttimeoutviacustomtoken.value)) {",
  "error orleans codegen the input assembly does not reference orleans and therefore code can not be generated",
  1
 ],
 [
  "list<nodefile> filelistfromcomputenodeoperations = batchcli.pooloperations.listnodefiles(this.poolfixture.poolid, computenodeid, recursive: true).tolist();\tforeach (nodefile f in filelistfromcomputenodeoperations) {\t}\tassert.contains(\"shared\", filelistfromcomputenodeoperations.select(f => f.path));\tlist<nodefile> filelistfromcomputenode = computenode.listnodefiles(recursive: true).tolist();\tforeach (nodefile f in filelistfromcomputenodeoperations) {\t}\tassert.contains(\"shared\", filelistfromcomputenode.select(f => f.path));\tstring filepathtoget = filelistfromcomputenode.first(f => !f.isdirectory.value).path;\tnodefile computenodefilefrommanager = batchcli.pooloperations.getnodefile(this.poolfixture.poolid, computenodeid, filepathtoget);",
  "successfully retrieved file",
  0
 ],
 [
  "public override string tostring () {\tstringwriter sw = new stringwriter ();",
  "warning",
  0
 ],
 [
  "public static void formatoutput (iexporttext textcolumn) {\tif (string.isnullorwhitespace(textcolumn.text)) {\treturn;\t}\tif (textcolumn.name == \"xy\") {",
  "stop",
  0
 ],
 [
  "static void main () {\tconsole.writeline (\"/*\");",
  "creating pad",
  1
 ],
 [
  "private static bool inwhilestatement1() {\tint failcount = 0;\tc origin = new c(1);\tdynamic d = origin;\twhile ((bool)d) {\tfailcount++;",
  "geoid",
  1
 ],
 [
  "static bool changecodegroup (string[] args, ref int i) {\tstring name = args [++i];\tpolicylevel pl = null;\tcodegroup parent = null;\tcodegroup cg = findcodegroup (name, ref parent, ref pl);\tif ((pl == null) || (parent == null) || (cg == null)) return false;\tif (!processcodegroup (cg, args, ref i)) return false;\tsecuritymanager.savepolicylevel (pl);",
  "codegroup modified in policy level",
  0
 ],
 [
  "if (traceutil.if(this, tracelevel.verbose)) {\tif (fieldpropvalue != null) trace.writeline(\"  fieldpropval: \" + fieldpropvalue);\tif (parametervalues != null) {\t}\t}\tswitch (_objmemberinfo.membertype) {\tcase membertypes.method: {\tmethodinfo m = (methodinfo)_objmemberinfo;\tsetobject(m.invoke(parent._obj, parametervalues));\tif (traceutil.if(this, tracelevel.verbose)) {",
  "called on return",
  0
 ],
 [
  "public dummy storestaticfield (label pc, field field, source value, textwriter data) {",
  "stsfld",
  0
 ],
 [
  "got_assemblies = true;\tcontinue;\t}\tstring [] compare = arg.split ();\tif (compare.length != 2) {\treturn 1;\t}\tcompares.add (arg);\t}\tif (got_assemblies) {",
  "output csv file is decimal format",
  1
 ],
 [
  "static void onconfigurationupdated(eventargs e) {",
  "validation failed",
  1
 ],
 [
  "public void testremovebracesfromlock() {\ttest<removebracescoderefactoringprovider>(@\"class testclass {\tvoid test() {\t$lock (this) {",
  "hello",
  0
 ],
 [
  "}\tif (!nologo) {\t}\tif (help) {\tconsole.writeline();\tconsole.writeline();\tp.writeoptiondescriptions(console.out);\treturn 1;\t}\tif (extra.count > 0) {",
  "invalid client use sqlclient no support for tdsclient nor sybaseclient",
  1
 ],
 [
  "public void testextrafirst () {",
  "item in list but not dict",
  1
 ],
 [
  "public void testbug4556() {\tstring code = class foo {\tpublic static void main (string[] args) {\t}\t\";\tvar unit = syntaxtree.parse(code);\tvar type = unit.members.first(m => m is typedeclaration) as typedeclaration;\tvar method = type.members.first() as methoddeclaration;\tbool passed = !method.body.isnull;\tif (!passed) {",
  "hoyo",
  1
 ],
 [
  "public void removeparam7() {\tm_xsltarg = new xsltargumentlist();\tretobj = m_xsltarg.removeparam(\"myarg1\", null);\tif (retobj != null) {",
  "is not provided using default value",
  1
 ],
 [
  "public void printtree (streamwriter msw) {\tfor (int i = 0; i < faxisarray.count; ++i) {\tforwardaxis axis = (forwardaxis)faxisarray[i];\tmsw.writeline(\"<tree isdss=\\\"{0}\\\" isattribute=\\\"{1}\\\">\", axis.isdss, axis.isattribute);\tdoublelinkaxis printaxis = axis.topnode;\twhile ( printaxis != null ) {",
  "typelib markconverted",
  1
 ],
 [
  "assert.equal(counter, funccounter);\tcounter++;\tif (counter == 5) return task.fromresult(28);\telse throw new argumentexception(\"wrong arg!\");\t});\tfunc<exception, int, bool> errorfilter = ((exception exc, int i) => {\treturn true;\t});\ttask<int> promise = asyncexecutorwithretries.executewithretries(myfunc, 10, 10, null, errorfilter);\tint value = promise.result;",
  "msbuild",
  1
 ],
 [
  "private static bool callsecondinterfaceinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tdynamic d = new firstclassreturninterface<int>();\tif ((!(((d + 1)).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public void writenode_xmlreader24() {\txdocument doc = new xdocument();\txmlreader xr = createreaderignorews(path.combine(filepathutil.gettestdatapath(), path.combine(\"xmlwriter2\", \"xmlreader.xml\")));\twhile (xr.read()) {\tif (xr.localname == \"cdatanode\") {\txr.read();\tbreak;\t}\t}\tif (xr.nodetype != xmlnodetype.cdata) {",
  "common options",
  1
 ],
 [
  "static void help () {",
  "client certificates",
  1
 ],
 [
  "tempfilename = pofile + filecounter.tostring();\t} while (file.exists(tempfilename));\tsw = new streamwriter(tempfilename,false,encoding);\t}\tcatch (exception ex) {\treturn false;\t}\tusing (sw) {\tsw.newline = originalnewline;\tif (!string.isnullorempty (comment)) catalog.savemultilines (sw, comment);",
  "msgstr",
  0
 ],
 [
  "switch (args [i].tolower ()) {\tcase \"-h\": case \"/h\": case \"-?\": case \"/?\": usage ();\treturn 1;\tcase \"/compile\": case \"-compile\": if (inputfiles.count > 0) {\tusage ();\treturn 1;\t}\tcompilemultiple = true;\tbreak;\tcase \"/usesourcepath\": case \"-usesourcepath\": if (compilemultiple) {",
  "resgen error invalid command line syntax switch bad value use resgen for usage information",
  0
 ],
 [
  "public void readbyte_rndparityreplace() {",
  "system drawing graphics",
  1
 ],
 [
  "private void populateinterp ( nvdldispatcher d, nvdlinterpretation i, nvdlsection parentstate) {\tsimplemode m = findcontextmode (i.action, parentstate);\tsimplerule rule = findelementrule (m, dispatcher.reader);",
  "populate interp from action whose mode is rule is whose actions are",
  0
 ],
 [
  "private static void printoutstorageaccount(storagebundle storagebundle) {",
  "storage account id",
  0
 ],
 [
  "public static void registerremotingchannel () {\tif (!channelregistered) {\tchannelregistered = true;\tidictionary formatterprops = new hashtable ();\tformatterprops [\"includeversions\"] = false;\tformatterprops [\"strictbinding\"] = false;\tichannel ch = channelservices.getchannel (\"ipc\");\tif (ch != null) {",
  "exception",
  1
 ],
 [
  "public static void testpersistsucurityinfo4() {\tconsole.writeline(\"\\ntestpersistsucurityinfo4 - persist security info=false with password at front\");\toracleconnection con = new oracleconnection(\";password=tiger;data source=palis;user id=scott;persist security info=false\");",
  "did not throw error",
  1
 ],
 [
  "private static void printoutstoragesasdefinition(sasdefinitionbundle sasdefinitionbundle) {",
  "storage sas definition id",
  0
 ],
 [
  "public static async task removepackagedependencies (this dotnetproject project, ilist<ipackagedependency> dependencies) {\tif (project == null) throw new argumentnullexception (nameof (project));\tforeach (var dependency in dependencies) {",
  "idatareader has a null reference",
  1
 ],
 [
  "using (var p = newprocess(exe, exeargs)) {\tp.outputdatareceived += (sender, args) => {\tif (args.data != null) console.writeline(args.data);\t};\tp.errordatareceived += (sender, args) => {\tif (args.data != null) console.error.writeline(args.data);\t};\tp.start();\tp.beginoutputreadline();\tp.beginerrorreadline();",
  "foo bar",
  1
 ],
 [
  "static void dosomeclientwork() {\tvar config = orleans.runtime.configuration.clientconfiguration.localhostsilo(30000);\tgrainclient.initialize(config);\tvar friend = grainclient.grainfactory.getgrain<icollector>(0);\tvar result = friend.getsum().result;",
  "sum of answers is",
  0
 ],
 [
  "public void read() {\tvar document = new xmldocument();\ttry {\tdocument.load(filename);\t}\tcatch (xmlexception ex) {",
  "binaryform null",
  1
 ],
 [
  "public static void main (string[] args) {\tusing (var w = new streamwriter (console.openstandardoutput ())) {",
  "using system",
  0
 ],
 [
  "protected void recreatehandle() {\tif (!ishandlecreated) return;\t#endif setisrecreating ();\tif (ishandlecreated) {",
  "assert areequal mtp tostring true false true false true false",
  1
 ],
 [
  "static bool callsecondstructindexer() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturnstruct<int>();\tif ( (!(bool)(((dynamic)s[1])[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public bool movenext() {\tglobaldebug.writelineif(globaldebug.info, \"findresultenumerator\", \"entering movenext, t={0}\", typeof(t));\tcheckdisposed();\tif (_endreached) {\treturn false;\t}\tif (_resultset == null) {",
  "findresultenumerator movenext no resultset",
  0
 ],
 [
  "protected override void logeventsfromtextoutput(string singleline, messageimportance messageimportance) {\tcompilererror error = parseline(singleline);\tif (error != null) {\tif (error.iswarning) {\tlog.logwarning(\"warning\", error.errornumber, null, error.filename, error.line, error.column, error.line, error.column, error.errortext);\t} else {",
  "error",
  0
 ],
 [
  "}\toptions.loglevel = level;\t}\t}\telse {\tprintusage();\treturn 1;\t}\t}\tif (options.inputassembly == null) {",
  "error orleans codegen no input file specified",
  0
 ],
 [
  "public async task negotiatestream_echoserver_clientwriteread_successive_async_success() {\tif (!_iskrbavailable) {",
  "generation",
  1
 ],
 [
  "this.context.clientwriteiv = new byte[this.ivsize];\tbuffer.blockcopy(ivblock, 0, this.context.clientwriteiv, 0, this.context.clientwriteiv.length);\tthis.context.serverwriteiv = new byte[this.ivsize];\tbuffer.blockcopy(ivblock, this.ivsize, this.context.serverwriteiv, 0, this.context.serverwriteiv.length);\t}\telse {\tthis.context.clientwriteiv = ciphersuite.emptyarray;\tthis.context.serverwriteiv = ciphersuite.emptyarray;\t}\t}",
  "serverwriteiv",
  0
 ],
 [
  "static object selectaggregate (idbconnection cnc, string agg) {\tidbcommand selectcommand = cnc.createcommand();\tobject data;\tselectcommand.commandtype = commandtype.text;\tselectcommand.commandtext = \"select \" + agg + \"from mono_postgres_test\";\tdata = selectcommand.executescalar ();",
  "div div",
  1
 ],
 [
  "public bool isautoinvoked(bool ignoreexception) {\tif (traceutil.if(this, tracelevel.verbose)) {",
  "build time code generation for assembly options inputassembly took stopwatch elapsedmilliseconds milliseconds",
  1
 ],
 [
  "public static int main () {\tif (foo<bool> ()) return 1;\tif (!foo<int> ()) return 2;\tif (gen<object>.foo (null)) return 3;\tif (!gen<program>.foo (new program ())) return 4;",
  "pass fail",
  1
 ],
 [
  "static private bool drawimagecallback(intptr callbackdata) {",
  "drawimagecallback",
  0
 ],
 [
  "p.waitforexit ();\tapplication.invoke (delegate {\tmain.progress = 0;\tmain.status = \"download complete\";\tif (done != null) done (masterinfo);\t});\t}\t}\tcatch (system.net.webexception wex) {\tif (wex != null && wex.response != null && ((httpwebresponse)wex.response).statuscode == httpstatuscode.notmodified) {",
  "is",
  1
 ],
 [
  "context.statetag = 1;\t}\treturn null;\tdefault: throw new invalidoperationexception ();\t}\t}\tdoc = (xdoctype)context.nodes.pop ();\tif (c == '<') {\trollback = string.empty;\t} else if (c != '>') {",
  "codenamespacestart",
  1
 ],
 [
  "tw.write(\"<entity1 att1='xxx&lt;xxx&#65;xxx&#x43;xxxe1fooxxx'>xxx&gt;xxx&#66;xxx&#x44;xxxe1fooxxx</entity1>\");\ttw.writeline(\"<entity2 att1='xxx&lt;xxx&#65;xxx&#x43;xxxe1fooxxx'>xxx&gt;xxx&#66;xxx&#x44;xxxe1fooxxx</entity2>\");\ttw.writeline(\"<entity3 att1='xxx&lt;xxx&#65;xxx&#x43;xxxe1fooxxx'>xxx&gt;xxx&#66;xxx&#x44;xxxe1fooxxx</entity3>\");\ttw.writeline(\"<entity4 att1='xxx&lt;xxx&#65;xxx&#x43;xxxe1fooxxx'>xxx&gt;xxx&#66;xxx&#x44;xxxe1fooxxx</entity4>\");\ttw.writeline(\"<entity5>e1foo e3bzee </entity5>\");\ttw.writeline(\"<attribute1 />\");\ttw.writeline(\"<attribute2 a1='a1value' />\");\ttw.writeline(\"<attribute3 a1='a1value' a2='a2value' a3='a3value' />\");\ttw.writeline(\"<attribute4 a1='' />\");\ttw.writeline(string.format(\"<attribute5 crlf='x{0}x' cr='x{0}x' lf='x\\nx' ms='x     x' tab='x\\tx' />\", environment.newline));",
  "x x",
  0
 ],
 [
  "protected virtual void objectvaluechanged() {",
  "expected got",
  1
 ],
 [
  "private static bool callsecondstructinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tif ((!(bool)(firstclassreturndynamicstruct<int>.staticproperty.instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "var v4 = checked(a.q += 1);\tret++;\t}\tcatch (system.overflowexception) {\t}\ttry {\tvar v5 = checked(a.c -= 1);\tret++;\t}\tcatch (system.overflowexception) {",
  "long min",
  0
 ],
 [
  "public override imessage invoke (imessage msg) {",
  "verify error testname chainstatus status chainstatus statusinformation",
  1
 ],
 [
  "if (s7.f3 != 3+9) {\treturn 3;\t}\tif (s7.f4 != 4+9) {\treturn 4;\t}\tif (s7.f5 != 5+9) {\treturn 5;\t}\tif (s7.f6 != 6+9) {",
  "garbagecollectionmarkend",
  1
 ],
 [
  "if (asm [0] != typeof (object).assembly) {\treturn 1;\t}\tif (asm [1] != typeof (driver).assembly) {\treturn 2;\t}\tif (asm [2] != dyn) {\treturn 3;\t}\tif (asm [3] != core) {",
  "error while touching cache directory",
  1
 ],
 [
  "public workerrole() {",
  "orleansazuresilos constructor called",
  0
 ],
 [
  "public override void renderendtag (htmltextwriter w) {",
  "attempting to set display names on job schedule job specification pool specification and job manager task",
  1
 ],
 [
  "public void basictest_accessinstanceproperties_noexceptions() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {",
  "speed",
  0
 ],
 [
  "public void storememento(iviewcontent viewcontent) {\timementocapable mementocapable = viewcontent.getservice<imementocapable>();\tif (mementocapable != null && loaddocumentproperties) {\tif (viewcontent.primaryfilename == null) return;\tstring key = getmementokeyname(viewcontent);",
  "saving memento of to key",
  0
 ],
 [
  "static int main () {\tint res;\tappdomainsetup setup = new appdomainsetup ();\tsetup.applicationbase = \".\";\tconsole.writeline (appdomain.currentdomain.friendlyname);\tappdomain newdomain = appdomain.createdomain (\"newdomain\", null, setup);\tstring[] args = { \"1\", \"2\", \"3\"};\tres = newdomain.executeassembly (\"appdomain-client.exe\", null, args);\tif (res != arg_sum (args)) return 1;",
  "usage is installutil commands",
  1
 ],
 [
  "using (sqlconnection conn = new sqlconnection(connectionstring)) {\tusing (sqlcommand cmd = new sqlcommand()) {\tcmd.connection = conn;\tcmd.commandtext = \"select 1 / 0;\";\tcmd.commandtimeout = 3;\tconn.open();\ttry {\tvar output = cmd.executenonquery();\t}\tcatch (exception e) {",
  "sqlclient diagnostictest executenonqueryerrortest",
  0
 ],
 [
  "oracledatareader reader;\tcmd.executenonquery();\treader = (oracledatareader) cmd.parameters[\"io_cursor\"].value;\tint x, count;\tcount = 0;\twhile (reader.read()) {\tfor (x = 0; x < reader.fieldcount; x++) console.write(reader[x] + \" \");\tconsole.writeline();\tcount += 1;\t}",
  "ms other tasks",
  1
 ],
 [
  "public static int main () {\tvar tests = from test in typeof (tester).getmethods (bindingflags.instance | bindingflags.nonpublic | bindingflags.declaredonly) where test.getparameters ().length == 0 orderby test.name select runtest (test);\tint failures = tests.count (a => !a);",
  "tests failed",
  0
 ],
 [
  "static private void help () {",
  "connectionstring is not set",
  1
 ],
 [
  "var mdproject = getmonoproject (projectid) as monodevelop.projects.dotnetproject;\tvar path = getmetadatapath (metadatareference);\tif (mdproject == null || path == null) return;\tforeach (var r in mdproject.references) {\tif (r.referencetype == monodevelop.projects.referencetype.assembly && r.reference == path) {\treturn;\t}\tif (r.referencetype == monodevelop.projects.referencetype.project) {\tforeach (var fn in r.getreferencedfilenames (monodevelop.projects.configurationselector.default)) {\tif (fn == path) {",
  "provider and connectionstring",
  1
 ],
 [
  "if (s9.f4 != 4+90) {\treturn 4;\t}\tif (s9.f5 != 5+90) {\treturn 5;\t}\tif (s9.f6 != 6+90) {\treturn 6;\t}\tif (s9.f7 != 7+90) {",
  "foo bar",
  1
 ],
 [
  "public static void restorecomenvironment() {\tif (_typelibs.count == 0) return;\tprogressdialog progressdialog = new progressdialog();\tprogressdialog.setup(\"loading remembered activex files\", \"please wait while i load the previously \" + \"opened activex files.\", _typelibs.count, progressdialog.has_progress_text, progressdialog.final);\tprogressdialog.showifnotdone();\ttry {\tfor (int i = _typelibs.count - 1; i >= 0; --i) {\tpreviouslyopenedtypelibrary typelib = _typelibs[i];\ttry {",
  "did not throw exception",
  1
 ],
 [
  "throw new argumentexception(sr.getstring(sr.errorbadextendertype, providertype.name, componenttype.name), \"provider\");\t}\tbool sitedprovider = false;\tif (provider is icomponent && ((icomponent)provider).site != null) {\tsitedprovider = true;\t}\tilist wrappedextenders = null;\tlock(this) {\twrappedextenders = (ilist) wrappedextendertable[provider];\tif (wrappedextenders == null) {",
  "assert areequal",
  1
 ],
 [
  "try {\tconsole.writeline (\"defaultprovider = {0}\", protectedconfiguration.defaultprovider);\trsaprotectedconfigurationprovider rsa = (rsaprotectedconfigurationprovider)protectedconfiguration.providers [protectedconfiguration.defaultprovider];\tconsole.writeline (rsa.name);\tconsole.writeline (\"cspprovidername = '{0}'\", rsa.cspprovidername == null ? \"(null)\" : rsa.cspprovidername);\tconsole.writeline (\"keycontainername = '{0}'\", rsa.keycontainername == null ? \"(null)\" : rsa.keycontainername);\tconsole.writeline (\"usemachinecontainer = '{0}'\", rsa.usemachinecontainer);\tconsole.writeline (\"useoaep = '{0}'\", rsa.useoaep);\t}\tcatch (exception e) {",
  "exception raised",
  0
 ],
 [
  "_membersearchresults.dispose();\t}\tif (_membersearchersqueue != null) {\tforeach (directorysearcher ds in _membersearchersqueue) {\tds.dispose();\t}\t_membersearchersqueue.clear();\t}\tidisposable disposablemembers = _members as idisposable;\tif (disposablemembers != null) {",
  "duplicate address detection state",
  1
 ],
 [
  "if (parent._objtype.isvaluetype) {\tif (setmember) {\tstructaccessor.setvalue(objectnode, fieldpropvalue);\t}\tsetobject(structaccessor.getvalue(objectnode));\t} else {\tif (setmember) f.setvalue(parent._obj, fieldpropvalue);\tsetobject(f.getvalue(parent._obj));\t}\tif (traceutil.if(this, tracelevel.verbose)) {",
  "pragma warning disable",
  1
 ],
 [
  "if (s11.f6 != 6+9) {\treturn 6;\t}\tif (s11.f7 != 7+9) {\treturn 7;\t}\tif (s11.f8 != 8+9) {\treturn 8;\t}\tif (s11.f9 != 9+9) {",
  "got but expected",
  0
 ],
 [
  "public void testdisable() {\tanalyze<basemethodcallwithdefaultparameteranalyzer>(@\" public class mybase {\tpublic virtual void foobar(int x = 12) {",
  "test failed at call result",
  1
 ],
 [
  "static void dumpsignedinfo (signedinfo s) {",
  "references",
  0
 ],
 [
  "public void readwithoutopen() {\tusing (serialport com = new serialport()) {",
  "verifying read method throws exception without a call to open",
  0
 ],
 [
  "public void validationcallback(object sender, validationeventargs args) {\tif (args.severity == xmlseveritytype.warning) {\tbwarningcallback = true;\twarningcount++;\twarninginnerexceptionset = (args.exception.innerexception != null);\t}\telse if (args.severity == xmlseveritytype.error) {\tberrorcallback = true;\terrorcount++;\terrorinnerexceptionset = (args.exception.innerexception != null);",
  "innerexceptionset",
  0
 ],
 [
  "public void storeconfiguration() {",
  "workbenchlayout storeconfiguration not implemented",
  0
 ],
 [
  "foreach (type rtype in gen.referencedtypes) {\tstring path = new uri (rtype.assembly.codebase).localpath;\tif (!cp.referencedassemblies.contains (path)) cp.referencedassemblies.add (path);\t}\tif (!cp.referencedassemblies.contains (\"system.dll\")) cp.referencedassemblies.add (\"system.dll\");\tif (!cp.referencedassemblies.contains (\"system.xml\")) cp.referencedassemblies.add (\"system.xml\");\tif (!cp.referencedassemblies.contains (\"system.data\")) cp.referencedassemblies.add (\"system.data\");\tif (!cp.referencedassemblies.contains (\"system.web.services\")) cp.referencedassemblies.add (\"system.web.services\");\tcompilerresults res = comp.compileassemblyfromfile (cp, file);\tif (res.errors.haserrors || res.compiledassembly == null) {",
  "error while compiling generated serializer",
  0
 ],
 [
  "public unsafe static void binarysearch_maxlength_nooverflow() {\tif (sizeof(intptr) == sizeof(long)) {\tvar length = int.maxvalue;\tif (!allocationhelper.tryallocnative(new intptr(length), out intptr memory)) {",
  "span binarysearch test nameof binarysearch maxlength nooverflow skipped could not alloc memory",
  0
 ],
 [
  "private static bool callsecondinterfaceinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturninterface<int>();\tif ((!(bool)(((dynamic)s[1]).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "if (generatedmaps.count == 0) return;\tgenerationresult main = (generationresult) generatedmaps[0];\tstring baseserializername = main.baseserializerclassname;\tstring access_mod = (_config == null || !_config.generateasinternal) ? \"public\" : \"internal\";\twriteline (\"\");\twritelineind (\"{\");\twritelineuni (\"}\");\twriteline (\"\");\twritelineuni (\"}\");\twriteline (\"\");",
  "public override bool candeserialize system xml xmlreader xmlreader",
  0
 ],
 [
  "}\twhile (transactionsinflight.count == concurrenttransactionstransactions);\t}\tlist<transactioninfo> empty = new list<transactioninfo>();\twhile (transactionsinflight.count != 0) {\ttuple<int, int> results = await commitandcount(tms, empty, transactionsinflight);\tsuccess += results.item1;\tfailed += results.item2;\t}\tsw.stop();",
  "success sw elapsedmilliseconds transactions sec",
  0
 ],
 [
  "public void stopbits_int32maxvalue() {",
  "verifying maxvalue stopbits",
  0
 ],
 [
  "checksize<emptyexplicitpackstruct>(1, ref exitcode);\tchecksize<emptyexplicitsize0struct>(1, ref exitcode);\tchecksize<emptyexplicitsize1struct>(1, ref exitcode);\tchecksize<testoffsets>(19, ref exitcode);\tconsole.writeline(\"--\");\tvar t = typeof(testoffsets);\tvar actualoffsets = ( from f in t.getfields() select (name: f.name, offset: marshal.offsetof(t, f.name).toint32()) ).tolist();\tvar expectedoffsets = new [] {\t(name: \"a\", offset: 0), (name: \"b\", offset: 4), (name: \"c\", offset: 5), (name: \"d\", offset: 9), (name: \"e\", offset: 10), (name: \"f\", offset: 14), (name: \"g\", offset: 15) };\tif (!actualoffsets.sequenceequal(expectedoffsets)) {",
  "defaulting to system net http httpclienthandler",
  1
 ],
 [
  "static leaf () {",
  "type to log all to log all overrides and events for all types in system windows forms dll",
  1
 ],
 [
  "private static void rangepartitionercoveragetest(long from, long to, long rangesize) {",
  "rangepartitioncoveragetest long",
  0
 ],
 [
  "public static void main (string[] args) {\tcompositepoker poker;\tpoker = new compositepoker ();\tconsole.writeline (\"--------\");\ttry { poker.databind(); } catch (exception e) { console.writeline (e);}\tpoker = new compositepoker ();",
  "normal writers",
  1
 ],
 [
  "const int expectedfilesize = 13;\tconst string stdoutfilename = \"stdout.txt\";\tnodefile file = batchcli.joboperations.getnodefile(jobid, taskid, stdoutfilename);\tassert.equal(expectedfilesize, file.properties.contentlength);\tassert.equal(\"application/octet-stream\", file.properties.contenttype);\tcloudtask boundtask = boundjob.gettask(taskid);\tstring computenodeid = boundtask.computenodeinformation.affinityid.split(':')[1];\tcomputenode computenode = batchcli.pooloperations.getcomputenode(this.poolfixture.poolid, computenodeid);\tlist<nodefile> files = computenode.listnodefiles(recursive: true).tolist();\tforeach (nodefile nodefile in files) {",
  "found file",
  0
 ],
 [
  "if (node == null) throw new argumentnullexception (\"node\");\tname = node.attributes [\"name\"].value;\tversion = node.attributes  [\"version\"].value;\txmlnode atts = node.firstchild;\tattributes = new xmlattributes ();\tif (atts.name == \"attributes\") {\tattributes.loaddata (atts);\tatts = atts.nextsibling;\t}\tif (atts == null || atts.name != \"namespaces\") {",
  "listing all groups",
  1
 ],
 [
  "public static void staticlocalisnullorempty () {\tstring s = string.format (\"{0}\", 1);",
  "empty",
  0
 ],
 [
  "public void basictest_staticloopbackindex_exceptionifv4notsupported() {\tassert.true(capability.ipv4support());",
  "public fieldtype member name",
  1
 ],
 [
  "public static void deletecertmonitor(certificateoperations certops, itestoutputhelper testoutputhelper, string thumbalgo, string thumb) {\tbool found;",
  "polling for deletion of thumbprint",
  0
 ],
 [
  "public override string tostring () {\tstringwriter sw = new stringwriter ();",
  "todototal",
  0
 ],
 [
  "public void instance_exceptionthrownbyscriptsfactory_errormessageloggedtoconsole() {\tcreaterunner();\tsolutionhaspackageinitializationscripts();\tfakeconsolehost.isrunning = true;\tfakescriptsfactory.exceptiontothrow = new exception(\"error\");\topensolution();",
  "error",
  0
 ],
 [
  "}\twriteline ();\tif (detailed) {\twriteline (\"\\t<assembly_display_name> is the name of the assembly (partial or\\n\" + \"\\tfully qualified) to remove from the global assembly cache. if a \\n\" + \"\\tpartial name is specified all matching assemblies will be uninstalled.\\n\" + \"\\texample: -u mydll,version=1.2.1.0\");\t}\twriteline ();\tif (detailed) {\twriteline (\"\\t<assembly_list_file> is the path to a test file containing a list of\\n\" + \"\\tassembly names on separate lines.\\n\" + \"\\texample -ul assembly_list.txt\\n\" + \"\\t\\tassembly_list.txt contents:\\n\" + \"\\t\\tassembly1,version=1.0.0.0,culture=en,publickeytoken=0123456789abcdef\\n\" + \"\\t\\tassembly2,version=2.0.0.0,culture=en,publickeytoken=0123456789abcdef\");\t}\twriteline ();",
  "uninstalls an assembly using the specifed assemblies full name",
  0
 ],
 [
  "static int main () {",
  "mtp clear out resulthint",
  1
 ],
 [
  "if (s14.f9 != 9+9) {\treturn 9;\t}\tif (s14.f10 != 10+9) {\treturn 10;\t}\tif (s14.f11 != 11+9) {\treturn 11;\t}\tif (s14.f12 != 12+9) {",
  "exception",
  1
 ],
 [
  "if (s15.f5 != 5+9) {\treturn 5;\t}\tif (s15.f6 != 6+9) {\treturn 6;\t}\tif (s15.f7 != 7+9) {\treturn 7;\t}\tif (s15.f8 != 8+9) {",
  "got but expected",
  0
 ],
 [
  "static void writeteststart () {\tcurrent_test_counter++;",
  "public void",
  0
 ],
 [
  "static void dump(astcontext ctx, parsertargetinfo targetinfo, target target) {\tstring targetfile;\tif (!string.isnullorempty (outputfile)) {\ttargetfile = outputfile;\t} else {\ttargetfile = target.triple;\tif (!string.isnullorempty (outputdir)) targetfile = path.combine (outputdir, targetfile);\ttargetfile += \".h\";\t}\tusing (var writer = new streamwriter(targetfile)) {",
  "p project name when exporting a solution name of a project to be",
  1
 ],
 [
  "protected override void onbuttonpressed (buttoneventargs args) {",
  "press",
  0
 ],
 [
  "public void pasteverbatimstringbug2() {\tsourcetext sourcetext;\tvar indent = createengine(\"\\nclass foo\\n{\\n\\tvoid bar ()\\n\\t{\\n\\t\\t$\\n\\t}\\n}\", out sourcetext);\titextpastehandler handler = createtextpasteindentengine(indent, formattingoptionsfactory.createmono());\tvar text = handler.formatplaintext(sourcetext, indent.offset, \"if (true)\\nconsole.writeline (@\\\"hello\\n world!\\\", out sourcetext);\\n\", null);",
  "if true console writeline out sourcetext",
  0
 ],
 [
  "static void main (string[] args) {",
  "policy load failed",
  1
 ],
 [
  "public void testcase4() {\ttest<stringcompareisculturespecificissue>(@\" class test {\tvoid foo () {\t}\t}\", @\" class test {\tvoid foo () {",
  "mac menu cannot display accelerators with modifiers",
  1
 ],
 [
  "public void addextobject2() {\tmyobject obj = new myobject(2, _output);\tm_xsltarg = new xsltargumentlist();\ttry {\tm_xsltarg.addextensionobject(null, obj);\t}\tcatch (system.argumentnullexception) {\treturn;\t}",
  "system argumentnullexception not generated for null namespace system xml tests",
  0
 ],
 [
  "var info = new processstartinfo (\"dos2unix\");\tinfo.createnowindow = true;\tinfo.redirectstandardinput = true;\tinfo.useshellexecute = false;\tvar dos2unix = process.start (info);\tdos2unix.standardinput.writeline (\"\\u0004\");\tdos2unix.standardinput.close ();\tdos2unix.waitforexit ();\tif (dos2unix.exitcode == 0) use_dos2unix = true;\t} catch {",
  "warning not found",
  0
 ],
 [
  "public void methodpreprocessmessage () {\tbool testing_callstack = false;\tmycontrol c = new mycontrol ();\tmessage m = new message ();\tm.hwnd = c.handle;\tm.msg = wm_keydown;\tm.wparam = (intptr)keys.down;\tm.lparam = intptr.zero;",
  "start",
  0
 ],
 [
  "private void checkparticlederivation(xmlschemacomplextype complextype) {\txmlschemacomplextype basetype = complextype.basexmlschematype as xmlschemacomplextype;\tif (basetype != null && basetype != xmlschemacomplextype.anytype && complextype.derivedby == xmlschemaderivationmethod.restriction) {\tif (!isvalidrestriction(complextype.contenttypeparticle, basetype.contenttypeparticle)) {\t#if debug if (complextype.contenttypeparticle != null && basetype.contenttypeparticle != null) {\tstring position = string.empty;\tif (complextype.sourceuri != null) {\tposition = \" in \" + complextype.sourceuri + \"(\" + complextype.linenumber + \", \" + complextype.lineposition + \")\";\t}",
  "noxmllang",
  1
 ],
 [
  "if (type != nvdlresulttype.unwrap) validatestartelement ();\t}\tpublic override void endelement () {\tif (type != nvdlresulttype.unwrap) validateendelement ();\t}\tpublic override void text () {\tif (type != nvdlresulttype.unwrap) validatetext ();\t}\tpublic override void whitespace () {\tif (type != nvdlresulttype.unwrap) validatewhitespace ();",
  "level",
  1
 ],
 [
  "return new resourcesetreference(resourcename, filename);\t}\tlist<string> possiblesourcefiles = new list<string>();\tiprojectcontent pc = resourceresolverservice.getprojectcontent(p);\tif (pc != null) {\ticlass resourceclass = pc.getclass(resourcename, 0);\tif (resourceclass != null) {\tcompoundclass cc = resourceclass.getcompoundclass() as compoundclass;\tforeach (iclass c in (cc == null ? (ilist<iclass>)new iclass[] { resourceclass } : cc.parts)) {\tif (c.compilationunit != null && c.compilationunit.filename != null) {",
  "fonts",
  1
 ],
 [
  "public void throwunserializable () {",
  "throwing unserializable exception in appdomain",
  0
 ],
 [
  "private static bool inconditionaloperator1() {\tint failcount = 0;\tc origin = new c(1);\tdynamic d = origin;\tif ((bool)d ? true : false) {\tfailcount++;",
  "end externalsource",
  1
 ],
 [
  "protected internal override void rendercontents (htmltextwriter writer) {\tif (items.count == 0) return;\trepeatinfo ri = new repeatinfo ();\tri.repeatcolumns = repeatcolumns;\tri.repeatdirection = repeatdirection;\tri.repeatlayout = repeatlayout;\tri.captionalign = captionalign;\tri.caption = caption;\tri.useaccessibleheader = useaccessibleheader;",
  "samstorectx updategroupmembership clearing",
  1
 ],
 [
  "public static int main() {\tif (string.empty.length > 0) {\tnew bringuptest().tostring();\t}\tint counter = 0;\ttry {\ttry {\tthrow new exception(\"my exception\");\t}\tcatch (outofmemoryexception) {",
  "unset name to remove an internal variable",
  1
 ],
 [
  "console.writeline ();\tconsole.writeline ();\treturn;\t}\telse {\tconsole.writeline ();\tsetupcommand cmd = findcommand (parms [0]);\tif (cmd != null) {\tconsole.writeline (\"{0}: {1}\", cmd.commanddesc, cmd.description);\tconsole.writeline ();",
  "instantiating compound field",
  1
 ],
 [
  "protected static string extensioncacheconverter(filterbase filter, string suggestedadproperty) {\tstringbuilder query = new stringbuilder();\tif (filter.value != null) {\textensioncache ec = (extensioncache)filter.value;\tforeach (keyvaluepair<string, extensioncachevalue> kvp in ec.properties) {\ttype type = kvp.value.type == null ? kvp.value.value.gettype() : kvp.value.type;",
  "adstorectx extensioncacheconverter filter type",
  0
 ],
 [
  "public void writeattributes_9(xmlwriterutils utils, string tokentype) {\tstring strxml = \"\";\tswitch (tokentype) {\tcase \"documenttype\": if (isxpathdatamodelreader()) {",
  "does not support documenttype node",
  0
 ],
 [
  "static bool paranoidsave (string filename, string friendlyname, action<streamwriter> write) {\tstring backupfilename = filename + \".previous\";\tstring dir = path.getdirectoryname (filename);\tstring tempfilename = path.combine (dir, \".#\" + path.getfilename (filename));\ttry {\tif (!directory.exists (dir)) {\tdirectory.createdirectory (dir);\t}\t} catch (ioexception ex) {",
  "error creating directory for file",
  0
 ],
 [
  "private static keybundle backuprestorekey(string keyname) {\tvar vaultaddress = inputvalidator.getvaultaddress();\tkeyname = inputvalidator.getkeyname();\tvar backupkeyresult = task.run(() => keyvaultclient.backupkeyasync(vaultaddress, keyname)).configureawait(false).getawaiter().getresult();",
  "verifying beginwrite with a callback specified",
  1
 ],
 [
  "console.writeline (\");\");\tif (c [0] != 'v') console.writeline ($\"\\t*({typetosigtype (c [0])}*)margs->retval = res;\");\tconsole.writeline (\"\\n}\\n\");\t}\tconsole.writeline (\"{\");\tfor (int i = 0; i < cookies.length; ++i) {\tvar c = cookies [i];\tconsole.write (\"\\t\");\tif (i > 0) console.write (\"else \");\t}",
  "ok",
  1
 ],
 [
  "public void readafterclose() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {",
  "verifying read method throws exception after a call to cloes",
  0
 ],
 [
  "checked {\td2 -= d;\texception = true;\t}\t}\tcatch (system.overflowexception) {\texception = false;\t}\tfinally {\tif (exception) rez++;",
  "verifying writetimeout",
  1
 ],
 [
  "static bool callsecondinterfaceindexer() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturndynamicinterface();\tif ( (!(bool)((s + 1)[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "public void testfile",
  1
 ],
 [
  "this.files.add(f);\t}\tthis.sourcecodestorage.designercodefile = newdesignercodefile;\tthis.loadanddisplaydesigner();\t} finally {\tthis.inmasterloadoperation = false;\t}\t} else {\tbool mustreload;\tif (this.loader != null && !this.loader.loading) {",
  "forms designer reloading designer because of loadinternal on resource file",
  0
 ],
 [
  "if (f) {\t_current = _enumerator.current;\treturn true;\t}\telse {\t_currentmode = currentenumeratormode.insertedvaluespending;\t_enumerator = (ienumerator<principal>)_insertedvaluespending.getenumerator();\t}\t}\tif (_currentmode == currentenumeratormode.insertedvaluespending) {",
  "principalcollectionenumerator movenext insvaluespend mode",
  0
 ],
 [
  "if (s5.f2 != 2+9) {\treturn 2;\t}\tif (s5.f3 != 3+9) {\treturn 3;\t}\tif (s5.f4 != 4+9) {\treturn 4;\t}\tif (s5.f5 != 5+9) {",
  "got but expected",
  0
 ],
 [
  "try {\ttestoutput remoteoutput = (testoutput) ad.createinstanceandunwrap( typeof (testoutput).assembly.fullname, \"testoutput\");\tremoteoutput.throwunserializable ();\t} catch (serializationexception) {\t} catch (exception) {\tenvironment.exit (1);\t} finally {\tif (original_domain != appdomain.currentdomain.friendlyname) environment.exit (2);\tappdomain.unload (ad);\t}",
  "all ok",
  0
 ],
 [
  "static int test (int v) {",
  "value",
  0
 ],
 [
  "private void thread_func() {\tfor(int i=51200; i<102400; i++) {\tslot[i]=thread.allocatedataslot();\tthread.setdata(slot[i], i);\t}\tthread.sleep(5000);\tthread.setdata(slot[11111], 42);\tthread.setdata(slot[76801], 42);\tthread.sleep(20000);",
  "subthread done",
  0
 ],
 [
  "private void dumpexpressions (string header, exprdomain<symbolicvalue> state) {\tconsole.writeline (\"--- {0} ---\", header);\tforeach (symbolicvalue index in state.keys) {\tflatdomain<expr<symbolicvalue>> domain = state [index];\tif (domain.isnormal()) console.writeline (\"{0} -> {1}\", index, domain.value);",
  "resource file not found",
  1
 ],
 [
  "type t = asm.gettype (type);\tmaps.add (imp.importtypemapping (t));\tusertypes.add (t);\tif (verbose) console.writeline (\" - \" + t);\t} catch (invalidoperationexception ex) {\t} catch (notimplementedexception ex) {\tif (verbose) {\tconsole.writeline (\"   \" + ex.message);\t}\t} catch (notsupportedexception ex) {",
  "warning",
  0
 ],
 [
  "public static idictionary<string, iresourcefilecontent> findlocalizedresourcefiles(string filenamewithoutextension, string extension) {\tdictionary<string, iresourcefilecontent> list = new dictionary<string, iresourcefilecontent>();",
  "externalprocessdisplaybinding",
  1
 ],
 [
  "public int cfragment() {\txmlreadersettings rs = new xmlreadersettings();\trs.conformancelevel = conformancelevel.fragment;\tobject[] xml = getallpri0conformancetestxmlstrings();\tif (xml.length > s_pri0expectedfragment.length) {",
  "invalid compare attempted",
  0
 ],
 [
  "private static void streamcallback (iasyncresult result) {\tstate state = ((state) result.asyncstate);\tint length = state.stream.endread (result);\tif (length > 0) {\tstate.file.write (state.buffer, 0, length);\tstate.stream.beginread (state.buffer, 0, state.buffer.length, new asynccallback (streamcallback), state);\t} else {\tstate.stream.close ();",
  "end",
  0
 ],
 [
  "else {\tif (!deskatrs[i].name.equals(coreclratrs[i].name)) {\treturn false;\t}\tstring deskprefix, coreclrprefix;\tif (isprefixedattributevalue(deskatrs[i].value, out deskprefix)) {\tif (isprefixedattributevalue(coreclratrs[i].value, out coreclrprefix)) {\txnamespace deskns = baselinexelement.getnamespaceofprefix(deskprefix);\txnamespace coreclrns = actualxelement.getnamespaceofprefix(coreclrprefix);\tif (!deskns.equals(coreclrns)) {",
  "xml namespace of attribute is different expected is but actual is",
  0
 ],
 [
  "static private void help () {",
  "rot skipping duplicate",
  1
 ],
 [
  "public void read_timeout() {\tusing (serialport com1 = tcsupport.initfirstserialport()) using (serialport com2 = tcsupport.initsecondserialport(com1)) {\tchar[] charxmitbuffer = tcsupport.getrandomchars(512, tcsupport.characteroptions.none);\tchar endchar = com1.newline[0];\tchar notendchar = tcsupport.getrandomotherchar(endchar, tcsupport.characteroptions.none);",
  "async callback in domain",
  1
 ],
 [
  "public void readtimeout_0_1byteavailable_readbyte() {\tusing (var com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (var com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\tint byteread;",
  "getgrain realgrainid",
  1
 ],
 [
  "public static ienumerable<templateparameter> createparameters (string condition) {\tstring[] parts = condition.split (new [] {';', ','}, stringsplitoptions.removeemptyentries);\tforeach (string part in parts) {\tvar parameter = new templateparameter (part);\tif (!parameter.isvalid) {",
  "invalid template condition",
  0
 ],
 [
  "string jobid = boundjob.id;\tcloudtask mytask = new cloudtask(taskid, \"cmd /c echo hello world\");\tboundjob.addtask(mytask);\tcloudtask boundtask = batchcli.joboperations.gettask(jobid, taskid);\ttaskstatemonitor statemonitor = batchcli.utilities.createtaskstatemonitor();\tstatemonitor.waitall(new list<cloudtask> { boundtask }, taskstate.completed, timespan.fromminutes(2));\tboundjobschedule.refresh();\tboundjobschedule.refresh();\tboundjob.refresh();\tboundjob.refresh();",
  "refreshing task",
  0
 ],
 [
  "private static void printoutcertificate(certificatebundle certificatebundle) {\tvar expirydatestr = certificatebundle.attributes.expires.hasvalue ? certificatebundle.attributes.expires.tostring() : \"never\";\tvar notbeforestr = certificatebundle.attributes.notbefore.hasvalue ? certificatebundle.attributes.notbefore.tostring() : unixtimejsonconverter.epochdate.tostring();",
  "did not exception for object that could not be executed",
  1
 ],
 [
  "return;\treturn;\t#endif }\tcon.connectionstring = constr;\ttry {\tcon.open();\t}\tcatch(sqlexception se) {\tforeach(sqlerror error in se.errors) {\t}",
  "test function called",
  1
 ],
 [
  "string satdir = path.combine (outputdir, culture);\tstring outputfile = defaultns + \".resources.dll\";\tdirectory.createdirectory (satdir);\tusing (stringwriter sw = new stringwriter ()) {\tstring args = string.format (\"/t:lib {0} \\\"/out:{1}\\\" /culture:{2}\", pair.value, outputfile, culture);\tprocesswrapper pw = null;\ttry {\tprocessstartinfo info = runtime.processservice.createprocessstartinfo ( al, args, satdir, false);\tpw = runtime.processservice.startprocess (info, sw, sw, null);\t} catch (system.componentmodel.win32exception ex) {",
  "symgraph changed due to absence of map in",
  1
 ],
 [
  "ityperesolutionservice resolver = (ityperesolutionservice)context.getservice(typeof(ityperesolutionservice));\tif (resolver != null) {\tmodulepath = resolver.getpathofassembly(type.assembly.getname());\t}\t}\tif (modulepath == null) {\tmodulepath = type.module.fullyqualifiedname;\t}\tstring moduledir = path.getdirectoryname(modulepath);\tstring licensefile = moduledir + \"\\\\\" + type.fullname + \".lic\";",
  "bit detection failed invalid pe magic number",
  1
 ],
 [
  "static private void help () {",
  "ok",
  1
 ],
 [
  "public static void creategenerictestfile(string strfilename) {\tmemorystream ms = new memorystream();\ttextwriter tw = new streamwriter(ms);\ttw.writeline(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"no\\\"?>\");\ttw.writeline(\"<!-- comment1 -->\");\ttw.writeline(\"<?pi1a?>\");\ttw.writeline(\"<?pi1b?>\");\ttw.writeline(\"<?pi1c?>\");",
  "element isdefault any",
  0
 ],
 [
  "public static void main(string[] args) {\tsomeenum someenum = someenum.dog;",
  "adding package dependency to project",
  1
 ],
 [
  "public void basictest_getipinterfacestatistics_success_linux() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfacestatistics stats = nic.getipstatistics();",
  "exception raised",
  1
 ],
 [
  "public bool onclientmousedown (mouseinfo mouseinfo, modifierkeys modifiers, nsidomnode target) {\t#if debug ongeneric (\"onclientmousedown\");",
  "exception in assembly browser sort function",
  1
 ],
 [
  "return isopen ? contentvalidator.any : contentvalidator.textonly;\t}\telse {\tdebug.assert(!isopen);\treturn contentvalidator.empty;\t}\t}\t#if debug if (diagnosticsswitches.xmlschemacontentmodel.enabled) {\tvar bb = new stringbuilder();\t_contentnode.dump(bb, _symbols, _positions);",
  "warning invalid publicincludefile",
  1
 ],
 [
  "public void receivedbytesthreshold_0() {",
  "verifying receivedbytesthreshold",
  0
 ],
 [
  "public static void main () {",
  "hi",
  0
 ],
 [
  "m_xsltarg.addparam(\"myarg5\", szempty, d5);\tm_xsltarg.removeparam(\"myarg5\", szempty);\tretobj = m_xsltarg.getparam(\"myarg5\", szempty);\tif (retobj != null) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg6\", szempty, d6);\tm_xsltarg.removeparam(\"myarg6\", szempty);\tretobj = m_xsltarg.getparam(\"myarg6\", szempty);\tif (retobj != null) {",
  "failed to remove",
  0
 ],
 [
  "missingmdwriter.writeline(\"\");\tvar coderefactorings = typeof(notportedyetattribute).assembly.gettypes() .where(t => !t.fullname.startswith(\"refactoringessentials.samples.\") && t.customattributes.any(a => a.attributetype.fullname == typeof(exportcoderefactoringproviderattribute).fullname)) .orderby(t => t.name);\tvar codeanalyzers = typeof(notportedyetattribute).assembly.gettypes() .where(t => !t.fullname.startswith(\"refactoringessentials.samples.\") && t.customattributes.any(a => a.attributetype.fullname == typeof(diagnosticanalyzerattribute).fullname)) .orderby(t => t.name);\tvar codefixes = typeof(notportedyetattribute).assembly.gettypes() .where(t => !t.fullname.startswith(\"refactoringessentials.samples.\") && t.customattributes.any(a => a.attributetype.fullname == typeof(exportcodefixproviderattribute).fullname) && codefixunrelatedtonranalyzer(t)) .orderby(t => t.name);\tmissingmdwriter.writeline(\"\");\tmissingmdwriter.writeline(\"\");\twritetypelist(basepath, \"coderefactorings.html.template\", \"coderefactorings.csharp.html\", \"{0} code refactorings for c#\", coderefactorings.where(t => iscsharprelatedelement(t)), getrefactoringdescription, missingmdwriter);\tmissingmdwriter.writeline(\"\");\twritetypelist(basepath, \"coderefactorings.html.template\", \"coderefactorings.vb.html\", \"{0} code refactorings for visual basic\", coderefactorings.where(t => isvbrelatedelement(t)), getrefactoringdescription, null);\tmissingmdwriter.writeline(\"\");",
  "c",
  0
 ],
 [
  "public void defaultcolumnnameaddlistchangedtest () {\tstring result = @\"setting table... ---- onlistchanged propertydescriptorchanged,0,0 ---- onlistchanged reset,-1,-1 table was set. ---- onlistchanged propertydescriptoradded,0,0 default named column added. ---- onlistchanged propertydescriptoradded,0,0 non-default named column added. ---- onlistchanged propertydescriptoradded,0,0 another default named column added (column2). ---- onlistchanged propertydescriptoradded,0,0 add a column with the same name as the default columnnames. ---- onlistchanged propertydescriptoradded,0,0 add a column with a null name. ---- onlistchanged propertydescriptoradded,0,0 add a column with an empty name. \";\teventwriter = new stringwriter ();\tdatatable dt = new datatable (\"table\");\tcomplexeventsequence1view dv = new complexeventsequence1view (dt, eventwriter);\tdt.columns.add ();\tdt.columns.add (\"non-defaultnamedcolumn\");",
  "non default named column added",
  0
 ],
 [
  "private static string getlibdir () {\tsystem.reflection.methodinfo libdir = typeof (system.environment).getmethod (\"internalgetgacpath\", system.reflection.bindingflags.static|system.reflection.bindingflags.nonpublic);\tif (libdir == null) {",
  "error mono runtime not detected please use the mono runtime for gacutil exe",
  0
 ],
 [
  "tenthincache = batch.sequencetoken;\t}\t}\tassert.equal(numbatches / 2, messagecount);\tassert.notnull(tenthincache);\tcursor = qcache.getcachecursor(streamguid, tenthincache);\tmessagecount = 0;\twhile (cursor.movenext()) {\tmessagecount++;\t}",
  "hello world",
  1
 ],
 [
  "private void confirmvalidcertificate(string expectedhostname) {\tassert.equal(sslpolicyerrors.none, _validationcallbackhistory.sslpolicyerrors);\tassert.true(_validationcallbackhistory.certificatechain.count > 0);",
  "before remove",
  1
 ],
 [
  "public void m() {\t#line 40 console.writeline(4);\t#line hidden console.writeline();",
  "c a b x cs",
  0
 ],
 [
  "public static int main () {\tfoo (a : -9);\tb b = new b ();\tb [8] = 5;\tif (b.index != 9) return 1;",
  "root",
  1
 ],
 [
  "}\tlist<nodefile> filelistfromcomputenodeoperations = batchcli.pooloperations.listnodefiles(this.poolfixture.poolid, computenodeid, recursive: true).tolist();\tforeach (nodefile f in filelistfromcomputenodeoperations) {\t}\tassert.contains(\"shared\", filelistfromcomputenodeoperations.select(f => f.path));\tlist<nodefile> filelistfromcomputenode = computenode.listnodefiles(recursive: true).tolist();\tforeach (nodefile f in filelistfromcomputenodeoperations) {\t}\tassert.contains(\"shared\", filelistfromcomputenode.select(f => f.path));\tstring filepathtoget = filelistfromcomputenode.first(f => !f.isdirectory.value).path;",
  "getting file",
  0
 ],
 [
  "} else \tif ((args [j] == \"--thread-count\") || (args [j] == \"-tc\")) {\tthreadcount = int32.parse (args [j + 1]);\tj += 2;\t}else {\treturn 1;\t}\t}\tif (tploadgenerator) {\tdynamicloadgenerator (threadcount, timeinmillis);\t} else {",
  "thread count duration test",
  0
 ],
 [
  "assert.areequal (test, uri.tostring (), \"tostring/\" + test);\t}\t}\t[test]\tpublic void unixlocalpath_wtf () {\tstring path = \"file: uri fileuri = new uri( path );\tassert.areequal (\"/tmp/foo/bar\", fileuri.absolutepath, path);\tstring path2 = \"file: fileuri = new uri (path2);\tassert.areequal (\"file: }\tpublic static void print (uri uri) {",
  "query",
  0
 ],
 [
  "return false;\t}\tlock (_resultset) {\tif (_currentmode == currentenumeratormode.none) {\t_resultset.reset();\tif (!_membercollection.cleared && !_membercollection.clearcompleted) {\t_currentmode = currentenumeratormode.resultset;\t_enumerator = null;\t}\telse {",
  "instance created",
  1
 ],
 [
  "if (renderingcompatibility >= versionutil.framework40) {\twriter.write(\"<div class=\\\"\" + hiddenclassname + \"\\\">\");\t}\telse {\twriter.write(\"<div>\");\t}\t}\tclientscript.renderhiddenfields(writer);\trenderviewstatefields(writer);\tif (renderdivaroundhiddeninputs) {",
  "div",
  0
 ],
 [
  "w.writestartdocument();\tw.writestartelement(\"root\");\tw.writeendelement();\tw.writestartattribute(\"attr\", \"\");\t}\tcatch (invalidoperationexception e) {\tcerror.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "foreach (object value in list) {\tconsole.write (value);\tconsole.write (environment.newline);\t}\tint x = 0;\tfor (int i = 0; i < 100; i++) x++;\tconsole.writeline (x);\tstring useless = \"useless string\";\tif (useless.equals (\"other useless\")) {\tuseless = string.empty;",
  "other useless string",
  0
 ],
 [
  "var showhelp    = false;\tvar git = new commandset (\"git\", output: o, error: e) {\t\"usage: git [--version] ... <command> [<args>]\", \"\", \"common options:\", { \"version\", \"show version info\", v => showversion = v != null }, { \"help\", \"show this message and exit\", v => showhelp = v != null }, \"\", \"these are common git commands used in various situations:\", \"\", \"start a working area (see also: git help tutorial)\", new command (\"clone\", \"clone a repository into a new directory\"), new command (\"init\",  \"create an empty git repository or reinitialize an existing one\"), new command (\"thisisaverylongcommandnameinordertoinducewrapping\", \"create an empty git repository or reinitialize an existing one. let's make this really long to cause a line wrap, shall we?\"), };\tvar expectedhelp = new stringwriter ();\texpectedhelp.writeline (\"\");\texpectedhelp.writeline (\"\");\texpectedhelp.writeline (\"\");\tassert.areequal (0, git.run (new [] { \"help\" }));\tassert.areequal (expectedhelp.tostring (), o.tostring ());\tvar expectedhelphelp    = new stringwriter ();",
  "usage git command options",
  0
 ],
 [
  "console.write(\"good hash function: \");\ttimer t = new timer();\thashset<int> good = makerandom(count, new goodintegerequalitycomparer());\tisorteddictionary<int,int> bcd = good.bucketcostdistribution();\t}\t{\tconsole.write(\"bad hash function:  \");\ttimer t = new timer();\thashset<int> bad = makerandom(count, new badintegerequalitycomparer());\tisorteddictionary<int,int> bcd = bad.bucketcostdistribution();",
  "error loading url excpetion below",
  1
 ],
 [
  "public void writeafterfailedopen() {\tusing (serialport com = new serialport(\"bad_port_name\")) {",
  "verifying write method throws exception with a failed call to open",
  0
 ],
 [
  "public static void createconstructortestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<?xml version=\\\"1.0\\\"?>\");",
  "fully open instantiation of typebuilder is the same of the typebuilder",
  1
 ],
 [
  "public static void createwhitespacehandlingtestfile(string strfilename) {\tstream s = new memorystream();\ttextwriter tw = new streamwriter(s);",
  "doctype dt",
  0
 ],
 [
  "application.timeoutinvoke (100, checkmouseoverbutton);\t};\tbtn.mouseexited += (sender, e) => {\tinsidebutton = false;\t};\tbtn.mousemoved += (sender, e) => movedoverbutton = true;\tbtn.buttonpressed += handlebuttonpressed;\tbtn.buttonreleased += handlebuttonreleased;\tbtn.clicked += (sender, e) => {\tresbtn.text = \"button clicked\";",
  "generating objects of type",
  1
 ],
 [
  "retval = false;\tcontinue;\t}\tif (view.offset > size || view.offset < 0) {\tretval = false;\t}\telse if (view.startsentinel != nodes[view.offset]) {\tretval = false;\t}\tif (view.offset + view.size > size || view.offset + view.size < 0) {",
  "bad view hash offset size end index underlying size",
  0
 ],
 [
  "console.writeline (\"        int res = 0;\");\tfor (int i = 0; i < iface; ++i) {\tconsole.writeline (string.format (\"\t\tif ((r = var_{0}.method_{1} (10,5,3,2)) != {1}) {{\", iface, i));\tconsole.writeline (\"    res = 1;\");\tconsole.writeline (\"}\");\t}\tconsole.writeline (\"}\");\t}\tconsole.writeline (\"        int res = 0;\");\tfor (int iface = low; iface <= high; ++iface) console.writeline (string.format (\"        res |= test_{0} ();\", iface));",
  "return res",
  0
 ],
 [
  "public void state_10(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartdocument();\tw.writestartelement(\"root\");\tw.writeendelement();\tw.writecdata(\"invalid\");\t}\tcatch (invalidoperationexception e) {",
  "exception",
  0
 ],
 [
  "public override string tostring () {\tstringwriter sw = new stringwriter ();",
  "filter defects for the specified severity levels",
  1
 ],
 [
  "public static int main () {\tenvironment.exitcode = 2;\tfoo_delegate d = new foo_delegate (function);\tasynccallback ac = new asynccallback (async_callback);\tiasyncresult ar1 = d.begininvoke (ac, \"foo\");\tar1.asyncwaithandle.waitone();\tthread.sleep(1000);\td.endinvoke(ar1);\tthread.sleep(1000);",
  "main returns",
  0
 ],
 [
  "private static bool callsecondclassinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tif ((!(bool)(firstclassreturndynamicclass<int>.staticproperty.instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "try greet help for more information",
  1
 ],
 [
  "private static bool test9() {\tchar a = 'b';\tdynamic b = a;\tb--;\tif (b == 'a') return true;",
  "failed char",
  0
 ],
 [
  "private void connected(object sender, socketasynceventargs e) {\teventwaithandle handle = (eventwaithandle)e.usertoken;",
  "connected socketasynceventargs with manual event error",
  0
 ],
 [
  "public override void help() {\tconsole.writeline();",
  "macros",
  1
 ],
 [
  "for (int i=0; i<100; i++) {\tisequenced<int> inner = new treeset<int>();\tinner.add(i); inner.add(i+1);\touter.add(inner);\t}\tipersistentsorted<int> inner1 = new treeset<int>(), inner2 = new treeset<int>(), inner3 = new treeset<int>();\tinner1.addall<int>(new int[] { 2, 3, 5, 7, 11 });\tinner2.addall(inner1); inner2.add(13);\tinner3.addall(inner1);\touter.add(inner1.snapshot());",
  "in outer",
  0
 ],
 [
  "if ( --level == 0) {\ttrace.writeline( \"############################################################################\" );\tif (messages.count == 0) {\t}\telse {\tforeach ( string s in messages ) {\ttrace.writeline(s);\t}\t}\ttrace.writeline( \"############################################################################\" );",
  "executed tests",
  0
 ],
 [
  "private static void expect(bool condition, string message) {\tif (condition) {\tinterlocked.increment(ref s_passed);\t}\telse {\tinterlocked.increment(ref s_failed);",
  "file remove notification failed",
  1
 ],
 [
  "public static void initialize() {\tclientconfiguration config = clientconfiguration.standardload();\tif (config == null) {",
  "flush",
  1
 ],
 [
  "public void setlevel(int lvl) {\tgoodlength = deflaterconstants.good_length[lvl];\tmax_lazy   = deflaterconstants.max_lazy[lvl];\tnicelength = deflaterconstants.nice_length[lvl];\tmax_chain  = deflaterconstants.max_chain[lvl];\tif (deflaterconstants.compr_func[lvl] != comprfunc) {\tif (deflaterconstants.debugging) {",
  "change from to",
  0
 ],
 [
  "private static bool callsecondinterfaceinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturndynamicinterface();\tif ((!(bool)(s.instanceproperty.instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed conversion result is incorrect",
  1
 ],
 [
  "public void readafterclose() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {",
  "verifying read method throws exception after a call to cloes",
  0
 ],
 [
  "private void generatelinepragmaend(codelinepragma e) {\toutput.writeline();",
  "line hidden",
  0
 ],
 [
  "private static void immediatecancelxml() {",
  "test immediate cancel for xml stream",
  0
 ],
 [
  "public void notreadydriveaspath_throwsdirectorynotfoundexception() {\tvar drive = ioservices.getnotreadydrive();\tif (drive == null) {",
  "outputqueuelength",
  1
 ],
 [
  "private static void removelistenercomponent(eventloginternal component, string complogname) {\tlock (internalsyncobject) {",
  "eventlog removelistenercomponent",
  0
 ],
 [
  "break;\tcase \"\\\\usesimplereader\": setusesimplereader (parms);\tbreak;\tbreak;\t}\t}\tpublic void listproviders() {\tdatatable table = dbproviderfactories.getfactoryclasses();\tfor (int r = 0; r < table.rows.count; r++) {\tconsole.writeline(\"---------------------\");",
  "drive is not ntfs skipping scenario",
  1
 ],
 [
  "svnadmin.waitforexit ();\tif (svnserve != null) {\tinfo = new processstartinfo ();\tinfo.filename = \"svnserve\";\tinfo.arguments = \"-dr \" + remotepath;\tinfo.windowstyle = processwindowstyle.hidden;\tsvnserve.startinfo = info;\tsvnserve.start ();\tusing (var perm = file. createtext (remotepath.combine(\"repo\", \"conf\", \"svnserve.conf\"))) {\tperm.writeline (\"anon-access = write\");",
  "equals",
  1
 ],
 [
  "public void elemnamespace_2(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writeattributestring(\"xmlns\", \"x\", null, \"foo\");\tw.writeattributestring(\"xmlns\", \"x\", null, \"foo\");\tw.writeendelement();\t}\tcatch (xmlexception e) {",
  "exception",
  0
 ],
 [
  "public int testtextreadbinhex_23() {\tif (isroundtrippedreader()) return test_skipped;\tbyte[] buffer = new byte[5000];\tstring strxml = \"<b>\" + new string('a', 5000);\treloadsource(new stringreader(strxml));\tdatareader.positiononelement(\"b\");\tdatareader.read();\tif (checkcanreadbinarycontent()) return test_pass;\ttry {\tdatareader.readcontentasbinhex(buffer, 0, 5000);",
  "accepted incomplete element",
  0
 ],
 [
  ";\tstring[] stringvalues = new string[]\t{\tstring.empty, \"abc\", null }\t;\tforeach (bool a1 in boolvalues) {\tforeach (string a3 in stringvalues) {\tdynamic d1 = a1;\tdynamic d3 = a3;\tif ((d1 ? \"abcd\" : d3) != (a1 ? \"abcd\" : a3)) {",
  "error message is wrong",
  1
 ],
 [
  "public void bytestoread_readchar() {",
  "verifying bytestoread with readchar",
  0
 ],
 [
  "public void notreadydriveaspath_returnsfalse() {\tvar drive = ioservices.getnotreadydrive();\tif (drive == null) {",
  "did not throw exception",
  1
 ],
 [
  "foreach (cloudtask curtask in boundjob.listtasks()) {\tif (curtask.state != microsoft.azure.batch.common.taskstate.completed) {\trepeat = true;\tthis.testoutputhelper.writeline(\"manual wait task id: \" + curtask.id + \", state = \" + curtask.state);\tforeach (computenode curcomputenode in boundpool.listcomputenodes()) {\t}\t}\t}\t}\t}",
  "adding longer running tasks",
  0
 ],
 [
  "public xwt.drawing.image geticon () {\tusing (var stream = gettype ().assembly.getmanifestresourcestream (gettype ().fullname + \".bmp\")) {\tif (stream != null) {\ttry {\treturn new gdk.pixbuf (stream).toxwtimage ();\t} catch (exception e) {",
  "can t create pixbuf from resource bmp",
  0
 ],
 [
  "public int run() {\tif (silohost == null) {\tsiloargs.printusage();\treturn 1;\t}\ttry {\tsilohost.initializeorleanssilo();\tif (silohost.startorleanssilo()) {",
  "invalid directive location",
  1
 ],
 [
  "private static int main(string[] args) {\tif (args.length < 4) {",
  "usage assemblyname typename methodname exceptionfile additionalargs",
  0
 ],
 [
  "logcontext(\"main-task \" + task.currentid);\tint n = 0;\taction action = () => {\tlogcontext(\"workitem-task \" + task.currentid);\tfor (int i = 0; i < 10; i++) {\tint id = -1;\ttask.factory.startnew(() => {\tid = task.currentid.hasvalue ? (int)task.currentid : -1;\tlogcontext(\"sub-task \" + id + \" n=\" + n);\tint k = n;",
  "sub task sleeping",
  0
 ],
 [
  "array.sort (methods, loadedmethod.comparebyjitclicks);\tarray.reverse (methods);\tulong totaljitclicks = 0;\tforeach (loadedmethod m in methods) {\ttotaljitclicks += m.jitclicks;\t}\tif (totaljitclicks > 0) {\tprintseparator (writer);\tforeach (loadedmethod m in methods) {\tif (m.jitclicks > 0) {",
  "ms",
  0
 ],
 [
  "public async task asyncserialexecutortests_serialsubmit() {\tasyncserialexecutor executor = new asyncserialexecutor();\trandom = new saferandom();\tlist<task> tasks = new list<task>();\tfor (int i = 0; i < 10; i++) {\tint capture = i;",
  "submitting task",
  0
 ],
 [
  "private void setpasswordsecurityifneccessary(principal p) {\tif (p.getchangestatusforproperty(propertynames.pwdinfocannotchangepassword)) {",
  "test failed at call result",
  1
 ],
 [
  "console.writeline (\"--------\");\ttry { poker.databind(); } catch (exception e) { console.writeline (e);}\tpoker = new compositepoker ();\tconsole.writeline (\"--------\");\ttry { poker.databind(); } catch (exception e) { console.writeline (e);}\tpoker = new compositepoker ();\tconsole.writeline (\"--------\");\ttry { controlcollection c = poker.controls; } catch (exception e) { console.writeline (e);}\tpoker = new compositepoker ();\ticompositecontroldesigneraccessor accessor = (icompositecontroldesigneraccessor)poker;",
  "recreatechildcontrols",
  0
 ],
 [
  "var wizardviewmodel = new reportwizardcontext();\tvar reportwizard = new icsharpcode.reporting.addin.reportwizard.dialog.reportwizard(wizardviewmodel);\treportwizard.showdialog();\tif (reportwizard.dialogresult.hasvalue && reportwizard.dialogresult.value){\tvar rg = new reportgenerator();\trg.generate(wizardviewmodel);\tstring xml = createformsheetfrommodel.toxml(rg.reportmodel).tostring();\topenedfile.setdata(encoding.utf8.getbytes(xml));\tif (!openedfile.isuntitled) openedfile.savetodisk();\t} else {",
  "finally in domain",
  1
 ],
 [
  "public void var1() {\ttry {\tnew xslcompiledtransform().load((ixpathnavigable)null);\t}\tcatch (argumentnullexception) {\treturn;\t}\tcatch (exception e) {\t_output.writeline(e.tostring());",
  "did not throw argumentnullexception",
  0
 ],
 [
  "public void endwriteafterserialstreamclose() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {",
  "using system",
  1
 ],
 [
  "private static void setapplicabilityscope (irule rule, string applicabilityscope) {\tswitch (applicabilityscope) {\tcase \"visible\": rule.applicabilityscope = applicabilityscope.visible;\tbreak;\tcase \"nonvisible\": rule.applicabilityscope = applicabilityscope.nonvisible;\tbreak;\tcase \"all\": rule.applicabilityscope = applicabilityscope.all;\tbreak;",
  "running many concurrent test instances",
  1
 ],
 [
  "public static void writetotals (streamwriter sw, int failed, int passed, int run) {\tsw.writeline (@\"        <tr class='tabletotal'>\");\tsw.writeline (@\"            <td style='width: 17px'></td>\");",
  "td td",
  0
 ],
 [
  "public override void added (xelement target, bool wasparentadded) {\tstring name = target.attribute (\"name\").value;\tvar addeddescription  = $\"{state.namespace}.{name}: added type\";\tstate.logdebugmessage ($\"possible -n value: {addeddescription}\");\tif (state.ignorenew.any (re => re.ismatch (addeddescription))) return;\toutput.writeline (\"<pre class='added' data-is-non-breaking>\");\tstate.indent = 0;\taddedinner (target);",
  "div end type",
  0
 ],
 [
  "public void writetimeout_int32minvalue() {",
  "added value retrieved value",
  1
 ],
 [
  "task wrapper = new task(() => {\ttask1 = task<int>.factory.startnew(() => {\tassert.equal(scheduler, taskscheduler.current);\tint num1 = 1;\twhile (!pause1.task.result) {\tnum1 = random.next();\t}\treturn num1;\t});\ttask2 = task<int>.factory.startnew(() => {",
  "test",
  1
 ],
 [
  "_typedonor = null;\treturn (left & ~xslflags.typefilter) | xslflags.nodeset;\t}\tpublic virtual xslflags predicate(xslflags nodeset, xslflags predicate, bool isreversestep) {\t_typedonor = null;\treturn (nodeset & ~xslflags.typefilter) | xslflags.nodeset | (predicate & xslflags.sideeffects);\t}\tpublic virtual xslflags variable(string prefix, string name) {\t_typedonor = resolvevariable(prefix, name);\tif (_typedonor == null) {",
  "is not provided using default value",
  1
 ],
 [
  "using (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writeprocessinginstruction(string.empty, \"test\");\t}\tcatch (argumentexception e) {\tcerror.compare(w.writestate, (utils.writertype == writertype.charcheckingwriter) ? writestate.element : writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "verifying true discardnull with readchar after open",
  1
 ],
 [
  "console.readline();\tconsole.clear();\tconsole.writeline( \"from p in db.products where p.productid == 7 select p;\");\tvar q4 = from p in db.products where p.productid == 7 select p;\tforeach (var v in q4) objectdumper.write(v);\tconsole.readline();\tconsole.clear();\tconsole.writeline( \"from c in db.customers from o in c.orders where c.city == \\\"london\\\" select new { c, o };\");\tvar q5 = from c in db.customers from o in c.orders where c.city == \"london\" select new { c, o };\tforeach (var v in q4) objectdumper.write(v);",
  "retrieved",
  1
 ],
 [
  "public void show () {\tvisible = true;\t}\tpublic void hide () {\tvisible = false;\t}\tinternal void click () {\ttry {\tdoclick ();\t} catch (exception ex) {",
  "get",
  1
 ],
 [
  "protected string runcontextaction (codeactionprovider action, string input, int actionindex = 0, bool expecterrors = false) {\tvar context = testrefactoringcontext.create (input, expecterrors);\tcontext.formattingoptions = formattingoptions;\tbool isvalid = action.getactions (context).any ();",
  "invalid node is",
  0
 ],
 [
  "public void testjsonsamples<tsample, tresource>(itestoutputhelper logger) {\tint failurecount = 0;\tint samplecount = 0;\tienumerable<jsonsampleinfo> samples = jsonsamplecommon.getjsonsamplesfromtype<tsample>();\tforeach (jsonsampleinfo sampleinfo in samples) {\tstring samplename = sampleinfo.name;\tstring serializedjson = string.empty;\tsamplecount++;",
  "downloading wsdl documents",
  1
 ],
 [
  "sorted [i++] = (string) entry.key;\t}\tarray.sort (sorted);\tstring showname = objname;\tfor (int j = 0; j < sorted.length; j++) {\tstring name = sorted [j];\tobject value = values [name];\tstring message = prefix + showname + \".\" + name;\tstring tab = new string ('\\t', tabs);\tif (value == null) {",
  "error while removing cache",
  1
 ],
 [
  "for (int j = 0; j < useless.length; j++) {\tif (useless[j] == 'u') console.writeline (\"i have detected an u char\");\t}\ttry {\tforeach (string environmentvariable in environment.getenvironmentvariables ().keys) console.writeline (environmentvariable);\t}\tcatch (system.security.securityexception exception) {\tconsole.writeline (exception.message);\tconsole.writeline (exception);\t}",
  "i will add more useless code",
  0
 ],
 [
  "public void getparam16() {\tm_xsltarg = new xsltargumentlist();\tint i = 0;\tm_xsltarg.addparam(\"myarg1\", szempty, \"test16\");\tfor (i = 0; i < 200; i++) {\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);\tif (retobj.tostring() != \"test16\") {\tassert.true(false);\t}\t}",
  "verifying position property throws exception after a call to open",
  1
 ],
 [
  "public void writenode_xmlreader24() {\txdocument doc = new xdocument();\txmlreader xr = createreaderignorews(path.combine(filepathutil.gettestdatapath(), path.combine(\"xmlwriter2\", \"xmlreader.xml\")));\twhile (xr.read()) {\tif (xr.localname == \"cdatanode\") {\txr.read();\tbreak;\t}\t}\tif (xr.nodetype != xmlnodetype.cdata) {",
  "reader positioned on",
  0
 ],
 [
  "private static void testblittabletype() {",
  "testing marshalling blittable types",
  0
 ],
 [
  "public void basictest_getipv4interfacestatistics_success_osx() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipv4interfacestatistics stats = nic.getipv4statistics();\tassert.throws<platformnotsupportedexception>(() => stats.outgoingpacketsdiscarded);",
  "outgoingpacketswitherrors",
  0
 ],
 [
  "bool? b4 = b1^b2, b5 = b1&b2, b6 = b1|b2;\tconsole.writeline(\"[{0}] [{1}] [{2}]\", b4, b5, b6);\tbool? b7 = b1^b3, b8 = b1&b3, b9 = b1|b3;\tconsole.writeline(\"[{0}] [{1}] [{2}]\", b7, b8, b9);\tconsole.writeline(b1 != null ? \"null is true\" : \"null is false\");\tconsole.writeline(b1 == null ? \"!null is true\" : \"!null is false\");\tconsole.writeline();\tbool?[] bvals = new bool?[] { null, false, true };\tforeach (bool? x in bvals) foreach (bool? y in bvals) console.writeline(\"{0,-6} {1,-6} {2,-6} {3,-6} {4,-6}\", x, y, x&y, x|y, x^y);\tconsole.writeline();",
  "x x",
  0
 ],
 [
  "protected override void savetoprimary() {",
  "wpfpreview savetoprimary is not implemented",
  0
 ],
 [
  "public void taskstartedhandler (object sender, taskstartedeventargs args) {\tif (isverbositygreaterorequal (loggerverbosity.detailed)) {\tsetcolor (eventcolor);",
  "task",
  0
 ],
 [
  "datatable table;\ttable = reader.getschematable();\tfor(int c = 0; c < reader.fieldcount; c++) {\tdatarow row = table.rows[c];\tstring strcolumnname = row[\"columnname\"].tostring();\tstring strbasecolumnname = row[\"basecolumnname\"].tostring();\tstring strcolumnsize = row[\"columnsize\"].tostring();\tstring strnumericscale = row[\"numericscale\"].tostring();\tstring strnumericprecision = row[\"numericprecision\"].tostring();\tstring strdatatype = row[\"datatype\"].tostring();",
  "show the authenticode certificate for the assembly",
  1
 ],
 [
  "if (s4.f1 != 1+9) {\treturn 1;\t}\tif (s4.f2 != 2+9) {\treturn 2;\t}\tif (s4.f3 != 3+9) {\treturn 3;\t}\tif (s4.f4 != 4+9) {",
  "got but expected",
  0
 ],
 [
  "static staticconstructor5 () {\tdriver.mre1.set ();\tdriver.mre2.waitone ();\ttry {\tthrow new exception ();\t} catch (exception) {",
  "can t convert element of type",
  1
 ],
 [
  "static private void help () {\tconsole.writeline ();",
  "importkey import privatekey to keypair store",
  0
 ],
 [
  "private void processcall ([nonnull] instruction insn, bool warn, bool indirect, [nonnull] nullderefframe frame) {\timethodsignature csig = (imethodsignature)insn.operand;\tif(indirect) frame.popstack(); /* function pointer */ foreach(parameterdefinition param in csig.parameters) {\tnullity n = frame.popstack();\tif(warn && nnacollector.hasnonnullattribute(method, param)) {",
  "null deref at",
  0
 ],
 [
  "list<nodefile> filesbytaskrecursiveomitted = batchcli.joboperations.listnodefiles( jobid, taskid).tolist();\tlist<nodefile> filesbytaskrecursivefalse = batchcli.joboperations.listnodefiles( jobid, taskid, recursive: false).tolist();\tassertfilelistsmatch(filesbytaskrecursiveomitted, filesbytaskrecursivefalse);\t}\tlist<nodefile> filelistfromcomputenodeoperations = batchcli.pooloperations.listnodefiles(this.poolfixture.poolid, computenodeid, recursive: true).tolist();\tforeach (nodefile f in filelistfromcomputenodeoperations) {\t}\tassert.contains(\"shared\", filelistfromcomputenodeoperations.select(f => f.path));\tlist<nodefile> filelistfromcomputenode = computenode.listnodefiles(recursive: true).tolist();\tforeach (nodefile f in filelistfromcomputenodeoperations) {",
  "found file",
  0
 ],
 [
  "jobconstraints jobcon = jobspec.constraints;\tif (null == jobcon) {\t}\telse {\ttestoutputhelper.writeline(\"\");\t}\tjobmanagertask ijm = jobspec.jobmanagertask;\tif (null == ijm) {\t}\telse {",
  "jobmanagertask",
  0
 ],
 [
  "static private void extendedhelp () {",
  "password create a new pkcs file with the specified password",
  0
 ],
 [
  "public void stop () {\tstopping = true;\ttry {\tif (communicationmanager != null) {\tcommunicationmanager.stopserver ();\tcommunicationmanager = null;\t}\t} catch (exception ex) {",
  "failed w exception",
  1
 ],
 [
  "static private void help () {",
  "indivisual commercial signature type",
  0
 ],
 [
  "sn4.f3 = 3;\tsn4.nested2.f4 = 4;\tsn4 = mono_return_float4_nested(sn4, 906);\tif (sn4.nested1.f1 != 1+906) {\treturn 1;\t}\tif (sn4.f2 != 2+906) {\treturn 2;\t}\tif (sn4.f3 != 3+906) {",
  "nested got but expected",
  0
 ],
 [
  "public point (int a, int b) {",
  "fatal error target is invalid specify exe or library",
  1
 ],
 [
  "private test(int i) {\tthis.x = i;",
  "test",
  0
 ],
 [
  "}\tcatch (exception ex) {\tftest_fail = true;\tthrow (ex);\t}\tfinally {\tif (!ftest_fail || (xrtemp.readstate != readstate.closed)) ftest_fail = false;\txrtemp.dispose();\t}\tif (ftest_fail) {",
  "error formatting xml file",
  1
 ],
 [
  "static void run() {\tprocess proc = new process();\tbool ret;\tproc.startinfo.filename=\"wibble\";\tproc.startinfo.arguments=\"arg1    arg2\\targ3 \\\"arg4a arg4b\\\"\";\tproc.startinfo.useshellexecute=false;\tret=proc.start();\tproc.waitforexit();",
  "process ended at",
  0
 ],
 [
  "public void printbanner () {",
  "for the incredible foo bar program",
  0
 ],
 [
  "static private void help () {\tconsole.writeline ();",
  "h elp display this help message",
  0
 ],
 [
  "public int getextnobject2(object args) {\tobject retobj;\tfor (int i = 1; i <= 100; i++) {\tretobj = xsltarg1.getextensionobject(((object[])args)[1].tostring());",
  "getextensionobject thread iteration value returned",
  0
 ],
 [
  "public void loadurl5(readertype readertype) {\ttry {\tloadxsl(\"    \", xslinputtype.uri, readertype, new xmlurlresolver());\t}\tcatch (system.argumentexception) {\treturn;\t}",
  "exception not generated for non existent file parameter name",
  0
 ],
 [
  "private static void main(string[] args) {",
  "hello world",
  0
 ],
 [
  "}\tpublic static int mainmethod() {\ttest t = new test();\tdynamic d0 = (mydel)method;\tt.foo += d0;\tif (t.flag != 1) {\treturn 1;\t}\tt.foo -= d0;\tif (t.flag != 2) {",
  "event remove doesn t get called",
  0
 ],
 [
  "protected static string extensioncacheconverter(filterbase filter, string suggestedadproperty) {\tstringbuilder query = new stringbuilder();\tif (filter.value != null) {\textensioncache ec = (extensioncache)filter.value;\tforeach (keyvaluepair<string, extensioncachevalue> kvp in ec.properties) {\ttype type = kvp.value.type == null ? kvp.value.value.gettype() : kvp.value.type;\tif (kvp.value.value is icollection) {",
  "adstorectx extensioncacheconverter encountered collection",
  0
 ],
 [
  "static private void help () {",
  "show strongname informations about the assembly",
  1
 ],
 [
  "private static bool test3() {\tdecimal[] decimalvalues = new decimal[]\t{\t1m, 10.10m, 100.01m, 0m }\t;\tforeach (decimal a1 in decimalvalues) {\tforeach (decimal a2 in decimalvalues) {\tdynamic d1 = a1;\tdynamic d2 = a2;\tif ((d1 * d2) != (a1 * a2)) {",
  "failed decimal decimal",
  0
 ],
 [
  "private bool processreceive(socketasynceventargs e) {\t_log.writeline( this.gethashcode() + \" processreceive(bytestransferred={0}, socketerror={1}, _numconnectedsockets={2})\", e.bytestransferred, e.socketerror, _numconnectedsockets);\tasyncusertoken token = (asyncusertoken)e.usertoken;\tif (e.bytestransferred > 0 && e.socketerror == socketerror.success) {\tinterlocked.add(ref _totalbytesread, e.bytestransferred);",
  "threadtrace saved",
  1
 ],
 [
  "public void runheapandexpressionanalyses () {\tif (this.heap_analysis != null) return;\tthis.heap_analysis = new heapanalysis.heapanalysis (stacklayer);\tstacklayer.createforward (this.heap_analysis) (this.heap_analysis.initialvalue ());\tvaluelayer = codelayerfactory.create ( this.heap_analysis.getdecoder (stacklayer.ildecoder), stacklayer.metadataprovider, stacklayer.contractprovider, source => source.tostring (), dest => dest.tostring ());\tvar expressionanalysis = new expressionanalysisfacade<symbolicvalue, ivaluecontextprovider<symbolicvalue>, iimmutablemap<symbolicvalue, sequence<symbolicvalue>>> (valuelayer, this.heap_analysis.isunreachable);\tvaluelayer.createforward (expressionanalysis.createexpressionanalysis ()) (expressionanalysis.initialvalue (symbolicvalue.getuniquekey));\tif (debugoptions.debug) {",
  "value based cfg",
  0
 ],
 [
  "static ienumerable getit (int [] args) {\tforeach (int arg in args) {\ta a = delegate {",
  "arg",
  0
 ],
 [
  "public bool verifynode(xmlnodetype eexpnodetype, string strexpname, string strexpvalue) {\tbool bpassed = true;\tif (nodetype != eexpnodetype) {",
  "build the project the default target",
  1
 ],
 [
  "if (s16.f9 != 9+9) {\treturn 9;\t}\tif (s16.f10 != 10+9) {\treturn 10;\t}\tif (s16.f11 != 11+9) {\treturn 11;\t}\tif (s16.f12 != 12+9) {",
  "got but expected",
  0
 ],
 [
  "protected override void generateconditionstatement(codeconditionstatement e) {\toutput.write(\"if \");\tgenerateexpression(e.condition);",
  "then",
  0
 ],
 [
  "public static void main () {\tvar all = cultureinfo.getcultures (culturetypes.specificcultures | culturetypes.neutralcultures).orderby (l => l.lcid);\tconsole.outputencoding = encoding.utf8;\tvar writer = console.out;\tforeach (var c in all) {\tif (c.lcid == cultureinfo.invariantculture.lcid) continue;\tvar df = c.datetimeformat;\tdump (writer, df.abbreviateddaynames, \"abbreviateddaynames\");\tdump (writer, df.abbreviatedmonthgenitivenames, \"abbreviatedmonthgenitivenames\");\tdump (writer, df.abbreviatedmonthnames, \"abbreviatedmonthnames\");",
  "calendarweekrule",
  0
 ],
 [
  "public static void parametertest (oracleconnection connection) {",
  "setting nls date format",
  0
 ],
 [
  "private static bool test2() {\tbool[] boolvalues = new bool[]\t{\ttrue, false }\t;\tforeach (bool a1 in boolvalues) {\tdynamic d1 = a1;\tif ((false || d1) != (false || a1)) {",
  "got but expected",
  1
 ],
 [
  "static void main (string[] args) {",
  "hello world",
  0
 ],
 [
  "public void navigate(uri url) {\ttry {\twebbrowser.navigate(url);\t} catch (exception ex) {",
  "task started",
  1
 ],
 [
  "static void refcursortest2(oracleconnection con) {",
  "did not throw error for duplicate attrs",
  1
 ],
 [
  "} catch (notsupportedexception e) {\t}\ttry {\tlong lng = reader.getint64 (f);\tconsole.writeline(\"           getint64: \" + lng.tostring ());\tint n = reader.getint32 (f);\tconsole.writeline(\"           getint32: \" + n.tostring ());\tfloat flt = reader.getfloat (f);\tdouble dbl = reader.getdouble (f);\t} catch (overflowexception oe1) {",
  "overflow exception for numbers to big or too small",
  0
 ],
 [
  "private static bool callsecondinterfaceinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tif ((!(bool)(firstclassreturndynamicinterface.staticmethod().instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public void legacynestedtxscope() {\tstring txid1 = null;\tstring txid2 = null;\tstring txid3 = null;\tstring txid4 = null;\tstring txid5 = null;\tstring txid6 = null;",
  "hello world",
  1
 ],
 [
  "public static void main(string[] args) {",
  "hello world",
  0
 ],
 [
  "public static void readblob (oracleconnection connection) {\tif (file.exists(outfilename) == true) {\treturn;\t}\toraclecommand rcmd = connection.createcommand ();\trcmd.commandtext = \"select blob_column from blobtest\";\toracledatareader reader2 = rcmd.executereader ();\toraclelob lob2 = reader2.getoraclelob (0);",
  "length",
  0
 ],
 [
  "try {\treader.getint16 (f);\t} catch (notsupportedexception e) {\t}\ttry {\tlong lng = reader.getint64 (f);\tconsole.writeline(\"           getint64: \" + lng.tostring ());\tint n = reader.getint32 (f);\tconsole.writeline(\"           getint32: \" + n.tostring ());\tfloat flt = reader.getfloat (f);",
  "exception caught",
  1
 ],
 [
  "public void writewithoutopen() {\tusing (serialport com = new serialport()) {",
  "failed long long",
  1
 ],
 [
  "public void removeparam7() {\tm_xsltarg = new xsltargumentlist();\tretobj = m_xsltarg.removeparam(\"myarg1\", null);\tif (retobj != null) {",
  "did not return null for null uri namespace",
  0
 ],
 [
  "if (s11.f1 != 1+9) {\treturn 1;\t}\tif (s11.f2 != 2+9) {\treturn 2;\t}\tif (s11.f3 != 3+9) {\treturn 3;\t}\tif (s11.f4 != 4+9) {",
  "got but expected",
  0
 ],
 [
  "public void dtrenable_true_false_afteropen() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "verifying seting dtrenable to true then false after open",
  0
 ],
 [
  "const string taskid = \"bug1770926_updatetask_task1\";\tstring jobid = constants.defaultconvenienceprefix + testutilities.getmyname() + \"-\" + testname;\ttaskconstraints defaultconstraints = new taskconstraints(timespan.maxvalue, timespan.maxvalue, 0);\ttry {\tcloudjob jobschedule = batchcli.joboperations.createjob(jobid, new poolinformation());\tjobschedule.poolinformation = new poolinformation() {\tpoolid = \"poolwhodoesntexist\" };\tjobschedule.commit();\tcloudjob boundjob = batchcli.joboperations.getjob(jobid);\tcloudtask mytask = new cloudtask(taskid, \"cmd /c echo hello world\");",
  "test failed at call result",
  1
 ],
 [
  "public void processrequest(httpcontext context) {\ttracemethod method = tracing.on ? new tracemethod(this, \"processrequest\") : null;\tif (tracing.on) tracing.enter(\"ihttphandler.processrequest\", method, tracing.details(context.request));\tnew permissionset(permissionstate.unrestricted).demand();\tstring physicalpath = context.request.physicalpath;",
  "exception",
  1
 ],
 [
  "public void addexportedmethods(ienumerable<ecmamethod> methods) => _methods.addrange(methods.where(m => m.module != _context.systemmodule));\tpublic void emitexportedmethods() {\tfilestream filestream = new filestream(_exportsfile, filemode.create);\tusing (streamwriter streamwriter = new streamwriter(filestream)) {\tif (_context.target.iswindows) {",
  "handle validate",
  1
 ],
 [
  "public override bool layout (object container, layouteventargs args) {\tiarrangedcontainer panel = (iarrangedcontainer)container;\ttablelayoutsettings settings = getlayoutsettings (panel);",
  "beginning layout on panel control count col row count x",
  0
 ],
 [
  "private static bool callsecondinterfaceindexer() {\tint failcount = 0;\tverify.firstcalled = false;\tdynamic d = new firstclassreturninterface();\tif ((!(((secondinterface)d[1])[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "ok",
  1
 ],
 [
  "} catch {\t}\tif (directory.getfiles (link_dir).length == 0) {\ttry {\tdirectory.delete (link_dir);\t} catch {\t}\t}\t}\tuninstalled++;",
  "client successfully connect to silo host",
  1
 ],
 [
  "if (pa [5] != 'j') return 199;\tif ((pb - pa) != 1) return 200;\tpb++;\tif (pb == pa) return 201;\tif (pb < pa) return 202;\tif (pa > pb) return 203;\tif (pa >= pb) return 204;\tif (pb <= pa) return 205;\tpb = pb - 2;\tif (pb != pa){",
  "vv",
  0
 ],
 [
  "public void ipinfotest_accessallipv6properties_noerrors() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfaceproperties ipproperties = nic.getipproperties();\tif (!nic.supports(networkinterfacecomponent.ipv6)) {\tvar nie = assert.throws<networkinformationexception>(() => ipproperties.getipv6properties());\tassert.equal(socketerror.protocolnotsupported, (socketerror)nie.errorcode);\tcontinue;\t}\tipv6interfaceproperties ipv6properties = ipproperties.getipv6properties();\tif (ipv6properties == null) {",
  "is null",
  0
 ],
 [
  "public void os10(object param0, object param1) {\tinit(param0.tostring(), param1.tostring());\t_xsl.load(_xslfile);\txmlwritersettings os = _xsl.outputsettings;\tassert.equal(os.omitxmldeclaration, true);\tassert.equal(os.indent, true);",
  "outputmethod",
  0
 ],
 [
  "public static void print(xmlmembermapping mm) {",
  "elementname",
  0
 ],
 [
  "s_ifooint = \"mystruct3.ifoo<int>.imethod1<system.int32>(5,6)\";\ttestwithstruct(new mystruct3(), new mystruct3(), new mystruct3());\tconsole.writeline(\"====================\");\t}\t{\tstring res = ((iface<string>)new anotherderivedclass<string>()).ifacegvmethod1<string>(\"string1\", \"string2\");\tres = ((ibar<int>)new barimplementor()).ibargvmethod<string>((i) => \"barimplementor:\" + i.tostring());\tyahoo<int> y = new yahooderived();\twritelinewithverification(\"yahooderived:456\", y.yahoogvm<string>((i) => \"yahooderived:\" + i.tostring()));\ticovariant<object> cov = new covariant<string>();",
  "exception not generated for invalid input sources",
  1
 ],
 [
  "static void main (string[] args) {\tif (args.length != 2) {",
  "welcome to the jungle",
  1
 ],
 [
  "protected virtual string loadresource (string resourcename) {\tstring assemblyname = resourceassembly;\tassembly asm;\tif (string.isnullorempty (assemblyname)) asm = this.gettype ().assembly;\telse {\ttry {\tasm = assembly.load (assemblyname);\t} catch (exception ex) {",
  "usage cil strip path to exe",
  1
 ],
 [
  "public void writechars_5(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writechars(null, 0, 0);\t}\tcatch (argumentexception e) {",
  "terminating due to exception",
  1
 ],
 [
  "static int main () {\ttest t1 = new test ();\tobjref myref = remotingservices.marshal (t1, \"/test\");",
  "objref",
  0
 ],
 [
  "static void foo_static (long l) {",
  "verifying readtimeout with readbyte",
  1
 ],
 [
  "public void loadurl2(readertype readertype) {\ttry {\tloadxsl(szempty, xslinputtype.uri, readertype, new xmlurlresolver());\t}\tcatch (system.argumentexception) {\treturn;\t}",
  "no converter for",
  1
 ],
 [
  "string rowkey = i.tostring(cultureinfo.invariantculture);\tunittestazuretabledata dataobject = new unittestazuretabledata();\tdataobject.partitionkey = partitionkey;\tdataobject.rowkey = rowkey;\tdataobject.stringdata = rowkey;\tvar promise = manager.upserttableentryasync(dataobject);\tpromises.add(promise);\tif ((i % batchsize) == 0 && i > 0) {\ttask.whenall(promises).waitwiththrow(azuretabledefaultpolicies.tablecreationtimeout);\tpromises.clear();",
  "has written rows in at rps",
  0
 ],
 [
  "tms += mdiff;\t}\tran++;\tif (result != expected) {\tfailed++;\t}\t}\tif (!quiet) {\tif (do_timings) {\t}",
  "regression tests ran failed in",
  0
 ],
 [
  "static void showhelp (optionset p) {",
  "usage cil stringreplacer options assembly",
  0
 ],
 [
  "assertnode (xr, 2, xmlnodetype.element, \"\", \"resolve\", peerns, string.empty, \"#16\");\tassert.istrue (xr.movetoattribute (\"xmlns\"), \"#16-2\");\tassertnode (xr, 3, xmlnodetype.attribute, \"\", \"xmlns\", xmlnsns, peerns, \"#17\");\tassert.istrue (xr.read (), \"#17-2\");\tassertnode (xr, 3, xmlnodetype.element, \"\", \"clientid\", peerns, string.empty, \"#18\");\twhile (!xr.eof) {\txr.read ();\tconsole.writeline (\"{0}: {1}:{2} {3} {4}\", xr.nodetype, xr.prefix, xr.localname, xr.namespaceuri, xr.value);\tfor (int i = 0; i < xr.attributecount; i++) {\txr.movetoattribute (i);",
  "attribute",
  0
 ],
 [
  "public static int main(string[] args) {\tint result = pass;\tif (!testpreinitprimitivedata()) {\tresult = fail;\t}\tif (!testpreinitintdata()) {\tresult = fail;\t}\tif (!testpreinittypedata()) {",
  "can t convert file to any format",
  1
 ],
 [
  "private static void printhelp() {\tconsole.writeline();\tconsole.writeline();\tconsole.writeline();\tconsole.writeline();\tconsole.writeline();\tconsole.writeline();\tconsole.writeline();",
  "override name value override the value of a test property",
  0
 ],
 [
  "static void showhelp (optionset p) {",
  "generates c file with string constants from resource file",
  0
 ],
 [
  "size newsize = base.onlayoutsize(e);\tgraphics graphics = e.graphics;\tactivitydesignertheme designertheme = e.designertheme;\tambienttheme ambienttheme = e.ambienttheme;\trefreshrootdesignerlayout();\tthis.rootdesignerlayout.onlayoutsize(graphics, designertheme, ambienttheme, newsize);\t_minimumsize = this.rootdesignerlayout.minimumsize;\treturn this.rootdesignerlayout.size;\t#if debug }\tcatch (exception exception) {",
  "got but expected",
  1
 ],
 [
  "public projectresourceinfo getprojectresource(codepropertyreferenceexpression propref) {\tcodetypereferenceexpression typeref = propref.targetobject as codetypereferenceexpression;\tif (typeref == null) {",
  "got but expected",
  1
 ],
 [
  "private void setdefaultpagesizeforcontext() {\t_pagesize = 0;\tif (_qbefilter != null) {",
  "exception raised",
  1
 ],
 [
  "public async task getasync_allowautoredirecttrue_redirectfromhttpstohttp_statuscoderedirect() {\thttpclienthandler handler = createhttpclienthandler();\thandler.allowautoredirect = true;\tusing (var client = new httpclient(handler)) {\turi uri = configuration.http.redirecturifordestinationuri( secure: true, statuscode: 302, destinationuri: configuration.http.remoteechoserver, hops: 1);",
  "uri",
  0
 ],
 [
  "public bool checkvalidationresult (servicepoint sp, x509certificate certificate, webrequest request, int error) {\tif (error != 0) {\tconsole.writeline (certificate.tostring (true));",
  "valid until",
  0
 ],
 [
  "myilgenerator.emit(opcodes.ret);\ttype mytype = typeof(myattribute);\tconstructorinfo myconstructorinfo = mytype.getconstructor(new type[]{typeof(object)});\ttry {\tcustomattributebuilder methodcabuilder = new customattributebuilder (myconstructorinfo, new object [] { typecode.double } );\tmyconstructor.setcustomattribute(methodcabuilder);\t}\tcatch(argumentnullexception ex) {\t}\tcatch(exception ex) {",
  "null",
  1
 ],
 [
  "string code = {\tvoid bar () {\tfor (int i = 0; i < foo.bar) }\t}\";\tvar unit = syntaxtree.parse(code);\tbool passed = @\"class foo {\tvoid bar () {\tfor (int i = 0; i < foo.bar;) }\t}\" == unit.tostring().trim ();\tif (!passed) {",
  "was",
  0
 ],
 [
  "private void onvalidationevent(object sender, validationeventargs e) {\txmlschemavalidationexception exception = e.exception as xmlschemavalidationexception;\tif (exception == null || exception.sourceobject == null) {\tcerror.compare(exception != null, \"exception == null\");\tcerror.compare(exception.sourceobject != null, \"sourceobject == null\");\treturn;\t}\tif (!platformdetection.isnetnative) {\tcerror.compare(exception.sourceobject.gettype().tostring(), \"ms.internal.xml.cache.xpathdocumentnavigator\", \"sourceobject.gettype\");\t}",
  "exc",
  0
 ],
 [
  "cloudjob boundjob = batchcli.joboperations.getjob(boundjobschedule.executioninformation.recentjob.id);\tstring jobid = boundjob.id;\tcloudtask mytask = new cloudtask(taskid, \"cmd /c echo hello world\");\tboundjob.addtask(mytask);\tcloudtask boundtask = batchcli.joboperations.gettask(jobid, taskid);\ttaskstatemonitor statemonitor = batchcli.utilities.createtaskstatemonitor();\tstatemonitor.waitall(new list<cloudtask> { boundtask }, taskstate.completed, timespan.fromminutes(2));\tboundjobschedule.refresh();\tboundjobschedule.refresh();\tboundjob.refresh();",
  "underlyingsize array length",
  1
 ],
 [
  "static private void help () {",
  "actual o p",
  1
 ],
 [
  "public static void stop(string desc) {\tstopwatch watch = stopwatches.pop();\twatch.stop();",
  "desc took ms",
  0
 ],
 [
  "public void complexeventsequence1 () {\tstring result = @\"setting table... ---- onlistchanged propertydescriptorchanged,0,0 ----- updateindex : true ---- onlistchanged reset,-1,-1 table was set. ---- onlistchanged propertydescriptoradded,0,0 col1 added. ---- onlistchanged propertydescriptoradded,0,0 col2 added. ---- onlistchanged propertydescriptoradded,0,0 col3 added. uniq added. ----- updateindex : true ---- onlistchanged reset,-1,-1 sort changed. ---- onlistchanged propertydescriptordeleted,0,0 col3 removed. ----- updateindex : true ---- onlistchanged reset,-1,-1 rowfilter changed. ----- updateindex : true ---- onlistchanged reset,-1,-1 rowstatefilter changed. ----- updateindex : true ---- onlistchanged reset,-1,-1 rowstatefilter changed. ---- onlistchanged itemadded,0,-1 added row to rows. ---- onlistchanged itemadded,0,-1 added row to rows. ---- onlistchanged itemadded,0,-1 added row to rows. ---- onlistchanged itemadded,3,-1 addnew() invoked. 4 ---- onlistchanged itemdeleted,3,-1 ---- onlistchanged itemmoved,-2147483648,3 endedit() invoked. 3 ---- onlistchanged itemmoved,0,-2147483648 value changed to appear. 4 ---- onlistchanged itemmoved,3,0 value moved. 4 ---- onlistchanged itemmoved,1,3 value moved again. 4 ---- onlistchanged propertydescriptorchanged,0,0 ----- updateindex : true ---- onlistchanged reset,-1,-1 table changed. \";\teventwriter = new stringwriter ();\tdatatable dt = new datatable (\"table\");\tcomplexeventsequence1view dv = new complexeventsequence1view (dt, eventwriter);\tdt.columns.add (\"col1\");\tdt.columns.add (\"col2\");\tdt.columns.add (\"col3\");\tdt.constraints.add (new uniqueconstraint (dt.columns [0]));",
  "uniq added",
  0
 ],
 [
  "public async task servernoencryption_clientnoencryption_connectwithnoencryption() {\tusing (var servernoencryption = new dummytcpserver( new ipendpoint(ipaddress.loopback, 0), encryptionpolicy.noencryption)) using (var client = new tcpclient()) {\tawait client.connectasync(servernoencryption.remoteendpoint.address, servernoencryption.remoteendpoint.port);\tusing (var sslstream = new sslstream(client.getstream(), false, allowanyservercertificate, null, encryptionpolicy.noencryption)) {\tif (supportsnullencryption) {\tawait sslstream.authenticateasclientasync(\"localhost\", null, sslprotocolsupport.defaultsslprotocols, false);",
  "client authenticated to server with encryption cipher bit strength",
  0
 ],
 [
  "if (!double.isnan((double)retobj)) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg4\", szempty, d4);\tretobj = m_xsltarg.getparam(\"myarg4\", szempty);\tif (!d4.equals((double)retobj)) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg5\", szempty, d5);\tretobj = m_xsltarg.getparam(\"myarg5\", szempty);",
  "added value retrieved value",
  0
 ],
 [
  "public void testjsonsamples<tsample, tresource>(itestoutputhelper logger) {\tint failurecount = 0;\tint samplecount = 0;\tienumerable<jsonsampleinfo> samples = jsonsamplecommon.getjsonsamplesfromtype<tsample>();\tforeach (jsonsampleinfo sampleinfo in samples) {\tstring samplename = sampleinfo.name;\tstring serializedjson = string.empty;\tsamplecount++;",
  "testing json sample",
  0
 ],
 [
  "static void outparmtest6 (oracleconnection con) {\toraclecommand cmd2 = con.createcommand();\tcmd2.commandtext = \"create or replace function sf_testoutparm6(parm1 in timestamp, parm2 out timestamp, parm3 in out timestamp) return timestamp \" + \"is \" + \"   returnvalue timestamp := to_timestamp('2001-07-01 15:32:52', 'yyyy-mm-dd hh24:mi:ss');\" + \"begin \" + \"   if parm1 is null then \" + \"      parm2 := to_timestamp('1900-12-31', 'yyyy-mm-dd'); \" + \"      parm3 := to_timestamp('1900-12-31', 'yyyy-mm-dd'); \" + \"   elsif parm1 = to_timestamp('1979-11-25','yyyy-mm-dd') then \" + \"      parm2 := null;\" + \"      parm3 := null;\" + \"      returnvalue := null;\"+ \"   elsif parm3 is null then \" + \"      parm2 := to_timestamp('2008-08-08', 'yyyy-mm-dd');\" + \"      parm3 := to_timestamp('2000-01-01', 'yyyy-mm-dd');\" + \"   else \" + \"      -- add 3 days to date\\n \" + \"\t   parm2 := parm1 + 3; \" + \"      parm3 := parm3 + 5; \" + \"   end if; \" + \"   return returnvalue;\" + \"end;\";\tcmd2.executenonquery();",
  "deploymentgroup ignoring deprecated command line argument",
  1
 ],
 [
  "public void testlocalconstant () {\ttest<introduceconstantaction> (@\"class testclass {\tpublic void hello () {",
  "hello from bug helper",
  1
 ],
 [
  "public void dousage () {",
  "usage svcutil options metadatapath metadataurl assemblypath",
  0
 ],
 [
  "public static int main() {\tobject x = null;\tint? y = x as int?;  /* causes cs0077 */ console.writeline(\"y: '{0}'\", y);",
  "loading style sheet as xmltextreader",
  1
 ],
 [
  "public static int main () {\tint count = 0;\ttry {\tfoo ();\t}\tcatch (stackoverflowexception) {",
  "other useless string",
  1
 ],
 [
  "adapter.fill(dt);\tdataview dv = new dataview(dt);\tforeach (datarowview myrow in dv) {\tforeach (datacolumn mycolumn in myrow.row.table.columns) {\tconsole.writeline(\" \" + myrow[mycolumn.columnname]);\t}\t}*/ try {\tdbcmd.commandtext = \"select ndesc invalid syntax from mono_test where nid=2\";\tdbcmd.executenonquery();\t} catch (exception e) {",
  "tests failed",
  1
 ],
 [
  "w.writestartelement(\"root\");\tw.writestring(invxml);\tw.dispose();\tdoc.save(new memorystream());\t}\tcatch (argumentexception) {\tcheckclosedstate(w.writestate);\treturn;\t}\t}",
  "digest username password domain digest authentication",
  1
 ],
 [
  "private static bool test8() {\tulong a = 2;\tdynamic b = a;\t--b;\tif (b == 1) return true;",
  "finally",
  1
 ],
 [
  "cmd.transaction.commit();\toraclecommand select = con.createcommand ();\tselect.commandtext = \"select blob_column from blobtest2\";\toracledatareader reader = select.executereader ();\telse {\toraclelob lob = reader.getoraclelob (0);\tif (lob == oraclelob.null) console.writeline(\"lob is oraclelob.null\");\telse {\tbyte[] blob = (byte[]) lob.value;\tstring result = gethexstring(blob);",
  "other useless string",
  1
 ],
 [
  "public static async task<bool> addpackagedependency (this dotnetproject project, ipackagedependency dependency) {\tif (project == null) throw new argumentnullexception (nameof (project));",
  "if true console writeline out sourcetext",
  1
 ],
 [
  "static void help (string details) {\tswitch (details) {",
  "m y n use a machine y key container or user key container n",
  0
 ],
 [
  "public override assembly loadassemblyfile (string filename, bool isimplicitreference) {\tbool? has_extension = null;\tforeach (var path in paths) {\tvar file = path.combine (path, filename);",
  "probing assembly location",
  0
 ],
 [
  "private static bool callsecondinterfaceinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tif ((!(bool)(((dynamic)firstclassreturninterface.staticmethod()).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "subjectnames",
  1
 ],
 [
  "public w jump () {",
  "you should provide a http url without http return",
  1
 ],
 [
  "try {\tdroptable (cnc);\t}\tcatch (pgsqlexception e) {\t}\ttry {\tcreatetable (cnc);\tinsertdata (cnc);\tupdatedata (cnc);\tinsertdata (cnc);",
  "ok",
  0
 ],
 [
  "public void databits_int32minvalue() {",
  "extern alias",
  1
 ],
 [
  "private void registerorremovehelpdocument(object sender, commonregistereventargs e) {\tif (e.register) {",
  "seeking element",
  1
 ],
 [
  "public void parity_space_beforeopen() {",
  "verifying space before open",
  0
 ],
 [
  "_busy = bufferbusydisposing;\tdisposedc();\t_busy = bufferbusypainting;\t_compatdc = unsafenativemethods.createcompatibledc(new handleref(null, src));\tif (width > _buffersize.width || height > _buffersize.height) {\tint optwidth = math.max(width, _buffersize.width);\tint optheight = math.max(height, _buffersize.height);\t_busy = bufferbusydisposing;\tdisposebitmap();\t_busy = bufferbusypainting;",
  "adding package dependency to project",
  1
 ],
 [
  "public void printtree (streamwriter msw) {\tfor (int i = 0; i < faxisarray.count; ++i) {\tforwardaxis axis = (forwardaxis)faxisarray[i];\tmsw.writeline(\"<tree isdss=\\\"{0}\\\" isattribute=\\\"{1}\\\">\", axis.isdss, axis.isattribute);\tdoublelinkaxis printaxis = axis.topnode;\twhile ( printaxis != null ) {",
  "urn urn",
  0
 ],
 [
  "private static keybundle importkey(out string keyname) {\tvar vaultaddress = inputvalidator.getvaultaddress();\tkeyname = inputvalidator.getkeyname();\tvar ishsm = inputvalidator.getkeytype() == jsonwebkeytype.rsahsm;\tvar keybundle = inputvalidator.getimportkeybundle();\tvar name = keyname;\tvar importedkey = task.run(() => keyvaultclient.importkeyasync(vaultaddress, name, keybundle, ishsm)).configureawait(false).getawaiter().getresult();",
  "nonunicastpacketssent",
  1
 ],
 [
  "throw (ex);\t}\tfinally {\tif (trtemp != null) trtemp.dispose();\t}\tbreak;\tcase readertype.xmlnodereader: xmldocument doctemp = new xmldocument();\tdoctemp.load(_strxslfile);\txmlnodereader nrtemp = new xmlnodereader(doctemp);\ttry {",
  "loading style sheet as xmlnodereader",
  0
 ],
 [
  "public async task servernoencryption_clientallownoencryption_connectwithnoencryption() {\tusing (var servernoencryption = new dummytcpserver( new ipendpoint(ipaddress.loopback, 0), encryptionpolicy.noencryption)) using (var client = new tcpclient()) {\tawait client.connectasync(servernoencryption.remoteendpoint.address, servernoencryption.remoteendpoint.port);\tusing (var sslstream = new sslstream(client.getstream(), false, allowanyservercertificate, null, encryptionpolicy.allownoencryption)) {\tawait sslstream.authenticateasclientasync(\"localhost\", null, sslprotocolsupport.defaultsslprotocols, false);",
  "client authenticated to server with encryption cipher bit strength",
  0
 ],
 [
  "public abstract void whitespace ();\tpublic abstract void validatestartelement ();\tpublic abstract void validateendelement ();\tpublic abstract void validatetext ();\tpublic abstract void validatewhitespace ();\tpublic abstract void endsection ();\t}\tinternal class nvdlresultinterp : nvdlinterpretation {\tnvdlresulttype type;\tpublic nvdlresultinterp (nvdldispatcher dispatcher, simplemode createdmode, simpleresultaction resultaction, nvdlinterpretation parent) : base (dispatcher, createdmode, resultaction, parent) {",
  "new resultaction",
  0
 ],
 [
  "protected override void generateentrypointmethod(codeentrypointmethod e, codetypedeclaration c) {\tif (e.customattributes.count > 0) {\toutputattributes(e.customattributes, false);\t}\tindent++;\tgeneratevbstatements(e.statements);\tindent--;",
  "assert areequal mtp tostring true false",
  1
 ],
 [
  "static private void help () {",
  "appear to have accidentally closed the reader",
  1
 ],
 [
  "generatevbstatements(e.truestatements);\tindent--;\tcodestatementcollection falsestatemetns = e.falsestatements;\tif (falsestatemetns.count > 0) {\toutput.write(\"else\");\toutput.writeline();\tindent++;\tgeneratevbstatements(e.falsestatements);\tindent--;\t}",
  "level",
  1
 ],
 [
  "public void readafterclose() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {",
  "verifying read method throws exception after a call to cloes",
  0
 ],
 [
  "static int main () {\tz z = new z ();\tif (global != 1){",
  "biplanes",
  1
 ],
 [
  "private static opcodebitmask conditionsbitmask () {\topcodebitmask mask = new opcodebitmask ();\tmask.set (code.brtrue);\tmask.set (code.brtrue_s);\tmask.set (code.brfalse);\tmask.set (code.brfalse_s);",
  "conditionsbitmask",
  0
 ],
 [
  "extra = p.parse(args);\t}\tcatch(optionexception e) {\treturn 1;\t}\tif (!nologo) {\t}\tif (help) {\tconsole.writeline();\tconsole.writeline();",
  "options",
  0
 ],
 [
  "private void conditioninequalitybad (object value) {\tif ((value as useisoperatortest) != null) {",
  "bad",
  0
 ],
 [
  "if (asm != null) aot_dedup_assembly = new uri(asm.codebase).localpath;\tsources.add (rel_path);\taot_compile = true;\tstatic_link = true;\tbreak;\tcase \"--aot-mode\": if (i+1 == top) {\treturn 1;\t}\taot_mode = args [++i];\tif (aot_mode != \"full\" && aot_mode != \"llvmonly\") {",
  "verifying databits after open",
  1
 ],
 [
  "public static void creategenerictestfile(string strfilename) {\tmemorystream ms = new memorystream();\ttextwriter tw = new streamwriter(ms);\ttw.writeline(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"no\\\"?>\");\ttw.writeline(\"<!-- comment1 -->\");\ttw.writeline(\"<?pi1a?>\");\ttw.writeline(\"<?pi1b?>\");\ttw.writeline(\"<?pi1c?>\");",
  "attlist multispaces att idrefs implied",
  0
 ],
 [
  "for(c = 0; c < rdr.fieldcount; c++) {\tdatarow dr = dt.rows[c];\tmetadatavalue = \"    col \" + c + \": \" + dr[\"columnname\"];\tif(rdr.isdbnull(c) == true) datavalue = \" is null\";\telse datavalue = \": \" + rdr.getvalue(c);\toutput = metadatavalue + datavalue;\tconsole.writeline(output);\t}\tnrows++;\t}",
  "total rows",
  0
 ],
 [
  "private static void staticcompletioncallback(object context, bool wassignaled) {\tloglisteninginfo info = (loglisteninginfo) context;\tif (info == null) return;\teventloginternal[] interestedcomponents;\tlock (internalsyncobject) {\tinterestedcomponents = (eventloginternal[])info.listeningcomponents.toarray(typeof(eventloginternal));\t}",
  "fault",
  1
 ],
 [
  "public async task<int> run (string[] arguments) {\tif (arguments.length == 0 || arguments [0] == \"--help\") {\tconsole.writeline (\"\");\tconsole.writeline (\"\");",
  "closeasync starting",
  1
 ],
 [
  "private static bool parseargumentvalue (string value) {\tif ((value.length == 1)) {\tswitch (value [0]) {\tcase 't': return true;\tcase 'f': return false;",
  "test failed at call result",
  1
 ],
 [
  "itemprefix = \"<li>\";\titemsuffix = \"</li>\";\tif (!device.rendersbreaksafterhtmllists) {\tlistsuffix += \"<br>\";\t}\tbreak;\tdefault: if (device.tables) {\tlistsuffix = \"</table>\";\tstyle.wrapping = wrapping.notset;\twriter.enterlayout(style);",
  "hello",
  1
 ],
 [
  "public static void main(string[] args) {\tarraylist<int> list = new arraylist<int>(), copy1, copy2;\tlist.addall(new int[] { 2, 3, 5, 7, 11, 13, 17, 19 });\tcopy1 = (arraylist<int>)list.clone();\tcopy2 = (arraylist<int>)list.clone();\tconst int n = 7;\tforeach (int x in randomwith(list, n)) console.write(\"{0} \", x);",
  "result changed due to fewer unmodified locations since entry",
  1
 ],
 [
  "if (s13.f10 != 10+9) {\treturn 10;\t}\tif (s13.f11 != 11+9) {\treturn 11;\t}\tif (s13.f12 != 12+9) {\treturn 12;\t}\tif (s13.f13 != 13+9) {",
  "exports",
  1
 ],
 [
  "public async task defaultheaders_setcredentials_clearedonredirect(int statuscode) {\thttpclienthandler handler = createhttpclienthandler();\tusing (var client = new httpclient(handler)) {\tstring credentialstring = _credential.username + \":\" + _credential.password;\tclient.defaultrequestheaders.authorization = new authenticationheadervalue(\"basic\", credentialstring);\turi uri = configuration.http.redirecturifordestinationuri( secure: false, statuscode: statuscode, destinationuri: configuration.http.remoteechoserver, hops: 1);",
  "re setting include",
  1
 ],
 [
  "public static void removeautosavefile (string filename) {\tif (!autosaveenabled) return;\tif (autosaveexists (filename)) {\tstring autosavefilename = getautosavefilename (filename);\ttry {\tfile.delete (autosavefilename);\t} catch (exception e) {",
  "threadabortexception finally",
  1
 ],
 [
  "public static int main (string[] args) {\tsbyte1 s1;\ts1.f1 = 1;\ts1 = mono_return_sbyte1(s1, 9);\tif (s1.f1 != 1+9) {",
  "got but expected",
  0
 ],
 [
  "public async task refreshwithcontent (string projectcontent) {\ttry {\tbeginoperation ();\tawait sendrefreshwithcontent (projectcontent).configureawait (false);\t} catch (exception ex) {",
  "assembly references threadmodelattribute",
  1
 ],
 [
  "m_xsltarg.addparam(\"myarg5\", szempty, bt);\tm_xsltarg.removeparam(\"myarg5\", szempty);\tretobj = m_xsltarg.getparam(\"myarg5\", szempty);\tif (retobj != null) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg2\", szempty, (int16)i);\tm_xsltarg.removeparam(\"myarg2\", szempty);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (retobj != null) {",
  "thread running",
  1
 ],
 [
  "private static bool test12() {\tdecimal a = 2.10m;\tdynamic b = a;\t--b;\tif (b == 1.10m) return true;",
  "hello",
  1
 ],
 [
  "public static int main(string[] args) {\tint pl = (int) environment.osversion.platform;\tif ((pl != 4) && (pl != 6) && (pl != 128)) {\treturn 0;\t}\ttry {\tvar name = \"bug-17537-helper.exe\";",
  "encountered a callback invoking it",
  1
 ],
 [
  "var ws = getworkspace (args.solution);\tvar projectinfo = await ws.loadproject (project, cancellationtoken.none, args.replaceditem as monodevelop.projects.project);\tif (args.reloading) {\tws.onprojectreloaded (projectinfo);\t}\telse {\tws.onprojectadded (projectinfo);\t}\t}\t} catch (exception ex) {",
  "onsolutionitemadded failed",
  0
 ],
 [
  "public void validationcallback(object sender, validationeventargs args) {\tswitch (args.severity) {\tbwarningcallback = true;\twarningcount++;\tbreak;\tberrorcallback = true;\terrorcount++;\tbreak;\t}\tif (args.exception.innerexception != null) {",
  "derived",
  1
 ],
 [
  "protected override void generatenamespaceend (codenamespace ns) {\tstring name = ns.name;\tif (name != null && name != string.empty) {\t--indent;",
  "message is",
  1
 ],
 [
  "public void charentity_5(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writecharentity('\\ud812');\t}\tcatch (argumentexception e) {",
  "output writeline maxstack",
  1
 ],
 [
  "protected override object getservice(type servicetype) {\tobject service = base.getservice(servicetype);\tif (service == null && serviceprovider != null) {\tservice = serviceprovider.getservice(servicetype);\t}\t#if idecontainer_log_service_requests if (service == null) {\t} else {",
  "idecontainer get service is",
  0
 ],
 [
  "public static void reset () {\ttry {\tvar credentialservice = httphandlerresourcev3.credentialservice as credentialservice;\tif (credentialservice != null) credentialservice.reset ();\t} catch (exception ex) {",
  "failed to reset packagemanagementcredentialservice",
  0
 ],
 [
  "public void testaddbracestoifwithcommentinblock() {\ttest<addbracescoderefactoringprovider>(@\"class testclass {\tvoid test() {\t}\t}\", @\"class testclass {\tvoid test() {\tif (true) {",
  "hello",
  0
 ],
 [
  "public static void main(string[] args) {\tvar foo = new foo();\tsystem.console.writeline(foo.bar());\tvar goo = new goo();\tvar foo2 = new foo2();",
  "hello",
  0
 ],
 [
  "static void dosqltest (idbconnection cnc) {\tidatareader reader;\tobject odatavalue;\ttry {\tdroptable (cnc);\t}\tcatch (sqlexception e) {",
  "error don t worry about this one",
  0
 ],
 [
  "sw.writeline (@\"        <tr id='el{0}' class='errorlist' style='display: none'>\", assembly);\tsw.writeline (@\"            <td colspan='4'>\");\tsw.writeline (@\"                <table cellpadding='2' cellspacing='0' width='100%'>\");\tint test_num = 0;\tforeach (failedtest ft in failed_tests.values) {\tsw.writeline (\"                    <tr onclick=\\\"toggle('as{0}ed{1}')\\\" onmouseover='highlight(this)' onmouseout='unhighlight(this)'>\", assembly, test_num);\tsw.writeline (@\"                        <td style='width: 17px'><img src='media/bullet.png' /></td>\");\tsw.writeline (@\"                    <tr id='as{0}ed{1}' class='errordetail' style='display: none'>\", assembly, test_num);\ttest_num++;\t}",
  "td",
  0
 ],
 [
  "if (language == null || language == \"\") throw new invalidoperationexception (gettextcatalog.getstring (\"language not defined in codedom based template.\"));\tcodedomprovider provider = getcodedomprovider (language);\tif (tempsubstitutedcontent == null) throw new exception (gettextcatalog.getstring (\"expected modifytags to be called before createcontent\"));\tcodecompileunit ccu;\tusing (stringreader sr = new stringreader (tempsubstitutedcontent)) {\ttry {\tccu = parserprovider.parse (sr);\t} catch (notimplementedexception) {\tthrow new invalidoperationexception (gettextcatalog.getstring (\"invalid code translation template: the codedomprovider of the source language '{0}' has not implemented the parse method.\", language));\t} catch (exception ex) {",
  "resourcetoolkit bclnrefactoryresourceresolver indexer expression start typed resolveresult",
  1
 ],
 [
  "public static void main () {\tvar all = cultureinfo.getcultures (culturetypes.specificcultures | culturetypes.neutralcultures).orderby (l => l.lcid);\tconsole.outputencoding = encoding.utf8;\tvar writer = console.out;\tforeach (var c in all) {\tif (c.lcid == cultureinfo.invariantculture.lcid) continue;",
  "displayname",
  0
 ],
 [
  "public static int main(string[] args) {\tif (args.length == 0 || args [0] == \"--help\" || args [0] == \"help\") {\tconsole.writeline ();",
  "the path can be absolute or relative to the registry path",
  0
 ],
 [
  "public void testdisable() {\tanalyze<stringcomparetoisculturespecificanalyzer>(@\" public class test {\tvoid foo (string b) {",
  "csharpdiagnosticids stringcomparetoisculturespecificanalyzerid foo compareto b",
  0
 ],
 [
  "public static bool flushfilebuffers (intptr hfile) {",
  "flushfilebuffers called",
  0
 ],
 [
  "int peheaderstart = r.readint32();\tf.position = peheaderstart;\tif (r.readint32() != 0x00004550) {\treturn false;\t}\tint optionalheaderstart = peheaderstart + 4 + 20;\tf.position = optionalheaderstart;\tswitch (r.readint16()) {\tcase 0x10b: break;\treturn true;",
  "bit detection failed invalid pe magic number",
  0
 ],
 [
  "private void verifywritebuffersizebeforeopen(int newwritebuffersize) {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {",
  "bar test foo is tp",
  1
 ],
 [
  "public static void main (string [] args) {\tif (args.length == 2) {\tstring [] tmp = new string [4];\ttmp [0] = args [0] + \"-utf8.txt\";\ttmp [1] = \"65001\";\ttmp [2] = args [1];\ttmp [3] = args [0] + \"-\" + args [1] + \".txt\";\targs = tmp;\t}\tif (args.length < 4) {",
  "error loading template id in addin null null",
  1
 ],
 [
  "sb.append (\".\");\t}\tsb.append (customevent.identifier.tostring ());\t} else if (e is enumdeclarationsyntax) {\tvar enumdecl = (enumdeclarationsyntax)e;\tsb.append (enumdecl.identifier.tostring ());\t} else if (e is enummemberdeclarationsyntax) {\tvar enummemberdecl = (enummemberdeclarationsyntax)e;\tsb.append (enummemberdecl.identifier.tostring ());\t} /*else if (e is memberdeclarationsyntax) {",
  "missingtotal",
  1
 ],
 [
  "sln.writeline (\"\\t\\tdebug|{0} = debug|{0}\", profile, profile);\tsln.writeline (\"\\t\\trelease|{0} = release|{0}\", profile, profile);\t}\tsln.writeline (\"\\tglobalsection(projectconfigurationplatforms) = postsolution\");\twriteprojectconfigurationplatforms (sln, jay_vcxproj_guid, \"win32\");\tforeach (var proj in libraries) {\twriteprojectconfigurationplatforms (sln, proj.projectguid, \"net_4_x\");\t}\tsln.writeline (\"\\tglobalsection(solutionproperties) = presolution\");\tsln.writeline (\"\\t\\thidesolutionnode = false\");",
  "public override system collections hashtable writemethods",
  1
 ],
 [
  "public async task<int> run (string[] arguments) {\tforeach (string s in arguments) readargument (s);\tif (help) {",
  "t target target name of the target build or clean",
  0
 ],
 [
  "public void indent () {\ttrace.indentlevel = 0;\ttrace.indentsize = 4;\tstring value = \"list of errors:\" + environment.newline + \"    error 1: file not found\" + environment.newline + \"    error 2: directory not found\" + environment.newline + \"end of list of errors\" + environment.newline;\ttrace.indent ();\tassert.areequal (1, trace.indentlevel);",
  "item inserted at index",
  1
 ],
 [
  "private static bool callsecondclassoperator() {\tint failcount = 0;\tverify.firstcalled = false;\tdynamic d = new firstclassreturnclass<int>();\tif ((!(((d + 1)) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public static void blobtest (oracleconnection connection) {\toracletransaction transaction = connection.begintransaction ();\ttry {\toraclecommand cmd2 = connection.createcommand ();\tcmd2.transaction = transaction;\tcmd2.commandtext = \"drop table blobtest\";\tcmd2.executenonquery ();\t}\tcatch (oracleexception) {\t}",
  "longdatepattern",
  1
 ],
 [
  "}\treturn defaultcertificatevalidationhandler(certificate, certificateerrors);\t}\tpublic bool defaultcertificatevalidationhandler( syscert.x509certificate certificate, int[]                   certificateerrors) {\tbool retflag=false;\tif (certificateerrors != null && certificateerrors.length > 0) {\tif( certificateerrors.length==1 && certificateerrors[0] == -2146762481) {\tretflag = true;\t}\telse {",
  "res mainwindow xmlvalidationmessages validationsuccess",
  1
 ],
 [
  "console.readline();\tconsole.clear();\tconsole.writeline( \"from c in db.customers from o in c.orders where c.city == \\\"london\\\" select new { c, o };\");\tvar q5 = from c in db.customers from o in c.orders where c.city == \"london\" select new { c, o };\tforeach (var v in q4) objectdumper.write(v);\tconsole.readline();\tconsole.clear();\tconsole.writeline( \"from o in db.orders where o.customer.city == \\\"london\\\" select new { c = o.customer, o };\");\tvar q6 = from o in db.orders where o.customer.city == \"london\" select new { c = o.customer, o };\tforeach (var v in q4) objectdumper.write(v);",
  "press enter to continue",
  0
 ],
 [
  "col++;\t}\tif (i == currentparameter) markup.append (\"</b>\");\t}\tmarkup.appendtaggedtext (theme, item.suffixdisplayparts);\tlist<taggedtext> documentation;\ttry {\tdocumentation = item.documentationfactory (canceltoken).tolist ();\t} catch (exception e) {\tdocumentation = emptytaggedtextlist;",
  "error while getting parameter documentation",
  0
 ],
 [
  "if (s14.f5 != 5+9) {\treturn 5;\t}\tif (s14.f6 != 6+9) {\treturn 6;\t}\tif (s14.f7 != 7+9) {\treturn 7;\t}\tif (s14.f8 != 8+9) {",
  "docnamespace",
  1
 ],
 [
  "private void print() {\tif (isnull) {\treturn;\t}\tdebug.writeline(\"\\tlen = \" + m_blen.tostring() + \", prec = \" + m_bprec.tostring() + \", scale = \" + m_bscale.tostring() + \", sign = \" + ispositive.tostring());\t}\t[system.diagnostics.conditional(\"debug\")]\tprivate void print(string s) {\tdebug.writeline(\"*** \" + s + \" ***\");\tif (isnull) {",
  "input frame",
  1
 ],
 [
  "public static void unindexedcollectionevents() {\ticollection<int> coll = new arraylist<int>();\ticollection<int> bag1 = new hashbag<int>();\tbag1.addall(new int[] { 3, 2, 5, 5, 7, 7, 5, 3, 7, 7 });\tcoll.collectionchanged += delegate(object c)  {\t};\tcoll.collectioncleared += delegate(object c, clearedeventargs args) {\t};\tcoll.itemsadded += delegate(object c, itemcounteventargs<int> args) {",
  "done",
  1
 ],
 [
  "formadapter.rendercardtag(this, attributes);\tif ((_formvariables != null && _formvariables.count > 0) && (!_providebackbutton || device.canrenderoneventandprevelementstogether)) {\t_writtenformvariables = true;\twrite(\"<onevent type=\\\"onenterforward\\\"><refresh>\");\tforeach (dictionaryentry entry in _formvariables) {\twritebegintag(\"setvar\");\twriteattribute(\"name\", (string)entry.key);\twritetextencodedattribute(\"value\", (string)entry.value);\twrite(\" />\");\t}",
  "promoting to container",
  1
 ],
 [
  "private static bool dynamicobjectinsecondoperandandthirdisnullableandconditionistrue() {\tint failcount = 0;\tbyte origin = 24;\tdynamic d = origin;\tlong? third = 33;\tbool cond = true;\tif ((long)(cond ? d : third) != 24) {\tfailcount++;",
  "test failed conversion result is incorrect",
  0
 ],
 [
  "static void showhelp() {",
  "getinstalledpackages error",
  1
 ],
 [
  "public virtual void setup () {\tvar vcs = repo.versioncontrolsystem;",
  "task files",
  1
 ],
 [
  "public static void testpersistsucurityinfo2() {\tconsole.writeline(\"\\ntestpersistsucurityinfo2 - persist security info=true\");\toracleconnection con = new oracleconnection(\"data source=palis;user id=scott;password=tiger;persist security info=true\");\tcon.open();\tcon.close();",
  "error processing test for whitespace arg",
  1
 ],
 [
  "try {\tstring fullxmlpath = path.getfullpath(xmlpath);\tfile.appendalltext(babysitterxmllist, fullxmlpath + environment.newline);\t} catch (exception e) {\t}\t}\t}\tif (verbose) {\tconsole.writeline ();\tconsole.writeline ();",
  "test s timed out",
  0
 ],
 [
  "public async task takeheapshotandmakereport () {\tvar newheapshot = await takeheapshot ();\tif (options.printreporttypes.hasflag (stresstestoptions.profileroptions.printreport.objectstotal)) {",
  "total objects per type newheapshot objectsperclasscounter count",
  0
 ],
 [
  "private static bool certificatevalidation (x509certificate certificate, int[] certificateerrors) {\tif (certificateerrors.length > 0) {\tconsole.writeline (certificate.tostring (true));",
  "finally",
  1
 ],
 [
  "public virtual void notifycomponentrenamed(object component, string newname, string oldname) {\treparse();\tif (this.formclass == null) {",
  "cannot rename formclass not found",
  0
 ],
 [
  "break;\tcase code.pop: outframe.popstack ();\tbreak;\tcase code.calli: processcall (insn, warn, true, outframe);\tbreak;\tcase code.call: case code.callvirt: processcall (insn, warn, false, outframe);\tbreak;\tcase code.ret: if(!isvoid(method.returntype)) {\tnullity n = outframe.popstack();\tif(nnacollector.hasnonnullattribute(method) && warn) {",
  "null deref at",
  0
 ],
 [
  "private static bool parseargumentvalue (string value) {\tif ((value.length == 1)) {\tswitch (value [0]) {\tcase 't': return true;\tcase 'f': return false;\tthrow new applicationexception (\"invalid argument value \" + value);\t}\t} else {",
  "idecontainer request missing service",
  1
 ],
 [
  "public static void checkleaks() {\tlock (s_internalsyncobject) {\tif (compmodswitches.handleleak.level >= tracelevel.warning) {\tgc.collect();\tgc.waitforpendingfinalizers();\thandletype[] types = new handletype[s_handletypes.values.count];\ts_handletypes.values.copyto(types, 0);\tfor (int i = 0; i < types.length; i++) {\ttypes[i]?.checkleaks();\t}",
  "end checkleaks",
  0
 ],
 [
  "public static int run() {\tint iterationcount = 0;\twhile (!visited && iterationcount++ < 10000) {\tgc.keepalive(new dummy());\tgc.collect();\t}\tif (visited) {",
  "finalizetest passed",
  0
 ],
 [
  "cloudtask unboundtask = new cloudtask(taskid, \"cmd /c echo hi\");\tunboundtask.displayname = originaldisplayname;\tassert.equal(originaldisplayname, unboundtask.displayname);\tboundjob.addtask(unboundtask);\ttry {\tcloudtask boundtask = batchcli.joboperations.gettask(jobid, taskid);\tassert.equal(originaldisplayname, boundtask.displayname);\ttestutilities.assertthrows<invalidoperationexception>(() => boundtask.displayname = updateddisplayname);\t}\tfinally {",
  "deleting task",
  0
 ],
 [
  "public static int test_0_abort_other_indirect () {\ttest test = (test) domain.createinstanceandunwrap (typeof (test).assembly.fullname, typeof (test).fullname);\ttest testhere = new test ();\tif (!remotingservices.istransparentproxy (test)) {",
  "cannot find data file",
  1
 ],
 [
  "const long l = -9223372036854775808;\tconst long l2 = -uint.maxvalue;\tconst e1 e = (e1)~e2.a;\tunchecked {\tif (-int.minvalue != int.minvalue) return 1;\t}\tint b = -lm;\tif (b != -22) return 2;\tuint ua = 2;\tif (-ua != -2) return 3;",
  "ok",
  0
 ],
 [
  "public void emitsource() {",
  "pragma warning disable",
  0
 ],
 [
  "static int main (string[] args) {\tint result = 1;\ttry {\theader ();\tresult = process (args);\tif (error == null) console.writeline (\"success\");\telse {",
  "state is null",
  1
 ],
 [
  "public void testextraend () {",
  "a b",
  0
 ],
 [
  "foreach (var setting in theme.settings) {\tif (setting.name != null) {\t}\tif (setting.scopes.count > 0) {\t}\tif (setting.settings.count > 0) {\tforeach (var kv in setting.settings) {\t}\t}\t}",
  "unhandled error launching soft debugger",
  1
 ],
 [
  "public static void resolvecallback(iasyncresult ar) {\tstacktrace st = new stacktrace();\tframe_count = st.framecount;\tfor(int i = 0; i < st.framecount; i++) {\tstackframe sf = st.getframe(i);\t}",
  "resolvecallback complete",
  0
 ],
 [
  "if (!testvirtualdelegates()) {\tresult = fail;\t}\tif (!testinterfacedelegates()) {\tresult = fail;\t}\tif (!teststaticopencloseddelegates()) {\tresult = fail;\t}\tif (!testmulticastdelegates()) {",
  "failed",
  0
 ],
 [
  "private static bool test7() {\tbool?[] boolvalues = new bool?[]\t{\ttrue, false }\t;\tforeach (bool? a1 in boolvalues) {\tdynamic d1 = a1;\tif ((d1 && true) != (a1.value && true)) {",
  "failed bool bool",
  0
 ],
 [
  "public void negotiatestream_streamtostream_kerberosauthinvaliduser_failure() {\tif (!_iskrbavailable) {",
  "skipping negotiatestream streamtostream kerberosauthinvaliduser failure",
  0
 ],
 [
  "private static bool callsecondclassinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturndynamicclass<int>();\tif ((!(bool)((s + 1).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "runningtask.refresh();\tassert.equal(taskstate.completed, runningtask.state);\trunningtask.refresh();\trunningtask.delete();\tlist<cloudtask> tasklistafterdelete = batchcli.joboperations.listtasks(jobid).tolist();\tassert.equal(0, tasklistafterdelete.count);\t}\t{\tconst string taskid = \"t2\";\tcloudtask tasktoadd = new cloudtask(taskid, \"ping 127.0.0.1 -n 60\");",
  "adding task",
  0
 ],
 [
  "public static void adddependentitemstoproject(func<ienumerable<fileprojectitem>> itemadder) {\tdirectorynode dir = projectbrowserpad.instance.projectbrowsercontrol.selecteddirectorynode;\tif (dir == null) return;\tfilenode filenode = projectbrowserpad.instance.projectbrowsercontrol.selectednode as filenode;\tif (filenode == null) {",
  "waitsubsystemtests doublesetoneventwithtimedoutwaitershouldnotstayinwaiterslist",
  1
 ],
 [
  "static void writehelp () {\tconsole.writeline ();",
  "nosave do not save the discovered documents to disk",
  0
 ],
 [
  "static void createversionindex () {\tstring rules_index = string.format (\"{0}{1}{2}{1}gendarme.rules({2}).md\", outputdir, path.directoryseparatorchar, version);\tusing (textwriter writer = file.createtext (rules_index)) {\twriter.writeline ();\tvar assemblies = from assembly in assembliesindex orderby assembly select assembly;",
  "the following assemblies are available in version",
  0
 ],
 [
  "public void transformgeneric5(inputtype inputtype, readertype readertype, transformtype transformtype, doctype doctype) {\tfilestream s2;\tif ((loadxsl(\"showparam.xsl\", inputtype, readertype) == 1) && (transform(\"fruits.xml\", transformtype, doctype) == 1)) {\ts2 = new filestream(fullfilepath(\"showparam.xsl\"), filemode.open, fileaccess.read);\ts2.dispose();\ts2 = new filestream(fullfilepath(\"fruits.xml\"), filemode.open, fileaccess.read);\ts2.dispose();\treturn;\t}",
  "error",
  1
 ],
 [
  "public codecompletionkeypressresult handlekeypress(itexteditor editor, char ch) {\tif (ch == ':') {\tif (editor.caret.offset >= 5 && editor.document.gettext(editor.caret.offset-5, 5) == \"${res\") {\tiresourcefilecontent content = icsharpcodecoreresourceresolver.geticsharpcodecorelocalresourceset(editor.filename).resourcefilecontent;\t#if debug if (content != null) {\t}\t#endif iresourcefilecontent hostcontent = icsharpcodecoreresourceresolver.geticsharpcodecorehostresourceset(editor.filename).resourcefilecontent;\tif (hostcontent != null) {",
  "wrong entry in the hosts file cannot parse the ip address line",
  1
 ],
 [
  "return;\t}\tforeach (xmlschemacompletiondata d in list) {\tif (d.namespaceuri == data.namespaceuri) {\treturn;\t}\t}\tdata.readonly = readonly;\tlist.add (data);\t} catch (exception ex) {",
  "deserializetoolboxitem host",
  1
 ],
 [
  "help ();\treturn 1;\t}\tbreak;\t}\t}\t}\tint i = 0;\ttry {\tfor (i = 1; i <= iter; i++) {",
  "connection",
  0
 ],
 [
  "private static bool callsecondstructinstanceproperty() {\tint failcount = 0;\tdynamic d = new firstclassreturnstruct();\tverify.firstcalled = false;\tif ((!(((secondstruct)d.instancemethod()).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "p.parse (args);\tvar asm = typeof(asynctests.httpclienttests.simple).assembly;\tif (server) {\tserver.start (asm, prefix).wait ();\tthread.sleep (timeout.infinite);\treturn;\t}\ttry {\trun (asm).wait ();\t} catch (exception ex) {",
  "error",
  0
 ],
 [
  "outputline (@\"       \\open to open the connection\");\toutputline (@\"       \\close to close the connection\");\toutputline (@\"       \\e to execute sql query (select)\");\toutputline (@\"       \\h to show help (all commands).\");\toutputline (@\"       \\defaults to show default variables.\");\toutputline (\"\");\t}\tpublic void showhelp () {\tconsole.writeline (\"\");\tif (!waitforenterkey ()) return;",
  "o filename to write result of commands executed to file",
  0
 ],
 [
  "public controllablebootstrapprovider() {\tmyid = interlocked.increment(ref idcounter);",
  "constructor instance id",
  0
 ],
 [
  "for (int idx = 0; idx < defaults.length; idx++) {\tif (servicetype.isequivalentto(defaults[idx])) {\tservice = this;\tbreak;\t}\t}\tif (service == null) {\tservices.trygetvalue(servicetype, out service);\t}\tif (service is servicecreatorcallback) {",
  "htmlschemaservice initialised",
  1
 ],
 [
  "public static int test_0_setjmp_exn_handler () {\tintptr res;\tcaller.setup ();\tvoidvoiddelegate f = new voidvoiddelegate (caller.m);\ttry {\tmono_test_setjmp_and_call (f, out res);\t} catch (specialexn) {\treturn 1;\t}\tif (!caller.called) {",
  "delegate not even called",
  0
 ],
 [
  "long tdiff = end.ticks - start.ticks;\tint mdiff = (int)tdiff/10000;\ttms += mdiff;\t}\tran++;\tif (result != expected) {\tfailed++;\t}\t}\tif (do_timings) {",
  "process getprocesses",
  1
 ],
 [
  "for (int iface = low; iface <= high; ++iface) {\tconsole.writeline (\"\tstatic iface_\" + iface + \" var_\" + iface + \" = new impl_\" + iface + \" ();\");\tconsole.writeline (\"        int res = 0;\");\tfor (int i = 0; i < iface; ++i) {\tconsole.writeline (string.format (\"\t\tif ((r = var_{0}.method_{1} (10,5,3,2)) != {1}) {{\", iface, i));\tconsole.writeline (\"    res = 1;\");\tconsole.writeline (\"}\");\t}\tconsole.writeline (\"}\");\t}",
  "chars xxx pi yyy zzz chars",
  1
 ],
 [
  "public void writeglobalsection(solutionsection section) {\tif (section.count != 0) {\twriter.writeline(\"\\tglobalsection({0}) = {1}\", section.sectionname, section.sectiontype);\twritesectionentries(section);",
  "endglobalsection",
  0
 ],
 [
  "var t = new thread (() => {\trefs = new lotsarefs();\trefs.referee = new referee();\t});\tt.start ();\tt.join ();\tfor (var i = 0; i < 100000000; ++i) {\tvar o = new object();\t}\tif (refs.referee.gettype() != typeof(referee)) {",
  "start testsqlconnection",
  1
 ],
 [
  "static int test_0_cwt_keep_child_alive () {\tfinalizerhelpers.performnopinaction (setuplinks3);\tgc.collect ();\tgc.waitforpendingfinalizers ();",
  "try get a",
  0
 ],
 [
  "public void targetstartedhandler (targetstartedeventargs args) {\tif (isverbositygreaterorequal (loggerverbosity.normal)) {\tindent++;\tsetcolor (eventcolor);\twriteline (string.empty);",
  "target",
  0
 ],
 [
  "public void deserialization() {\tglobal::system.runtime.serialization.iformatter fmtr = new global::system.runtime.serialization.formatters.binary.binaryformatter ();\tglobal::system.io.memorystream src;\tfor (int i = 0; i < serializationcases.length; ++i) {\tsrc = new global::system.io.memorystream ( bitconverter_bytearray_fromstring (serializationcases[i].resultbinarystring));\tdatetimeoffset result = (datetimeoffset)fmtr.deserialize (src);",
  "nothing to click",
  1
 ],
 [
  "public void seek_badorigin() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tcom.open();",
  "verifying seek method throws exception with a bad origin after a call to open",
  0
 ],
 [
  "public void callback() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (serialport com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\tcallbackhandler callbackhandler = new callbackhandler();",
  "verifying beginwrite with a callback specified",
  0
 ],
 [
  "public override string tostring() {\tstringwriter writer = new stringwriter(cultureinfo.invariantculture);",
  "nonce",
  0
 ],
 [
  "private void generatecompileunitstart(codecompileunit e) {\tif (e.startdirectives.count > 0) {\tgeneratedirectives(e.startdirectives);\t}",
  "short",
  1
 ],
 [
  "if (s8.f2 != 2+9) {\treturn 2;\t}\tif (s8.f3 != 3+9) {\treturn 3;\t}\tif (s8.f4 != 4+9) {\treturn 4;\t}\tif (s8.f5 != 5+9) {",
  "malformed server comment",
  1
 ],
 [
  "stringbuilder output = new stringbuilder();\twhile (bytes != 0) {\tbyte[] bbb = new byte[1024];\tbytes = datareader.readelementcontentasbinhex(bbb, 0, bbb.length);\tfor (int i = 0; i < bytes; i++) {\tcerror.write(bbb[i].tostring());\toutput.appendformat(bbb[i].tostring());\t}\t}\tcerror.writeline();",
  "length of the output",
  0
 ],
 [
  "foreach (var item in block.metadata) writer.writeline(item);\tif (block.idplural != null) {\tfor (int i = 0; i < po.nplurals; ++i) {\tvar translatedplural = block.gettranslatedplural(i);\tif (translatedplural == null) continue;\tstring value = ismessages ? \"\" : translatedplural.replace(\"\\r\\n\", \"\\n\");\t}\t}\telse {\tstring value = ismessages ? \"\" : block.translatedstring.replace(\"\\r\\n\", \"\\n\");",
  "secutil h",
  1
 ],
 [
  "public void save (string filename) {\tstring backupfilename = filename + \".previous\";\tstring tempfilename = path.getdirectoryname (filename) + path.directoryseparatorchar + \".#\" + path.getfilename (filename);\ttry {\tif (file.exists (filename)) {\tfile.copy (filename, backupfilename, true);\t}\t} catch (exception ex) {",
  "error copying properties file to backup",
  0
 ],
 [
  "public static int main (string[] args) {\ttry {\tif (args.length != 1) {\treturn 1;\t}\tstring charset = args[0];\tencoding encoding;\ttry {\tencoding = encoding.getencoding(charset);\t} catch (notsupportedexception e) {",
  "failed no entry point found",
  1
 ],
 [
  "public int transform(string szxmlfile, outputtype outputtype, navtype navtype, bool errorcase) {\tszxmlfile = fullfilepath(szxmlfile);\tixpathnavigable xd = loadxml(szxmlfile, navtype);",
  "file",
  1
 ],
 [
  "} else {\t}\t}\t}\tallocationsummary [] allocationsummaries = data.allocationsummaries;\tif (allocationsummaries.length > 0) {\tprintseparator (writer);\tforeach (allocationsummary allocationsummary in allocationsummaries) {\tallocationclassdata<loadedclass>[] classdata = allocationsummary.data;\tforeach (allocationclassdata<loadedclass> cdata in classdata) {",
  "could not disable synchronous major",
  1
 ],
 [
  "public void parseassembly (byte[] data, string version, string name, string fullname, bool dump_asm, bool dump_ver, bool dump_guids_for_msbuild) {\tvar a = assembly.reflectiononlyload (data);\tvar m = a.getmodules ()[0];\tvar id = m.moduleversionid.tostring ().toupper ();\tvar hash_code = hash (id).tostring (\"x\");\tvar str = filetoenum (name);\tstring ver_str = version + \" \" + filetomoniker (fullname);",
  "bye",
  1
 ],
 [
  "public void rtsenable_false_handshake_requesttosendxonxoff() {",
  "verifying false rtsenable after setting handshake to requesttosendxonxoff",
  0
 ],
 [
  "static bool callsecondclassindexer() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturnclass();\tif ( (!(bool)(((dynamic)s.instancemethod())[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "crashed bisecting",
  1
 ],
 [
  "numenvsettings = newenvsettings.count;\thwtask.environmentsettings = newenvsettings;\tboundjob.addtask(hwtask);\t{\tutilities utilities = batchcli.utilities;\ttaskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();\ttaskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(3));\tcloudtask mycompletedtask = new list<cloudtask>(boundjob.listtasks())[0];\tstring stdout = mycompletedtask.getnodefile(constants.standardoutfilename).readasstring();\tstring stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();",
  "could not remove the autosave file",
  1
 ],
 [
  "protected override void generatetypeconstructor(codetypeconstructor e) {\tif (!(iscurrentclass || iscurrentstruct)) return;\tif (e.customattributes.count > 0) {\toutputattributes(e.customattributes, false);\t}",
  "shared sub new",
  0
 ],
 [
  "public override void update() {\tbase.update();\tthis.context.sessionid\t\t\t= this.sessionid;\tthis.context.serverrandom\t\t= this.random;\tthis.context.negotiating.cipher = this.ciphersuite;\tthis.context.compressionmethod\t= this.compressionmethod;\tthis.context.protocolnegotiated\t= true;",
  "supportsmulticast",
  1
 ],
 [
  "public static void run() {\t{\tmultihashdictionary<int,string> mdict = new multihashdictionary<int,string>();\tmdict.add(2, \"to\");\tmdict.add(2, \"deux\");\tmdict.add(2, \"two\");\tmdict.add(20, \"tyve\");\tmdict.add(20, \"twenty\");\tconsole.writeline(mdict);",
  "mdict count is",
  0
 ],
 [
  "private void read(string filename) {\txmlserializer ser=new xmlserializer(typeof(purchaseorder));\tfilestream fs=new filestream(filename, filemode.open);\tpurchaseorder po;\tpo=(purchaseorder)ser.deserialize(fs);\tfs.close();",
  "consolelogger",
  1
 ],
 [
  "public void legacynestedtxscope() {\tstring txid1 = null;\tstring txid2 = null;\tstring txid3 = null;\tstring txid4 = null;\tstring txid5 = null;\tstring txid6 = null;",
  "running nestedscopetest",
  0
 ],
 [
  "outputline (@\"       \\open to open the connection\");\toutputline (@\"       \\close to close the connection\");\toutputline (@\"       \\e to execute sql query (select)\");\toutputline (@\"       \\h to show help (all commands).\");\toutputline (@\"       \\defaults to show default variables.\");\toutputline (\"\");\t}\tpublic void showhelp () {\tconsole.writeline (\"\");\tif (!waitforenterkey ()) return;",
  "end region",
  1
 ],
 [
  "static void onextensionchanged (object s, extensionnodeeventargs args) {\tif (args.change == extensionchange.add) {\ttry {\tif (typeof(commandhandler).isinstanceoftype (args.extensionobject)) typeof(commandhandler).getmethod (\"run\", system.reflection.bindingflags.nonpublic|system.reflection.bindingflags.instance, null, type.emptytypes, null).invoke (args.extensionobject, null);",
  "type must be a subclass of monodevelop components commands commandhandler",
  0
 ],
 [
  "public static void test_callback (object state) {",
  "retrieving metadata for",
  1
 ],
 [
  "collectionsource.bind();\tint i = 0;\tforeach (var element in collectionsource.groupedlist) {\tforeach (var l in element) {\tcollectionsource.fill(dataitemscollection,l);\ti++;\t}\t}\tdo {\tcollectionsource.fill(dataitemscollection);",
  "first last group randomint",
  0
 ],
 [
  "public nullity getlocnullity(int index) {",
  "getloc",
  0
 ],
 [
  "sslstream sslstream = null;\tx509certificate2 certificate = configuration.certificates.getservercertificate();\ttry {\tsslstream = (sslstream)state.stream;\tsslstream.authenticateasserverasync(certificate, false, _sslprotocols, false).continuewith(t => {\tcertificate.dispose();\tonauthenticate(t, state);\t}, taskscheduler.default);\t}\tcatch (exception ex) {",
  "server exception",
  0
 ],
 [
  "output.write(\"catch \");\toutputtypenamepair(current.catchexceptiontype, current.localname);\toutput.writeline(\"\");\tindent++;\tgeneratevbstatements(current.statements);\tindent--;\t}\t}\tcodestatementcollection finallystatements = e.finallystatements;\tif (finallystatements.count > 0) {",
  "finally",
  0
 ],
 [
  "output.writeline ();\tvar reader = new xamlxmlreader (xmlreader.create (new stringreader (xamarinbug3003.testcontext.xmlinput)), context);\tvar writersettings = new xamlobjectwritersettings ();\twritersettings.afterbegininithandler = (sender, e) => {\t};\twritersettings.afterendinithandler = (sender, e) => {\t};\twritersettings.beforepropertieshandler = (sender, e) => {\t};\twritersettings.afterpropertieshandler = (sender, e) => {",
  "xamlobjectwritersettings afterproperties",
  0
 ],
 [
  "static object selectaggregate (idbconnection cnc, string agg) {\tidbcommand selectcommand = cnc.createcommand();\tobject data;\tselectcommand.commandtype = commandtype.text;\tselectcommand.commandtext = \"select \" + agg + \"from mono_sql_test\";\tdata = selectcommand.executescalar ();",
  "agg result",
  0
 ],
 [
  "public void testbug4556() {\tstring code = class foo {\tpublic static void main (string[] args) {",
  "foo",
  0
 ],
 [
  "case code.jmp: break;\tcase code.cpblk: outframe.popstack (3);\tbreak;\tcase code.initblk: outframe.popstack (3);\tbreak;\tcase code.localloc: outframe.popstack();\toutframe.pushstack(nullity.nonnull);\tbreak;\tbreak;\t} /* switch */ } /* for */ if (verbose) {",
  "output frame",
  0
 ],
 [
  "double d2 = double.negativeinfinity;\tdouble d3 = double.nan;\tdouble d4 = 2.000001;\tdouble d5 = 0.00;\tdouble d6 = double.maxvalue;\tdouble d7 = double.minvalue;\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(\"myarg1\", szempty, d1);\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);\tif (!double.ispositiveinfinity((double)retobj)) {",
  "retrieved",
  0
 ],
 [
  "dynpara = new test();\tdynamic dynp2 = null;\ttry {\tvv.m(dynpara, dynp2);\t}\tcatch (microsoft.csharp.runtimebinder.runtimebinderexception e) {\tif (errorverifier.verify(errormessageid.badargtypes, e.message, \"s.m<test>(test, test)\")) ret--;\t}\ttry {\tvd.m(dynpara, dynp2);",
  "connectionstring after close",
  1
 ],
 [
  "public bool loadexternalprovider (string strproviderassembly, string providerconnectionclass) {\ttry {",
  "verifying false rtsenable after open",
  1
 ],
 [
  "if (shortname == \"i\") {\telementlist.removeat(i--);\tcontinue;\t}\te.setattribute(\"shortname\", shortname);\thtml.writeline(\"  <li><a href=\\\"#\" + shortname + \"\\\">\" + shortname + \"</a>\");\t}\tforeach (xmlelement e in elementlist) {\tstring fullname = e.getattribute(\"name\").substring(2);\tstring shortname = e.getattribute(\"shortname\");",
  "div",
  0
 ],
 [
  "return 2;\t}\t}\tif (forceverification || strongnamemanager.mustverify (an)) {\trsa rsa = cryptoconvert.fromcapipublickeyblob (publickey, 12);\tstrongname sn = new strongname (rsa);\tif (sn.verify (assemblyname)) {\treturn 0;\t}\telse {",
  "nested got but expected",
  1
 ],
 [
  "list.add (\"two\");\tlist.add (\"three\");\tint count = 0;\tforeach (string s in list){\tif (s == \"two\"){\tbreak;\t}\tcount++;\t}\tif (count != 1) return 4;",
  "threw the following exception",
  1
 ],
 [
  "public override bool tryreceiverequest (timespan timeout, out requestcontext context) {\ttry {\treturn tryreceiverequestcore (timeout, out context);\t} catch (exception ex) {",
  "autotest service starting",
  1
 ],
 [
  "keyboard.focusout(focuswindow.handle);\twhile (keyboard.resetkeystate(focuswindow.handle, ref msg)) sendmessage(focuswindow.handle, msg.message, msg.wparam, msg.lparam);\tsendmessage(focuswindow.handle, msg.wm_killfocus, intptr.zero, intptr.zero);\tgoto processnextmessage;\tcase xeventname.expose: if (!hwnd.mapped) {\thwnd.pendingexpose = hwnd.pendingncexpose = false;\tcontinue;\t}\tmsg.hwnd = hwnd.handle;\tif (client) {",
  "should be indented",
  1
 ],
 [
  "public static void main(string[] args) {",
  "verifying write method with",
  1
 ],
 [
  "list<nodefile> filesbytaskrecursiveomitted = batchcli.joboperations.listnodefiles( jobid, taskid).tolist();\tlist<nodefile> filesbytaskrecursivefalse = batchcli.joboperations.listnodefiles( jobid, taskid, recursive: false).tolist();\tassertfilelistsmatch(filesbytaskrecursiveomitted, filesbytaskrecursivefalse);\t}\tlist<nodefile> filelistfromcomputenodeoperations = batchcli.pooloperations.listnodefiles(this.poolfixture.poolid, computenodeid, recursive: true).tolist();\tforeach (nodefile f in filelistfromcomputenodeoperations) {\t}\tassert.contains(\"shared\", filelistfromcomputenodeoperations.select(f => f.path));\tlist<nodefile> filelistfromcomputenode = computenode.listnodefiles(recursive: true).tolist();\tforeach (nodefile f in filelistfromcomputenodeoperations) {",
  "setup test package and data",
  1
 ],
 [
  "pass_total += tests_passed;\trun_total += failed_tests.count + tests_passed;\tif (failed_tests.count > 0) {\tsw.writeline (\"        <tr class='errorrow' onclick=\\\"toggle('el{0}')\\\" onmouseover='highlight(this)' onmouseout='unhighlight(this)'>\", assembly);\tsw.writeline (@\"            <td><img src='media/fail.png' /></td>\");\t} else {\tsw.writeline (@\"            <td><img src='media/pass.png' /></td>\");\t}\tif (failed_tests.count == 0) continue;\tsw.writeline (@\"        <tr id='el{0}' class='errorlist' style='display: none'>\", assembly);",
  "thread got reply mutex",
  1
 ],
 [
  "public static void main (string[] args) {\tint low = 2000;\tint high = 2000;\tconsole.writeline ();\tfor (int count = low; count <= high; ++count) {\tfor (int i = 0; i <= count; ++i) console.writeline (\"    int method_\" + i + \" (int a, int b, int c, int d);\");\tconsole.writeline (\"}\");\tfor (int i = 0; i <= count; ++i) console.writeline (\"    public virtual int method_\" + i + \" (int a, int b, int c, int d) { return a - b - c -d + \" + i + \"; }\");\tconsole.writeline (\"}\");\t}",
  "public class driver",
  0
 ],
 [
  "public static int main() {\tmethodinfo mi = typeof (test).getmethod (\"set_prop\");\tif (mi.getparameters ().length != 1) return 1;\tif ((mi.getparameters ()[0].name) != \"value\") return 2;",
  "not already shutdown",
  1
 ],
 [
  "public void stopbits_neg1() {",
  "did not throw exception",
  1
 ],
 [
  "menuitem item = new menuitem (((bookmarkgroup)i).name);\titem.activated += on_bookmarkgroup_activated;\tmenu_to_id[item] = ((bookmarkgroup)i).id;\tmenu.append (item);\tmenu m = new menu ();\titem.submenu = m;\tbuildmenuhelper (m, ((bookmarkgroup)i));\t}\tforeach (object i in group.members) {\tif (i is bookmark) {",
  "unexpected exception",
  1
 ],
 [
  "if (detailed) {\t}\twriteline ();\tif (detailed) {\t}\twriteline ();\tif (detailed) {\twriteline (\"\\t<assembly_display_name> is the name of the assembly (partial or\\n\" + \"\\tfully qualified) to remove from the global assembly cache. if a \\n\" + \"\\tpartial name is specified all matching assemblies will be uninstalled.\\n\" + \"\\texample: -u mydll,version=1.2.1.0\");\t}\twriteline ();",
  "ul assembly list file package name root rootdir gacdir gacdir",
  0
 ],
 [
  "static void dataadaptertest (oracleconnection connection) {",
  "create select command",
  0
 ],
 [
  "public static void threadmethod_waiter_1() {",
  "addnlinkedattrset dispose disposing members enumerable",
  1
 ],
 [
  "using (stream ms = new memorystream()) {\tusing (xmlwriter w = creatememwriter(utils, ms, ws)) {\tw.writeelementstring(\"elem\", \"text\");\tw.flush();\tms.position = 0;\tusing (streamreader reader = new streamreader(ms)) {\toutputxml = reader.readtoend();\t}\t}\t}",
  "unable to save nuget config changes",
  1
 ],
 [
  "private static void printhelp() {\tconsole.writeline();\tconsole.writeline();\tconsole.writeline();\tconsole.writeline();\tconsole.writeline();\tconsole.writeline();\tconsole.writeline();",
  "loopback index",
  1
 ],
 [
  "public static void createlinenumbertestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<?xml version=\\\"1.0\\\" ?>\");\ttw.writeline(\" <element a0='a0&e1;v' a1='a1value' a2='a2&e1;v'><embedded /></element>\");\ttw.writeline(\"<?pi1?>\");\ttw.writeline(\"<base64>9f6hju++</base64>\");",
  "int int",
  0
 ],
 [
  "byte randbyte = (byte)rndgen.next(0, 256);\tbytestowrite[i] = randbyte;\t}\tchar[] expectedchars = encoding.getchars(bytestowrite, 0, bytestowrite.length);\tfor (int i = 0; i < numnewlines; i++) {\tint newlineindex;\tnewlineindex = rndgen.next(0, numbytesread);\tbytestowrite[newlineindex] = (byte)'\\n';\texpectedchars[newlineindex] = (char)'\\n';\t}",
  "verifying bytestoread with a buffer of",
  0
 ],
 [
  "public override bool check() {\tbool retval = true;\tif (underlyingsize > array.length) {",
  "underlyingsize array length",
  0
 ],
 [
  "if (_assemblies.count == 0) return;\tprogressdialog progressdialog = new progressdialog();\tprogressdialog.setup(stringparser.parse(\"${res:componentinspector.progressdialog.loadingpreviouslyopenedassembliesdialogtitle}\"), stringparser.parse(\"${res:componentinspector.progressdialog.loadingpreviouslyopenedassembliesmessage}\"), _assemblies.count, progressdialog.has_progress_text, progressdialog.final);\tprogressdialog.showifnotdone();\ttry {\tfor (int i = _assemblies.count - 1; i >= 0; --i) {\tpreviouslyopenedassembly assembly = _assemblies[i];\ttry {\tassemblyname aname = new assemblyname();\taname.codebase = assembly.codebase;",
  "restore assy",
  0
 ],
 [
  "protected override void ongotfocus (eventargs e) {",
  "with replacement",
  1
 ],
 [
  "public static implicit operator int (blah i) {",
  "unknown node",
  1
 ],
 [
  "else {\tbool exceptionfound = false;\ttype actualexceptiontype = e.gettype();\tfor (int i = 0; i < expectedexceptions.length; ++i) {\tif (actualexceptiontype == expectedexceptions[i]) {\texceptionfound = true;\tbreak;\t}\t}\tif (exceptionfound) {",
  "bookmark manager init",
  1
 ],
 [
  "public void bug1771070_1771072_jobandpoollifetimestats() {\taction test = () => {\tusing (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {\tjobstatistics jobstatistics = batchcli.joboperations.getalllifetimestatistics();\tpoolstatistics poolstatistics = batchcli.pooloperations.getalllifetimestatistics();\tassert.notnull(jobstatistics);\tassert.notnull(poolstatistics);",
  "writestartdocument not called",
  1
 ],
 [
  "private static bool callsecondstructinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tif ((!(bool)(firstclassreturndynamicstruct.staticproperty.instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "put copy a certificate crl or ctl from a store to a file",
  1
 ],
 [
  "public override void unmanagedfunctionstatisticalhit (ufr f) {",
  "compiling",
  1
 ],
 [
  "x509chainstatusflags allflags = chainelement.chainelementstatus.aggregate( x509chainstatusflags.noerror, (cur, status) => cur | status.status);\t}\tchainelement.certificate.dispose();\t}\tthread.sleep(1000);\t}\tif (testenvironmentconfiguration.runmanualtests) {\tassert.true(valid, $\"online chain built validly within {retrylimit} tries\");\t}\telse if (!valid) {",
  "skip nameof verifywithrevocation chain failed to build within retrylimit tries",
  0
 ],
 [
  "static void printurls (urlscollection col) {\tfor (int i = 0; i < col.count; i++) {\tconfigurationelement e = col [i];\turlconfigelement ue = e as urlconfigelement;\tif (ue != null) {",
  "port",
  0
 ],
 [
  "public static int main () {\tvar c = new c();\tvar h = new g<string, c, int>(c);\tvar s = h.do (\"abc\");\tvar expected = typeof(string).name;\tif (s == expected) return 0;\telse {",
  "error during service removal",
  1
 ],
 [
  "public static int main () {\tint [][] i = new int [2][];\tint [,][] j = new int [3,6][];\tblah [] k = new blah [2];\tblah [,][] l = new blah [3,4][];\turi [] uri = new uri [4];",
  "all arrays successfully created",
  0
 ],
 [
  "public abstract void a ();\t}\tclass y : x {\toverride public void a () {",
  "hello",
  0
 ],
 [
  "httpwebrequest httpwebrequest = (httpwebrequest) webrequest.create (uri);\twebresponse httpwebresponse = httpwebrequest.getresponse ();\tstream responsestream = httpwebresponse.getresponsestream ();\tstreamreader responsestreamreader = new streamreader (responsestream);\tstring response = responsestreamreader.readline ();\tresponsestreamreader.close ();\tresponsestream.close ();\thttpwebresponse.close ();\t}\tcatch (webexception e) {",
  "webexception raised in poll for",
  0
 ],
 [
  "public static void createbigelementtestfile(string strfilename) {\tstream s = new memorystream();\ttextwriter tw = new streamwriter(s);\tstring str = new string('z', (1 << 20) - 1);\ttw.write(\"<\");\ttw.write(str);",
  "x",
  0
 ],
 [
  "public void validationcallback(object sender, validationeventargs args) {\tif (args.severity == xmlseveritytype.error) {\tberrorcallback = true;\txmlschemaexception se = args.exception as xmlschemaexception;\terrorlinenumbers[errorcount] = se.linenumber;\terrorcount++;\tif (se.innerexception != null) {",
  "innerexception message",
  0
 ],
 [
  "httpwebrequest request = (httpwebrequest) webrequest.create (browscapurl);\trequest.useragent = useragent;\tstreamwriter writer = null;\tstreamreader reader = null;\tconsole.write (\"connecting...\");\twebresponse resp = request.getresponse ();\tstring tmppath = null;\ttry {\ttmppath = path.gettempfilename ();\treader = new streamreader (resp.getresponsestream ());",
  "done",
  0
 ],
 [
  "static void showhelp() {",
  "d wildcard disassembles the resource or resx files and generates",
  0
 ],
 [
  "public void state_3(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartdocument();\tw.writecharentity('\\ud23e');\t}\tcatch (invalidoperationexception e) {",
  "exception",
  0
 ],
 [
  "assert.true(false);\t}\tm_xsltarg.addparam(\"myarg3\", szempty, d3);\tretobj = m_xsltarg.getparam(\"myarg3\", szempty);\tif (!double.isnan((double)retobj)) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg4\", szempty, d4);\tretobj = m_xsltarg.getparam(\"myarg4\", szempty);\tif (!d4.equals((double)retobj)) {",
  "output file font png",
  1
 ],
 [
  "public delegate void mydel(int x);\tpublic class myclass {\tpublic static void do(int x) {",
  "eventlog completionstatuschanged starting at",
  1
 ],
 [
  "public static void ondisposed<t> (intptr obj, bool disposing) {\tif (disposing && !enabled) throw new invalidoperationexception ();\tif (environment.hasshutdownstarted) return;\tif (!disposing) {",
  "is leaking programmer is missing a call to dispose",
  0
 ],
 [
  "public void testservice () {\tiodcodespostauxservice ser = new iodcodespostauxservice ();\tstring res = ser.getdepartmentforcode (\"66\");",
  "adding package dependency to project",
  1
 ],
 [
  "public static int main (string[] args) {\tfoo f = new foo ();\tmethodinfo m = (methodinfo) (f.gettype ().findmembers (membertypes.all, bindingflags.public | bindingflags.static, type.filtername, \"sum\"))[0];\tint[] numbers = new int[3]{4, 5, 6};\tobject[] parms = new object[1]{numbers};\tint sum = (int)m.invoke (f, parms);",
  "sum is",
  0
 ],
 [
  "public void unsafe() {\tbool bad = false;\tfor (int i = 0; i < 10; i++) {\tsystem.threading.thread t1 = new system.threading.thread(new system.threading.threadstart(unsafe1));\tsystem.threading.thread t2 = new system.threading.thread(new system.threading.threadstart(unsafe2));\tt1.start();\tt2.start();\tt1.join();\tt2.join();\tif (bad = 2 * sz + 1 != tree.count) {",
  "failed to initialize versioncontrolsystem type",
  1
 ],
 [
  "public static int main () {\tif (\"hello\" != a.hello.tostring ()) return 1;",
  "value is",
  0
 ],
 [
  "}\t</script>\");\tif (ac.sourceassembly == ac.targetassembly) {\t} else {\t}\tif (!state.ignorenonbreaking) {\tfile.writeline (\"<a href='javascript: hidenonbreakingchanges (); ' class='hide-nonbreaking'>hide non-breaking changes</a>\");\tfile.writeline (\"<a href='javascript: shownonbreakingchanges (); ' class='restore-nonbreaking' style='display: none;'>show non-breaking changes</a>\");\t}\tfile.write (diffhtml);",
  "waiting for the task to complete",
  1
 ],
 [
  "static void dump_user (string username) {\tmembershipuser user = membership.getuser (username, false);",
  "filter defects for the specified confidence levels",
  1
 ],
 [
  "public void nonullcheckload (eventargs e) {\teventhandler handler = loading;\thandler (this, e);",
  "load",
  0
 ],
 [
  "using (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartdocument();\tw.writestartelement(\"root\");\tw.writeendelement();\tw.writeenddocument();\tw.writestartdocument();\tw.writeenddocument();\t}\tcatch (invalidoperationexception e) {",
  "eventlog reset",
  1
 ],
 [
  "public static void worker () {",
  "domain start",
  0
 ],
 [
  "private static bool callsecondinterfaceinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tif ((!(bool)(firstclassreturndynamicinterface.staticproperty.instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "static void onextensionchange (object s, extensioneventargs args) {",
  "added value retrieved value",
  1
 ],
 [
  "public task<string> e2method() {",
  "got but expected",
  1
 ],
 [
  "public async task sendasync_requestversion20_responseversion20ifhttp2supported(uri server) {\tif (platformdetection.iswindows && !platformdetection.iswindows10version1703orgreater) {",
  "npgsqldatareader executereader",
  1
 ],
 [
  "static int main() {\tint ms, ms2, ms3;\tunsafe {\tms = sizeof (mystruct);\tms2 = sizeof (mystruct2);\tms3 = sizeof (mystruct3);\t}",
  "mystruct size",
  0
 ],
 [
  "static unsafe int test (sbyte* x) {\tif ((x + 1) < x) {",
  "ok",
  0
 ],
 [
  "public void addservicereference() {\tcompilermessageview.instance.bringtofront();\turi uri = getserviceuri();\tif (uri == null) return;\ttry {\tservicegenerator.options.servicename = defaultnamespace;\tservicegenerator.options.url = uri.tostring();\tservicegenerator.addservicereference();\t} catch (exception ex) {",
  "text",
  1
 ],
 [
  "static void writehelp () {\tconsole.writeline ();",
  "span kind",
  1
 ],
 [
  "private void emitwritearray(string typename) {\topenscope($\"public static void write(this nativewriter writer, list<{typename}> values)\");\twriteline(\"if (values == null)\");\twriteline(\"{\");",
  "return",
  0
 ],
 [
  "public void addparam13(object param, xslinputtype xslinputtype, readertype readertype, outputtype outputtype, navtype navtype) {\tstring baseline = path.combine(\"baseline\", (string)param);\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(\"myarg1\", szempty, \"test1\");\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);\tif (retobj.tostring() != \"test1\") assert.true(false);\tm_xsltarg.addparam(\"myarg2\", szempty, \"test2\");\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);",
  "added value retrieved value",
  0
 ],
 [
  "public static void parametertest2 (oracleconnection connection) {\toraclecommand cmd2 = connection.createcommand();\tcmd2.commandtext = \"alter session set nls_date_format = 'yyyy-mm-dd hh24:mi:ss'\";\tcmd2.executenonquery ();\ttry {\tcmd2.commandtext = \"drop table mono_test_table7\";\tcmd2.executenonquery ();\t}\tcatch(oracleexception) {\t}",
  "connectionstring before open",
  1
 ],
 [
  "}\t}\telse if (_classesinterfaces.count > 0) {\tchosenclass = (basicinfo)_classesinterfaces[0];\tif (traceutil.if(this, tracelevel.info)) {\t}\t}\telse if (_interfaces.count == 1) {\tchosenclass = (basicinfo)_interfaces[0];\tif (traceutil.if(this, tracelevel.info)) {",
  "comobjectinfo found only one interface",
  0
 ],
 [
  "public void state_6(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartdocument();\tw.writestartelement(\"root\");\tw.writeendelement();\tw.writesurrogatecharentity('\\udf41', '\\ud920');\t}\tcatch (invalidoperationexception e) {",
  "error making search index",
  1
 ],
 [
  "public override void attachplaceholder () {\tif (type == nvdlresulttype.unwrap) parent.attachplaceholder ();\t}\tpublic override void detachplaceholder () {\tif (type == nvdlresulttype.unwrap) parent.detachplaceholder ();\t}\tpublic override void startelement () {\tif (type != nvdlresulttype.unwrap) validatestartelement ();\t}\tpublic override void endelement () {",
  "did not throw exception",
  1
 ],
 [
  "if (members.length > 0 && members[0].mapping.isreturnvalue) writer.writeline(\"isreturnvalue = true;\");\tstring checktypehrefsource = (!haswrapperelement && !writeaccessors) ? \"hreflist\" : null;\tif (checktypehrefsource != null) writeinitchecktypehreflist(checktypehrefsource);\twriteparamsread(mappings.length);\tint loopindex = writewhilenotloopstart();\twriter.indent++;\tstring unrecognizedelementsource = checktypehrefsource == null ? \"unknownnode((object)p);\" : \"if (reader.getattribute(\\\"id\\\", null) != null) { readreferencedelement(); } else { unknownnode((object)p); }\";\twritememberelements(members, unrecognizedelementsource, \"unknownnode((object)p);\", null, null, checktypehrefsource);\twritewhileloopend(loopindex);\tif (checktypehrefsource != null) writehandlehreflist(members, checktypehrefsource);",
  "ok",
  1
 ],
 [
  "static void main () {\tint[] integer_array = {0, 1};",
  "using halftone palette",
  1
 ],
 [
  "parm.direction = parameterdirection.input;\tparm.value = tablename;\tcmd.parameters.add(parm);\tpgsqldatareader rdr;\trdr = cmd.executereader();\tint c;\tint results = 0;\tdo {\tresults++;\tdatatable dt = rdr.getschematable();",
  "total columns",
  0
 ],
 [
  "if (_primarygroupmemberssearcher != null) {\t_primarygroupmemberssearcher.dispose();\t}\tif (_querymembersresults != null) {\t_querymembersresults.dispose();\t}\tif (_currentmemberssearcher != null) {\t_currentmemberssearcher.dispose();\t}\tif (_membersearchresults != null) {",
  "type should be byte but receiving value has type of",
  1
 ],
 [
  "public bool remove(t value) {\tmarkchange();\tforeach (valueel el in this.combinedvalues) {\tif (el.isinserted && el.insertedvalue.equals(value)) {\tthis.combinedvalues.remove(el);\treturn true;\t}\tif (!el.isinserted && el.originalvalue.right.equals(value)) {",
  "test passes",
  1
 ],
 [
  "if (_name != null) {\tif (_contexttype == contexttype.applicationdirectory) {\tservername = _serverproperties.dnshostname + \":\" + ((contextoptions.securesocketlayer & _options) > 0 ? _serverproperties.portssl : _serverproperties.portldap);\t}\telse {\tservername = _name;\t}\tservername += \"/\";\t}\tauthenticationtypes authtypes = sdsutils.mapoptionstoauthtypes(_options);",
  "principalcontext doldapdirectoryinit authtypes is",
  0
 ],
 [
  "assert.throws<platformnotsupportedexception>(() => ipproperties.dhcpserveraddresses);\ttry {\tassert.notnull(ipproperties.dnsaddresses);\tforeach (ipaddress dns in ipproperties.dnsaddresses) {\t_log.writeline(\"-- \" + dns.tostring());\t}\tassert.notnull(ipproperties.dnssuffix);\t}\tcatch (platformnotsupportedexception) { }\tassert.notnull(ipproperties.gatewayaddresses);",
  "gateway addresses",
  0
 ],
 [
  "public override string tostring () {\tstringwriter sw = new stringwriter ();",
  "extra",
  0
 ],
 [
  "snd_pcm_hw_params (handle, hw_param);\t} else {\t}\talsa_err = snd_pcm_sw_params_malloc (ref sw_param);\tif (alsa_err == 0) {\tsnd_pcm_sw_params_current (handle, sw_param);\tsnd_pcm_sw_params_set_avail_min(handle, sw_param, chunk_size);\tsnd_pcm_sw_params_set_start_threshold(handle, sw_param, buffer_size);\tsnd_pcm_sw_params(handle, sw_param);\t} else {",
  "got but expected",
  1
 ],
 [
  "public static void deregisterfromwithinacallbackissafe_basictest() {",
  "cancellationtokentests deregisterfromwithinacallbackissafe basictest",
  0
 ],
 [
  "public override void createfile (string assembly_name, string file_prefix) {\tsh = file.createtext (file_prefix + \".h\");\tfile_prefix = file_prefix.replace (\"../\", \"\").replace (\"/\", \"_\");\tthis.assembly_file = assembly_name = path.getfilename (assembly_name);\twriteheader (sh, assembly_name, true);\tassembly_name = assembly_name.replace (\".dll\", \"\").replace (\".\", \"_\");",
  "end externalsource",
  1
 ],
 [
  "}\tconsole.writeline (\"{\");\tfor (int iface = low; iface <= high; ++iface) {\tconsole.writeline (\"\tstatic iface_\" + iface + \" var_\" + iface + \" = new impl_\" + iface + \" ();\");\tconsole.writeline (\"        int res = 0;\");\tfor (int i = 0; i < iface; ++i) {\tconsole.writeline (string.format (\"\t\tif ((r = var_{0}.method_{1} (10,5,3,2)) != {1}) {{\", iface, i));\tconsole.writeline (\"    res = 1;\");\tconsole.writeline (\"}\");\t}",
  "typelib checking class",
  1
 ],
 [
  "protected async task do_liveness_oracletest_1() {\toutput.writeline(\"clusterid= {0}\", this.hostedcluster.options.clusterid);\tsilohandle silo3 = this.hostedcluster.startadditionalsilo();\timanagementgrain mgmtgrain = this.grainfactory.getgrain<imanagementgrain>(0);\tdictionary<siloaddress, silostatus> statuses = await mgmtgrain.gethosts(false);\tforeach (var pair in statuses) {",
  "succeeded",
  1
 ],
 [
  "if (datareader.getattribute(\"xmlns\") == null) {\treturn test_fail;\t}\t}\twhile (datareader.read()) ;\tdatareader.close();\treturn test_pass;\tcase \"ns\": datareader.readtodescendant(\"e:elem\");\tif (datareader.hasattributes) {\tif (datareader.getattribute(\"xmlns:e\") == null) {",
  "positioned on wrong element not on ns",
  0
 ],
 [
  "public static void main () {\tfoo_delegate d = new foo_delegate (function);\tasynccallback ac = new asynccallback (async_callback);\tiasyncresult ar1 = d.begininvoke (ac, \"foo\");",
  "could not save feedback file",
  1
 ],
 [
  "connectionstring = \"host=localhost;\" + \"dbname=test;\" + \"user=postgres\";\ttry {\tstring maxstrvalue;\tcon = new sqlconnection(connectionstring);\tcon.open();\tsql = \t\"select count(*) \" + \"from sometable\";\tcmd = new sqlcommand(sql,con);\tint64 rowcount = (int64) cmd.executescalar();\tsql = \t\"select max(tdesc) \" + \"from sometable\";\tcmd = new sqlcommand(sql,con);",
  "executing",
  0
 ],
 [
  "public void dumpreader (xmlreader xr, bool attvalue) {\tif (xr.nodetype == xmlnodetype.attribute) {\twhile (xr.readattributevalue ()) dumpreader (xr, true);",
  "virtual network gatewaysubnet id",
  1
 ],
 [
  "public void logblockend (functionid functionid, logmessage logmessage, int uniquepairid, int delta, cancellationtoken cancellationtoken) {",
  "exception",
  1
 ],
 [
  "public void transformgeneric7(inputtype inputtype, readertype readertype, transformtype transformtype, doctype doctype) {\ttry {\tloadxsl(\"forwardcomp2.xsl\", inputtype, readertype);\ttransform(\"data.xml\", true, transformtype, doctype);\t}\tcatch (xsltexception) {\treturn;\t}",
  "got expected",
  1
 ],
 [
  "public p () {",
  "chars cdata yyy zzz chars",
  1
 ],
 [
  "using (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writechars(null, 0, 0);\t}\tcatch (argumentexception e) {\tcerror.compare(w.writestate, writestate.error, writestate.element, \"writestate should be error\");\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "dynamic d1 = new myopclasswitherrorreturntype2();\tdynamic d2 = new myopclasswitherrorreturntype2();\tdynamic dr = d1 && d2;\tif (dr.gettype() != typeof(myopclasswitherrorreturntype2)) {\treturn false;\t}\tif (dr != d1) {\treturn false;\t}\tif (!(iscallfalse && !iscallopand && !iscalltrue && !iscallconvert && !iscallopor)) {",
  "failed executed error ops iscallconvert iscalltrue iscallfalse iscallopand iscallopor",
  0
 ],
 [
  "static void main () {\twhile (true) {\ttry {",
  "ss unsupported option",
  1
 ],
 [
  "});\tfunc<exception, int, bool> errorfilter = ((exception exc, int i) => {\treturn true;\t});\ttask<int> promise = asyncexecutorwithretries.executewithretries(myfunc, 10, 10, null, errorfilter);\tint value = promise.result;\tcounter = 0;\ttry {\tpromise = asyncexecutorwithretries.executewithretries(myfunc, 3, 3, null, errorfilter);\tvalue = promise.result;",
  "value is",
  0
 ],
 [
  "public void verify() {\tserialportproperties serportprop = new serialportproperties();\tcontainer container = new container();\tusing (serialport com = new serialport(container)) {\tassert.equal(1, container.components.count);\tassert.equal(com, container.components[0]);\tserportprop.setallpropertiestodefaults();",
  "verifying properties is called",
  0
 ],
 [
  "processstartinfo psi = new processstartinfo();\tpsi.filename = manager;\tpsi.workingdirectory = help3environment.approot;\tpsi.arguments = help3service.activecatalog.ascmdlineparam;\tpsi.useshellexecute = true;\tif (runprivileged) psi.verb = \"runas\";\tpsi.windowstyle = processwindowstyle.normal;\ttry {\tprocess p = process.start(psi);\tp.waitforinputidle();",
  "helpviewer helplibrarymanager started",
  0
 ],
 [
  "return sd.projectservice.loadproject(projectinfo);\t} catch (filenotfoundexception) {\treturn new missingproject(projectinfo);\t} catch (projectloadexception ex) {\texception = ex;\t} catch (ioexception ex) {\texception = ex;\t} catch (unauthorizedaccessexception ex) {\texception = ex;\t}",
  "failed nullable enum",
  1
 ],
 [
  "foreach (xmlschemaattribute attribute in derivedtype.attributeuses.values) {\txmlschemaattribute attributebase = (xmlschemaattribute)basetype.attributeuses[attribute.qualifiedname];\tif (attributebase != null) {\tcontinue;\t}\tif (baseattributewildcard == null || !baseattributewildcard.allows(attribute.qualifiedname)) {\t#if debug string position = string.empty;\tif (derivedtype.sourceuri != null) {\tposition = \" in \" + derivedtype.sourceuri + \"(\" + derivedtype.linenumber + \", \" + derivedtype.lineposition + \")\";\t}",
  "base",
  0
 ],
 [
  "exiter.client.exitprocess (0);\tenvironment.exit (0);\t}\tstring assemblyname = \"system.servicemodel_test_net_3_0.dll\";\tassembly assem;\ttry {\tsystem.io.fileinfo fi = new fileinfo (assembly.getentryassembly ().location);\tassem = assembly.loadfrom (path.combine (fi.directory.fullname, assemblyname));\t}\tcatch (exception e) {",
  "could not start server could not load",
  0
 ],
 [
  "static void mine () {",
  "mine",
  0
 ],
 [
  "public static void main () {\tint? dummy = null;",
  "hello",
  0
 ],
 [
  "w.writestartdocument();\tw.writestartelement(\"root\");\tw.writeendelement();\tw.writestring(\"top level text\");\t}\tcatch (invalidoperationexception e) {\tcerror.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "test failed at call result",
  1
 ],
 [
  "private async task batchrequestcancellationviaparametertestasync(methodinfo method, object o, timespan? clientrequesttimeoutviacustomtoken) {\tassert.notnull(clientrequesttimeoutviacustomtoken);\tusing (cancellationtokensource cancellationtokensource = new cancellationtokensource(clientrequesttimeoutviacustomtoken.value)) {\tbatchunittestcancellationexception e = await assert.throwsasync<batchunittestcancellationexception>( async () => await invokecancellationtokenmethodasync(method, o, cancellationtokensource.token));",
  "there were requests executed",
  0
 ],
 [
  "static void writehelp () {\tconsole.writeline ();\tconsole.writeline ();\tconsole.writeline ();\tconsole.writeline ();\tconsole.writeline ();",
  "error",
  1
 ],
 [
  "if (isinitialized) return;\tlock (initlock) {\tif (!isinitialized) {\ttry {\tisfullyinitialized = false;\tclient = clusterclient;\tclient.connect().getawaiter().getresult();\tisfullyinitialized = true;\t}\tcatch (exception exc) {",
  "added value retrieved value",
  1
 ],
 [
  "protected override void write (preal real) {",
  "test failed",
  1
 ],
 [
  "static void fixuppcltypeinfo (codecompileunit ccu) {\ttry {\tcodeobjectcreateexpression initexpr = getinitexpr (ccu);\tvar typeofexpr = (codepropertyreferenceexpression)initexpr.parameters [1];\ttypeofexpr.targetobject = new codemethodinvokeexpression (typeofexpr.targetobject, \"gettypeinfo\");\t} catch (exception ex) {",
  "end",
  1
 ],
 [
  "private static void printoutcertificate(certificatebundle certificatebundle) {",
  "certificate id",
  0
 ],
 [
  "public fixture() {\ttry {\tsqlserverstorage = relationalstoragefortesting.setupinstance(adonetinvariants.invariantnamesqlserver, testdatabasename).getawaiter().getresult();\t}\tcatch (exception ex) {",
  "failed to initialize sql server for relationalgeneraltests",
  0
 ],
 [
  "checktype (prop);\tthis.prop = prop;\tmainhbox = new gtk.hbox (false, 6);\tpackstart (mainhbox, false, false, 0);\tif (!prop.translatable) return;\tbutton = new gtk.button ();\ttry {\tglobe = gdk.pixbuf.loadfromresource (\"globe.png\");\tglobe_not = gdk.pixbuf.loadfromresource (\"globe-not.png\");\t} catch (exception e) {",
  "leaving thread",
  1
 ],
 [
  "private icollection getextendedproperties(icomponent comp, iextenderprovider[] providers) {\ttype componenttype = comp.gettype();",
  "invariantname",
  1
 ],
 [
  "}\tlong size = -1;\tdatetime start = datetime.utcnow;\ttry {\tsize = mget.get (url, savename);\t}\tcatch (exception e) {\tstatus++;\t}\tfinally {",
  "completed bytes in",
  0
 ],
 [
  "binaryserverformattersinkprovider serverprovider = new binaryserverformattersinkprovider(formatterprops, null);\tserverprovider.typefilterlevel = system.runtime.serialization.formatters.typefilterlevel.full;\tdisposerformattersinkprovider clientprovider = new disposerformattersinkprovider();\tclientprovider.next = new binaryclientformattersinkprovider(formatterprops, null);\tunixremotingfile = path.gettempfilename ();\tidictionary dict = new hashtable ();\tdict [\"portname\"] = path.getfilename (unixremotingfile);\tchannelservices.registerchannel (new ipcchannel (dict, clientprovider, serverprovider), false);\tch = channelservices.getchannel (\"tcp\");\tif (ch != null) {",
  "postecho url size web",
  1
 ],
 [
  "exceptiondispatchinfo exceptioninfo = exceptiondispatchinfo.capture(item.exception);\texceptioninfo.throw();\t}\t}\telse if (item.status == taskstatus.rantocompletion) {\tif (item.result.equals(liveconnectioninternal)) {\tif (!taskwithliveconnection) taskwithliveconnection = true;\t}\telse if (!item.result.equals(deadconnectioninternal) && !taskwithnewconnection) taskwithnewconnection = true;\t}",
  "did not throw exception",
  1
 ],
 [
  "public static void printfontinfo (font f) {",
  "font size in pixels",
  0
 ],
 [
  "lock (internalsyncobject) {\tinterestedcomponents = (eventloginternal[])info.listeningcomponents.toarray(typeof(eventloginternal));\t}\tfor (int i = 0; i < interestedcomponents.length; i++) {\ttry {\tif (interestedcomponents[i] != null) {\tinterestedcomponents[i].completioncallback(null);\t}\t}\tcatch (objectdisposedexception) {",
  "verifying default stopbits",
  1
 ],
 [
  "foreach (principal member in removedmembers) {\tdebug.assert(member.unpersisted == false);\tdebug.assert(member.contexttype == contexttype.domain || member.contexttype == contexttype.applicationdirectory);\tdebug.assert(members.cleared == false);\tif (!member.fakeprincipal && adutils.areprincipalsinsameforest(group, member)) {\tgroupde.properties[\"member\"].remove(member.distinguishedname);\t}\telse {\tstring membersiddn = getsidpathfromprincipal(member);\tif (membersiddn == null) throw new principaloperationexception(sr.adstorectxcouldntgetsidforgroupmember);",
  "adstorectx updategroupmembership remove via sid",
  0
 ],
 [
  "activedirectoryaccessrule allowselface = new extendedrightaccessrule( new maclprinc.securityidentifier(selfsddl), accesscontroltype.allow, s_changepasswordguid);\tactivedirectoryaccessrule allowworldace = new extendedrightaccessrule( new maclprinc.securityidentifier(worldsddl), accesscontroltype.allow, s_changepasswordguid);\tif (usercannotchangepassword) {\tif (!denyselffound) {\tadssecurity.addaccessrule(denyselface);\t}\tif (!denyworldfound) {\tadssecurity.addaccessrule(denyworldace);\t}\tif (allowselffound) {",
  "adstorectx cannotchangepwdtoldapconverter remove allow self",
  0
 ],
 [
  "if (values.count < 3) return ruleresult.success;\t#if debug log.writeline (this);\tlog.writeline (this, \"------------------------------------\");\tlog.writeline (this, type);\t#endif int numflags = 0;\tint nummasks = 0;\tforeach (ulong value in values) {\tif (ispoweroftwo (value)) ++numflags;\telse if (isbitmask (value)) ++nummasks;\t}",
  "do",
  1
 ],
 [
  "gc.waitforpendingfinalizers ();\tdumphandle (weak_track_handle, \"weak-track1\");\tt = new thread (createsecondbridge);\tt.start ();\tt.join ();\tgc.collect ();\tgc.waitforpendingfinalizers ();\tdumphandle (weak_track_handle, \"weak-track1\");\tdumphandle (weak_track_handle2, \"weak-track2\");\tif ((intptr)weak_track_handle == (intptr)weak_track_handle2) {",
  "switch type fullname",
  1
 ],
 [
  "try {\tdroptable (cnc);\t}\tcatch (sqlexception e) {\t}\ttry {\tcreatetable (cnc);\tinsertdata (cnc);\tupdatedata (cnc);\tinsertdata (cnc);",
  "ok",
  0
 ],
 [
  "xmlschemaattribute attribute = (xmlschemaattribute)derivedtype.attributeuses[attributebase.qualifiedname];\tif (attribute == null) {\tderivedtype.attributeuses.add(attributebase.qualifiedname, attributebase);\t}\telse {\tif (attributebase.use == xmlschemause.prohibited && attribute.use != xmlschemause.prohibited) {\t#if debug string position = string.empty;\tif (derivedtype.sourceuri != null) {\tposition = \" in \" + derivedtype.sourceuri + \"(\" + derivedtype.linenumber + \", \" + derivedtype.lineposition + \")\";\t}",
  "oncreated",
  1
 ],
 [
  "public static void main () {\tbitmap bmp = new bitmap (600, 500);\tgraphics dc = graphics.fromimage (bmp);\trectanglef[] rects = dc.clip.getregionscans (new matrix());\tfor (int i = 0; i < rects.getlength(0); i++) console.writeline (\"clip: \" + rects[i].tostring());",
  "principal save context move back failed",
  1
 ],
 [
  "static void help () {",
  "syntax check optional report syntax error found in list ignore file",
  0
 ],
 [
  "for (int i = 0; i < md.body.instructions.count; i ++) {\tinstruction ins = md.body.instructions[i];\tif (ins.opcode == opcodes.call) {\tmethoddefinition method_operand = ins.operand as methoddefinition;\tif (method_operand == null) continue;\tpinvokeinfo pinfo = method_operand.pinvokeinfo;\tif (pinfo == null) continue;\timportkey key = new importkey (pinfo.module.name, pinfo.entrypoint);\tif (imports.containskey (key)) {\tif (map.containskey (key)) {",
  "retargeting reference to method method",
  0
 ],
 [
  "public void at6_readblob() {\talltypes db = createdb();\tvar result = from p in db.othertypes orderby p.datetime select p.blob;\tforeach (var blob in result) {\t}",
  "partial class sr",
  1
 ],
 [
  "try {\timported_algenauxiliaryeffectslots = (delegate_algenauxiliaryeffectslots)marshal.getdelegateforfunctionpointer(al.getprocaddress(\"algenauxiliaryeffectslots\"), typeof(delegate_algenauxiliaryeffectslots));\timported_aldeleteauxiliaryeffectslots = (delegate_aldeleteauxiliaryeffectslots)marshal.getdelegateforfunctionpointer(al.getprocaddress(\"aldeleteauxiliaryeffectslots\"), typeof(delegate_aldeleteauxiliaryeffectslots));\timported_alisauxiliaryeffectslot = (delegate_alisauxiliaryeffectslot)marshal.getdelegateforfunctionpointer(al.getprocaddress(\"alisauxiliaryeffectslot\"), typeof(delegate_alisauxiliaryeffectslot));\timported_alauxiliaryeffectsloti = (delegate_alauxiliaryeffectsloti)marshal.getdelegateforfunctionpointer(al.getprocaddress(\"alauxiliaryeffectsloti\"), typeof(delegate_alauxiliaryeffectsloti));\timported_alauxiliaryeffectslotf = (delegate_alauxiliaryeffectslotf)marshal.getdelegateforfunctionpointer(al.getprocaddress(\"alauxiliaryeffectslotf\"), typeof(delegate_alauxiliaryeffectslotf));\timported_algetauxiliaryeffectsloti = (delegate_algetauxiliaryeffectsloti)marshal.getdelegateforfunctionpointer(al.getprocaddress(\"algetauxiliaryeffectsloti\"), typeof(delegate_algetauxiliaryeffectsloti));\timported_algetauxiliaryeffectslotf = (delegate_algetauxiliaryeffectslotf)marshal.getdelegateforfunctionpointer(al.getprocaddress(\"algetauxiliaryeffectslotf\"), typeof(delegate_algetauxiliaryeffectslotf));\t}\tcatch (exception e) {",
  "orleansazureweb onstop",
  1
 ],
 [
  "type gtd = typeof (a<>);\ttype oi = gtd.makegenerictype (gtd.getgenericarguments ());\tif (oi != gtd) {\treturn 1;\t}\tsetup ();\ttypebuilder tb = module.definetype (\"nullable`1\", typeattributes.public);\ttype[] args = tb.definegenericparameters (\"t\");\ttype type = tb.makegenerictype (args);\tif (type == tb) {",
  "call stored procedure sp with parameters",
  1
 ],
 [
  "break;\tcase callconversionoperation.opcode.return_signextended_integer_byvalue_from_localblock_x_pointer_y_of_size_z: {\t#if x86 callconverterthunk.setupcalleractualreturndata(locals.transitionblockptr);\tfixed (returnblock* retblk = &callconverterthunk.t_nonargregisterreturnspace) {\tcallconverterthunk.signextend(locals.getlocalblock(op.x).getrawmemorypointer()[op.y].topointer(), retblk, op.z);\t}\tlocals.intptrreturnval = callconverterthunk.returnintegerpointreturnthunk;\t#else byte* returnblock = locals.transitionblockptr + transitionblock.getoffsetofargumentregisters();\tcallconverterthunk.signextend(locals.getlocalblock(op.x).getrawmemorypointer()[op.y].topointer(), returnblock, op.z);\tlocals.intptrreturnval = callconverterthunk.returnintegerpointreturnthunk;",
  "signextend bytes from to return block",
  0
 ],
 [
  "var indent = createengine(@\" namespace foobar {\tclass foo {\tvoid bar () {\tsystem.console.writeline ();\t}\t$ }\t}\t\", out sourcetext);\titextpastehandler handler = createtextpasteindentengine(indent, formattingoptionsfactory.createmono());\tvar text = handler.formatplaintext(sourcetext, indent.offset, \"void bar ()\\n{\\nsystem.console.writeline ();\\n}\", null);",
  "can t get recent files list",
  1
 ],
 [
  "m_xsltarg.addparam(\"myarg5\", szempty, bt);\tm_xsltarg.removeparam(\"myarg5\", szempty);\tretobj = m_xsltarg.getparam(\"myarg5\", szempty);\tif (retobj != null) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg2\", szempty, (int16)i);\tm_xsltarg.removeparam(\"myarg2\", szempty);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (retobj != null) {",
  "failed to remove",
  0
 ],
 [
  "if (s8.f1 != 1+9) {\treturn 1;\t}\tif (s8.f2 != 2+9) {\treturn 2;\t}\tif (s8.f3 != 3+9) {\treturn 3;\t}\tif (s8.f4 != 4+9) {",
  "got but expected",
  0
 ],
 [
  "public async task<int> run (string[] arguments) {\tdesktopservice.initialize ();\tforeach (string s in arguments) readargument (s);\tif (help) {",
  "p project project name of the project to build",
  0
 ],
 [
  "if (d0.field != 14) ispass &= false;\td1[0] = 0;\tif (d1.field != 14) ispass &= false;\ttry {\td0.myproperty2 = 0;\tispass &= false;\t}\tcatch (microsoft.csharp.runtimebinder.runtimebinderexception ex) {\tret = errorverifier.verify(errormessageid.inaccessiblesetter, ex.message, \"myclass.myproperty2\");\tif (!ret) {",
  "error message is wrong",
  0
 ],
 [
  "public static int test_0_main_thread_priority () {\tif (thread.currentthread.managedthreadid != mainthreadid) {\treturn 1;\t}\tvar before = thread.currentthread.priority;\tif (before != threadpriority.normal) return 2;",
  "setting main thread s priority to abovenormal",
  0
 ],
 [
  "private static bool callsecondinterfaceinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturndynamicinterface();\tif ((!(bool)(s.instancemethod().instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "the p option can only be used when exporting a solution",
  1
 ],
 [
  "public void run(ilist<string> filelist) {\tbool didloadsolutionorfile = false;\tnavigationservice.suspendlogging();\tforeach (string file in filelist) {",
  "open file",
  0
 ],
 [
  "static void run() {\tprocess proc = new process();\tbool ret;\tproc.startinfo.filename=\"wibble\";\tproc.startinfo.arguments=\"arg1    arg2\\targ3 \\\"arg4a arg4b\\\"\";\tproc.startinfo.useshellexecute=false;\tret=proc.start();",
  "did not throw argumentnullexception",
  1
 ],
 [
  "stringwriter expected = new stringwriter ();\texpected.writeline (\"\");\texpected.writeline (\"  -p, --indicator-style=value\");\texpected.writeline (\"      --color[=value]        controls color info\");\texpected.writeline (\"      --color2[=color]       set color\");\texpected.writeline (\"      --rk=value1:value2     required key/value option\");\texpected.writeline (\"      --rk2=key:value        required {foo} key/value option\");\texpected.writeline (\"      --rk3=value            required {foo}\");\texpected.writeline (\"      --rk4=val              required {foo} val\");\texpected.writeline (\"      --ok[=value1:value2]   optional key/value option\");",
  "item",
  0
 ],
 [
  "public void testwithcomment() {",
  "default named column added",
  1
 ],
 [
  "private void generatecompileunitstart(codecompileunit e) {\tif (e.startdirectives.count > 0) {\tgeneratedirectives(e.startdirectives);\t}",
  "output writeline sr autogen comment",
  0
 ],
 [
  "public static void buildclient (servicedata sd) {\tstring file = getclientfile (sd);\tif (file.exists (file)) return;\tcreatefolderforfile (file);\tstreamwriter sw = new streamwriter (file);",
  "using system",
  0
 ],
 [
  "private void detach() {",
  "wde debugcontroller detach",
  0
 ],
 [
  "featuretarget target = options.target;\tstring[] commandarguments = options.plainarguments;\tstring configname, targetpath;\tif (commandarguments.length < 2) {\tswitch (target) {\treturn 1;\tcase featuretarget.web: configname = \"web.config\";\tbreak;\tcase featuretarget.application: configname = \"application.exe.config\";\tbreak;",
  "test failed",
  1
 ],
 [
  "using (xmlwriter w = createwriter(doc)) {\ttry {\tw.writestartelement(\"root\");\tw.writeattributestring(\"xmlns\", \"xmlns\", null, \"test\");\t}\tcatch (argumentexception) {\ttestlog.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "try {\ttestoutput remoteoutput = (testoutput) ad.createinstanceandunwrap( typeof (testoutput).assembly.fullname, \"testoutput\");\tremoteoutput.throwunserializable ();\t} catch (serializationexception) {\t} catch (exception) {\tenvironment.exit (1);\t} finally {\tif (original_domain != appdomain.currentdomain.friendlyname) environment.exit (2);\tappdomain.unload (ad);\t}",
  "scenario current drive is mounted on current directory",
  1
 ],
 [
  "for (int i = 0; i < 50; i++) {\tcloudtask curtask = new cloudtask(\"bug957878-task-\" + i.tostring(), \"hostname\");\tthejob.addtask(curtask);\tnumtaskscreated++;\t}\tint numtasksseen = 0;\tbug957878replacementinterceptorbox box0 = new bug957878replacementinterceptorbox(this.testoutputhelper);\tforeach (cloudtask curtask in thejob.listtasks(additionalbehaviors: new[] {\tnew microsoft.azure.batch.protocol.requestreplacementinterceptor(box0.bug957878requestreplacementinterceptoropcontextfactory)})) {\tnumtasksseen++;",
  "error unknown argument",
  1
 ],
 [
  "public static void usage (string error) {",
  "copyright c novell",
  0
 ],
 [
  "static void dumpstuff () {",
  "frompage",
  1
 ],
 [
  "public static void main(string[] args) {\tconst int iterations = 10000;\ttest test = new test ();\tdatetime start = datetime.now;\tconsole.write (\"calling test.donothing<program>() on an object reference...  \");\tfor (int i = 0; i < iterations; ++i) {\ttest.donothing<program> ();\t}\tdatetime end = datetime.now;\ttimespan duration = end - start;",
  "in outer",
  1
 ],
 [
  "protected override void generatenamespaceend(codenamespace e) {\tif (!string.isnullorempty(e.name)) {\tindent--;",
  "div",
  1
 ],
 [
  "public void bytestowritesuccessive() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tasyncwriterndchararray asyncwriterndchararray = new asyncwriterndchararray(com, char_size_bytes_to_write);\tvar t1 = new task(asyncwriterndchararray.writerndchararray);\tvar t2 = new task(asyncwriterndchararray.writerndchararray);",
  "verifying bytestowrite with successive calls to write",
  0
 ],
 [
  "if (item == string.empty) continue;\tstring[] pieces = item.trim ().split (new char[] { '=' }, 2);\tif(pieces.length == 1) asm_info [\"assembly\"] = pieces [0];\telse asm_info [pieces[0].trim ().tolower (cultureinfo.invariantculture)] = pieces [1];\t}\tstring assembly_name = (string) asm_info [\"assembly\"];\tstring asmdir = path.combine (gacdir, assembly_name);\tif (!directory.exists (asmdir)) {\tif (listmode) {\tfailures++;",
  "assembly",
  0
 ],
 [
  "static void help (string details) {\tswitch (details) {\tbreak;\tbreak;",
  "error from readeventlog is",
  1
 ],
 [
  "public void databits_neg1() {",
  "tests failed passed",
  1
 ],
 [
  "public bool checkdigest() {\tbyte[] computeddigest = computedigest();\tbool result = cryptohelper.isequal(computeddigest, getdigestvalue());",
  "checking digest for reference result",
  0
 ],
 [
  "var filename = path.getfilename(assembly);\tconsole.writeline(\"\\t{0} => {1}\", filename, assembly);\tif (filename != null && filename.equals(codegenerator.orleansassemblyfilename)) referencesorleans = true;\t}\tvar stopwatch = stopwatch.startnew();\tif (referencesorleans) {\tif (!codegenerator.generatecode(options)) {\t}\t}\telse {",
  "getphysicaladdress",
  1
 ],
 [
  "uint cliheaderstart = pointertorawdata + (cliheaderrva - virtualaddress);\tf.position = cliheaderstart + 16;\tint runtimeflags = r.readint32();\tif ((runtimeflags & 2) == 2) {\treturn false;\t} else {\treturn true;\t}\t}\t}",
  "exception not generated for null parameter name",
  1
 ],
 [
  "public bool oncreatenewwindow () {\tbool ret = false;\t#if debug ongeneric (\"oncreatenewwindow\");",
  "oncreatenewwindow",
  0
 ],
 [
  "public static int[] throwanexception ()   {\tint[] arr = new int [10];\tint k = arr [11];",
  "test failed",
  0
 ],
 [
  "int pos=req.indexofany(new char[]{' '});\tif(pos>=0) {\treq=req.remove(pos, req.length-pos);\t}\tpos=req.lastindexof('.');\tstring filetype;\tif (pos != -1) filetype=req.substring(pos);\telse filetype = \"\";\tstring mime_type = (string) mime_types [filetype];\tif (mime_type == null) mime_type = \"text/plain\";",
  "unhandled exceptions",
  1
 ],
 [
  "public void charencoding() {\tstring chars = \"\\u1234 \\u4567 \\uabcd \\r \\n \\t \\\\ \\\" \\' \\0 \\u2028 \\u2029 \\u0084 \\u0085 \\u00010f00\";\tvar main = new codeentrypointmethod();",
  "writeline",
  0
 ],
 [
  "case \"-?\": help ();\treturn 0;\t}\t}\tif (!file.exists (tbsfilename)) {\treturn 1;\t}\tif (sign) {\trsa rsa = getprivatekey (pvkfilename, csp);\tif (rsa == null) {",
  "t url timestamp service http url",
  1
 ],
 [
  "private static void printoutstorageaccount(storagebundle storagebundle) {",
  "error while adding diagnostic analyzer type from assembly asm fullname",
  1
 ],
 [
  "}\tcatch {\treturn;\t}\tstring currentwsdl = \"\";\thttpwebrequest myreq = (httpwebrequest) webrequest.create (getmexendpoint () + \"?wsdl\");\twebresponse response = myreq.getresponse ();\tstream receivestream = response.getresponsestream ();\tencoding encode = global::system.text.encoding.getencoding (\"utf-8\");\tstreamreader readstream = new streamreader (receivestream, encode);",
  "response stream received",
  0
 ],
 [
  "datacolumn = _tablemapping.getdatacolumn(_fieldnames[sortedindex], fieldtype, _datatable, mappingaction, schemaaction);\t}\tstring basetable = /*schemarow.baseservername+schemarow.basecatalogname+schemarow.baseschemaname+*/ schemarow.basetablename;\tif (null == datacolumn) {\tif (null == columnindexmap) {\tcolumnindexmap = createindexmap(schemarows.length, unsortedindex);\t}\tcolumnindexmap[unsortedindex] = -1;\tif (schemarow.iskey) {\t#if debug if (adapterswitches.dataschema.traceverbose) {",
  "setupschema partial primary key detected",
  0
 ],
 [
  "if (diff != null) {\tstring diffhtml = string.empty;\tusing (var writer = new stringwriter ()) {\tstate.output = writer;\tac.compare ();\tdiffhtml = state.output.tostring ();\t}\tif (diffhtml.length > 0) {\tusing (var file = new streamwriter (diff)) {\tif (state.colorize) {",
  "change from to",
  1
 ],
 [
  "static void retrieverevisionnumber() {\tif (revisionnumber == null) {\tif (directory.exists(\".git\")) {\ttry {\treadrevisionnumberfromgit();\treadbranchnamefromgit();\t} catch (exception ex) {\tconsole.writeline(ex.tostring());\t}\t} else {",
  "there s no git working copy in",
  0
 ],
 [
  "thread.sleep(trigering_events_wait_time);\tcom1.databits = 8;\tcom1.parity = parity.none;\tcom2.basestream.write(new byte[] { 40 }, 0, 1);\tthread.sleep(trigering_events_wait_time);\tcom1.databits = 7;\tcom1.parity = parity.none;\tcom2.basestream.write(new byte[] { 0x01 }, 0, 1);\tthread.sleep(trigering_events_wait_time);\tcom2.rtsenable = true;",
  "pinchange triggered",
  0
 ],
 [
  "private static bool test9() {\tchar a = 'a';\tdynamic b = a;\t++b;\tif (b == 'b') return true;",
  "codemethodreturnstatement",
  1
 ],
 [
  "public void canwrite_open_close() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tcom.open();\tstream serialstream = com.basestream;\tcom.close();",
  "verifying canwrite property throws exception after open then close",
  0
 ],
 [
  "try {\tthrow new exception ();\t} catch (exception e) {\tone = true;\tthrow;\t}\t} catch {\ttwo = true;\t}\tif (one && two){",
  "could not remove dependency",
  1
 ],
 [
  "else if (e.privateimplementationtype != null) {\toutput.write(\" implements \");\toutputtype(e.privateimplementationtype);\toutput.write(\".\");\toutputidentifier(propname);\t}\toutput.writeline(\"\");\tif (!c.isinterface && (e.attributes & memberattributes.scopemask) != memberattributes.abstract) {\tindent++;\tif (e.hasget) {",
  "actual exception",
  1
 ],
 [
  "break;\t}\t}\tevents.firetestloadfailed( testfilename, lastexception );\t}\tcatch( exception exception ) {\tlastexception = exception;\tevents.firetestloadfailed( testfilename, exception );\t}\tdouble loadtime = (double)(datetime.now.ticks - starttime) / (double)timespan.tickspersecond;",
  "at",
  1
 ],
 [
  "public static void runcontinuewithbase_exceptioncases( taskcontinuationoptions options, action initran, func<task, task> continuationmaker, func<bool> ranvalue, bool taskisfuture) {",
  "press any key to exit",
  1
 ],
 [
  "public static void checkimporterrors (wsdlimporter importer, testlabel label) {\tbool founderrors = false;\tforeach (var error in importer.errors) {",
  "processing handshake record",
  1
 ],
 [
  "schemaelementdecl currentelementdecl = context.elementdecl;\tstring localname = context.localname;\tstring namespaceuri = context.namespace;\tfor (int i = this.startidconstraint; i < this.validationstack.length; i ++) {\tif (((validationstate)(this.validationstack[i])).constr == null) {\tcontinue;\t}\tconstraintstruct[] constraintstructures = ((validationstate)this.validationstack[i]).constr;\tfor (int j = 0; j < constraintstructures.length; ++j) {\tif (constraintstructures[j].axisselector.movetostartelement(localname, namespaceuri)) {",
  "selector match",
  0
 ],
 [
  "public void loadproviders () {\tstring config_dir = environment.getfolderpath (environment.specialfolder.applicationdata);\tstring monodoc_dir = system.io.path.combine (config_dir, \"monodoc\");\tstring settings_file = system.io.path.combine (monodoc_dir, \"providers.xml\");\txmlserializer ser = new xmlserializer (typeof (providers));\tproviders p;\tif (file.exists (settings_file)) p = (providers) ser.deserialize (new xmltextreader (settings_file));\telse {",
  "format is",
  0
 ],
 [
  "public void parityerroronlastbyte() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (serialport com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\trandom rndgen = new random(15);\tbyte[] bytestowrite = new byte[numrndbytesparity];\tchar[] expectedchars = new char[numrndbytesparity];",
  "verifying default parityreplace byte with a parity errro on the last byte",
  0
 ],
 [
  "static void refcursortest2(oracleconnection con) {\toraclecommand cmd = new oraclecommand();\tcmd.connection = con;\tcmd.commandtext = \"call curspkg_join.open_join_cursor1(:n_empno,:io_cursor)\";",
  "test failed at call result",
  1
 ],
 [
  "private ruleresult checkmethodunsafe (methoddefinition method) {\tlocals.clear ();\tstack.clear ();",
  "ok",
  1
 ],
 [
  "public static void createlinenumbertestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<?xml version=\\\"1.0\\\" ?>\");\ttw.writeline(\" <element a0='a0&e1;v' a1='a1value' a2='a2&e1;v'><embedded /></element>\");\ttw.writeline(\"<?pi1?>\");",
  "skip",
  0
 ],
 [
  "static void main (string[] args) {\tvar failcount = 0;\ttry {\tvar a = new correctcasefriendassembly.publicclass ();\ta.internalmethod ();\t} catch (memberaccessexception) {\tfailcount += 1;\t}\ttry {\tvar a = new correctcasefriendassembly.internalclass(@private: false);",
  "static void icall trampoline dispatch const char cookie void target func interpmethodarguments margs",
  1
 ],
 [
  "static void run() {\tprocess proc = new process();\tbool ret;\tproc.startinfo.filename=\"wibble\";\tproc.startinfo.arguments=\"arg1    arg2\\targ3 \\\"arg4a arg4b\\\"\";\tproc.startinfo.useshellexecute=false;\tret=proc.start();\tproc.waitforexit();",
  "process started at",
  0
 ],
 [
  "assert.true(task2.status == taskstatus.rantocompletion, \"    > failed.  task w/ uncanceled token did not end in rantocompletion state.\");\ttask<int> future2 = task.run(() => 27, token);\tfuture2.wait();\tassert.true(future2.result == 27, \"    > failed.  future w/ uncanceled token completed but did not run.\");\tassert.true(future2.status == taskstatus.rantocompletion, \"    > failed.  future w/ uncanceled token did not end in rantocompletion state.\");\ttask2 = task.run(() => { return task.run(() => { count = 31; }); }, token);\ttask2.wait();\tassert.true(count == 31, \"    > failed.  task(unwrapped) w/ uncanceled token completed but did not run.\");\tassert.true(task2.status == taskstatus.rantocompletion, \"    > failed.  task(unwrapped) w/ uncanceled token did not end in rantocompletion state.\");\tfuture2 = task.run(() => task.run(() => 37), token);",
  "runruntests waiting for a future unwrapped w uncanceled token if we hang something went wrong",
  0
 ],
 [
  "indent++;\tgeneratevbstatements(current.statements);\tindent--;\t}\tcodestatementcollection finallystatements = e.finallystatements;\tif (finallystatements.count > 0) {\tindent++;\tgeneratevbstatements(finallystatements);\tindent--;\t}",
  "end try",
  0
 ],
 [
  "if (detailed) {\t}\twriteline ();\twriteline (\"-?\");\twriteline ();\tif (!detailed) return;\twriteline ();\twriteline ();\twriteline ();\twriteline ();",
  "start",
  1
 ],
 [
  "public void add(intptr handle) {\tlock (this) {\tint hash = computehash(handle);\tif (compmodswitches.handleleak.level >= tracelevel.info) {\tdebug.writeline(\"-------------------------------------------------\");",
  "handle type",
  0
 ],
 [
  "if (null == mdis) {\t}\telse {\tlist<metadataitem> meta = new list<metadataitem>(curwi.metadata);\t}\t}\tschedule sched = curwi.schedule;\tif (null == sched) {\t}\telse {",
  "failed to add get a value for of type boolean",
  1
 ],
 [
  "public static void registerremotingchannel () {\tif (!channelregistered) {\tchannelregistered = true;\tidictionary formatterprops = new hashtable ();\tformatterprops [\"includeversions\"] = false;\tformatterprops [\"strictbinding\"] = false;\tichannel ch = channelservices.getchannel (\"ipc\");\tif (ch != null) {",
  "ipc channel already registered an add in may have registered it",
  0
 ],
 [
  "static void main () {\tdispatcher d = dispatcher.currentdispatcher;\taction a = delegate {\tobject x = d;\td.invoke (dispatcherpriority.normal, new action (mine));\t};\td.begininvoke (dispatcherpriority.normal, (action) delegate {",
  "chars xxx pi yyy zzz chars",
  1
 ],
 [
  "public longconstructorwithreadonlyfields () {\tfoo = 5;\tbar = \"mystring\";\tbaz = new object ();",
  "ok",
  1
 ],
 [
  "public void handshake_none_afteropen() {",
  "plog process ps plog",
  1
 ],
 [
  "outputline (@\"       \\close to close the connection\");\toutputline (@\"       \\e to execute sql query (select)\");\toutputline (@\"       \\h to show help (all commands).\");\toutputline (@\"       \\defaults to show default variables.\");\toutputline (\"\");\t}\tpublic void showhelp () {\tconsole.writeline (\"\");\tif (!waitforenterkey ()) return;\tif (!waitforenterkey ()) return;",
  "loadextprovider assembly class to load the provider",
  0
 ],
 [
  "protected void verifyendoftransmit (memorystream ms) {\tif (ms.position == ms.length) return;\tbyte [] bytes = new byte [ms.length - ms.position];\tms.read (bytes, 0, bytes.length);\tforeach (byte b in bytes) console.write (\"{0:x02} \", b);",
  "total bytes remained",
  0
 ],
 [
  "private exception throwunexpectedtoken(binxmltoken token) {",
  "file not found required for exception template",
  1
 ],
 [
  "connections = new oracleconnection[maxcon];\tfor (i = 0; i < maxcon; i++) {\tconnections[i] = new oracleconnection(constr);\tconnections[i].open ();\t}\tt = new thread(new threadstart(anotherthreadproc));\tt.start ();\tthread.sleep(100);\tfor (i = 0; i < maxcon; i++) {\tif (connections[i] != null) {",
  "close connection",
  0
 ],
 [
  "timespan duration = endtime.subtract(starttime);\ttaskcompletionsource.setresult(duration);\t});\tcancellationduration = await taskcompletionsource.task;\ttoken.throwifcancellationrequested();\treturn new azureoperationresponse<protocol.models.cloudjob, protocol.models.jobgetheaders>() { body = new protocol.models.cloudjob() };\t};\t});\tawait assert.throwsasync<operationcanceledexception>(async () => await client.joboperations.getjobasync(\"dummy\", additionalbehaviors: new list<batchclientbehavior> { requestinterceptor }));\t}",
  "test failed at call result",
  1
 ],
 [
  "static void usage () {",
  "finally",
  1
 ],
 [
  "try {\ttry {\t} finally {\thandle.set ();\tsleeploop ();\tfinally_done = true;\t}\tresult |= 0x10;\t} catch (exception e) {\tif (!(e is threadabortexception)) result |= 0x4;",
  "caught a while on res",
  0
 ],
 [
  "static assembly myresolveeventhandler (object sender, resolveeventargs args) {\tevent_handler_count++;",
  "resolve assembly",
  0
 ],
 [
  "public void test_eventsource_shutdownmanifest() {\ttestutilities.checknoeventsourcesrunning(\"start\");\toverflowcircularbuffertest();",
  "bit autodetection for",
  1
 ],
 [
  "public override string tostring() {\tstringwriter writer = new stringwriter(cultureinfo.invariantculture);",
  "namespace",
  1
 ],
 [
  "public static int main() {\tif (!test_1 ()) return 1;\tif (!test_2 ()) return 2;\tif (!test_3 ()) return 3;\tif (!test_4 ()) return 4;\tif (!test_5 ()) return 5;\tif (test_6 () != 1) return 6;",
  "string",
  1
 ],
 [
  "public void inoutbufferfilled_flush_cycle() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (serialport com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\tasyncwriterndbytearray asyncwriterndbytearray = new asyncwriterndbytearray(com1, default_buffer_size);\tvar t1 = new task(asyncwriterndbytearray.writerndbytearray);\tvar t2 = new task(asyncwriterndbytearray.writerndbytearray);\tbyte[] xmitbytes = new byte[default_buffer_size];",
  "verifying call flush method after input and output buffer has been filled discarded and filled again",
  0
 ],
 [
  "public void elemnamespace_1(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writeattributestring(\"xmlns\", \"x\", null, \"foo\");\tw.writeattributestring(\"xmlns\", \"x\", null, \"bar\");\t}\tcatch (xmlexception e) {",
  "verifying true dtrenable after open",
  1
 ],
 [
  "private void checkdisposed() {\tif (_disposed) {",
  "trackedcollectionenumerator checkdisposed accessing disposed object",
  0
 ],
 [
  "private static void loadoptionlist(intptr ppd, string option_name, namevaluecollection list, out string defoption) {\tintptr ptr = intptr.zero;\tppd_option ppd_option;\tppd_choice choice;\tint choice_size = marshal.sizeof(typeof(ppd_choice));\tdefoption = null;\tptr = libcupsnative.ppdfindoption(ppd, option_name);\tif (ptr != intptr.zero) {\tppd_option = (ppd_option)marshal.ptrtostructure(ptr, typeof(ppd_option));",
  "option key def text",
  0
 ],
 [
  "public void initializecomponent () {",
  "i m writting a test and i will fill a screen with some useless code",
  0
 ],
 [
  "private static bool test2() {\tdynamic d1 = false;\tishit = false;\tif (d1 && boolvalue) {\treturn false;\t}\telse {\tif (ishit) {",
  "trying library name",
  1
 ],
 [
  "public void basictest_getipv4interfacestatistics_success() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipv4interfacestatistics stats = nic.getipv4statistics();",
  "ok",
  1
 ],
 [
  "private static void writesummaryreport( resultsummarizer summary ) {",
  "no graph data file supplied driver cannot run",
  1
 ],
 [
  "s3.f2 = 2;\ts3.f3 = 3;\ts3 = mono_return_int3(s3, 906);\tif (s3.f1 != 1+906) {\treturn 1;\t}\tif (s3.f2 != 2+906) {\treturn 2;\t}\tif (s3.f3 != 3+906) {",
  "finished creating shared objects",
  1
 ],
 [
  "protected override void write (pstring str) {",
  "string string",
  0
 ],
 [
  "public void cancel () {\tcanceled = true;",
  "process ps cancel",
  0
 ],
 [
  "}\t} catch (exception ex) {\tif (isvalid) {\tif (stoponerror) throw;\tfailure++;\t} else {\tsuccess++;\t}\t}\t}",
  "total failure",
  0
 ],
 [
  "private static bool test1() {\tobject[] objectvalues = new object[]\t{\t10, 10l, \"10\" }\t;\tforeach (object a2 in objectvalues) {\tdynamic d2 = a2;\tif ((\"abc\" + d2) != (\"abc\" + 10)) {",
  "sn strongname signing options",
  1
 ],
 [
  "string code = {\tpublic void main(string[] args) {\ttry {\t} catch (exception name) }\t}\";\tvar unit = syntaxtree.parse(code);\tvar type = unit.members.first() as typedeclaration;\tvar method = type.members.first() as methoddeclaration;\tbool passed = method.body.statements.firstordefault() is trycatchstatement;\tif (!passed) {",
  "item",
  1
 ],
 [
  "public void initializecomponent () {",
  "ok",
  1
 ],
 [
  "private void checkmethod_anonymousok2 () {\tcallbackdelegate a = delegate () { };\tcallbackdelegate b = delegate () {\ttry {",
  "exception",
  1
 ],
 [
  "public void loadgeneric1(inputtype inputtype, readertype readertype) {\ttry {\tloadxsl(null, inputtype, readertype);\t}\tcatch (system.argumentexception) {\treturn;\t}",
  "exception not generated for null parameter name",
  0
 ],
 [
  "public bool run() {\tbool ok = false;\ttry {\tsilohost.initializeorleanssilo();\tok = silohost.startorleanssilo();\tif (ok) {",
  "tr",
  1
 ],
 [
  "public static int main(string[] args) {\tint num = 8;\tif (args.length > 0) num = system.int32.parse (args [0]);",
  "ack",
  0
 ],
 [
  "private static bool callsecondinterfaceinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tif ((!(bool)(firstclassreturndynamicinterface.staticmethod().instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "joboperations joboperations = batchcli.joboperations;\tstring jobid = microsoft.azure.batch.constants.defaultconvenienceprefix + testutilities.getmyname() + \"-bug1501413testgetnodefilebytask\";\ttry {\tcloudjob job = joboperations.createjob(jobid, new poolinformation());\tjob.poolinformation = new poolinformation() {\tpoolid = this.poolfixture.poolid };\tjob.commit();\tcloudjob boundjob = joboperations.getjob(jobid);\tconst string taskid = \"t1\";\tconst string taskmessage = \"this is a test\";",
  "test failed at call result",
  1
 ],
 [
  "public static void checkfontproperties() {\tfont f = new font(\"arial\",12);\tf = new font(\"verdana\", 12);\tf = new font(\"courier new\", 12);",
  "useparameters true false to use parameters when executing sql",
  1
 ],
 [
  "public resourceresolveresult resolve(string filename, idocument document, int caretline, int caretcolumn, char? chartyped) {\tif (filename == null || document == null) {\treturn null;\t}\tif (caretline < 0 || caretcolumn < 0 || caretline >= document.totalnumberoflines || caretcolumn >= document.getline(caretline + 1).totallength) {",
  "verifying default writetimeout with write char buffer int offset int count",
  1
 ],
 [
  "if (si != null) {\tvar ti = target.element (\"classes\");\tkcomparer = new nestedclasscomparer ();\tkcomparer.compare (si.elements (\"class\"), ti == null ? null : ti.elements (\"class\"));\t}\tvar s = (output as stringwriter).tostring ();\tstate.output = output;\tif (s.length > 0) {\tvar tn = gettypename (target);\toutput.writeline (s);",
  "div end type",
  0
 ],
 [
  "private void thread_func() {\tlocaldatastoreslot namedslot=thread.getnameddataslot(\"data-slot\");\tthread thr=thread.currentthread;",
  "database exception",
  1
 ],
 [
  "static void readsimpletest(oracleconnection con, string selectsql) {\toraclecommand cmd = null;\toracledatareader reader = null;\tcmd = con.createcommand();\tcmd.commandtext = selectsql;\treader = cmd.executereader();",
  "nowp nowrappedproxy generate a wrapped proxy",
  1
 ],
 [
  "if (mdarraynewtypescount[i] == 0) continue;\tvar mdarraycache = typesystemcontext.getarraytypescache(true, i);\tmdarraycache.reserve(mdarraycache.count + mdarraynewtypescount[i]);\t}\t}\ttypesystemcontext.pointertypescache.reserve(typesystemcontext.pointertypescache.count + newpointertypescount);\ttypesystemcontext.byreftypescache.reserve(typesystemcontext.byreftypescache.count + newbyreftypescount);\tregistergenerictypesandmethods();\tfor (int i = 0; i < _typesthatneedtypehandles.count; i++) {\t_typesthatneedtypehandles[i].setruntimetypehandleunsafe(_typesthatneedtypehandles[i].gettypebuilderstate().halfbakedruntimetypehandle);",
  "successfully registered type",
  0
 ],
 [
  "public void testcase3() {\ttest<stringcompareisculturespecificissue>(@\" class test {\tvoid foo () {",
  "foo bar",
  0
 ],
 [
  "class bar {\toverride foo }\tpublic foo () {\t}\t}\";\tvar unit = syntaxtree.parse(code);\tvar type = unit.members.first() as typedeclaration;\tvar constructor = type.members.skip(1).first() as constructordeclaration;\tvar passed = !constructor.hasmodifier(modifiers.override);\tif (!passed) {",
  "adding to the set",
  1
 ],
 [
  "cancellationtoken token = new cancellationtoken();\tif (_tasktype == tasktype.task) _task = task.factory.startnew(work, token, taskcreationoptions.none, tm);\telse if (_tasktype == tasktype.futuret) _task = task<double>.factory.startnew(futurework, token, taskcreationoptions.none, tm);\telse if (_tasktype == tasktype.future) _task = task.factory.startnew<double>(futurework, token, taskcreationoptions.none, tm);\tassert.true(false, string.format(\"able to pass {0} taskmanager to startnew() on {1}, when expecting exception\", tminvalidmessage, _tasktype));\t}\tcatch (argumentnullexception) {\telse throw;\t}\tcatch (invalidoperationexception) {",
  "end sub",
  1
 ],
 [
  "}\tif (currentparsemode == parsemode.returntypes) {\tthunkreturntypes[t.thunktypename] = t;\t}\tbreak;\tcase parsemode.functions: functions.add(new functiondecl(currentline, thunkreturntypes, thunktypes));\tbreak;\t}\t}\tcatch (exception e) {",
  "validation failed",
  1
 ],
 [
  "thread othermain=thread.currentthread;\tthread.sleep(0);\tif(monitor.tryenter(thr, 100)==true) {\tmonitor.exit(thr);\t} else {\t}\tthread.setdata(slot, main);\tthread storedthr=(thread)thread.getdata(slot);\tthread.setdata(namedslot, main);\tstoredthr=(thread)thread.getdata(namedslot);",
  "stored subthread is",
  0
 ],
 [
  "}\tforeach (string s in arguments) {\tif (s == \"--simple-makefiles\" || s == \"-s\") {\tgenerateautotools = false;\t} else if (s.startswith (\"-d:\")) {\tif (s.length > 3) defaultconfig = s.substring (3);\t} else if (s [0] == '-') {\treturn 1;\t} else {\tif (filename != null) {",
  "xmlschemacollectionschema",
  1
 ],
 [
  "else {\tbool exceptionfound = false;\ttype actualexceptiontype = e.gettype();\tfor (int i = 0; i < expectedexceptions.length; ++i) {\tif (actualexceptiontype == expectedexceptions[i]) {\texceptionfound = true;\tbreak;\t}\t}\tif (exceptionfound) {",
  "caught expected exception",
  0
 ],
 [
  "private void writeheader() {",
  "copyright c microsoft corporation all rights reserved",
  0
 ],
 [
  "private void read(string filename) {\txmlserializer ser=new xmlserializer(typeof(purchaseorder));\tfilestream fs=new filestream(filename, filemode.open);\tpurchaseorder po;\tpo=(purchaseorder)ser.deserialize(fs);\tfs.close();\tforeach(item item in po.itemsordered) {",
  "exception invoking name property",
  1
 ],
 [
  "public void emitsource() {",
  "pragma warning disable",
  0
 ],
 [
  "static void main () {",
  "hello",
  1
 ],
 [
  "public static int main(string[] args) {\tfirstouter.firstinner.first v1 = new firstouter.firstinner.first();\tfirstouter.second v2 = new firstouter.second();\tfirstouter.secondinner.third v3 = new firstouter.secondinner.third();\tfirstouter.firstinner.fourth v4 = new firstouter.firstinner.fourth();\tfifth v5 = new fifth();",
  "is",
  0
 ],
 [
  "var stopper = monitor.cancellationtoken.register (oper.cancel);\tawait oper.task;\tstopper.dispose ();\tif (oper.exitcode != 0) {\tmonitor.reporterror (gettextcatalog.getstring (\"custom command failed (exit code: {0})\", oper.exitcode), null);\t}\t} catch (win32exception w32ex) {\tmonitor.reporterror (gettextcatalog.getstring (\"failed to execute custom command '{0}': {1}\", cmd.command, w32ex.message), null);\treturn false;\t} catch (exception ex) {",
  "could not queue package for installation",
  1
 ],
 [
  "return 1;\t}\tresourceinfo resinf = new resourceinfo ();\tif (compilemultiple) {\tstring [] pair = args [i].split (',');\tswitch (pair.length) {\tcase 1: resinf.inputfile = path.getfullpath (pair [0]);\tresinf.outputfile = path.changeextension (resinf.inputfile, \"resources\");\tbreak;\tcase 2: if (pair [1].length == 0) {",
  "infile txt outfile resources",
  0
 ],
 [
  "public void testremovebracesfromforeach() {\ttest<removebracesaction>(@\"class testclass {\tvoid test () {\t$foreach (var a in b) {\t}\t}\t}\", @\"class testclass {\tvoid test () {",
  "total elapsed time",
  1
 ],
 [
  "await boundjob.addtaskasync( taskstoadd, paralleloptions: paralleloptions, filestagingartifacts: filestagingartifacts, timeout: timeout, additionalbehaviors: behaviors).configureawait(continueoncapturedcontext: false);\t}\tstopwatch.stop();\tif (lastfilestostagelist != null) {\ttestutilities.assertthrows<invalidoperationexception>(() => lastfilestostagelist.add(new filetostage(\"test\", null)));\t}\tlist<cloudtask> tasksfromservice = await joboperations.listtasks(jobid).tolistasync().configureawait(false);\tensuretaskslistsmatch(taskstovalidatewith, tasksfromservice);\t}\tcatch (exception e) {",
  "exception",
  0
 ],
 [
  "public void writeerrorline_showerrormessage_messagewrittentoconsole() {\tcreatehostuserinterface();\thostui.writeerrorline(\"test\");",
  "test failed at call result",
  1
 ],
 [
  "isequenced<int> inner = new treeset<int>();\tinner.add(i); inner.add(i+1);\touter.add(inner);\t}\tipersistentsorted<int> inner1 = new treeset<int>(), inner2 = new treeset<int>(), inner3 = new treeset<int>();\tinner1.addall<int>(new int[] { 2, 3, 5, 7, 11 });\tinner2.addall(inner1); inner2.add(13);\tinner3.addall(inner1);\touter.add(inner1.snapshot());\tinner1.add(13);",
  "in outer",
  0
 ],
 [
  "public void testcase6() {\tanalyze<stringcompareisculturespecificanalyzer>(@\" class test {\tvoid foo () {\t}\t}\", @\" class test {\tvoid foo () {",
  "foo bar",
  0
 ],
 [
  "throw new argumentexception ();\t} finally {\thandle.set ();\tsleeploop ();\tcancelabort ();\tfinally_done = true;\t}\tresult |= 0x10;\t} catch (exception e) {\tif (!(e is argumentexception)) result |= 0x4;",
  "did not throw argumentnullexception",
  1
 ],
 [
  "protected void markconverted() {\tlock (typeof(typelibrary)) {\tif (!_converted) {",
  "typelib markconverted",
  0
 ],
 [
  "public void taskfinishedhandler (object sender, taskfinishedeventargs args) {\tindent--;\tif (isverbositygreaterorequal (loggerverbosity.detailed) || (!args.succeeded && isverbositygreaterorequal (loggerverbosity.normal))) {\tsetcolor (eventcolor);",
  "or certmgr list object type options store",
  1
 ],
 [
  "subject = \"cn=keyvaultdemo\" }\t};\tvar tags = inputvalidator.gettags();\tvar name = certificatename;\tvar pendingcertificate = task.run(() => keyvaultclient.createcertificateasync(vaultaddress, name, policy, new certificateattributes { enabled = true }, tags)).configureawait(false).getawaiter().getresult();\tvar pendingpollcount = 0;\twhile (pendingpollcount < 11) {\tvar pendingcertificateresponse = task.run(() => keyvaultclient.getcertificateoperationasync(vaultaddress, pendingcertificate.certificateoperationidentifier.name)) .configureawait(false).getawaiter().getresult();\tprintoutcertificateoperation(pendingcertificateresponse);\tif (0 == string.compare(pendingcertificateresponse.status, \"inprogress\", true)) {",
  "principalcontext domachineinit authtypes is",
  1
 ],
 [
  "public void dump() {\tint i;\tdebug.writeline(\"firstchars: \" + (fcprefix == null ? \"n/a\" : regexcharclass.setdescription(fcprefix.getvalueordefault().prefix)));\tdebug.writeline(\"prefix:     \" + (bmprefix == null ? \"n/a\" : regex.escape(bmprefix.tostring())));",
  "this breaks",
  1
 ],
 [
  "public void parity_default() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "publicstaticmethod",
  1
 ],
 [
  "private static bool callsecondclassinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tif ((!(bool)(((dynamic)firstclassreturnclass<int>.staticproperty).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "var ws = getworkspace (args.solution);\tvar projectinfo = await ws.loadproject (project, cancellationtoken.none, args.replaceditem as monodevelop.projects.project);\tif (args.reloading) {\tws.onprojectreloaded (projectinfo);\t}\telse {\tws.onprojectadded (projectinfo);\t}\t}\t} catch (exception ex) {",
  "line i",
  1
 ],
 [
  "string line;\twhile ((line = sout.readline ()) != null) {\ttry {\tprocessoutput (line);\t} catch (exception ex) {\tconsole.writeline (ex);\t}\t}\t}\tvoid processoutput (string line) {",
  "not imported",
  1
 ],
 [
  "string enum_aot_mode;\tswitch (aot_mode) {\tcase \"full\": enum_aot_mode = \"mono_aot_mode_full\";\tbreak;\tcase \"llvmonly\": enum_aot_mode = \"mono_aot_mode_llvmonly\";\tbreak;\tcase \"\": enum_aot_mode = \"mono_aot_mode_normal\";\tbreak;\tdefault: throw new exception (\"unsupported aot mode\");\t}",
  "big endian",
  1
 ],
 [
  "}\tthread.sleep(500);\t}\telse {\tinterlocked.increment(ref _numconnectedsockets);\t_log.writeline(this.gethashcode() + \" processaccept(_numconnectedsockets={0})\", _numconnectedsockets);\tsocketasynceventargs readeventargs = _readwritepool.pop();\t((asyncusertoken)readeventargs.usertoken).socket = e.acceptsocket;\tbool willraiseevent = e.acceptsocket.receiveasync(readeventargs);\tif (!willraiseevent) {",
  "processaccept processreceive",
  0
 ],
 [
  "string[] commandarguments = options.plainarguments;\tif (commandarguments == null || commandarguments.length == 0) {\toptions.usagecommands ();\tdisplaylist (\"default config files:\", config.defaultconfigfiles);\tconsole.writeline ();\tdisplaylist (\"available features:\", config.features);\treturn 1;\t}\thandlecommand commandhandler = findcommandhandler (commandarguments [0]);\tif (commandhandler == null) {",
  "verifying write method with a large string size",
  1
 ],
 [
  "}\tprivate static ilist<resourcefile> uploadfilesmakeresfiles(stagingstorageaccount stagingcreds) {\tcloudtask mytask = new cloudtask(id: \"countwordstask\", commandline: @\"cmd /c dir /s .. & dir & type localwords.txt\");\tfiletostage wordsdottext = new filetostage(resources.localwordsdottext, stagingcreds);\tmytask.filestostage = new list<ifilestagingprovider>();\tmytask.filestostage.add(wordsdottext);\tmytask.stagefiles();\treturn mytask.resourcefiles;\t}\tprivate void outputfailureinfo(taskfailureinformation failureinfo) {",
  "category",
  0
 ],
 [
  "static void dump_user (string username) {\tmembershipuser user = membership.getuser (username, false);",
  "microsoft visual studio solution file format version",
  1
 ],
 [
  "public void transformstrstr10(inputtype inputtype, readertype readertype) {\tif (loadxsl(\"showparam.xsl\", inputtype, readertype) == 1) {\ttry {\txslt.transform(fullfilepath(\"fruits.xml\"), \"http: }\tcatch (system.exception e) {\t_output.writeline(e.tostring());\treturn;\t}\t}",
  "exception not generated for invalid output destination",
  0
 ],
 [
  "public override void abort () {\tif (handle is iinvokeasyncresult) {\tvar info = getinfo ();",
  "aborting invocation of",
  0
 ],
 [
  "private static bool nullablebytetypewithidentityconversioninassignment() {\tint failcount = 0;\tbyte? origin = 255;\tdynamic d = origin;\tbyte? result = d;\tif (result != origin) {\tfailcount++;",
  "test failed at conversion result",
  0
 ],
 [
  "public int stop() {\tif (silohost != null) {\ttry {\tsilohost.stoporleanssilo();\tsilohost.dispose();",
  "async callback",
  1
 ],
 [
  "}\tcatch (exception ex) {\tvar caughtexceptiontype = ex.gettype();\tif (!whitelist.any(knownexceptiontype => knownexceptiontype.isassignablefrom(caughtexceptiontype))) {\tthrow;\t}\tif (attempt < maxattempts) {\tthread.sleep(initialtimeout * (int)math.pow(timeoutfactor, attempt - 1));\tcontinue;\t}",
  "the directory could not be deleted attempts were made due to a most of the time this is due to an external process accessing the files in the temporary repositories created during the test runs and keeping a handle on the directory thus preventing the deletion of those files known and common causes include windows search indexer go to the indexing options in the windows control panel and exclude the bin folder of tests antivirus exclude the bin folder of tests from the paths scanned by your real time antivirus tortoisegit change the icon overlays settings e g adding the bin folder of tests to exclude paths and appending an to exclude all subfolders as well",
  0
 ],
 [
  "public static void main() {\tenvironment.exitcode = 1;\tthread thr=new thread(new threadstart(foo.thread));\tthr.start();\tthread.sleep(1200);",
  "main thread returns",
  0
 ],
 [
  "string stacktrace = e.stacktrace;\tif (!stacktrace.contains(\"bringuptest.main\")) {\treturn fail;\t}\tcounter++;\t}\ttry {\tg.myobjectfield = new object();\t}\tcatch (nullreferenceexception) {",
  "null reference exception in write barrier caught",
  0
 ],
 [
  "numenvsettings = newenvsettings.count;\thwtask.environmentsettings = newenvsettings;\tboundjob.addtask(hwtask);\t{\tutilities utilities = batchcli.utilities;\ttaskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();\ttaskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(3));\tcloudtask mycompletedtask = new list<cloudtask>(boundjob.listtasks())[0];\tstring stdout = mycompletedtask.getnodefile(constants.standardoutfilename).readasstring();\tstring stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();",
  "stdout",
  0
 ],
 [
  "var results = rewriter.rewrite (options);\tif (results.anyerrors) {\tforeach (var error in results.errors) {\t}\t}\tif (results.anywarnings) {\tforeach (var warning in results.warnings) {\t}\t}\tconsole.writeline ();",
  "done",
  0
 ],
 [
  "static void onfilechanged(object sender, filesystemeventargs args) {\tif (httpruntime.domainunloading) return;\tstring name = args.name;\tbool isconfig = false;\tif (strutils.endswith (name, \"onfig\", true)) {\tif (string.compare (path.getfilename (name), \"web.config\", true, helpers.invariantculture) != 0) return;\tisconfig = true;\t} else if (strutils.endswith (name, \"lobal.asax\", true) && string.compare (name, \"global.asax\", true, helpers.invariantculture) != 0) return;",
  "show strongname informations about the assembly",
  1
 ],
 [
  "con.open();\t}\tcatch(sqlexception se) {\tforeach(sqlerror error in se.errors) {\t}\texception ie = se.innerexception;\tif(ie != null) {\t}\treturn;\t}",
  "error sending bug report",
  1
 ],
 [
  "static int main () {\ttest t1 = new test ();\tobjref myref = remotingservices.marshal (t1, \"/test\");\tstring url = \"simple: string uri;\tsimplechannel chnl = new simplechannel (8000);\tchannelservices.registerchannel (chnl);",
  "channel name",
  0
 ],
 [
  "public void begininit () {",
  "test failed at call result",
  1
 ],
 [
  "private async system.threading.tasks.task addtaskssimpletestasync( batchclient batchcli, string testname, int taskcount, batchclientparalleloptions paralleloptions, func<addtaskresult, cancellationtoken, addtaskresultstatus> resulthandlerfunc, stagingstorageaccount storagecredentials, ienumerable<string> localfilestostage, concurrentbag<concurrentdictionary<type, ifilestagingartifact>> filestagingartifacts = null, timespan? timeout = null, bool usejoboperations = true) {\tjoboperations joboperations = batchcli.joboperations;\tstring jobid = \"bulk-\" + testutilities.getmyname() + \"-\" + testname + \"-\" + usejoboperations;\ttry {\tcloudjob unboundjob = joboperations.createjob();",
  "tableeditordialog entering initializegui",
  1
 ],
 [
  "protected virtual void build () {",
  "creating table mono adapter test",
  1
 ],
 [
  "public static void creategenerictestfile(string strfilename) {\tfilepathutil.addstream(strfilename, new memorystream());\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"no\\\"?>\");\ttw.writeline(\"<!-- comment1 -->\");\ttw.writeline(\"<?pi1a?>\");\ttw.writeline(\"<?pi1b?>\");\ttw.writeline(\"<?pi1c?>\");",
  "inside finally",
  1
 ],
 [
  "private void publisherthreadfunc() {\ttry {\tthis.publisher = new wdeprogrampublisher() as iwdeprogrampublisher;\tthis.wdeprogramnodesingleton = new programnode(this.controller);\tthis.gchwdeprogramnode = gchandle.alloc(this.wdeprogramnodesingleton);\tthis.publisher.publish(this.wdeprogramnodesingleton);\tthis.ispublished = true;\t}\tcatch (exception e) {",
  "empty print",
  1
 ],
 [
  "methodinfo mymethodinfo = typeof(console).getmethod(\"writeline\",new type[]{typeof(string)});\tmyilgenerator.emit(opcodes.call, mymethodinfo);\tmyilgenerator.emit(opcodes.ret);\ttype mytype = typeof(myattribute);\tconstructorinfo myconstructorinfo = mytype.getconstructor(new type[]{typeof(object)});\ttry {\tcustomattributebuilder methodcabuilder = new customattributebuilder (myconstructorinfo, new object [] { typecode.double } );\tmyconstructor.setcustomattribute(methodcabuilder);\t}\tcatch(argumentnullexception ex) {",
  "process ps log",
  1
 ],
 [
  "if (target != null) {\tthreadmodel targetmodel = target.threadingmodel ();\tif (!isvalidcall (method_model.value, targetmodel)) {\tstring mesg = string.format (cultureinfo.invariantculture, \"{0} {1} cannot be bound to {2} {3} method.\", method_model, entry.key, targetmodel, target.name);\treportdefect (method, severity.high, confidence.high, mesg);\t}\t}\t}\t} else {\tforeach (methodreference mr in entry.value) {",
  "is a thread entry point",
  0
 ],
 [
  "public override void writeassemblyattributes (assembly assembly) {",
  "rendercontents",
  1
 ],
 [
  "if (s9.f2 != 2+9) {\treturn 2;\t}\tif (s9.f3 != 3+9) {\treturn 3;\t}\tif (s9.f4 != 4+9) {\treturn 4;\t}\tif (s9.f5 != 5+9) {",
  "got but expected",
  0
 ],
 [
  "public static void readblob (oracleconnection connection) {\tif (file.exists(outfilename) == true) {",
  "filename already exists",
  0
 ],
 [
  "static void run() {\tprocess proc = new process();\tbool ret;\tproc.startinfo.filename=\"wibble-redir\";\tproc.startinfo.arguments=\"arg1    arg2\\targ3 \\\"arg4a arg4b\\\"\";\tproc.startinfo.useshellexecute=false;\tproc.startinfo.redirectstandardinput=true;\tret=proc.start();",
  "process is",
  0
 ],
 [
  "public iviewcontent jumptofileposition(filename filename, int line, int column) {",
  "end of outer try",
  1
 ],
 [
  "thread.sleep(2);\twhile (true) {\tif (sd.parserservice.loadsolutionprojectsthread.isrunning) {\tthread.sleep(100);\t}\tabstractprojectbrowsertreenode node;\tlock (queue) {\tif (queue.count == 0) {\tthreadrunning = false;\tclearstatuscache();",
  "svn overlayiconmanager thread finished",
  0
 ],
 [
  "public void implemented2 () {",
  "failure to load assemblies the following directories were searched for the assemblies",
  1
 ],
 [
  "static void updatedb () {\tdataaccess da = getdataaccess ();\tint end = work_items.count;\tfor (int i = 0; i < end; i++) {\tstate state = work_items [i];\tif (interlocked.compareexchange (ref state.lockinuse, 1, 0) == 1) continue;\tstate.updatelock.waitone ();\tif (state.root != null) {",
  "inserting",
  0
 ],
 [
  "public static byte[] getasbytes(this idatarecord datarecord, int index) {\tif (datarecord.isdbnull(index)) return new byte[0];\tobject obj = datarecord.getvalue(index);\tif (obj == null) return new byte[0];\tbyte[] bytes = obj as byte[];\tif (bytes != null) return bytes;",
  "getbytes received unexpected type",
  0
 ],
 [
  "public void getparam18() {\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(\"myarg1\", szempty, \"test1\");\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);",
  "expected",
  1
 ],
 [
  "case xmlnodetype.documenttype: if (prxmlreader.movetofirstattribute()) {\tdo {\tcxmlattribute rnewattribute = new cxmlattribute(prxmlreader);\trnewnode.addattribute(rnewattribute);\tcxmlnode rvaluenode = new cxmlnode(prxmlreader);\trvaluenode._strvalue = prxmlreader.value;\trnewattribute.insertnode(rvaluenode);\t} while (prxmlreader.movetonextattribute());\t}\tbreak;",
  "targetsite",
  1
 ],
 [
  "static void main (string[] args) {",
  "hello world",
  0
 ],
 [
  "private void onhandleremove(string handlename, intptr handle, int handlecount) {\thandletype type = (handletype)s_handletypes[handlename];\tbool removed = false;\tif (type != null) {\tremoved = type.remove(handle);\t}\tif (!removed) {\tif (compmodswitches.handleleak.level >= tracelevel.error) {\tdebug.writeline(\"*************************************************\");",
  "while removing couldn t find handle",
  0
 ],
 [
  "}\tcatch (xunit.sdk.trueexception) {\tcheckexpectederror(e1, \"system.xml\", \"xslt_cannotloadstylesheet\", new string[] { new uri(uri.urischemefile + uri.schemedelimiter + path.getfullpath(fullfilepath(\"xmlresolver_main.xsl\"))).tostring(), \"null\" });\treturn;\t}\t}\tcatch (argumentnullexception e2) {\t_output.writeline(e2.message);\tif (xslinputtype == xslinputtype.uri) return;\telse {",
  "got but expected",
  1
 ],
 [
  "public void databits_9() {",
  "verifying databits",
  0
 ],
 [
  "}\tforeach (string path in othersharpdevelopversions) {\tstring dbfilename = path.combine(path, \"usagedata.dat\");\tif (file.exists(dbfilename)) {\tguid? guid = usagedatasessionwriter.retrieveuserid(dbfilename);\tif (guid.hasvalue) {\treturn guid.value;\t}\t}\t}",
  "did not find existing udc database creating new guid",
  0
 ],
 [
  "static void help (string details) {\tswitch (details) {\tbreak;\tbreak;\tbreak;",
  "tp file show the public key and pk token from the specified file",
  0
 ],
 [
  "public projectresourceinfo getprojectresource(codepropertyreferenceexpression propref) {\tcodetypereferenceexpression typeref = propref.targetobject as codetypereferenceexpression;\tif (typeref == null) {",
  "target of possible project resources property reference is not a type reference but",
  0
 ],
 [
  "private static bool callsecondclassinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturndynamicclass<int>();\tif ((!(bool)(s.instanceproperty.instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "static void writelist(streamwriter html, list<xmlelement> elementlist, bool isdoozer) {",
  "ul",
  0
 ],
 [
  "public void addbindingparameters (serviceendpoint endpoint, bindingparametercollection bindingparameters) {",
  "iendpointbehavior addbindingparameters",
  0
 ],
 [
  "static void main () {\tint[] integer_array = {0, 1};",
  "error removing install temp",
  1
 ],
 [
  "if ((desc != null) && (desc.length > 0)) {\tsw.writeline (de.key);\tsw.writeline (de.value);\t}\t}\tsw.close ();\t}\t_modified = false;\t}\tcatch (exception e) {",
  "oid cache couldn t be saved cause",
  0
 ],
 [
  "{\tconsole.write(\"good hash function: \");\ttimer t = new timer();\thashset<int> good = makerandom(count, new goodintegerequalitycomparer());\tisorteddictionary<int,int> bcd = good.bucketcostdistribution();\t}\t{\tconsole.write(\"bad hash function:  \");\ttimer t = new timer();\thashset<int> bad = makerandom(count, new badintegerequalitycomparer());",
  "delegate",
  1
 ],
 [
  "ipinterfaceproperties ipproperties = nic.getipproperties();\tif (!nic.supports(networkinterfacecomponent.ipv6)) {\tvar nie = assert.throws<networkinformationexception>(() => ipproperties.getipv6properties());\tassert.equal(socketerror.protocolnotsupported, (socketerror)nie.errorcode);\tcontinue;\t}\tipv6interfaceproperties ipv6properties = ipproperties.getipv6properties();\tif (ipv6properties == null) {\tcontinue;\t}",
  "no cacheitems found",
  1
 ],
 [
  "public void hello (t t) {",
  "exception",
  1
 ],
 [
  "private void verifybaudrate(int baudrate) {\tverifybaudrateatopen(baudrate);",
  "verifying setting baudrate after a call to open has been made",
  0
 ],
 [
  "public void dumpreader (xmlreader xr, bool attvalue) {",
  "agg result",
  1
 ],
 [
  "public void timesincludemillisecondpart_linux() {\tt item = getexistingitem();\tstring driveformat = new driveinfo(getitempath(item)).driveformat;\tassert.all(timefunctions(), (function) => {\tvar msec = 0;\tfor (int i = 0; i < 5; i++) {\tdatetime time = function.getter(item);\tmsec = time.millisecond;\tif (msec != 0) break;\tthread.sleep(1234);",
  "timesincludemillisecondpart got a file time of time tostring o on driveformat",
  0
 ],
 [
  "public void writetimeout_int32maxvalue_write_byte_int_int() {",
  "verifying maxvalue writetimeout with write byte buffer int offset int count",
  0
 ],
 [
  "public object call(string typename, string methodname, object[] args) {\ttype type = this.assembly.gettype (typename);\tif (type == null) {",
  "got but expected",
  1
 ],
 [
  "dumpstat();\treturn test_fail;\t}\twhile (datareader.read()) ;\tdatareader.close();\treturn test_pass;\tcase \"ns\": datareader.readtodescendant(\"e:elem\");\tdatareader.readtonextsibling(\"e:elem\");\tif (datareader.hasattributes) {\tif (datareader.getattribute(\"xmlns:e\") == null) {",
  "running fuse command",
  1
 ],
 [
  "public static int test_0_abort_finally_and_cancel () {\tfinally_done = false;\tresult = 0;\taction ac = guardfromeh1;\thandle = new manualresetevent (false);\tvar res = ac.begininvoke (null, null);\thandle.waitone ();\tthread.abort ();\tres.asyncwaithandle.waitone ();",
  "waited",
  0
 ],
 [
  "writeline (\"\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twriteline (\"\");\t}\twritelineind (\"{\");\twriteline (\"system.collections.hashtable readmethods = null;\");\twriteline (\"system.collections.hashtable writemethods = null;\");\twriteline (\"system.collections.hashtable typedserializers = null;\");\twriteline (\"\");",
  "public override system xml serialization xmlserializationreader reader",
  0
 ],
 [
  "int x = 0;\tfor (int i = 0; i < 100; i++) x++;\tconsole.writeline (x);\tstring useless = \"useless string\";\tif (useless.equals (\"other useless\")) {\tuseless = string.empty;\t}\tuseless = string.concat (useless,\" 1\");\tfor (int j = 0; j < useless.length; j++) {\tif (useless[j] == 'u') console.writeline (\"i have detected an u char\");",
  "testecho receiveasync starting",
  1
 ],
 [
  "public static editortheme geteditortheme (string name) {\tforeach (var bundle in languagebundles) {\tfor (int i = 0; i < bundle.editorthemes.count; ++i) {\tvar style = bundle.editorthemes[i];\tif (style.name == name) return style;\t}\t}",
  "secutil s assembly",
  1
 ],
 [
  "public static void main (string[] args) {\tif (args.length < 2) usage ();\tapp app = new app (args [0], args [1]);\ttry {\tapp.run ();\t} catch (exception ex) {",
  "unhandledexceptioneventhandler called",
  1
 ],
 [
  "bool didreadstartnode = false;\twhile (reader.read()) {\tskip: data.skipnextread = false;\tswitch (reader.nodetype) {\tcase xmlnodetype.endelement: if (endnodes.contains (reader.localname)) return;\tbreak;\tcase xmlnodetype.element: if (!didreadstartnode && endnodes.contains (reader.localname)) {\tdidreadstartnode = true;\t}\tbool validnode = callback (data);",
  "added value retrieved value",
  1
 ],
 [
  "public system.resources.iresourcewriter getresourcewriter(cultureinfo info) {\ttry {",
  "resourcetoolkit finding localized resource files defaultfilelocalizedresourcesfinder findlocalizedresourcefiles",
  1
 ],
 [
  "public async task activationsched_task_run_delay() {\ttaskscheduler scheduler = this.masterscheduler.getworkitemgroup(this.context).taskrunner;\tmanualresetevent pause1 = new manualresetevent(false);\tmanualresetevent pause2 = new manualresetevent(false);\tvar finish = new taskcompletionsource<bool>();\ttask<int> task1 = null;\ttask<int> task2 = null;\ttask join = null;\ttask wrapper = new task(() => {\ttask1 = task.run(() => {",
  "task started",
  0
 ],
 [
  "public void writeattributes_13(xmlwriterutils utils) {\tstring strxml = \"<e a=\\\"&gt;&lt;&quot;&apos;&amp;\\\" />\";\tusing (xmlreader xr = createreader(new stringreader(strxml))) {\txr.read();\txr.movetofirstattribute();\tif (xr.nodetype != xmlnodetype.attribute) {",
  "reader positioned on",
  0
 ],
 [
  "}\tassert.true(command.endexecutenonquery(result) > 0, \"failed: beginexecutenonquery did not complete successfully.\");\t}\tcatch (sqlexception ex) {\tassert.null(ex);\t}\tcatch (invalidoperationexception ex) {\tassert.null(ex);\t}\tcatch (exception ex) {",
  "error",
  0
 ],
 [
  "if (adp.iscatchableexceptiontype(e)) {\tif (_inprepare) {\t_inprepare = false;\tisdirty = true;\t_exectype = exectype.preparepending;\t}\ttry {\tds.close();\t}\tcatch (exception exclose) {",
  "failed to fixup stronglytypedresourcebuilder output for pcl",
  1
 ],
 [
  "static private void extendedhelp () {",
  "failed to add get a value for of type string",
  1
 ],
 [
  "e.add (xelement.parse (\"<para>this method is called by both the dispose() method and the object finalizer (finalize).    when invoked by the dispose method, the parameter disposting <paramref name=\\\"disposing\\\"/> is set to <see langword=\\\"true\\\"/> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword=\\\"false\\\"/>. </para>\"));\te.add (xelement.parse (\"<para>calling the dispose method when you are finished using the \" +t.name + \" ensures that all external resources used by this managed object are released as soon as possible.  once you have invoked the dispose method, the object is no longer useful and you should no longer make any calls to it.</para>\"));\te.add (xelement.parse (\"<para>  for more information on how to override this method and on the dispose }\tsave (xmldoc, t);\t}\tpublic static int main (string [] args) {\tassembly monotouch = typeof (monomac.foundation.nsobject).assembly;\tbool update_events = false;\tvar dir = args [0];\tif (file.exists (path.combine (dir, \"en\"))){",
  "foo",
  1
 ],
 [
  "protected override ienumerable<versioninfo> ongetversioninfo (ienumerable<filepath> paths, bool getremotestatus) {\ttry {\treturn getdirectoryversioninfo (filepath.null, paths, getremotestatus, false);\t} catch (exception e) {",
  "failed to query git status",
  0
 ],
 [
  "public static ienumerable<string> yieldreturnwithnestedtryfinally(bool breakinmiddle) {",
  "start of method",
  0
 ],
 [
  "datareader.dispose();\treturn;\tcase \"dns\": datareader.readtodescendant(\"elem\", \"elem\");\tdatareader.readtonextsibling(\"elem\", \"elem\");\tif (datareader.hasattributes) {\tif (datareader.getattribute(\"att\") == null) {\tthrow new testexception(testresult.failed, \"\");\t}\t}\telse {",
  "positioned on wrong element",
  0
 ],
 [
  "public void readtimeout_int32maxvalue_readbyte() {",
  "the whole ring with silos is",
  1
 ],
 [
  "public void dispose() {\tif (!_disposed) {\tif (_resultset != null) {",
  "principalsearchresult dispose disposing resultset",
  0
 ],
 [
  "} else if (l.startswith (\"content-length:\")) {\tcl = int32.parse (l.substring (\"content-length: \".length));\t}\t}\t}\tstringwriter sw = new stringwriter ();\tif (!have_auth) {\tsw.writeline ();\tsw.flush ();\t} else if (cl > 0 && statusline.startswith (\"post \")) {",
  "ms",
  1
 ],
 [
  "environment.exit (1);\t}\t}\tif (package != null) {\tstring ref_dir = path.combine (libdir, package);\tstring ref_path = path.combine (ref_dir, asmb_file);\tif (file.exists (ref_path)) file.delete (ref_path);\ttry {\tdirectory.createdirectory (ref_dir);\t} catch {",
  "p password pwd password for server authentication",
  1
 ],
 [
  "}\t</script>\");\tif (ac.sourceassembly == ac.targetassembly) {\t} else {\t}\tif (!state.ignorenonbreaking) {\tfile.writeline (\"<a href='javascript: hidenonbreakingchanges (); ' class='hide-nonbreaking'>hide non-breaking changes</a>\");\tfile.writeline (\"<a href='javascript: shownonbreakingchanges (); ' class='restore-nonbreaking' style='display: none;'>show non-breaking changes</a>\");\t}\tfile.write (diffhtml);",
  "div",
  0
 ],
 [
  "private  void generatelinepragmaend(codelinepragma e) {\toutput.writeline();",
  "line default",
  0
 ],
 [
  "complete = processassemblycomplete (tw, ad);\t} else if (xmloutput) {\tcomplete = processassemblyxml (tw, ad);\t} else {\tcomplete = processassemblyonly (tw, ad);\t}\tif (!complete) {\treturn 1;\t}\t} else {",
  "couldn t load assembly",
  0
 ],
 [
  "id = 0, numbers = { 5, 10 }, next = { id = 55 }\t}, new wrap {\tid = 1, numbers = { collection, }\t}, new wrap {\tid = 2, numbers = { }, }, null };\tif (a.count != 4) return 5;\tif ((int)a [0].numbers [1] != 10) return 6;\tnew list<int> { 1, 2, 3, 4 };\ttestlist (new list<int> { 1, 2, 3, 4 }, 4);\tnew list<int> { };",
  "ok",
  0
 ],
 [
  "beginoperation ();\tvar res = await sendrun (configurations, loggerid, logger.enabledevents, verbosity, runtargets, evaluateitems, evaluateproperties, globalproperties, taskid).configureawait (false);\tif (res == null && cancellationtoken.iscancellationrequested) {\tmsbuildtargetresult err = new msbuildtargetresult (file, false, \"\", \"\", file, 1, 1, 1, 1, \"build cancelled\", \"\");\treturn new msbuildresult (new [] { err });\t}\tif (res == null) throw new exception (\"unknown failure\");\treturn res;\t} catch (exception ex) {\tawait checkdisconnected ().configureawait (false);",
  "assert areequal scan",
  1
 ],
 [
  "try {\tstate = e.exceptionstate;\t} catch (exception) {\tstateexc = true;\tquietly quits */ thread.resetabort ();\t}\tif (!stateexc) {\treturn 3;\t}\tif (remotingservices.istransparentproxy (e)) {",
  "td td",
  1
 ],
 [
  "public static bool verifynode(xmlreader r, xmlnodetype eexpnodetype, string strexpname, string strexpvalue) {\tbool bpassed = true;\tif (r.nodetype != eexpnodetype) {",
  "actual nodetype",
  0
 ],
 [
  "if (s == null) {\ts = caseinsensitivemanifestresourcestreamlookup(asm, filename + \".licenses\");\t}\tif (s != null) {\tdesigntimelicensecontextserializer.deserialize(s, filename.toupper(cultureinfo.invariantculture), this);\tbreak;\t}\t}\t}\telse if (!resourceassembly.isdynamic) {",
  "creating job schedule",
  1
 ],
 [
  "smalllist.images.add(sd.resourceservice.getbitmap(\"icons.32x32.emptyprojecticon\"));\timglist.images.add(sd.resourceservice.getbitmap(\"icons.32x32.emptyprojecticon\"));\tint i = 0;\tforeach (iimage icon in icons.keys.toarray()) {\tbitmap bitmap = icon.bitmap;\tif (bitmap != null) {\tsmalllist.images.add(bitmap);\timglist.images.add(bitmap);\ticons[icon] = ++i;\t} else {",
  "newprojectdialog can t load bitmap using default",
  0
 ],
 [
  "static void p (df df) {",
  "exception not thrown for ns not found",
  1
 ],
 [
  "using (xmlwriter w = createwriter(doc)) {\ttry {\tw.writestartelement(\"root\");\tw.writenode(xr, false);\t}\tcatch (argumentnullexception) {\ttestlog.compare(w.writestate, writestate.element, \"writestate should be element\");\treturn;\t}\t}",
  "expected",
  1
 ],
 [
  "public void sendalert(alert alert) {\talertlevel level;\talertdescription description;\tbool close;\tif (alert == null) {\tlevel = alertlevel.fatal;\tdescription = alertdescription.internalerror;\tclose = true;\t} else {",
  "write alert",
  0
 ],
 [
  "static void main(string[] args) {",
  "invoked orleansmanager exe with arguments",
  0
 ],
 [
  "while (totalreceived != length) {\tint justreceived = record.read(buffer, totalreceived, buffer.length - totalreceived);\tif (0 == justreceived) {\tthrow new tlsexception(alertdescription.closenotify, \"received 0 bytes from stream. it must be closed.\");\t}\ttotalreceived += justreceived;\t}\tif (protocol != this.context.protocol && this.context.protocolnegotiated) {\tthrow new tlsexception( alertdescription.protocolversion, \"invalid protocol version on message received\");\t}",
  "record data",
  0
 ],
 [
  "public static void parametertest2 (oracleconnection connection) {\toraclecommand cmd2 = connection.createcommand();\tcmd2.commandtext = \"alter session set nls_date_format = 'yyyy-mm-dd hh24:mi:ss'\";\tcmd2.executenonquery ();",
  "firstdayofweek",
  1
 ],
 [
  "private static bool test2() {\tbyte a = 10;\tdynamic b = a;\t--b;\tif (b == 9) return true;",
  "failed byte",
  0
 ],
 [
  "public static short getkeystate (int nvirtkey) {",
  "try get b",
  1
 ],
 [
  "using (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (serialport com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\tstopwatch stopwatch = new stopwatch();\tint datareceivedcount = 0;\tint count = 0;\tcom1.datareceived += (sender, e) => { ++datareceivedcount; };\tcom2.open();\tstopwatch.start();\twhile (count % 100 != 0 || stopwatch.elapsedmilliseconds < s_testduration.totalmilliseconds) {\tcom1.open();\tfor (int j = 0; j < 10; ++j) {",
  "in delegate",
  1
 ],
 [
  "private static bool arraywithidentityconversioninassignment() {\tint failcount = 0;\tvar origin = new[]\t{\t1, 2, 3 }\t;\tdynamic d = origin;\tint[] result = d;\tif (result[1] != origin[1]) {\tfailcount++;",
  "ok",
  1
 ],
 [
  "return 4;\t}\tdouble5 s5;\ts5.f1 = 1;\ts5.f2 = 2;\ts5.f3 = 3;\ts5.f4 = 4;\ts5.f5 = 5;\ts5 = mono_return_double5(s5, 9);\tif (s5.f1 != 1+9) {",
  "got but expected",
  0
 ],
 [
  "if (lastcat != cmd.category) {\tconsole.writeline ();\tconsole.writeline (cmd.category + \":\");\tlastcat = cmd.category;\t}\tstring cc = cmd.commanddesc;\tif (cc.length < 16) cc += new string (' ', 16 - cc.length);\tconsole.writeline (\"  \" + cc + \" \" + cmd.description);\t}\tconsole.writeline ();",
  "run help command to get help about a specific command",
  0
 ],
 [
  "public int getparam1(object args) {\tobject retobj;\tfor (int i = 1; i <= 100; i++) {\tretobj = xsltarg1.getparam(((object[])args)[1].tostring(), szempty);",
  "getparam thread iteration added value retrieved value",
  0
 ],
 [
  "public override string tostring() {\tusing (stringwriter writer = new stringwriter(cultureinfo.invariantculture)) {",
  "found thread",
  1
 ],
 [
  "}\ttry {\tport = convert.touint16 (args [++i]);\t} catch (indexoutofrangeexception) {\thelp (true);\t} catch {\thelp (true);\t}\tbreak;\tcase \"-p12\": if (p12file != null) {",
  "test failed conversion result is incorrect",
  1
 ],
 [
  "static void writesymbol (streamwriter sw, string name, long size) {\tswitch (style){",
  "linux globl section rodata type size",
  0
 ],
 [
  "return runresult.invalid;\t} catch (missingmemberexception) {\treturn runresult.invalid;\t} catch (memberaccessexception) {\treturn runresult.unverifiable;\t} catch (typeloadexception) {\treturn runresult.invalid;\t} catch (badimageformatexception) {\treturn runresult.invalid;\t} catch (exception e) {",
  "end sub",
  1
 ],
 [
  "public static void rootdomainunhandledexceptionhandler (object sender, unhandledexceptioneventargs e) {",
  "marker rdue",
  0
 ],
 [
  "private static storagebundle regeneratestorageaccountkey(string storageaccountname) {\tvar vaultaddress = inputvalidator.getvaultaddress();\tvar keyname = \"key1\";\tvar storageaccount = task.run( () => userkeyvaultclient.regeneratestorageaccountkeyasync(vaultaddress, storageaccountname, keyname)) .configureawait(false).getawaiter().getresult();",
  "updated storage account",
  0
 ],
 [
  "public virtual void mergeformchanges() {\tsd.analyticsmonitor.trackfeature(typeof(formsdesignerviewcontent), \"save\");\tif (this.hasloaderror || this.designsurface == null) {",
  "file was generated with warnings",
  1
 ],
 [
  "try {\tdroptable (cnc);\t}\tcatch (sqlexception e) {\t}\ttry {\tcreatetable (cnc);\tinsertdata (cnc);\tupdatedata (cnc);\tinsertdata (cnc);",
  "none of the following programs were installed on this machine string join s allowedprogramstorun",
  1
 ],
 [
  "private static void teststring() {",
  "testing marshalling string",
  0
 ],
 [
  "public static void main (string[] args) {\tprintersettings.stringcollection col = system.drawing.printing.printersettings.installedprinters;\tfor (int i = 0; i < col.count; i++) {\tconsole.writeline (\"--- {0}\", col[i]);\tprintersettings ps = new printersettings ();\tps.printername = col[i];",
  "supportscolor",
  0
 ],
 [
  "public int requestid { get; set; }\tpublic bool requirelogin { get; set; }\tpublic requestattribute (int requestid, bool requirelogin = false) {\trequestid = requestid;\trequirelogin = requirelogin;\t}\t}\tclass mainclass {\t[requestattribute(5$, r$)]\tpublic static void main (string[] args) {",
  "format buffer",
  1
 ],
 [
  "public void begininit () {",
  "isupportinitialize begininit",
  0
 ],
 [
  "else {\tienumerable<environmentsetting> envsettings = ijm.environmentsettings;\tif (null != envsettings) {\tlist<environmentsetting> envsettingslist = new list<environmentsetting>(ijm.environmentsettings);\t}\telse {\t}\tienumerable<resourcefile> resfilesprop = ijm.resourcefiles;\tif (null != resfilesprop) {\tlist<resourcefile> resfiles = new list<resourcefile>();",
  "resourcefiles count",
  0
 ],
 [
  "static int test (int v) {\tswitch (v){\tcase 1: case 2: return 1;\tcase 3: return 3;\tcase 4: return 5;",
  "got but expected",
  1
 ],
 [
  "spid = spid.substring (0, i);\tint pid;\tif (int.tryparse (path.getfilename (spid), out pid)) {\ttry {\tif (process.getprocessbyid (pid) != null) continue;\t} catch {\t}\ttry {\tdirectory.delete (dir, true);\t} catch (exception ex) {",
  "could not delete msbuild cache folder",
  0
 ],
 [
  "static void f2 () {\tv += 2;",
  "test",
  0
 ],
 [
  "public void getextobject9(xslinputtype xslinputtype, readertype readertype, outputtype outputtype, navtype navtype) {\tint i = 1;\tm_xsltarg = new xsltargumentlist();\tforeach (string str in szwhitespace) {\tmyobject obj = new myobject(i, _output);\tm_xsltarg.addextensionobject(szdefaultns + str, obj);\tretobj = m_xsltarg.getextensionobject(szdefaultns + str);\tif (((myobject)retobj).myvalue() != i) {",
  "probably not setup for external authentication this is fine",
  1
 ],
 [
  "public void siloaddress_tofrom_parsablestring() {\tsiloaddress address1 = siloaddressutils.newlocalsiloaddress(12345);\tstring addressstr1 = address1.toparsablestring();\tsiloaddress addressobj1 = siloaddress.fromparsablestring(addressstr1);\tassert.equal(address1, addressobj1);\tconst string addressstr2 = \"127.0.0.1:11111@144611139\";\tsiloaddress addressobj2 = siloaddress.fromparsablestring(addressstr2);\tstring addressstr2out = addressobj2.toparsablestring();",
  "convert from got result string object",
  0
 ],
 [
  "public void basictest_getipinterfacestatistics_success() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfacestatistics stats = nic.getipstatistics();",
  "bytessent",
  0
 ],
 [
  "public void load() {\tstring currentlanguage = service.currentlanguage;\tstring logmessage = \"loading resources \" + baseresourcename + \".\" + currentlanguage + \": \";\tresourcemanager manager = null;\tif (assembly.getmanifestresourceinfo(baseresourcename + \".\" + currentlanguage + \".resources\") != null) {\tmanager = new resourcemanager(baseresourcename + \".\" + currentlanguage, assembly);\t} else if (currentlanguage.indexof('-') > 0 && assembly.getmanifestresourceinfo(baseresourcename + \".\" + currentlanguage.split('-')[0] + \".resources\") != null) {",
  "loading from main assembly no country match",
  0
 ],
 [
  "public static int test_0_abort_finally_and_cancel () {\tfinally_done = false;\tresult = 0;\taction ac = guardfromeh1;\thandle = new manualresetevent (false);\tvar res = ac.begininvoke (null, null);\thandle.waitone ();",
  "class test public shared sub main args as system collections generic idictionary of integer integer dim val as integer if args trygetvalue val then console writeline val end if end sub end class",
  1
 ],
 [
  "public static bool setupcomm (intptr hfile, uint dwinqueue, uint dwoutqueue) {",
  "setupcomm called",
  0
 ],
 [
  "public void addexportedmethods(ienumerable<ecmamethod> methods) => _methods.addrange(methods.where(m => m.module != _context.systemmodule));\tpublic void emitexportedmethods() {\tfilestream filestream = new filestream(_exportsfile, filemode.create);\tusing (streamwriter streamwriter = new streamwriter(filestream)) {\tif (_context.target.iswindows) {",
  "exports",
  0
 ],
 [
  "static void writeheader(streamwriter html, string title) {",
  "html head",
  0
 ],
 [
  "static void run(object state) {",
  "git overlayiconmanager thread started",
  0
 ],
 [
  "xslt.load(nrtemp);\t}\tfinally {\tif (nrtemp != null) nrtemp.dispose();\t}\tbreak;\tcase readertype.xmlvalidatingreader: default: xrs = new xmlreadersettings();\t#pragma warning disable 0618 xrs.prohibitdtd = false;\t#pragma warning restore 0618 xmlreader xvr = xmlreader.create(_strxslfile, xrs);\ttry {",
  "sammembersset movenextforeign ran out of members using next foreignresultset",
  1
 ],
 [
  "public static int main ( string[] args )   {\ttry {\tint[] arr = throwanexception ();",
  "test failed at call result",
  1
 ],
 [
  "public void loadgeneric3(inputtype inputtype, readertype readertype, transformtype transformtype, doctype doctype) {\tstring expected = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?><result> 1.no value specified 2.no value specified 3.no value specified 4.no value specified 5.no value specified 6.no value specified</result>\";\tif (loadxsl_resolver(\"showparam.xsl\", null, inputtype, readertype) == 1) {\tif (transform(\"fruits.xml\", transformtype, doctype) == 1) {\tverifyresult(expected);\treturn;\t}\telse assert.true(false);\t}\telse {",
  "verifying read method throws exception without a call to open",
  1
 ],
 [
  "}\ttry {\tfactory = dbproviderfactories.getfactory(factoryname);\t} catch(configurationexception) {\tfactoryname = null;\tchangeproviderbackwardscompat (parms);\treturn;\t}\toutputline (\"the default provider is \" + factoryname);\t}",
  "i",
  1
 ],
 [
  "}\telse if (_recursive && adutils.isofobjectclass(memberde, \"foreignsecurityprincipal\")) {\tif (!_usersvisited.containskey(memberde.properties[\"distinguishedname\"][0].tostring())) {\t_foreignmemberscurrentgroup.add(memberde);\t_usersvisited.add(memberde.properties[\"distinguishedname\"][0].tostring(), true);\tdisposememberde = false;\t}\tneedtoretry = true;\t}\telse {",
  "addnlinkedattrset movenextmemberenum using as current",
  0
 ],
 [
  "static string constructexpression(string expr) {\treturn @\" using system;\tusing system.linq;\tclass bar {\tpublic void foo (string[] args) {",
  "expr",
  0
 ],
 [
  "public tuple<string, string> getwebusernameandpassword (uri url) {\tvar read = readcredential (url.host);\tif (read != null) return read;\tvar lasterror = (errorcode)marshal.getlastwin32error ();\tswitch (lasterror) {\tcase errorcode.notfound: return null;",
  "tried to retrieve credential but got no logon session",
  0
 ],
 [
  "public static void main (string[] args) {\tusing (var w = new streamwriter (console.openstandardoutput ())) {\tw.writeline ();\tw.writeline (\"public struct foostruct { public int i, j; public static bool operator == (foostruct f1, foostruct f2) { return f1.i == f2.i && f1.j == f2.j; } public static bool operator != (foostruct f1, foostruct f2) { return f1.i != f2.i || f1.j != f2.j; } public override bool equals (object obj) { return this == (foostruct)obj; } public override int gethashcode () { return 0; } }\");\tw.writeline (\"public struct foostruct2 { public long i; public static bool operator == (foostruct2 f1, foostruct2 f2) { return f1.i == f2.i; } public static bool operator != (foostruct2 f1, foostruct2 f2) { return f1.i != f2.i; } public override bool equals (object obj) { return this == (foostruct2)obj; } public override int gethashcode () { return 0; } }\");\tw.writeline (\"public struct foostruct3 { public bool i, j; public static bool operator == (foostruct3 f1, foostruct3 f2) { return f1.i == f2.i && f1.j == f2.j; } public static bool operator != (foostruct3 f1, foostruct3 f2) { return f1.i != f2.i || f1.j != f2.j; } public override bool equals (object obj) { return this == (foostruct3)obj; } public override int gethashcode () { return 0; } }\");",
  "add",
  1
 ],
 [
  "xpathdocument xpathdoc;\ttry {\tusing (xmlreader xr = xmlinput.createreader ()) {\txpathdoc = new xpathdocument (xr);\txr.close ();\t}\t} catch (exception e) {\tif (iscriticalexception (e)) {\tthrow;\t}",
  "input file cannot be opened",
  0
 ],
 [
  "public override void writeentry (string [] replacementstrings, eventlogentrytype type, uint instanceid, short category, byte [] rawdata) {\tlock (lockobject) {\tstring logdir = findlogstore (coreeventlog.log);\tint index = getlatestindex () + 1;\tstring logpath = path.combine (logdir, index.tostring (cultureinfo.invariantculture) + \".log\");\ttry {\tusing (textwriter w = file.createtext (logpath)) {",
  "replacementstrings",
  0
 ],
 [
  "[theory]\t[xmlwriterinlinedata]\tpublic void lookupprefix_1(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tstring s = w.lookupprefix(null);\tw.dispose();\t}\tcatch (argumentexception e) {",
  "exception",
  0
 ],
 [
  "private void closeclientsocket(socketasynceventargs e) {\tasyncusertoken token = e.usertoken as asyncusertoken;\t_log.writeline( this.gethashcode() + \" closeclientsocket(_numconnectedsockets={0}, socketerror={1})\", _numconnectedsockets, e.socketerror);\ttry {\ttoken.socket.shutdown(socketshutdown.send);\t}\tcatch (exception ex) {",
  "closeclientsocket exception",
  0
 ],
 [
  "public static int main () {\tconstructorinfo mi = typeof(c).getconstructors ()[0];\tmethodbody mb = mi.getmethodbody();\tif (mb.getilasbytearray ().length != 7) {",
  "test failed at call result",
  1
 ],
 [
  "public static int main () {\tobject o = foo (null);\tif (o != null) return 1;\to = foog<bool> (null);\tif (o != null) return 2;",
  "tried saving credentials but got invalid flags set on credential",
  1
 ],
 [
  "public void state_11(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writestartdocument();\t}\tcatch (invalidoperationexception e) {",
  "test failed at call result",
  1
 ],
 [
  "protected void logtestfailure(string exceptiondata) {",
  "binaryform null",
  1
 ],
 [
  "static bool resolvepermissions (string assemblyname) {\tevidence ev = getassemblyevidences (assemblyname);\tif (ev == null) return false;\tpermissionset ps = null;\tconsole.writeline ();\tif (policyleveldefault)\t{\tienumerator e = securitymanager.policyhierarchy ();\twhile (e.movenext ()) {\tpolicylevel pl = (policylevel)e.current;",
  "resolving level",
  0
 ],
 [
  "public void position_open_basestreamclose() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tcom.open();\tstream serialstream = com.basestream;\tcom.basestream.close();",
  "accepted non wf document",
  1
 ],
 [
  "public static void readlist (xmlreader reader, icollection<string> endnodes, readercallbackwithdata callback) {\tif (reader.isemptyelement) return;\treadcallbackdata data = new readcallbackdata ();\tbool didreadstartnode = false;\twhile (reader.read()) {\tskip: data.skipnextread = false;\tswitch (reader.nodetype) {\tcase xmlnodetype.endelement: if (endnodes.contains (reader.localname)) return;",
  "by create category table cs available in the mcs",
  1
 ],
 [
  "private static void runsuite(suite suite) {",
  "adstorectx extensioncacheconverter",
  1
 ],
 [
  "try {\tconfiguration config = configurationmanager.openexeconfiguration (configurationuserlevel.none);\tappsettingssection sect = (appsettingssection)config.getsection(\"appsettings\");\tforeach (string key in sect.settings.allkeys) {\tkeyvalueconfigurationelement e = sect.settings[key];\tconsole.writeline (\"{0} = {1}\", e.key, e.value);\t}\tconsole.writeline (\"lockattributes = '{0}'\", sect.lockattributes.attributelist);\t}\tcatch (exception e) {",
  "end of method",
  1
 ],
 [
  "int result = idisp.gettypeinfocount(out count);\tif (result != 0) {\tthrow new comexception(\"(probably a bug, please report) \" + \"failed on gettypeinfocount\", result);\t}\tif (count == 0) {\ttraceutil.writelinewarning (typeof(comobjectinfo), \"comobjinfo - \" + \" typeinfo count = 0: \" + _obj);\tthrow new exception(\"this object has no type information \" + \"(gettypeinfocount returned 0).  \");\t}\tresult = idisp.gettypeinfo(0, 0, out _typeinfo);\tif (result != 0) {",
  "comobjinfo typeinfo not found",
  0
 ],
 [
  "protected override void generatetrycatchfinallystatement(codetrycatchfinallystatement e) {",
  "try",
  0
 ],
 [
  "if (!comtype) return typelib.resolvetypedef(docname, comtype);\treturn docname;\t}\telse {\treturn \"(userdef unknown)\";\t}\t}\treturn gettypestr(typedesc.vt, comtype);\t}\tcatch (exception ex) {",
  "activex type conversion error",
  0
 ],
 [
  "const string uia_winforms_method   = \"initialize\";\ttry {\ttype global_type = mwf_providers.gettype (uia_winforms_type, false);\tif (global_type != null) {\tinit_method = global_type.getmethod (uia_winforms_method, bindingflags.static | bindingflags.public);\tif (init_method != null) init_method.invoke (null, new object [] {});\telse throw new exception (string.format (\"method {0} not found in type {1}.\", uia_winforms_method, uia_winforms_type));\t}\telse throw new exception (string.format (\"type {0} not found in assembly {1}.\", uia_winforms_type, uia_winforms_assembly));\t} catch (exception ex) {",
  "error setting up uia",
  0
 ],
 [
  "s7.f6 = 6;\ts7.f7 = 7;\ts7 = mono_return_float7(s7, 906);\tif (s7.f1 != 1+906) {\treturn 1;\t}\tif (s7.f2 != 2+906) {\treturn 2;\t}\tif (s7.f3 != 3+906) {",
  "got but expected",
  0
 ],
 [
  "public void consistentringprovider_test1() {\tsiloaddress silo1 = siloaddressutils.newlocalsiloaddress(0);\tconsistentringprovider ring = new consistentringprovider(silo1, nullloggerfactory.instance);",
  "verifying default readtimeout with read char buffer int offset int count",
  1
 ],
 [
  "foreach (runtime runtime in runtimes) {\tif (!runtime.ishostapplicationassembly) {\tloaddependencies();\t}\ttype t = runtime.findtype(classname);\tif (t != null) {\treturn t;\t}\t}\tif (hasshownerrormessage) {",
  "b test",
  1
 ],
 [
  "protected override void run () {",
  "test failed at call result",
  1
 ],
 [
  "}\treturn h;\tthe pairs (-1657792980, -1570288808) and (1862883298, -272461342) gives the same unsequenced hashcode with this hashfunction. the pair was found with code like hashdictionary<int, int[]> set = new hashdictionary<int, int[]>();\trandom rnd = new c5random(12345);\twhile (true) {\tint[] a = new int[2];\ta[0] = rnd.next(); a[1] = rnd.next();\tint h = unsequencedhashcode(a);\tint[] b = a;\tif (set.findoradd(h, ref b)) {",
  "noprojecttype",
  1
 ],
 [
  "static void f4 () {\tv += 4;",
  "test",
  0
 ],
 [
  "else environment.add (env.substring (0, p), env.substring (p+1));\tbreak;\tcase \"--bundled-header\": bundled_header = true;\tbreak;\tcase \"--in-tree\": if (i+1 == top) {\treturn 1;\t}\tin_tree = args [++i];\tbreak;\tcase \"--managed-linker\": if (i+1 == top) {",
  "usage managed linker path to exe",
  0
 ],
 [
  "public void putendelement(string myname) {",
  "popping",
  0
 ],
 [
  "object state;\tstate = e.exceptionstate;\tthread.resetabort ();\tif (state == null) {\treturn 3;\t} else {\tif (remotingservices.istransparentproxy (state)) {\treturn 4;\t}\tif (!((string)state).equals (\"bla\")) {",
  "index",
  1
 ],
 [
  "\"10.1.1.1\", \"10.1.2.4\" }\t}, subnets = new list<subnet>() {\tnew subnet() {\tname = gwsubnetname, addressprefix = \"10.0.0.0/24\", }, new subnet() {\tname = subnet2name, addressprefix = \"10.0.1.0/24\", }\t}\t};\tvar putvnetresponse = networkmanagementclient.virtualnetworks.createorupdate(resourcegroupname, vnetname, vnet);\tvar getvnetresponse = networkmanagementclient.virtualnetworks.get(resourcegroupname, vnetname);\tvar getsubnetresponse = networkmanagementclient.subnets.get(resourcegroupname, vnetname, gwsubnetname);",
  "virtual network gatewaysubnet id",
  0
 ],
 [
  "public override sizef drawerwillresizecontents (nsdrawer sender, sizef contentsize) {",
  "principalsearcher findall qbefilter is non null and passes",
  1
 ],
 [
  "protected override void oninit (eventargs e) {",
  "principalcontext entering dodomaininit",
  1
 ],
 [
  "for (int i = 0; i < args.length; i++) {\tcmd.commandtext = system.io.file.readalltext(args[i]);\tcnn.open();\tcmd.executenonquery();\tcnn.close();\t}\tcmd.dispose();\tcnn.dispose();\t}\t#else if (args.length != 4) {",
  "press enter to continue",
  0
 ],
 [
  "try {\tcloudjob job = joboperations.createjob(jobid, new poolinformation());\tjob.poolinformation = new poolinformation() {\tpoolid = this.poolfixture.poolid };\tjob.commit();\tcloudjob boundjob = joboperations.getjob(jobid);\tconst string taskid = \"t1\";\tconst string taskmessage = \"this is a test\";\tcloudtask task = new cloudtask(taskid, string.format(\"cmd /c echo {0}\", taskmessage));\tboundjob.addtask(task);",
  "waiting for the task to complete",
  0
 ],
 [
  "public void showhelp () {\tconsole.writeline ();",
  "options",
  0
 ],
 [
  "var o = new stringwriter ();\tvar e = new stringwriter ();\tvar showversion = false;\tvar showhelp    = false;\tvar git = new commandset (\"git\", output: o, error: e) {\t\"usage: git [--version] ... <command> [<args>]\", \"\", \"common options:\", { \"version\", \"show version info\", v => showversion = v != null }, { \"help\", \"show this message and exit\", v => showhelp = v != null }, \"\", \"these are common git commands used in various situations:\", \"\", \"start a working area (see also: git help tutorial)\", new command (\"clone\", \"clone a repository into a new directory\"), new command (\"init\",  \"create an empty git repository or reinitialize an existing one\"), new command (\"thisisaverylongcommandnameinordertoinducewrapping\", \"create an empty git repository or reinitialize an existing one. let's make this really long to cause a line wrap, shall we?\"), };\tvar expectedhelp = new stringwriter ();\texpectedhelp.writeline (\"\");\texpectedhelp.writeline (\"\");\texpectedhelp.writeline (\"\");",
  "verifying default readtimeout with read byte buffer int offset int count",
  1
 ],
 [
  "public void dumpreader (xmlreader xr, bool attvalue) {\tif (xr.nodetype == xmlnodetype.attribute) {\twhile (xr.readattributevalue ()) dumpreader (xr, true);\t} else if (!attvalue) {",
  "attributes",
  0
 ],
 [
  "for (int j = 0; j < useless.length; j++) {\tif (useless[j] == 'u') console.writeline (\"i have detected an u char\");\t}\ttry {\tforeach (string environmentvariable in environment.getenvironmentvariables ().keys) console.writeline (environmentvariable);\t}\tcatch (system.security.securityexception exception) {\tconsole.writeline (exception.message);\tconsole.writeline (exception);\t}",
  "i will add more useless code",
  0
 ],
 [
  "public void printtree (streamwriter msw) {\tfor (int i = 0; i < faxisarray.count; ++i) {\tforwardaxis axis = (forwardaxis)faxisarray[i];\tmsw.writeline(\"<tree isdss=\\\"{0}\\\" isattribute=\\\"{1}\\\">\", axis.isdss, axis.isattribute);\tdoublelinkaxis printaxis = axis.topnode;\twhile ( printaxis != null ) {",
  "hi",
  1
 ],
 [
  "record.setvalues(1, \"x-value\", datetime.parse(\"04/01/2000\"), 8);\trows.add(record);\trecord = new sqldatarecord(columnmetadata);\trecord.setvalues(1, \"x-value\", datetime.parse(\"04/01/2000\"), 4);\trows.add(record);\tparam.value = rows;\tusing (sqldatareader rdr = cmd.executereader()) {\twritereader(rdr);\t}\trows.clear();",
  "sort order uniqueness mixed order",
  0
 ],
 [
  "private static bool leftisinstancefield() {\tint failcount = 0;\tsbyte origin = 10;\tdynamic d = origin;\tvar c = new c();\tc.f1 = d;\tif (c.f1 != origin) {\tfailcount++;",
  "test failed at call result",
  1
 ],
 [
  "foreach(xmlschemaattribute attribute in derivedtype.attributeuses.values) {\txmlschemaattribute attributebase = (xmlschemaattribute)basetype.attributeuses[attribute.qualifiedname];\tif (attributebase != null) {\tcontinue;\t}\tif (baseattributewildcard == null || !baseattributewildcard.allows(attribute.qualifiedname)) {\t#if debug string position = string.empty;\tif (derivedtype.sourceuri != null) {\tposition = \" in \" + derivedtype.sourceuri + \"(\" + derivedtype.linenumber + \", \" + derivedtype.lineposition + \")\";\t}",
  "pass fail",
  1
 ],
 [
  "protected override void generateattributedeclarationsend(codeattributedeclarationcollection attributes) {",
  "codeattributedeclarationcollection",
  0
 ],
 [
  "public void testireadonlymakespropertiesreadonly() {\ttype ireadonlytype = typeof(ireadonly);\tlist<type> typeswithireadonlybase = gettypeswhichimplementinterface(ireadonlytype.gettypeinfo().assembly, ireadonlytype, requirepublicconstructor: false).tolist();\tforeach (type type in typeswithireadonlybase) {",
  "internal static class uniqueid",
  1
 ],
 [
  "public void utf32encoding() {",
  "verifying read with bytes encoded with",
  0
 ],
 [
  "public static void dataadaptertest2_insert (oracleconnection con) {\tconsole.writeline(\"================================\");\tconsole.writeline(\"=== adapter insert =============\");\tconsole.writeline(\"================================\");\toracletransaction transaction = con.begintransaction ();\toracledataadapter da = new oracledataadapter(\"select * from mono_adapter_test\", con);\tda.selectcommand.transaction = transaction;\toraclecommandbuilder mycb = new oraclecommandbuilder(da);\tdataset ds = new dataset();\tda.fill(ds, \"mono_adapter_test\");",
  "new row",
  0
 ],
 [
  "return 1;\t}\t}\tif (destpath == null) destpath = path.getdirectoryname (projectfile);\tdestpath = fileservice.getfullpath (destpath);\tstring ofile = await services.projectservice.export (monitor, projectfile, itemstoexport, destpath, format);\tif (ofile != null) {\treturn 0;\t}\telse {",
  "project export failed",
  0
 ],
 [
  "}\tdatatablecollection tables = dataset.tables;\tint index = tables.indexof(datasettable);\tif ((0 <= index) && (index < tables.count)) {\t#if debug if (adapterswitches.dataschema.traceinfo) {\t}\t#endif return tables[index];\t}\tswitch (schemaaction) {\tcase missingschemaaction.add: case missingschemaaction.addwithkey: #if debug if (adapterswitches.dataschema.traceinfo) {",
  "schema add of datatable datasettable",
  0
 ],
 [
  "#endif string copyrighttext = \"copyright (c) 2002-2012 charlie poole.\\r\\ncopyright (c) 2002-2004 james w. newkirk, michael c. two, alexei a. vorontsov.\\r\\ncopyright (c) 2000-2002 philip craig.\\r\\nall rights reserved.\";\tobject[] objectattrs = executingassembly.getcustomattributes(typeof(assemblycopyrightattribute), false);\tif ( objectattrs.length > 0 ) copyrighttext = ((assemblycopyrightattribute)objectattrs[0]).copyright;\tobjectattrs = executingassembly.getcustomattributes(typeof(assemblyconfigurationattribute), false);\tif (objectattrs.length > 0) {\tstring configtext = ((assemblyconfigurationattribute)objectattrs[0]).configuration;\tif (configtext != \"\") versiontext += string.format(\" ({0})\", configtext);\t}\tconsole.writeline(copyrighttext);\tconsole.writeline();",
  "test failed at call result",
  1
 ],
 [
  "public void mapped_machineconfig () {\tconfigurationfilemap map = new configurationfilemap ();\tmap.machineconfigfilename = \"machineconfig\";\tsysconfig config = configurationmanager.openmappedmachineconfiguration (map);",
  "mapped machine config path",
  0
 ],
 [
  "public void addparam1(object param, xslinputtype xslinputtype, readertype readertype, outputtype outputtype, navtype navtype) {\tstring baseline = path.combine(\"baseline\", (string)param);\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(\"myarg1\", szempty, \"test1\");\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);",
  "adstorectx cannotchangepwdfromldapconverter fallback assume user can change pwd",
  1
 ],
 [
  "break;\tcase callconversionoperation.opcode.return_signextended_integer_byvalue_from_localblock_x_pointer_y_of_size_z: {\t#if x86 callconverterthunk.setupcalleractualreturndata(locals.transitionblockptr);\tfixed (returnblock* retblk = &callconverterthunk.t_nonargregisterreturnspace) {\tcallconverterthunk.signextend(locals.getlocalblock(op.x).getrawmemorypointer()[op.y].topointer(), retblk, op.z);\t}\tlocals.intptrreturnval = callconverterthunk.returnintegerpointreturnthunk;\t#else byte* returnblock = locals.transitionblockptr + transitionblock.getoffsetofargumentregisters();\tcallconverterthunk.signextend(locals.getlocalblock(op.x).getrawmemorypointer()[op.y].topointer(), returnblock, op.z);\tlocals.intptrreturnval = callconverterthunk.returnintegerpointreturnthunk;",
  "passed",
  1
 ],
 [
  "public void verifyresult(string expectedvalue) {\tlock(s_outfilememorylock) {\txmldiff.xmldiff xmldiff = new xmldiff.xmldiff();\txmldiff.option = xmldiffoption.infosetcomparison | xmldiffoption.ignoreemptyelement | xmldiffoption.normalizenewline;\tstring actualvalue = file.readalltext(_stroutfile);",
  "expecting got",
  1
 ],
 [
  "public void testsimplecase() {",
  "class test public shared sub main args as system collections generic idictionary of integer integer console writeline args end sub end class class test public shared sub main args as system collections generic idictionary of integer integer dim val as integer if args trygetvalue val then console writeline val end if end sub end class",
  0
 ],
 [
  "}\telse {\tswitch(provider) {\tcase \"oledb\": adapter = (dbdataadapter) new oledbdataadapter ();\tbreak;\tcase \"sqlclient\": adapter = (dbdataadapter) new sqldataadapter ();\tbreak;\tcase \"loadextprovider\": adapter = createexternaldataadapter (command, connection);\tif (adapter == null) return null;\tbreak;",
  "error data adapter not found in provider",
  0
 ],
 [
  "public static void main() {\tifoo foo = null;\tbar bar = null;",
  "got a bar",
  0
 ],
 [
  "public static void main (string[] args) {\tnew myclass ();",
  "test",
  1
 ],
 [
  "int n = 0;\taction closure = () => {\tlogcontext(\"closureworkitem-task \" + task.currentid);\tfor (int i = 0; i < 10; i++) {\tint id = -1;\taction action = () => {\tid = task.currentid.hasvalue ? (int)task.currentid : -1;\tlogcontext(\"sub-task \" + id + \" n=\" + n);\tint k = n;\tthread.sleep(100);",
  "cert",
  1
 ],
 [
  "string a = args[i];\tif (a.startswith(\"-\") || a.startswith(\"/\")) {\tswitch (a.tolowerinvariant()) {\tcase \"/?\": case \"/help\": case \"-?\": case \"-help\": return false;\treturn false;\t}\t}\telse if (a.contains(\"=\")) {\tstring[] split = a.split('=');\tif (string.isnullorempty(split[1])) {",
  "base",
  1
 ],
 [
  "public override size getpreferredsize (size proposedsize) {",
  "hoyo",
  0
 ],
 [
  "public static void createlbnormalizationtestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<?xml version=\\\"1.0\\\" standalone=\\\"no\\\"?>\");",
  "listing nodes",
  1
 ],
 [
  "private static void addlistenercomponent(eventloginternal component, string compmachinename, string complogname) {\tlock (internalsyncobject) {\tloglisteninginfo info = (loglisteninginfo) listenerinfos[complogname];\tif (info != null) {",
  "hello",
  1
 ],
 [
  "static bool callsecondstructindexer() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturnstruct<int>();\tif ( (!(bool)(((dynamic)s.instancemethod())[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "thread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();\t} finally {\t}\ttry {\tthread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();\t} finally {",
  "threadabortexception finally",
  0
 ],
 [
  "public int read3() {\tstring strxml = \"<root:  />\";\ttry {\treloadsourcestr(strxml);\twhile (datareader.read()) ;\t}\tcatch (xmlexception e) {",
  "comparison results",
  1
 ],
 [
  "yield return \"start of method\";\ttry {\tyield return \"within outer try\";\ttry {\tyield return \"within inner try\";\tif (breakinmiddle) yield break;\tyield return \"end of inner try\";\t} finally {\t}\tyield return \"end of outer try\";",
  "done",
  1
 ],
 [
  "int small_count = count / 2;\tgchandle[] more = new gchandle [small_count];\tint i;\tfor (i = 0; i < small_count; ++i) {\tgchandletype t = (gchandletype) (i & 3);\tmore [i] = gchandle.alloc (i, t);\t}\tfor (i = 0; i < small_count; ++i) {\tmore [i].free ();\t}",
  "verifying cantimeout property returns true after a call to open",
  1
 ],
 [
  "public static void help () {",
  "where available options are",
  0
 ],
 [
  "istatisticalhititem[] statisticalhititems = data.statisticalhititems;\tif ((data.flags & profilerflags.class_events) != 0) {\tarray.sort (classes, loadedclass.comparebyallocatedbytes);\tarray.reverse (classes);\tulong totalallocatedbytes = 0;\tforeach (loadedclass c in classes) {\ttotalallocatedbytes += c.allocatedbytes;\t}\tif (totalallocatedbytes > 0) {\tprintseparator (writer);",
  "need string of aot mode full llvmonly omit for normal aot",
  1
 ],
 [
  "private static bool callsecondstructinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturnstruct();\tif ((!(bool)(((dynamic)s.instancemethod()).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "principal save context inserting new principal of type using",
  1
 ],
 [
  "private void renderpostbackcards() {\tfor (int i = 0; i < 2; i++) {\tif (_writtenpostbacktype[i]) {\twritebegintag(\"card\");\twriteattribute(\"id\", i == 0 ? _postbackwithvarscardid : _postbackwithoutvarscardid);\twriteline(\">\");\twrite(\"<onevent type=\\\"onenterforward\\\">\");\trendergoaction(null, _postbackeventargumentvarname, wmlpostfieldtype.variable, i == 0);",
  "onevent",
  0
 ],
 [
  "public void utf32encoding() {",
  "server waiting for connections",
  1
 ],
 [
  "} catch {\t}\tif (directory.getfiles (link_dir).length == 0) {\ttry {\tdirectory.delete (link_dir);\t} catch {\t}\t}\t}\tuninstalled++;",
  "uninstalled",
  0
 ],
 [
  "public void getparam20() {\tm_xsltarg = new xsltargumentlist();\tint i = 10;\tm_xsltarg.addparam(\"intarg\", \"\", i);\ttype exp = i.gettype();\ttype act = m_xsltarg.getparam(\"intarg\", \"\").gettype();",
  "added type",
  0
 ],
 [
  "public static extern bool lockwindowupdate(intptr hwndlock);\t#endregion private intptr hookhandler( intptr hwnd, int msg, intptr wparam, intptr lparam, ref bool handled ) {\thandled = false;\tswitch (msg) {\tcase sc_move: case wm_windowposchanging: safefireevent<eventargs>(windowposchanging, eventargs.empty);\tbreak;\tcase wm_mouseactivate: {\tcanceleventargs args = new canceleventargs();\tsafefireevent<canceleventargs>(windowactivating, args);\tif (args.cancel) {",
  "cancelled",
  0
 ],
 [
  "} catch (exception e) {\tstate = 1;\tconsole.writeline(\"------------------------\");\tconsole.writeline(e);\tconsole.writeline(\"------------------------\");\t}\t} catch {\tstate = 2;\t}\tif (state != 2) return 1;",
  "ok",
  0
 ],
 [
  "}\tforeach (code code in casts) {\tcasts.set (code);\tthrowers.set (code);\t}\tthrowers.set (code.throw);\tforeach (code code in overflow) {\tthrowers.set (code);\toverflow.set (code);\t}",
  "entity",
  1
 ],
 [
  "public bool stop() {\tbool ok = false;\ttry {\tsilohost.stoporleanssilo();",
  "nologo supress the startup logo",
  1
 ],
 [
  "public foo () {",
  "key settings key",
  1
 ],
 [
  "break;\tcase \"-a\": switch (args [i++].tolower ()) {\tcase \"sha512\": hashname = \"sha512\";\tbreak;\tcase \"sha256\": hashname = \"sha256\";\tbreak;\thashname = \"sha1\";\tbreak;\thashname = \"md5\";\tbreak;",
  "no replacement for variable defined",
  1
 ],
 [
  "static bool testpreinittypedata() {",
  "bad",
  1
 ],
 [
  "console.readline();\tconsole.clear();\tconsole.writeline(\"from p in db.products where p.productid == 7 select p;\");\tvar q4 = from p in db.products where p.productid == 7 select p;\tforeach (var v in q4) objectdumper.write(v);\tconsole.readline();\t#if !sqlite console.clear();\tconsole.writeline(\"from c in db.customers from o in c.orders where c.city == \\\"london\\\" select new { c, o };\");\tvar q5 = from c in db.customers from o in c.orders where c.city == \"london\" select new { c, o };\tforeach (var v in q4) objectdumper.write(v);",
  "press enter to continue",
  0
 ],
 [
  "private static void printoutcertificate(certificatebundle certificatebundle) {",
  "configuration exception not thrown",
  1
 ],
 [
  "bitmapdata data = bmp.lockbits (new rectangle (0, 0, bmp.width, bmp.height), imagelockmode.readonly, pixelformat.format24bpprgb);\ttry {\tassert.areequal (bmp.height, data.height, \"height\");\tassert.areequal (bmp.width, data.width, \"width\");\tassert.areequal (pixelformat.format24bpprgb, data.pixelformat, \"pixelformat\");\tassert.areequal (520, data.stride, \"stride\");\tint size = data.height * data.stride;\tunsafe {\tbyte* scan = (byte*) data.scan0;\t#if false for (int p = 0; p < size; p += 1009) {",
  "assert areequal scan",
  0
 ],
 [
  "} else {\tallok = false;\t}\t}\tif (allok) {\ttry {\tdirectory.delete(addininstalltemp, false);\t} catch (exception ex) {\t}\t}",
  "addinmanager installaddins finished",
  0
 ],
 [
  "public void getextobject8(xslinputtype xslinputtype, readertype readertype, outputtype outputtype, navtype navtype) {\tmyobject obj = new myobject(8, _output);\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addextensionobject(\"urn:my-object\", obj);\tretobj = m_xsltarg.getextensionobject(\"urn:my-object\");\tif (((myobject)retobj).myvalue() != obj.myvalue()) {",
  "set and retrieved value appear to be different",
  0
 ],
 [
  "static assembly myreflectionresolveeventhandler (object sender, resolveeventargs args) {",
  "load event for args name",
  0
 ],
 [
  "while (reader.read()) { }\tcerror.compare(bwarningcallback, false, \"warning count mismatch\");\tcerror.compare(berrorcallback, true, \"error count mismatch\");\tif (isimport == true) set.remove(((xmlschemaexternal)mainschema.includes[0]).schema);\txmlschema reparsedinclude = loadschema(include2, include1);\t((xmlschemaexternal)mainschema.includes[0]).schema = reparsedinclude;\tset.reprocess(mainschema);\tset.compile();\tbwarningcallback = false;\tberrorcallback = false;",
  "create table mono test",
  1
 ],
 [
  "public void callback_endreadoncallback() {\tusing (var com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (var com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\tvar callbackhandler = new callbackhandler(com1);\tint elapsedtime;",
  "nested got but expected",
  1
 ],
 [
  "static void writetestheader (string testname, params string [] method_init) {",
  "testfixture",
  0
 ],
 [
  "targetruntime targetruntime = null;\ttargetruntime defaultruntime = runtime.systemassemblyservice.defaultruntime;\tif (runtime != null) {\ttargetruntime = monotargetruntimefactory.registerruntime(new monoruntimeinfo(runtime));\tif (targetruntime != null) runtime.systemassemblyservice.defaultruntime = targetruntime;\t}\tibuildtarget item;\tif (solfile != null) item = await services.projectservice.readworkspaceitem (monitor, solfile) as ibuildtarget;\telse item = await services.projectservice.readsolutionitem (monitor, itemfile);\tif (item == null) {",
  "firefox profile list does not exist",
  1
 ],
 [
  "protected static void addrunningobjs() {",
  "ref cursor test using begin end for proc begin",
  1
 ],
 [
  "public static void main(string[] args) {\tilist<char> lst = new arraylist<char>();\tlst.addall<char>(new char[] { 'a', 'b', 'c', 'd' });\tilist<char> v1 = lst.view(1, 1);\tconsole.writeline(\"v1 = {0}\", v1);\tinsertbeforefirst(v1, '<', 'b');\tinsertafterfirst(v1, '>', 'b');\tconsole.writeline(\"v1 = {0}\", v1);\tchar x;",
  "nested got but expected",
  1
 ],
 [
  "navigationservice.resumelogging();\tloggingresumed = true;\tpositionable.jumpto(math.max(1, line), math.max(1, column));\t} else {\tnavigationservice.resumelogging();\tloggingresumed = true;\tnavigationservice.log(content);\t}\treturn content;\t} finally {",
  "saw counter get incremented to with degrees of parallelism",
  1
 ],
 [
  "tester tester = new tester();\tstring [] list = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\" };\tint top = 0;\tforeach (string s in tester){\tif (s != list [top]){\treturn 1;\t}\ttop++;\t}\tif (top != list.length){",
  "failure expected got",
  0
 ],
 [
  "static void emittargetmethod (typebuilder genericfoo) {\tmethodbuilder mb = genericfoo.definemethod (\"targetmethod\", methodattributes.public, typeof (void), new type[] {typeof (object) });\tilgenerator il = mb.getilgenerator ();\tfor (int i = 0; i < 20; ++i) il.emit (opcodes.nop);\til.emit (opcodes.ldtoken, genericargs [0]);\til.emit (opcodes.call, typeof (type).getmethod (\"gettypefromhandle\"));",
  "resourcetoolkit bclnrefactoryresourceresolver the typereference resolved to",
  1
 ],
 [
  "public void executesqlxml(string sql, string[] parms) {\tstring filename = \"\";\tif (parms.length != 2) {\treturn;\t}\ttry {\tfilename = parms [1];\t}\tcatch (exception e) {",
  "accepted invalid character",
  1
 ],
 [
  "array.sort (methods, loadedmethod.comparebytotalclicks);\tarray.reverse (methods);\tulong totalexecutionclicks = 0;\tforeach (loadedmethod m in methods) {\ttotalexecutionclicks += m.clicks;\t}\tif (totalexecutionclicks > 0) {\tprintseparator (writer);\tforeach (loadedmethod m in methods) {\tif (m.clicks > 0) {",
  "case xmltypemapping res mapping typedata csharpfullname",
  1
 ],
 [
  "int x = 0;\tfor (int i = 0; i < 100; i++) x++;\tconsole.writeline (x);\tstring useless = \"useless string\";\tif (useless.equals (\"other useless\")) {\tuseless = string.empty;\t}\tuseless = string.concat (useless,\" 1\");\tfor (int j = 0; j < useless.length; j++) {\tif (useless[j] == 'u') console.writeline (\"i have detected an u char\");",
  "invalid argument value",
  1
 ],
 [
  "public void readtimeout_0_read_byte_int_int() {",
  "get",
  1
 ],
 [
  "public static void notifyfilesremoved (ienumerable<filepath> files) {\ttry {\tonfileremoved (new fileeventargs (files, false));\t} catch (exception ex) {",
  "file remove notification failed",
  0
 ],
 [
  "sln.writeline (\"\\t\\tdebug|{0} = debug|{0}\", profile, profile);\tsln.writeline (\"\\t\\trelease|{0} = release|{0}\", profile, profile);\t}\tsln.writeline (\"\\tglobalsection(projectconfigurationplatforms) = postsolution\");\twriteprojectconfigurationplatforms (sln, jay_vcxproj_guid, \"win32\");\tforeach (var proj in libraries) {\twriteprojectconfigurationplatforms (sln, proj.projectguid, \"net_4_x\");\t}\tsln.writeline (\"\\tglobalsection(solutionproperties) = presolution\");\tsln.writeline (\"\\t\\thidesolutionnode = false\");",
  "endglobalsection",
  0
 ],
 [
  "try {\tchecked {\tbyte b = (byte)d;\t}\t}\tcatch (system.overflowexception) {\texception = true;\t}\tfinally {\tif (exception) rez++;",
  "p password password",
  1
 ],
 [
  "public static int main () {\tint total = 0;\tforeach (int i in getit (new int [] { 1, 2, 3})){",
  "cert",
  1
 ],
 [
  "assert.true(false);\t}\tif ((loadxsl(\"myobjectdef.xsl\", inputtype, readertype) == 1)) {\ttry {\ttransform_arglist(\"fruits.xml\", transformtype, doctype);\t}\tcatch (system.xml.xsl.xsltexception) {\treturn;\t}\t}",
  "exception not thrown for ns not found",
  0
 ],
 [
  "if (!double.isnegativeinfinity((double)retobj)) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg3\", szempty, d3);\tretobj = m_xsltarg.getparam(\"myarg3\", szempty);\tif (!double.isnan((double)retobj)) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg4\", szempty, d4);\tretobj = m_xsltarg.getparam(\"myarg4\", szempty);",
  "trying to get all screens",
  1
 ],
 [
  "system.threading.thread.sleep(5000);\t{\tbool repeat = true;\twhile (repeat) {\tcloudpool boundpool = batchcli.pooloperations.getpool(this.poolfixture.poolid);\trepeat = false;\tforeach (cloudtask curtask in boundjob.listtasks()) {\tif (curtask.state != microsoft.azure.batch.common.taskstate.completed) {\trepeat = true;\tthis.testoutputhelper.writeline(\"manual wait task id: \" + curtask.id + \", state = \" + curtask.state);",
  "poolstate currentdedicated",
  0
 ],
 [
  "private void domachineinit() {\tdebug.assert(_contexttype == contexttype.machine);\tdebug.assert(_container == null);\tdirectoryentry de = null;\ttry {\tstring hostname = _name;\tif (hostname == null) hostname = utils.getcomputerflatname();",
  "encrypted text base encoded",
  1
 ],
 [
  "private static bool callsecondstructinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturnstruct<int>();\tif ((!(bool)(((dynamic)s[1]).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "verifying write method throws exception with a failed call to open",
  1
 ],
 [
  "public bool movetofirstpage (solutiontemplate template, projectcreateparameters parameters) {\treset ();\tif (!template.haswizard) {\treturn false;\t}\tcurrentwizard = getwizard (template.wizard);\tif (currentwizard == null) {",
  "protected override system xml serialization xmlserializationreader createreader",
  1
 ],
 [
  "if (file.exists (filetoload)) {\txmldataserializer serializer = new xmldataserializer (new datacontext ());\tlist<tasklistentry> ts = (list<tasklistentry>) serializer.deserialize (filetoload, typeof(list<tasklistentry>));\tforeach (tasklistentry t in ts) {\tt.workspaceobject = e.item;\tusertasks.add (t);\t}\t}\t}\tcatch (exception ex) {",
  "could not load user tasks",
  0
 ],
 [
  "public override object changetype(object value, type type, cultureinfo cultureinfo) {\tvariant myvalue = new variant(value);\tif (cultureinfo == null) cultureinfo = cultureinfo.currentculture;\t#endif if (type.isbyref) {",
  "stripping byref from the type to convert to",
  0
 ],
 [
  "action ();\t}\tcatch (exception e) {\t}\t}\t}\tcatch (exception e) {\tif (e is operationcanceledexception || e is objectdisposedexception) {\t}\telse {",
  "checking out file",
  1
 ],
 [
  "this.context.clientwritekey = keyblock.readbytes(this.keymaterialsize);\tthis.context.serverwritekey = keyblock.readbytes(this.keymaterialsize);\tif (this.ivsize != 0) {\tthis.context.clientwriteiv = keyblock.readbytes(this.ivsize);\tthis.context.serverwriteiv = keyblock.readbytes(this.ivsize);\t}\telse {\tthis.context.clientwriteiv = ciphersuite.emptyarray;\tthis.context.serverwriteiv = ciphersuite.emptyarray;\t}",
  "serverwritemac",
  0
 ],
 [
  "public void test_eventsource_shutdownmanifest() {\ttestutilities.checknoeventsourcesrunning(\"start\");",
  "ok",
  1
 ],
 [
  "cmd2.executenonquery ();\t}\tcatch(oracleexception) {\t}\tcmd2.commandtext = \"create table mono_test_table2 (\" + \" col1 varchar2(8), \"+ \" col2 varchar2(32))\";\tcmd2.executenonquery ();\tcmd2.commandtext = \"create procedure sp_test2(parm1 varchar2,parm2 varchar2) \" + \" is \" + \" begin \" + \"\tinsert into mono_test_table2 (col1,col2) values (parm1,parm2);\" + \"\tcommit;\" + \" end;\";\tcmd2.executenonquery ();\tcmd2.commandtext = \"commit\";\tcmd2.executenonquery ();",
  "call stored procedure sp with two parameters",
  0
 ],
 [
  "case \"-h\": case \"-help\": case \"-?\": case \"/?\": help = true;\tbreak;\tdefault: filename = args [i];\tbreak;\t}\t}\tif ((help) || (filename == null)) help ();\telse return check (filename, quiet, verbose);\t}\tcatch (cryptographicexception ce) {",
  "warning",
  0
 ],
 [
  "public override string tostring () {\tstringwriter sw = new stringwriter ();",
  "present",
  0
 ],
 [
  "static int main() {\ttry {\tinner ();\t} catch (typeloadexception e) {",
  "error",
  1
 ],
 [
  "static void showhelp() {",
  "info gives additional information about resasm",
  0
 ],
 [
  "protected override void generatemethodreturnstatement(codemethodreturnstatement e) {",
  "codemethodreturnstatement",
  0
 ],
 [
  "}\tlclicensecontext ctx = new lclicensecontext();\tctx.licxfilename = complist;\tctx.outputfilename = path.combine(targetdir ??\".\", target)+\".licenses\";\tappdomain.currentdomain.assemblyresolve += new resolveeventhandler(currentdomain_assemblyresolve);\tprivatepaths.add(\".\");\tdictionary<string, assembly> loaded = new dictionary<string, assembly>();\tforeach (string reference in references) {\tstring path = path.getdirectoryname(reference);\tif (!privatepaths.contains(path)) {",
  "max path not reached",
  1
 ],
 [
  "object [] arguments;\targuments = new object [] { i };\tif (compare (\"iseditposition\", mask, ref stateindex, arguments, ref more_states)) {\tcontinue;\t}\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;",
  "assert areequal mtp iseditposition",
  0
 ],
 [
  "using (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writenode(xr, false);\t}\tcatch (argumentnullexception) {\tcerror.compare(w.writestate, writestate.element, \"writestate should be element\");\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "static async task<int> testfinallywithreturn (int value) {\tfin = false;\ttry {\tif (value > 4) return 5;\tvalue += 10;\t} finally {\tfin = true;\tvalue += await yieldvalue (100);\t}\tvalue += 1000;",
  "test failed at call result",
  1
 ],
 [
  "console.write (\".\");\tmonitor.wait(count_lock);\t}\t}\tforeach (var t in threads) {\tt.join();\t}\tconsole.writeline ();\titerations += 1;\t}",
  "expected",
  1
 ],
 [
  "static bool callsecondinterfaceindexer() {\tint failcount = 0; verify.firstcalled = false;\tif ( (!(bool)(((dynamic)firstclassreturninterface.staticproperty)[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "error while adding overload",
  1
 ],
 [
  "if (s9.f5 != 5+9) {\treturn 5;\t}\tif (s9.f6 != 6+9) {\treturn 6;\t}\tif (s9.f7 != 7+9) {\treturn 7;\t}\tif (s9.f8 != 8+9) {",
  "got but expected",
  0
 ],
 [
  "}\tschedule sched = curwi.schedule;\tif (null == sched) {\t}\telse {\t}\tjobschedulestatistics stats = curwi.statistics;\tif (null == stats) {\t}\telse {",
  "vr assembly userlist exempt the specified assembly from verification for the user list",
  1
 ],
 [
  "public assembly handleresolveevent (object sender, resolveeventargs args) {",
  "map file name is",
  1
 ],
 [
  "public override int compareobjects (itreenavigator thisnode, itreenavigator othernode) {\ttry {\tif (thisnode == null || othernode == null) return -1;\tvar e1 = thisnode.dataitem as namespace;\tvar e2 = othernode.dataitem as namespace;\tif (e1 == null && e2 == null) return 0;\tif (e1 == null) return 1;\tif (e2 == null) return -1;\treturn e1.name.compareto (e2.name);\t} catch (exception e) {",
  "is not abstract sealed",
  1
 ],
 [
  "} catch (exception ex) {\t}\ttry {\tif (dotnetprocess != null) {\tif (!dotnetprocess.hasexited) {\tdotnetprocess.dispose ();\t}\tdotnetprocess = null;\t}\t} catch (exception ex) {",
  "exception",
  1
 ],
 [
  "object [] arguments;\targuments = new object [] { str, i, int32_out, maskedtextresulthint_out };\tif (compare (\"insertat\", mask, ref stateindex, arguments, ref more_states)) {\tcontinue;\t}\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;",
  "input xml document to canonalize",
  1
 ],
 [
  "static string getbasedirectory (dotnetproject project) {\tif (project.parentsolution != null) return project.parentsolution.basedirectory;",
  "project has no solution using project directory as base directory for nuget project",
  0
 ],
 [
  "cmd2.transaction = transaction;\tcmd2.commandtext = \"drop table clobtest\";\tcmd2.executenonquery ();\t}\tcatch (oracleexception) {\t}\toraclecommand create = connection.createcommand ();\tcreate.transaction = transaction;\tcreate.commandtext = \"create table clobtest (clob_column clob)\";\tcreate.executenonquery ();",
  "type",
  1
 ],
 [
  "public void tempfiles4() {\ttry {\txslcompiledtransform xslt = new xslcompiledtransform();\txslt.load(fullfilepath(\"bug482971.xsl\"));\txslt.transform(fullfilepath(\"bug482971.xml\"), \"out.txt\");\t}\tcatch (exception exception) {",
  "second try block",
  1
 ],
 [
  "public void listnodeagentskus() {\taction test = () => {\tusing (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {\tvar nas = batchcli.pooloperations.listnodeagentskus().tolist();\tassert.true(nas.count > 0);\tforeach (nodeagentsku curnas in nas) {",
  "nas",
  0
 ],
 [
  "if (showlinenumbers) {\toutput.write(\"<span\");\twritestyle(output, linenumberstyle);\toutput.write('>');\toutput.write(linenumber.tostring().padleft(longestnumberlength));\toutput.write(\":  \");\toutput.write(\"</span>\");\t}\tprintwords(output, line);\t}",
  "div",
  0
 ],
 [
  "public static int main (string[] args) {\tc test = new c();\ttest[333.333] = 444.444;\tif (test[333.333] != 444.444) return 1;\ttest[\"a string\"] = \"another string\";\tif (test[\"a string\"] != \"another string\") return 2;\ttest[111] = 222;\tif (test[111] != 222) return 3;",
  "passes",
  0
 ],
 [
  "public async task longrunning_lowprioritycomputenodeallocated_isdedicatedfalse() {\tfunc<task> test = async () => {\tusing (batchclient batchcli = await testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment())) {\tstring poolid = \"testlowpri_longrunning\" + testutilities.getmyname();\tconst int targetlowpriority = 1;\ttry {\tcloudpool pool = batchcli.pooloperations.createpool( poolid, poolfixture.vmsize, new cloudserviceconfiguration(poolfixture.osfamily), targetlowprioritycomputenodes: targetlowpriority);\tawait pool.commitasync().configureawait(false);",
  "created pool",
  0
 ],
 [
  "public static void createxmllangtestfile(string strfilename) {\tstream s = new memorystream();\ttextwriter tw = new streamwriter(s);\ttw.writeline(\"<xmllang0 xml:lang=\\\"en-us\\\">what color is it?</xmllang0>\");\ttw.write(\"<xmllang1 xml:lang=\\\"en-gb\\\">what color is it?<a><b><c>language test</c><persona>dromio of ephesus</persona></b></a></xmllang1>\");\ttw.writeline(\"<empty_xmllang attr0=\\\"0\\\" xml:lang=\\\"en-us\\\" />\");\ttw.writeline(\"<xmllang2 xml:lang=\\\"en-us\\\">what color is it?<title><!-- this is a comment--></title><xmllang1 xml:lang=\\\"en-gb\\\">testing language<xmllang0 xml:lang=\\\"en-us\\\">what color is it?</xmllang0>haha </xmllang1>hihihi</xmllang2>\");",
  "donexmllang",
  0
 ],
 [
  "static void main(string[] args) {\tif (args.length == 1) {\tstring arg = args[0];\tint n = int.parse(arg);\tpoint[] pts = new point[n];\tfor (int i = 0; i < n; i++) pts[i] = point.random(500, 500);\tpoint[] chpts = convexhull.convexhull(pts);\tprint(chpts);\t}",
  "usage gconvexhull pointcount",
  0
 ],
 [
  "public string getvaultaddress() {\tvar tag = \"-vault\";\tstring keyvaultvaultaddress = getargumentvalue( tag );\tif ( keyvaultvaultaddress == string.empty ) {\tkeyvaultvaultaddress = configurationmanager.appsettings[\"vaulturl\"];",
  "is not provided using default value",
  0
 ],
 [
  "});\tthread.start ();\tdriver.mre1.waitone ();\tthread.abort ();\tthread.join ();\tif (!got_to_the_end_of_the_finally) {\tenvironment.exit (12);\t}\ttry {\tisstaticconstructor4viable ();",
  "not viable",
  0
 ],
 [
  "for (int j = 0; j < useless.length; j++) {\tif (useless[j] == 'u') console.writeline (\"i have detected an u char\");\t}\ttry {\tforeach (string environmentvariable in environment.getenvironmentvariables ().keys) console.writeline (environmentvariable);\t}\tcatch (system.security.securityexception exception) {\tconsole.writeline (exception.message);\tconsole.writeline (exception);\t}",
  "request unregister mesh registration",
  1
 ],
 [
  "rand.nextbytes(data);\tmemorystream ms = new memorystream(data, false);\tcmd.commandtext = \"insert into #blobs (id, blob) values (1, @blob)\";\tcmd.parameters.add(\"@blob\", sqldbtype.varbinary, datasize);\tcmd.parameters[\"@blob\"].direction = parameterdirection.input;\tcmd.parameters[\"@blob\"].value = ms;\ttask t = cmd.executenonqueryasync(cts.token);\tif (!t.iscompleted) cts.cancel();\ttry {\tt.wait();",
  "foo",
  1
 ],
 [
  "type t = typeof (foo);\tforeach (memberinfo m in t.getmembers ()){\tif (m.name == \"main\"){\tmethodinfo mb = (methodinfo) m;\ticustomattributeprovider p = mb.returntypecustomattributes;\tobject [] ret_attrs = p.getcustomattributes (false);\tif (ret_attrs.length != 1){\treturn 1;\t}\tif (!(ret_attrs [0] is returnattribute)){",
  "dit not get a mineattribute",
  0
 ],
 [
  "}\tcatch (aggregateexception ae) {\tif (!(ae.innerexceptions[0] is taskschedulerexception)) {\tassert.true(false, string.format(\"    > failed.  wrong inner exception thrown from wait() (sync): {0}\", ae.innerexceptions[0].gettype().name));\t}\t}\tcatch (exception e) {\tassert.true(false, string.format(\"    > failed.  wrong exception thrown (sync): {0}\", e));\t}\ttask tc2 = completedtask.continuewith(delegate { }, cancellationtoken.none, taskcontinuationoptions.none, bts);",
  "waiting on faulted task there s a problem if we deadlock",
  0
 ],
 [
  "private void string_null_char() {\tusing (serialport com1 = tcsupport.initfirstserialport()) using (serialport com2 = tcsupport.initsecondserialport(com1)) {",
  "verifying write with an string containing only the null character",
  0
 ],
 [
  "protected override void generateentrypointmethod(codeentrypointmethod e, codetypedeclaration c) {",
  "mono jscript compiler version",
  1
 ],
 [
  "thread.sleep (timestampdelay);\t}\t}\tif (!ts) {\treturn 1;\t}\t} else {\thelp ();\treturn 1;\t}",
  "success",
  0
 ],
 [
  "do {\tresultset++;\toutputline (\"display the result set \" + resultset);\tschematable = reader.getschematable ();\tif (reader.fieldcount > 0) {\toutputqueryresult (reader, schematable);\t}\telse if (reader.recordsaffected >= 0) {\t}\telse {",
  "must change file due to error",
  1
 ],
 [
  "public static void run () {\ttry {\tlong (5);\tthread.sleep (10000);\t}\tcatch (threadabortexception) {\tthread.resetabort ();",
  "ok",
  0
 ],
 [
  "public void testcomplex() {\ttest<stringcompareisculturespecificissue>(@\" class test {\tvoid foo (bool b) {",
  "foo bar",
  0
 ],
 [
  "public static void readclob (oracleconnection connection) {\toraclecommand rcmd = connection.createcommand ();\trcmd.commandtext = \"select clob_column from clobtest\";\toracledatareader reader2 = rcmd.executereader ();",
  "error record not found",
  0
 ],
 [
  "public void testgettransportobjectdoesntmissproperties() {\tconst int objectstovalidate = 100;\ttype itransportobjectprovidertype = typeof(itransportobjectprovider<>);\tienumerable<type> types = gettypeswhichimplementinterface(itransportobjectprovidertype.gettypeinfo().assembly, itransportobjectprovidertype, requirepublicconstructor: false);\tforeach (type type in types) {",
  "generating objects of type",
  0
 ],
 [
  "exc14n = (cryptoconfig.createfromname (\"http: hmacmd5 = (cryptoconfig.createfromname (\"hmacmd5\") != null);\tmerlin ();\tconsole.writeline ();\tphaos ();\t}\tcatch (exception ex) {\tconsole.writeline (ex);\t}\tfinally {\tconsole.writeline ();",
  "finished",
  0
 ],
 [
  "public bool selected;\tpublic int row;\tpublic int col;\tpublic cellselection (int row, int col, bool selected) {\tthis.selected = selected;\tthis.row = row;\tthis.col = col;\t}\t}\tstatic private void generate_case (stringbuilder result, datagridview dgv, string message, bool headers) {",
  "first assembly must be mscorlib but it was",
  1
 ],
 [
  "public void transformstrstrresolver2(inputtype inputtype, readertype readertype) {\tstring expected = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?><result></result>\";\tstring szfullfilename = fullfilepath(\"fruits.xml\");\tif (loadxsl(\"xmlresolver_document_function.xsl\", inputtype, readertype) == 1) {\tcalltransform(xslt, szfullfilename, _stroutfile, null);\tverifyresult(expected);\treturn;\t}\telse {",
  "xmlschemamanager cannot register two schemas with the same namespace",
  1
 ],
 [
  "protected override void generateentrypointmethod (codeentrypointmethod method, codetypedeclaration declaration) {\t#if net_2_0 outputattributes (method.customattributes, null, linehandling.continueline);\tindent++;\tgeneratestatements (method.statements);\tindent--;",
  "ok",
  1
 ],
 [
  "while (!cts.token.iscancellationrequested) {\tlegartifactscountlist.add(artifacts.count);\tthread.sleep(timespan.fromseconds(1));\t}\t});\tstagingstorageaccount storagecredentials = testutilities.getstoragecredentialsfromenvironment();\tusing (batchclient batchcli = await testutilities.openbatchclientfromenvironmentasync()) {\tawait this.addtaskssimpletestasync( batchcli, testname, taskcount, paralleloptions: new batchclientparalleloptions() { maxdegreeofparallelism = 2 }, resulthandlerfunc: null, storagecredentials: storagecredentials, localfilestostage: localfilestostage, filestagingartifacts: artifacts, usejoboperations: usejoboperations).configureawait(false);\tcts.cancel();\tawait t.configureawait(false);",
  "file staging leg count",
  0
 ],
 [
  "public void removeat(int index) {\t_inner.markchange();\tif ((index < 0) || (index >= _inner.combinedvalues.count)) {\tglobaldebug.writelineif(globaldebug.warn, \"principalvaluecollection\", \"removeat({0}): out of range (count={1})\", index, _inner.combinedvalues.count);\tthrow new argumentoutofrangeexception(\"index\");\t}\ttrackedcollection<t>.valueel el = _inner.combinedvalues[index];\tif (el.isinserted) {",
  "br",
  1
 ],
 [
  "public void basictest_getipv4interfacestatistics_success() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipv4interfacestatistics stats = nic.getipv4statistics();",
  "outgoingpacketsdiscarded",
  0
 ],
 [
  "public void testdonotwarninparamscase () {\ttestwrongcontext<basemethodcallwithdefaultparameterissue>(@\" public class mybase {\tpublic virtual void foobar(params int[] x) {",
  "static",
  1
 ],
 [
  "public contentvalidator finish(bool usedfa) {\tdebug.assert(contenttype == xmlschemacontenttype.elementonly || contenttype == xmlschemacontenttype.mixed);\tif (contentnode == null) {\tif (contenttype == xmlschemacontenttype.mixed) {\tstring ctype = isopen ? \"any\" : \"textonly\";",
  "generation finished ms",
  1
 ],
 [
  "output.writeline();\toutput.unindent();\t}\toutput.writeline(\"{\");\toutput.indent();\tbool oldisintype = isintype;\tisintype = true;\twriteattributes(type.customattributes);\twritesecuritydeclarations(type);\tif (type.haslayoutinfo) {",
  "size",
  0
 ],
 [
  "#if debug if (this.foundresourceset.filename != null) {\t}\t#endif break;\t}\tcontinue;\t}\ttypeofexpression t = param as typeofexpression;\tif (t != null && this.positionavailable) {\t#endif resolveresult rr = this.resolve(new typereferenceexpression(t.typereference), expressioncontext.type);\t#if debug if (rr == null) {",
  "resourcetoolkit bclnrefactoryresourceresolver the typereference of the typeofexpression could not be resolved",
  0
 ],
 [
  "w.writestartattribute(\"attr\", \"\");\t}\tcatch (invalidoperationexception) {\ttestlog.compare(w.writestate, writestate.error, \"error\");\ttry {\tw.writestartattribute(\"attr\", \"\");\t}\tcatch (invalidoperationexception) { return; }\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "string cs = \"server=127.0.0.1;port=5432;protocol={0};user id=npgsql_tests;password=npgsql_tests;database=npgsql_tests;ssl={1}\";\tcs = string.format (cs, protocol, ssl);\tif ((verbose > 0) && !showcs) {\tshowcs = true;\t}\tnpgsqlconnection m_conn = new npgsqlconnection (cs);\tm_conn.open ();\tif (m_conn.state != connectionstate.open) return false;\tstring query = \"select * from wordlist\";\tnpgsqlcommand cmd = new npgsqlcommand (query, m_conn);",
  "failed got wrong return type",
  1
 ],
 [
  "if (sol == null) {\treturn 1;\t}\tfor (int n=0; n<projects.count; n++) {\tstring pname = projects [n];\tif (pname.length == 0) {\treturn 1;\t}\tproject p = sol.findprojectbyname (pname);\tif (p == null) {",
  "project not found in solution",
  0
 ],
 [
  "private static void printoutkey(keybundle keybundle) {\tvar expirydatestr = keybundle.attributes.expires.hasvalue ? keybundle.attributes.expires.tostring() : \"never\";\tvar notbeforestr = keybundle.attributes.notbefore.hasvalue ? keybundle.attributes.notbefore.tostring() : unixtimejsonconverter.epochdate.tostring();",
  "test failed conversion result is incorrect",
  1
 ],
 [
  "private async task missingactivation_runner( int grainid, timespan lazyderegistrationdelay, bool forcecreationinsecondary = false) {",
  "assembly references threadmodelattribute",
  1
 ],
 [
  "public static void usage (string message) {\tif (message != null) {\tconsole.writeline (\"{0}{1}{0}\", environment.newline, message);\t}",
  "url one or more url to download",
  0
 ],
 [
  "if (loadxsl(\"xmlresolver_main.xsl\", inputtype, readertype) == 1) {\ts2 = new filestream(fullfilepath(\"xmlresolver_sub.xsl\"), filemode.open, fileaccess.read);\ts2.dispose();\tif (transform(\"fruits.xml\", transformtype, doctype) == 1) {\tverifyresult(expected);\ts2 = new filestream(fullfilepath(\"xmlresolver_include.xsl\"), filemode.open, fileaccess.read, fileshare.read);\ts2.dispose();\treturn;\t}\t}",
  "appeared to not close file properly after loading",
  0
 ],
 [
  "void writeisstarttag(string name, string ns) {\twriter.write(\"if (reader.isstartelement(\");\twriteid(name);\twriter.write(\", \");\twriteid(ns);\twriter.writeline(\")) {\");\twriter.indent++;\t}\tvoid writeunknownnode(string func, string node, elementaccessor e, bool anyifs) {\tif (anyifs) {",
  "foo compareto b",
  1
 ],
 [
  "public void testcomplex() {\ttest<stringcompareisculturespecificissue>(@\" class test {\tvoid foo (bool b) {",
  "no thread ids new spinlock true",
  1
 ],
 [
  "public void gettingnonexisting() {",
  "other useless string",
  1
 ],
 [
  "public void testtextreadbinhex_23() {\tbyte[] buffer = new byte[5000];\tstring strxml = \"<b>\" + new string('a', 5000);\ttry {\txmlreader datareader = getreaderstr(strxml);\tpositiononelement(datareader, \"b\");\tdatareader.read();\tif (!datareader.canreadbinarycontent) return;\tdatareader.readcontentasbinhex(buffer, 0, 5000);",
  "from p in db products orderby p productname select p",
  1
 ],
 [
  "public void clear5(object param, xslinputtype xslinputtype, readertype readertype, outputtype outputtype, navtype navtype) {\tstring baseline = path.combine(\"baseline\", (string)param);\tm_xsltarg = new xsltargumentlist();\tstring obj = \"test\";\tfor (int i = 0; i < 200; i++) {\tm_xsltarg.addparam(\"myarg2\", szempty, obj + i);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (retobj.tostring() != (obj + i)) {",
  "failed to add remove iteration",
  0
 ],
 [
  "public void bytestowritesuccessive() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tasyncwriterndstr asyncwriterndstr = new asyncwriterndstr(com, s_string_size_bytes_to_write);\tvar t1 = new task(asyncwriterndstr.writerndstr);\tvar t2 = new task(asyncwriterndstr.writerndstr);",
  "verifying bytestowrite with successive calls to write",
  0
 ],
 [
  "using (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writecdata(\"\\ud812\");\t}\tcatch (argumentexception e) {\tutils.checkerrorstate(w.writestate);\treturn;\t}\t}",
  "warning keyboardhandler processevent default handler for keventclasstextinput should not be reached",
  1
 ],
 [
  "public async task<int> run (string[] arguments) {\tforeach (string s in arguments) readargument (s);\tif (help) {",
  "p project project name of the project to build",
  0
 ],
 [
  "public static void main () {\tlist_size = 1 << 15;\ttesttimeout timeout = testtimeout.start(timespan.fromseconds(testtimeout.isstresstest ? 60 : 5));\tfor (int it1 = 1; it1 <= 10; it1++, list_size <<= 1) {\tpinlist list = makelist (list_size);",
  "long list constructed",
  0
 ],
 [
  "static private void help () {\tconsole.writeline ();",
  "thread waiting for mon",
  1
 ],
 [
  "private static bool nullableushorttypewithnumbericconversionfrombyteinassignment() {\tint failcount = 0;\tbyte? origin = byte.minvalue;\tdynamic d = origin;\tshort? result = d;\tif (result != origin) {\tfailcount++;",
  "test failed at conversion result",
  0
 ],
 [
  "public void buttonclick_noparameterunused (object o, eventargs e) {",
  "uho",
  0
 ],
 [
  "string contextmenupath = \"/sharpdevelop/reportdesigner/contextmenus/\";\tvar selectionservice = (iselectionservice)base.getservice(typeof(iselectionservice));\tif (selectionservice != null) {\tif (menuid == menucommands.trayselectionmenu) {\tcontextmenupath += \"trayselectionmenu\";\t}\telse if (selectionservice.primaryselection is rootreportmodel) {\tcontextmenupath += \"containermenu\";\t}\telse if (selectionservice.primaryselection is basesection) {",
  "found basesection",
  0
 ],
 [
  "object processnode(xmlnode node, object parent) {\tobject ret=null;\tif (node is xmlelement) {\tstring ns=node.prefix;\tstring cname=node.localname;\ttype t=gettypebyname(ns, cname);\ttry {\tret=activator.createinstance(t);\t}\tcatch(exception) {",
  "wrong node in dict for item",
  1
 ],
 [
  "foreach (object value in list) {\tconsole.write (value);\tconsole.write (environment.newline);\t}\tint x = 0;\tfor (int i = 0; i < 100; i++) x++;\tconsole.writeline (x);\tstring useless = \"useless string\";\tif (useless.equals (\"other useless\")) {\tuseless = string.empty;",
  "other useless string",
  0
 ],
 [
  "static filepath getfirefoxprofilepath (string profilename) {\tfilepath profiledir = environment.getfolderpath (environment.specialfolder.personal);\tprofiledir = profiledir.combine (\".mozilla\", \"firefox\");\tfilepath inifile = profiledir.combine (\"profiles.ini\");\tif (!file.exists (inifile)) {",
  "cannot get type",
  1
 ],
 [
  "else {\twriter.writeencodedtext (item[fieldindices[field]]);\t}\t}\tif (itemrequiresmorebutton) {\twriter.write(\"<td>\");\tstring controlmt = control.moretext;\tstring moretext = (controlmt == null || controlmt.length == 0) ? getdefaultlabel(morelabel) : controlmt;\trenderpostbackeventasanchor(writer, string.format(cultureinfo.invariantculture, showmoreformat, item.index), moretext, null /*accesskey*/, subcommandstyle, subcommandclass);\t}",
  "a hash algorithm default",
  1
 ],
 [
  "try {\tchecked {\tchar b = (char)d;\t}\t}\tcatch (system.overflowexception) {\texception = true;\t}\tfinally {\tif (exception) rez++;",
  "test failed",
  0
 ],
 [
  "public static int main () {\ttest (i => probearray (new byte [int.maxvalue - i]));\ttest (i => probearray (new byte [int.maxvalue - i * 100]));\ttest (i => probearray (new int [int.maxvalue / 4 - i]));\ttest (i => probearray (new int [int.maxvalue / 4 - i * 100]));",
  "started",
  1
 ],
 [
  "generatecomment (new codecomment (\"     this code was generated by a tool.\"));\tgeneratecomment (new codecomment (\"     mono runtime version: \" + system.environment.version));\tgeneratecomment (new codecomment (\"\"));\tgeneratecomment (new codecomment (\"     changes to this file may cause incorrect behavior and will be lost if \"));\tgeneratecomment (new codecomment (\"     the code is regenerated.\"));\tgeneratecomment (new codecomment (\" </autogenerated>\"));\tgeneratecomment (new codecomment (\"------------------------------------------------------------------------------\"));\toutput.writeline ();\tif (asbool(compileunit.userdata[\"allowlatebound\"])) {\t} else {",
  "setup oracle package curspkg join",
  1
 ],
 [
  "public static void main (string[] argv) {\tif (argv.length == 1) {\tbitmap bmp = new bitmap (argv[0]);\tbmp.save (\"bmpsave.bmp\", imageformat.bmp);\t}\telse {",
  "desktop entry",
  1
 ],
 [
  "public override string tostring () {\tstringwriter sw = new stringwriter ();",
  "wde debugcontroller ondomainunload",
  1
 ],
 [
  "public void addparam12(object param, xslinputtype xslinputtype, readertype readertype, outputtype outputtype, navtype navtype) {\tstring baseline = path.combine(\"baseline\", (string)param);\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(\"myarg1\", szempty, \"test1\");\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);",
  "hello",
  1
 ],
 [
  "else if (baseargs.count > 0) {\toutput.write(\"mybase.new(\");\toutputexpressionlist(baseargs);\toutput.write(\")\");\toutput.writeline(\"\");\t}\telse if(iscurrentclass) {\t}\tgeneratevbstatements(e.statements);\tindent--;",
  "failed",
  1
 ],
 [
  "record.setvalues(1, \"x-value\", datetime.parse(\"04/01/2000\"), 8);\trows.add(record);\trecord = new sqldatarecord(columnmetadata);\trecord.setvalues(1, \"x-value\", datetime.parse(\"04/01/2000\"), 4);\trows.add(record);\tparam.value = rows;\tusing (sqldatareader rdr = cmd.executereader()) {\twritereader(rdr);\t}\trows.clear();",
  "exception raised",
  1
 ],
 [
  "do {\tresultset++;\toutputline (\"display the result set \" + resultset);\tschematable = reader.getschematable ();\tif (reader.fieldcount > 0) {\toutputqueryresult (reader, schematable);\t}\telse if (reader.recordsaffected >= 0) {\t}\telse {",
  "sql command executed",
  0
 ],
 [
  "bool same = compare (sign.publickey, strongnamemanager.getmappedpublickey (token));\tif (!same) {\tsame = compare (sign.publickey, an.getpublickey ());\tif (!same) {\tsame = compare (sign.publickeytoken, token);\t}\t}\tif (same) {\tbool signed = sign.sign (assemblyname);\tif (!quiet || !signed) {",
  "assembly signed couldn t sign the assembly",
  0
 ],
 [
  "tw.write(\"<entity1 att1='xxx&lt;xxx&#65;xxx&#x43;xxxe1fooxxx'>xxx&gt;xxx&#66;xxx&#x44;xxxe1fooxxx</entity1>\");\ttw.writeline(\"<entity2 att1='xxx&lt;xxx&#65;xxx&#x43;xxxe1fooxxx'>xxx&gt;xxx&#66;xxx&#x44;xxxe1fooxxx</entity2>\");\ttw.writeline(\"<entity3 att1='xxx&lt;xxx&#65;xxx&#x43;xxxe1fooxxx'>xxx&gt;xxx&#66;xxx&#x44;xxxe1fooxxx</entity3>\");\ttw.writeline(\"<entity4 att1='xxx&lt;xxx&#65;xxx&#x43;xxxe1fooxxx'>xxx&gt;xxx&#66;xxx&#x44;xxxe1fooxxx</entity4>\");\ttw.writeline(\"<entity5>e1foo e3bzee </entity5>\");\ttw.writeline(\"<attribute1 />\");\ttw.writeline(\"<attribute2 a1='a1value' />\");\ttw.writeline(\"<attribute3 a1='a1value' a2='a2value' a3='a3value' />\");\ttw.writeline(\"<attribute4 a1='' />\");\ttw.writeline(string.format(\"<attribute5 crlf='x{0}x' cr='x{0}x' lf='x\\nx' ms='x     x' tab='x\\tx' />\", environment.newline));",
  "elem",
  0
 ],
 [
  "try {\tthread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();\t} finally {\t}\ttry {\tthread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();",
  "abort reset",
  0
 ],
 [
  "if (s11.f7 != 7+9) {\treturn 7;\t}\tif (s11.f8 != 8+9) {\treturn 8;\t}\tif (s11.f9 != 9+9) {\treturn 9;\t}\tif (s11.f10 != 10+9) {",
  "null deref at",
  1
 ],
 [
  "public static void displaypools(itestoutputhelper testoutputhelper, ienumerable<cloudpool> poolsenumerable) {\tlist<cloudpool> pools = new list<cloudpool>(poolsenumerable);\tint numpools = (null != pools) ? pools.count : 0;\ttestoutputhelper.writeline(\"\");\ttestoutputhelper.writeline(\"\");\tforeach (cloudpool curpool in pools) {\ttestoutputhelper.writeline(curpool.id + \":\");\tif (curpool.statistics != null) {",
  "added value retrieved value",
  1
 ],
 [
  "int result = idisp.gettypeinfocount(out count);\tif (result != 0) {\tthrow new comexception(\"(probably a bug, please report) \" + \"failed on gettypeinfocount\", result);\t}\tif (count == 0) {\ttraceutil.writelinewarning (typeof(comobjectinfo), \"comobjinfo - \" + \" typeinfo count = 0: \" + _obj);\tthrow new exception(\"this object has no type information \" + \"(gettypeinfocount returned 0).  \");\t}\tresult = idisp.gettypeinfo(0, 0, out _typeinfo);\tif (result != 0) {",
  "using system",
  1
 ],
 [
  "using (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writeraw(null, 0, 0);\t}\tcatch (argumentnullexception) {\tcerror.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "skipped",
  1
 ],
 [
  "try {\tthread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();\t} finally {\t}\ttry {\t} catch(threadabortexception) {\tthread.resetabort();\t} finally {",
  "threadabortexception finally",
  0
 ],
 [
  "public void querynotification (nsnotification note) {\tif (note.name == nsmetadataquery.didstartgatheringnotification) {",
  "define mono aot mode llvmonly",
  1
 ],
 [
  "public void appendtext (string text) {",
  "f is",
  1
 ],
 [
  "static void help (string details) {\tswitch (details) {\tbreak;\tbreak;\tbreak;",
  "about to enter callback lock already entered",
  1
 ],
 [
  "public static void dataadaptertest2_delete (oracleconnection con) {\tconsole.writeline(\"================================\");\tconsole.writeline(\"=== adapter delete =============\");\tconsole.writeline(\"================================\");\toracletransaction transaction = con.begintransaction ();\toracledataadapter da = new oracledataadapter(\"select * from mono_adapter_test\", con);\toraclecommandbuilder mycb = new oraclecommandbuilder(da);",
  "set transr",
  0
 ],
 [
  "public static int mainmethod() {\tint failcount = 0;\tdynamic d = new first();\tif ((!(bool)(((dynamic)(((second)d.m1()).p2 + 3))[4])) || (testcount.callcount != 4)) {\tfailcount++;",
  "loading xml",
  1
 ],
 [
  "static byte [] notmodifiedsincehandler (socket socket) {\tstringwriter sw = new stringwriter ();",
  "date fri feb gmt",
  0
 ],
 [
  "thread.currentthread.abort (\"test_0_thread_abort_water_mark\");\t} catch (threadabortexception e) {\thastry ();\tthread.resetabort ();\tfailed = false;\t} finally {\tif (failed) {\tthread.resetabort ();\tthrow new exception (\"threw pending threadabort exception under stack threshold\");\t}",
  "working thread abort",
  0
 ],
 [
  "signed = x509.verifysignature (signer.dsa);\t} else {\tsigned = true;\t}\t}\tcatch {\tfailed = true;\t}\t}\tif (failed) {",
  "failed to add get a value for of type string",
  1
 ],
 [
  "cleanupcache ();\tparsers = addinmanager.getextensionnodes<typesystemparsernode> (\"/monodevelop/typesystem/parser\");\tbool initialload = true;\taddinmanager.addextensionnodehandler (\"/monodevelop/typesystem/parser\", delegate (object sender, extensionnodeeventargs args) {\tif (!initialload) parsers = addinmanager.getextensionnodes<typesystemparsernode> (\"/monodevelop/typesystem/parser\");\t});\tinitialload = false;\ttry {\temptyworkspace = new monodevelopworkspace (null);\t} catch (exception e) {",
  "can t create roslyn workspace",
  0
 ],
 [
  "writeline (\"\");\tforeach (generationresult res in generatedmaps) {\tres.serializerclassname = getuniqueclassname (res.mapping.elementname + \"serializer\");\twritelineind (\"{\");\twritelineuni (\"}\");\twriteline (\"\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twriteline (\"\");\t}",
  "class system xml serialization xmlserializerimplementation",
  0
 ],
 [
  "private static bool callsecondinterfaceinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturninterface();\tif ((!(bool)(((dynamic)s[1]).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public static int operator * (blah i, blah j) {",
  "events test passes",
  1
 ],
 [
  "static void downloadwsdls (string host) {\tconsole.writeline ();",
  "thread a i m after wait for event",
  1
 ],
 [
  "public void testtextreadbinhex_23() {\tbyte[] buffer = new byte[5000];\tstring strxml = \"<b>\" + new string('a', 5000);\ttry {\txmlreader datareader = getreaderstr(strxml);\tpositiononelement(datareader, \"b\");\tdatareader.readelementcontentasbinhex(buffer, 0, 5000);",
  "v",
  1
 ],
 [
  "}\tcatch (exception exc) {\texitcode = 1;\t}\tconsole.writeline(\"==> press any key to exit <==\");\tconsole.readkey();\ttry {\tprog.stop();\t}\tcatch (exception exc) {",
  "ignoring shutdown error",
  0
 ],
 [
  "itfs[48] = new foo48();\titfs[49] = new foo49();\tstringbuilder sb = new stringbuilder();\tint counter = 0;\tfor (int i = 0; i < 50; i++) {\tsb.append(itfs[i].getastring());\tcounter += itfs[i].getanint();\t}\tstring expected = \"foo0foo1foo2foo3foo4foo5foo6foo7foo8foo9foo10foo11foo12foo13foo14foo15foo16foo17foo18foo19foo20foo21foo22foo23foo24foo25foo26foo27foo28foo29foo30foo31foo32foo33foo34foo35foo36foo37foo38foo39foo40foo41foo42foo43foo44foo45foo46foo47foo48foo49\";\tif (!expected.equals(sb.tostring())) {",
  "failed operator",
  1
 ],
 [
  "protected virtual void updatemethodwithcodedependency (location methodregion) {\tif (methodregion == null) return;\tvar sourcetree = methodregion.sourcetree;\tif (sourcetree == null) return;\tvar proj = this.service.project.getcodeanalysisproject ();\tif (proj == null) {",
  "got but expected",
  1
 ],
 [
  "s14.f13 = 13;\ts14.f14 = 14;\ts14 = mono_return_sbyte14(s14, 9);\tif (s14.f1 != 1+9) {\treturn 1;\t}\tif (s14.f2 != 2+9) {\treturn 2;\t}\tif (s14.f3 != 3+9) {",
  "result",
  1
 ],
 [
  "new float[] \t{2,\t0,\t0, \t0, \t0}, new float[] \t{0,\t1,\t0, \t0, \t0}, new float[] \t{0,\t0,\t1, \t0, \t0}, new float[] \t{0,\t0,\t0, \t1, \t0}, new float[] \t{0.2f,\t0,\t0, \t0, \t0}, });\tclr_src = color.fromargb (255, 100, 20, 50);\tclr_rslt = processcolormatrix (clr_src, colormatrix);\t}\t{\tcolormatrix colormatrix = new colormatrix (new float[][] {\tnew float[] \t{0.5f,\t0,\t0, \t0, \t0}, new float[] \t{0.5f,\t1,\t0, \t0, \t0}, new float[] \t{0,\t0,\t1, \t0, \t0}, new float[] \t{0,\t0,\t0, \t1, \t0}, new float[] \t{0.2f,\t0,\t0, \t0, \t0}, });\tclr_src = color.fromargb (255, 100, 20, 50);\tclr_rslt = processcolormatrix (clr_src, colormatrix);\t}",
  "green",
  0
 ],
 [
  "private void attributeidentityconstraints(string name, string ns, object obj, string sobj, xmlschemadatatype datatype) {\tfor (int ci = _startidconstraint; ci < _validationstack.length; ci++) {\tif (((validationstate)(_validationstack[ci])).constr == null) {\tcontinue;\t}\tconstraintstruct[] constraintstructures = ((validationstate)_validationstack[ci]).constr;\tfor (int i = 0; i < constraintstructures.length; ++i) {\tfor (int j = 0; j < constraintstructures[i].axisfields.count; ++j) {\tlocatedactiveaxis laxis = (locatedactiveaxis)constraintstructures[i].axisfields[j];\tif (laxis.movetoattribute(name, ns)) {",
  "attribute field filling value",
  0
 ],
 [
  "public void seek_badoffset_badorigin() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tcom.open();",
  "failed got wrong return type",
  1
 ],
 [
  "public static idictionary<string, string> load(string filename, parameters parameters) {\tif (!system.io.file.exists(filename)) throw new argumentexception(\"renames file missing:\" + parameters.aliases);",
  "to match against member descriptions for example to ignore the",
  1
 ],
 [
  "public async task automaticormanual_doesntfailregardlessofwhetherclientcertsareavailable(clientcertificateoption mode) {\tif (!backendsupportscustomcertificatehandling) {",
  "got but expected",
  1
 ],
 [
  "object [] arguments;\targuments = new object [] { str, i };\tif (compare (\"verifyescapechar\", mask, ref stateindex, arguments, ref more_states)) {\tcontinue;\t}\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;",
  "verifying read method throws exception after a call to cloes",
  1
 ],
 [
  "list<string> listlanguages = new list<string> ();\tforeach (string item in xmlconfiguration [\"languagename\"].innertext.split (',')) listlanguages.add (item.trim ());\texpandlanguagewildcards (listlanguages);\tthis.languagename = listlanguages [0];\tif (listlanguages.count > 1 && !string.isnullorempty (languagename) && !category.startswith (languagename + \"/\")) category = languagename + \"/\" + category;\tfor (int i = 1; i < listlanguages.count; i++) {\tstring language = listlanguages[i];\ttry {\tprojecttemplates.add (new projecttemplate (addin, id, codon, language));\t} catch (exception e) {",
  "hello",
  1
 ],
 [
  "private static bool callsecondinterfaceinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturninterface();\tif ((!(bool)(((dynamic)s.instanceproperty).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "\"usage: bundling [options]+\", \"demo program to show the effects of bundling options and their values\", \"\", \"gcc-like options:\", { \"d:\", \"predefine a macro with an (optional) value.\", (m, v) => {\tif (m == null) throw new optionexception (\"missing macro name for option -d.\", \"-d\");\tmacros.add (m, v);\t} }, { \"d={-->}{=>}\", \"alternate macro syntax.\", (m, v) => macros.add (m, v) }, { \"o=\", \"specify the output file\", v => output = v }, \"\", \"tar-like options:\", { \"f=\", \"the input file\",   v => input = v }, { \"x\",  \"extract the file\", v => extract = v != null }, { \"c\",  \"create the file\",  v => create = v != null }, { \"t\",  \"list the file\",    v => list = v != null }, \"\", \"ls-like optional values:\", { \"color:\", \"control whether and when color is used\", v => color = v }, \"\", \"other:\", { \"h|help\",  \"show this message and exit\", v => show_help = v != null }, { \"<>\", v => console.writeline (\"def handler: color={0}; arg={1}\", color, v)}, };\ttry {\tp.parse (args);\t}\tcatch (optionexception e) {\tconsole.write (\"bundling: \");\tconsole.writeline (e.message);",
  "try greet help for more information",
  0
 ],
 [
  "if (t != null) {\tmessage = string.format (\"{0} is included in the {1} assembly.\", t.fullname, t.assembly.getname ().name);\tgoto found;\t}\t}\t} catch (exception e){\t}\t}\t}\tnotfound: if (t == null) {",
  "output frame",
  1
 ],
 [
  "total = 0;\tforeach (int x in s.get (100)){\ttotal += x;\t}\tif (total != 110) return 3;\ttotal = 0;\tforeach (int x in s.gets (1)){\ttotal += x;\t}\tif (total != 1101) return 4;",
  "got but expected",
  1
 ],
 [
  "public void utf32encoding() {",
  "verifying write method with",
  0
 ],
 [
  "}\telse file.delete (pfile);\t}\twriteerror (errdoc, ns, \"errors found while generating \" + prot + \" proxy for wsdl: \" + wsdl, err);\t}\telse {\tif (file.exists (pfile)) {\tproxies.add (pfile);\t}\telse {",
  "fail",
  0
 ],
 [
  "static void outparmtest3 (oracleconnection con) {\toraclecommand cmd2 = con.createcommand();\tcmd2.commandtext = \"create or replace function sf_testoutparm3(parm1 in date, parm2 out date, parm3 in out date) return date \" + \"is \" + \"   returnvalue date := to_date('2001-07-01 15:32:52', 'yyyy-mm-dd hh24:mi:ss');\" + \"begin \" + \"   if parm1 is null then \" + \"      parm2 := to_date('1900-12-31', 'yyyy-mm-dd'); \" + \"      parm3 := to_date('1900-12-31', 'yyyy-mm-dd'); \" + \"   elsif parm1 = to_date('1979-11-25','yyyy-mm-dd') then \" + \"      parm2 := null;\" + \"      parm3 := null;\" + \"      returnvalue := null;\"+ \"   elsif parm3 is null then \" + \"      parm2 := to_date('2008-08-08', 'yyyy-mm-dd');\" + \"      parm3 := to_date('2000-01-01', 'yyyy-mm-dd');\" + \"   else \" + \"      -- add 3 days to date\\n \" + \"\t   parm2 := parm1 + 3; \" + \"      parm3 := parm3 + 5; \" + \"   end if; \" + \"   return returnvalue;\" + \"end;\";\tcmd2.executenonquery();\tcmd2.commandtext = \"commit\";\tcmd2.executenonquery();",
  "deleting pool",
  1
 ],
 [
  "static void showinfo() {",
  "input format of the text file",
  0
 ],
 [
  "s = sr.readtoend ();\t}\tusing (streamwriter sw = new streamwriter (args [3], false, encoding.getencoding (int.parse (args [2])))) {\tsw.write (s);\t}\tstring s2;\tusing (streamreader sr = new streamreader (args [3], encoding.getencoding (int.parse (args [2])))) {\ts2 = sr.readtoend ();\t}\tif (s != s2) {",
  "got but expected",
  1
 ],
 [
  "openscope(\"get\");\tclosescope();\tclosescope(\"handletype\");\topenscope(\"internal override void visit(irecordvisitor visitor)\");\tforeach (var member in record.members) {\tif ((member.flags & memberdefflags.recordref) == 0) continue;\twriteline($\"{member.name} = visitor.visit(this, {member.name});\");\t}\tclosescope(\"visit\");\topenscope(\"public override sealed bool equals(object obj)\");",
  "return true",
  1
 ],
 [
  "private unsafe intptr buildgenericlookuptarget(typesystemcontext typesystemcontext, intptr context, intptr signature, out intptr auxresult) {",
  "buildgenericlookuptarget for",
  0
 ],
 [
  "var si = source.element (\"classes\");\tif (si != null) {\tvar ti = target.element (\"classes\");\tkcomparer = new nestedclasscomparer ();\tkcomparer.compare (si.elements (\"class\"), ti == null ? null : ti.elements (\"class\"));\t}\tvar s = (output as stringwriter).tostring ();\tstate.output = output;\tif (s.length > 0) {\tvar tn = gettypename (target);",
  "start type div",
  0
 ],
 [
  "public void state_4(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartdocument();\tw.writestartelement(\"root\");\tw.writeendelement();\tw.writecharentity('\\ud23e');\t}\tcatch (invalidoperationexception e) {",
  "exception",
  0
 ],
 [
  "static void usage (optionset options) {\tif (options != null) {\tconsole.writeline ();",
  "available options",
  0
 ],
 [
  "debug.assert(attribute != null && attribute.length > 0);\tdirectoryentry copyofde = null;\ttry {\tcopyofde = sdsutils.builddirectoryentry(depath, credentials, authtypes);\tdebug.assert(copyofde != null);\tcopyofde.refreshcache(new string[] { attribute });\tcopyofde.properties[attribute].value = value;\tcopyofde.commitchanges();\t}\tcatch (system.runtime.interopservices.comexception e) {",
  "sdsutils writeattribute caught exception with message writing to on",
  0
 ],
 [
  "s9.f5 = 5;\ts9.f6 = 6;\ts9.f7 = 7;\ts9.f8 = 8;\ts9.f9 = 9;\ts9 = mono_return_double9(s9, 9);\tif (s9.f1 != 1+9) {\treturn 1;\t}\tif (s9.f2 != 2+9) {",
  "test",
  1
 ],
 [
  "boundjobschedule.schedule = new schedule() {\trecurrenceinterval = recurrenceinterval };\tboundjobschedule.commit();\tassertjobschedulecorrectness(batchcli.jobscheduleoperations, boundjobschedule, this.poolfixture.poolid, jobschedulepriority, jobmanagerid, jobmanagercommandline, recurrenceinterval, metadata);\tconst int newjobschedulepriority = 1;\tboundjobschedule.jobspecification.priority = newjobschedulepriority;\tboundjobschedule.commit();\tassertjobschedulecorrectness(batchcli.jobscheduleoperations, boundjobschedule, this.poolfixture.poolid, newjobschedulepriority, jobmanagerid, jobmanagercommandline, recurrenceinterval, metadata);\tconst string newjobmanagercommandline = \"ping 127.0.0.1 -n 150\";\tboundjobschedule.jobspecification.jobmanagertask.commandline = newjobmanagercommandline;",
  "updating jobspecification jobmanagertask commandline",
  0
 ],
 [
  "public static void thread() {\tthread.sleep(500);\tthread.sleep(500);\tthread.currentthread.isbackground = true;",
  "failed to remove",
  1
 ],
 [
  "try {\tchecked {\tushort b = (ushort)d;\t}\t}\tcatch (system.overflowexception) {\texception = true;\t}\tfinally {\tif (exception) rez++;",
  "modulus or exponent not equal",
  1
 ],
 [
  "else if ((member.flags & memberdefflags.customcompare) != 0) {\t}\telse {\twriteline($\"if ({member.name} != other.{member.name}) return false;\");\t}\t}\tif ((record.flags & recorddefflags.reentrantequals) != 0) {\twriteline(\"}\");\twriteline(\"{\");\twriteline(\"    var popped = _equalsreentrancyguard.value.pop();\");",
  "ok",
  1
 ],
 [
  "calldescrdata.psrc = locals.transitionblockptr + sizeof(transitionblock);\tcalldescrdata.ptarget = locals.intptrfnptr.topointer();\tif (op.op == callconversionoperation.opcode.call_descr_managed_with_retbuf_as_localblock_x_pointer_y_stackslots_z_fpcallinfo_w) runtimeaugments.calldescrworker(new intptr(&calldescrdata));\telse runtimeaugments.calldescrworkernative(new intptr(&calldescrdata));\t}\tbreak;\tcase callconversionoperation.opcode.copy_x_bytes_from_retbuf_to_localblock_y_pointer_z: {\tvoid* psrc = locals.intptrreturnval.topointer();\tvoid* pdst = locals.getlocalblock(op.y).getrawmemorypointer()[op.z].topointer();\tbuffer.memorycopy(psrc, pdst, op.x, op.x);",
  "help show this message and exit",
  1
 ],
 [
  "private static bool callsecondstructoperator() {\tint failcount = 0;\tdynamic d = new firstclassreturnstruct();\tverify.firstcalled = false;\tif ((!(((secondstruct)d.instanceproperty) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public async task preferlocalplacementgrain_shouldnotmigratewhenothersilokilled(string value) {\tawait hostedcluster.waitforlivenesstostabilizeasync();",
  "state is null",
  1
 ],
 [
  "public void hello (t t) {",
  "hello",
  0
 ],
 [
  "public void testcase6() {\ttest<stringcompareisculturespecificissue>(@\" class test {\tvoid foo () {",
  "exception raised",
  1
 ],
 [
  "}\treturn h;\tthe pairs (-1657792980, -1570288808) and (1862883298, -272461342) gives the same unsequenced hashcode with this hashfunction. the pair was found with code like hashdictionary<int, int[]> set = new hashdictionary<int, int[]>();\trandom rnd = new c5random(12345);\twhile (true) {\tint[] a = new int[2];\ta[0] = rnd.next(); a[1] = rnd.next();\tint h = unsequencedhashcode(a);\tint[] b = a;\tif (set.findoradd(h, ref b)) {",
  "code pair number matched other pair",
  0
 ],
 [
  "cmd.commandtext = \"create table #blobs (id int, blob xml)\";\tcmd.executenonquery();\tcmd.commandtext = \"insert into #blobs (id, blob) values (1, @blob)\";\tcmd.parameters.add(\"@blob\", sqldbtype.xml, -1);\tcmd.parameters[\"@blob\"].direction = parameterdirection.input;\tcmd.parameters[\"@blob\"].value = xmlreader.create(new stringreader(xmlstr));\ttask t = cmd.executenonqueryasync(cts.token);\tif (!t.iscompleted) cts.cancel();\ttry {\tt.wait();",
  "failed",
  1
 ],
 [
  "static void main () {\tconsole.writeline (\"/*\");\tconsole.writeline (\"*/\");\tforeach (var c in cookies) {",
  "i have detected an useless char",
  1
 ],
 [
  "assert.true(false);\t}\tm_xsltarg.addparam(\"myarg5\", szempty, d5);\tretobj = m_xsltarg.getparam(\"myarg5\", szempty);\tif (!d5.equals(retobj)) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg6\", szempty, d6);\tretobj = m_xsltarg.getparam(\"myarg6\", szempty);\tif (!d6.equals(retobj)) {",
  "retrieved",
  0
 ],
 [
  "public override void writeentry (string [] replacementstrings, eventlogentrytype type, uint instanceid, short category, byte [] rawdata) {\tlock (lockobject) {\tstring logdir = findlogstore (coreeventlog.log);\tint index = getlatestindex () + 1;\tstring logpath = path.combine (logdir, index.tostring (cultureinfo.invariantculture) + \".log\");\ttry {\tusing (textwriter w = file.createtext (logpath)) {",
  "category",
  0
 ],
 [
  "public override void writecomment(commenttype commenttype, string content) {\twriteindentation();\tswitch (commenttype) {",
  "found file",
  1
 ],
 [
  "public static void userefboolincondition(ref bool x) {\tif (x) {",
  "true",
  0
 ],
 [
  "public async task asyncserialexecutortests_parallelsubmit() {\tasyncserialexecutor executor = new asyncserialexecutor();\trandom = new saferandom();\tconcurrentstack<task> tasks = new concurrentstack<task>();\tlist<task> enqueuetasks = new list<task>();\tfor (int i = 0; i < 10; i++) {\tint capture = i;\tenqueuetasks.add( task.run(() => {",
  "td td",
  1
 ],
 [
  "public void unpublish() {\tif (!ispublished) return;",
  "wde programpublisher unpublish",
  0
 ],
 [
  "static void startcollectingstacks () {\tvar startinfo = new processstartinfo (\"sample\");\tstartinfo.useshellexecute = false;\toutputfilepath = path.gettempfilename ();",
  "storing in",
  0
 ],
 [
  "foreach(xmlschemaattribute attribute in derivedtype.attributeuses.values) {\txmlschemaattribute attributebase = (xmlschemaattribute)basetype.attributeuses[attribute.qualifiedname];\tif (attributebase != null) {\tcontinue;\t}\tif (baseattributewildcard == null || !baseattributewildcard.allows(attribute.qualifiedname)) {\t#if debug string position = string.empty;\tif (derivedtype.sourceuri != null) {\tposition = \" in \" + derivedtype.sourceuri + \"(\" + derivedtype.linenumber + \", \" + derivedtype.lineposition + \")\";\t}",
  "invalid complextype attributes restriction",
  0
 ],
 [
  "public void transformgeneric3(inputtype inputtype, readertype readertype, transformtype transformtype, doctype doctype) {\tstring expected = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?><result> 1.no value specified 2.no value specified 3.no value specified 4.no value specified 5.no value specified 6.no value specified</result>\";\tif (loadxsl(\"showparam.xsl\", inputtype, readertype) == 1) {\tfor (int i = 0; i < 100; i++) {\tif (transform(\"fruits.xml\", transformtype, doctype) != 1) {",
  "protected override void serialize object obj system xml serialization xmlserializationwriter writer",
  1
 ],
 [
  "public async task negotiatestream_streamtostream_kerberosauthdefaultcredentials_success() {\tif (!_iskrbavailable) {",
  "skipping negotiatestream streamtostream kerberosauthdefaultcredentials success",
  0
 ],
 [
  "private static bool callsecondstructinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tdynamic d = new firstclassreturnstruct();\tif ((!(((secondstruct)d[1]).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "foreach (string lib in libpaths) librarianargs.add (string.format (\"-l {0}\", librarian.quotearg (lib)));\taddmonolibraries (librarian, staticlinkmono, staticlinkcruntime, librarianargs);\tlibrarianargs.add (\"-o \" + librarian.quotearg (output));\treturn;\t}\tstatic toolchainprogram getassemblercompiler () {\tstring assembler = getenv (\"as\", \"\");\tif (assembler.length != 0) return new toolchainprogram (\"as\", assembler);\tvar vcclangassembler = visualstudiosdktoolchainhelper.getinstance ().getvcclangcompiler ();\tif (vcclangassembler == null || vcclangassembler.path.length == 0) {",
  "debug",
  1
 ],
 [
  "public async void voidmethodwithoutawait() {",
  "preferlocalplacement grain was originally located on silo",
  1
 ],
 [
  "public void testnameclash() {",
  "end",
  1
 ],
 [
  "xslt.load(nrtemp, xsltsettings.trustedxslt, xr);\t}\tfinally {\tif (nrtemp != null) nrtemp.dispose();\t}\tbreak;\tcase readertype.xmlvalidatingreader: default: xrs = new xmlreadersettings();\t#pragma warning disable 0618 xrs.prohibitdtd = false;\t#pragma warning restore 0618 xmlreader vrtemp = xmlreader.create(_strxslfile, xrs);\ttry {",
  "test passes",
  1
 ],
 [
  "public void noargument() {\ttest<extractmethodaction>(@\"class testclass {\tvoid testmethod () {\tint i = 5;\t}\t\", @\"class testclass {\tstatic void newmethod () {",
  "xmlschemamanager found schemas",
  1
 ],
 [
  "cil_strip_path = args [++i];\tbreak;\tcase \"--aot-runtime\": if (i+1 == top) {\treturn 1;\t}\taot_runtime = args [++i];\taot_compile = true;\tstatic_link = true;\tbreak;\tcase \"--aot-dedup\": if (i+1 == top) {",
  "warning configured endpoint address not found in configuration",
  1
 ],
 [
  "static void dumpsignature (signature s) {\tif (s.keyinfo != null) dumpkeyinfo (s.keyinfo);",
  "test failed at conversion result",
  1
 ],
 [
  "public void machineconfig () {\tsysconfig config = configurationmanager.openmachineconfiguration ();",
  "machine config path",
  0
 ],
 [
  "public void noargument() {\ttest<extractmethodaction>(@\"class testclass {\tvoid testmethod () {\tint i = 5;\t}\t\", @\"class testclass {\tstatic void newmethod () {",
  "hello world",
  0
 ],
 [
  "public static int main () {\tlist<foo> test = new list<foo> () {\tnew foo { name=\"b\", value1=37, value2=2 }, new foo { name=\"b\", value1=37, value2=1 }\t};\tvar result = from item in test orderby item.name, item.value1, item.value2 select item;\tvar r = result.tolist ();\tforeach (foo item in r) console.writeline (\"{0}, {1}, {2}\", item.name, item.value1, item.value2);\tif (r[0].value2 != 1 && r[1].value2 != 2) return 1;",
  "ok",
  0
 ],
 [
  "protected abstract void handleerror(int errorcode);\tprivate void cancel() {\tsafehandle handle = _threadpoolbinding.handle;\tnativeoverlapped* overlapped = overlapped;\tif (!handle.isinvalid && !interop.kernel32.cancelioex(handle, overlapped)) {\tint errorcode = marshal.getlastwin32error();",
  "error while saving changes to",
  1
 ],
 [
  "_restrictionerrormsg = null;\tif (basetype != null && basetype != xmlschemacomplextype.anytype && complextype.derivedby == xmlschemaderivationmethod.restriction) {\txmlschemaparticle derivedparticle = cannonicalizepointlessroot(complextype.contenttypeparticle);\txmlschemaparticle baseparticle = cannonicalizepointlessroot(basetype.contenttypeparticle);\tif (!isvalidrestriction(derivedparticle, baseparticle)) {\t#if debug if (complextype.contenttypeparticle != null && basetype.contenttypeparticle != null) {\tstring position = string.empty;\tif (complextype.sourceuri != null) {\tposition = \" in \" + complextype.sourceuri + \"(\" + complextype.linenumber + \", \" + complextype.lineposition + \")\";\t}",
  "invalid complextype content restriction",
  0
 ],
 [
  "if (s16.f3 != 3+9) {\treturn 3;\t}\tif (s16.f4 != 4+9) {\treturn 4;\t}\tif (s16.f5 != 5+9) {\treturn 5;\t}\tif (s16.f6 != 6+9) {",
  "got but expected",
  0
 ],
 [
  "cmd2.commandtext = \"alter session set nls_date_format = 'yyyy-mm-dd hh24:mi:ss'\";\tcmd2.executenonquery ();\ttry {\tcmd2.commandtext = \"drop table mono_test_table7\";\tcmd2.executenonquery ();\t}\tcatch(oracleexception) {\t}\tcmd2.commandtext = \"create table mono_test_table7(\" + \" col1 varchar2(8) not null, \" + \" col2 varchar2(32), \" + \" col3 number(18,2), \" + \" col4 number(18,2), \" + \" col5 date not null, \" + \" col6 date, \" + \" col7 blob not null, \" + \" col8 blob, \" + \" col9 clob not null, \" + \" col10 clob \" + \")\";\tcmd2.executenonquery ();",
  "base",
  1
 ],
 [
  "taskservice.errors.clearbyowner (file);\tvar result = new singlefilecustomtoolresult ();\tmonitor.begintask (gettextcatalog.getstring (\"running generator '{0}' on file '{1}'...\", file.generator, file.name), 1);\ttry {\tawait tool.generate (monitor, file.project, file, result);\tif (!monitor.haserrors && !monitor.haswarnings) {\tsucceeded++;\t} else if (!monitor.haserrors) {\twarnings++;\t} else {",
  "warning table has no primary key multiple c objects will refer to the same row",
  1
 ],
 [
  "public bool verifynode(xmlnodetype eexpnodetype, string strexpname, string strexpvalue) {\tbool bpassed = true;\tif (nodetype != eexpnodetype) {",
  "expected nodetype",
  0
 ],
 [
  "public void testaddbracestolock() {\ttest<addbracesaction>(@\"class testclass {\tvoid test () {",
  "hello",
  0
 ],
 [
  "public int getextnobject1(object args) {\tobject retobj;\tfor (int i = 1; i <= 100; i++) {\tretobj = xsltarg1.getextensionobject(((object[])args)[1].tostring());",
  "comobjectinfo checking iid",
  1
 ],
 [
  "public static void displayjobschedulelong(itestoutputhelper testoutputhelper, cloudjobschedule curwi) {\t{\tjobscheduleexecutioninformation wiexinfo = curwi.executioninformation;\trecentjob rj = wiexinfo.recentjob;\tif (null == rj) {\t}\telse {",
  "id",
  0
 ],
 [
  "private void renderlistviewitem (xhtmlmobiletextwriter writer, objectlistitem item, int fieldcount, int[] fieldindices, bool itemrequiresmorebutton, bool itemrequireshyperlink) {\tstyle style = style;\tstyle subcommandstyle = control.commandstyle;\tstring accesskey = getcustomattributevalue(item, xhtmlconstants.accesskeycustomattribute);\tstring cssclass = getcustomattributevalue(item, xhtmlconstants.cssclasscustomattribute);\tstring subcommandclass = getcustomattributevalue(xhtmlconstants.csscommandclasscustomattribute);\tif (subcommandclass == null || subcommandclass.length == 0) {\tsubcommandclass = cssclass;\t}",
  "tr",
  0
 ],
 [
  "static void dopostgrestest (idbconnection cnc) {\tidatareader reader;\tobject odatavalue;",
  "verifying discard method throws exception after a call to cloes",
  1
 ],
 [
  "xpathdocument xd = new xpathdocument(xrdata, xmlspace.preserve);\txrdata.dispose();\txslcompiledtransform xslt = new xslcompiledtransform();\txmlreadersettings xrs = new xmlreadersettings();\t#pragma warning disable 0618 xrs.prohibitdtd = false;\t#pragma warning restore 0618 xmlreader xrtemp = xmlreader.create(_strxslfile);\txslt.load(xrtemp);\tstringwriter sw = new stringwriter();\tfor (int i = 1; i <= 100; i++) {\txslt.transform(xd, xsltarg1, sw);",
  "usage git version command args",
  1
 ],
 [
  "if (process.exitcode == 0) {\treturn true;\t} else {\treturn false;\t}\t}\t} catch (operationcanceledexception) {\tthrow;\t} catch (exception ex) {\tprogressmonitor.log.writeline (ex.message);",
  "error use either or pvk and cert",
  1
 ],
 [
  "if (i != null) {\tvar interfaces = new list<string> ();\tforeach (var iface in i.elements (\"interface\")) interfaces.add (icomparer.getdescription (iface));\toutput.write ((baseclass == null) ? \" : \" : \", \");\toutput.write (string.join (\", \", interfaces));\t}\t}\toutput.writeline (\" {\");\tvar t = target.element (\"constructors\");\tif (t != null) {",
  "here",
  1
 ],
 [
  "public void writeattributes_4(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\tusing (xmlreader xr = createreader(\"xmlreader.xml\")) {\twhile (xr.read()) {\tif (xr.localname == \"attributesgeneric\") {\tdo { xr.read(); } while (xr.localname != \"node\");\tbreak;\t}\t}\tif (xr.nodetype != xmlnodetype.element) {",
  "hello world",
  1
 ],
 [
  "public static void creategenerictestfile(string strfilename) {\tfilepathutil.addstream(strfilename, new memorystream());\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"no\\\"?>\");\ttw.writeline(\"<!-- comment1 -->\");\ttw.writeline(\"<?pi1a?>\");\ttw.writeline(\"<?pi1b?>\");\ttw.writeline(\"<?pi1c?>\");",
  "entity",
  0
 ],
 [
  "public void elemnamespace_5(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"xml\", \"root\", \"blah\");\t}\tcatch (argumentexception e) {",
  "endglobalsection",
  1
 ],
 [
  "if (gateway == null) {\tawait createandconfiguregateway(client, gatewaytwo);\tgateway = await client.gateway.getasync(resourcegroup, gatewaytwo, gatewayexpandoption.status);\t}\tvar node = await createnode(client, gateway, string.empty, string.empty);\tassert.notnull(node);\tnode = await client.node.getasync(resourcegroup, nodename);\tassert.notnull(node);\tassert.equal(nodename, node.name);\tassert.equal(nodename, node.connectionname);",
  "creating session",
  0
 ],
 [
  "public void testcase5() {\ttest<stringcompareisculturespecificissue>(@\" class test {\tvoid foo () {",
  "foo bar",
  0
 ],
 [
  "public void reporterror (string message, exception exception) {\tif (message == null) message = string.empty;\tstring et;\tif (loglevel > 1) et = exception != null ? exception.tostring () : string.empty;\telse et = exception != null ? exception.message : string.empty;",
  "process ps exception",
  0
 ],
 [
  "public override monodevelop.projects.extensions.migrationtype shouldmigrateproject () {",
  "got but expected",
  1
 ],
 [
  "private static bool callsecondclassinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturnclass<int>();\tif ((!(bool)(((dynamic)s.instanceproperty).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public void testfieldconstant() {\ttest<introduceconstantaction>(@\"class testclass {\tpublic void hello () {",
  "i o exception dropped connection",
  1
 ],
 [
  "this.context.clientwritekey = keyblock.readbytes(this.keymaterialsize);\tthis.context.serverwritekey = keyblock.readbytes(this.keymaterialsize);\tif (this.ivsize != 0) {\tthis.context.clientwriteiv = keyblock.readbytes(this.ivsize);\tthis.context.serverwriteiv = keyblock.readbytes(this.ivsize);\t}\telse {\tthis.context.clientwriteiv = ciphersuite.emptyarray;\tthis.context.serverwriteiv = ciphersuite.emptyarray;\t}",
  "got",
  1
 ],
 [
  "static dbfactoryservice () {\tfactories = new dictionary<string, idbfactory> ();\tforeach (dbfactorycodon codon in addinmanager.getextensionnodes (\"/monodevelop/database/sql\")) {\tidbfactory fac = codon.dbfactory;\tif (fac != null) {\tfactories.add (fac.identifier, fac);",
  "db factory",
  0
 ],
 [
  "if (target == null || complist == null){\treturn 1;\t}\ttry {\tif (!file.exists(complist)) {\treturn 1;\t}\tlclicensecontext ctx = new lclicensecontext();\tctx.licxfilename = complist;\tctx.outputfilename = path.combine(targetdir ??\".\", target)+\".licenses\";",
  "it is based on sharpdevelop p",
  1
 ],
 [
  "public static int main () {\tappdomain.currentdomain.unhandledexception += (sender, args) => {",
  "invoking",
  1
 ],
 [
  "object [] arguments;\targuments = new object [] { str };\tif (compare (\"verifystring\", mask, ref stateindex, arguments, ref more_states)) {\tcontinue;\t}\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;",
  "assert areequal mtp verifystring",
  0
 ],
 [
  "public static void userefboolincondition(ref bool x) {\tif (x) {",
  "opening database connection",
  1
 ],
 [
  "public override void garbagecollectionend (uint collection, uint generation, ulong counter) {",
  "test failed to transform after iterations",
  1
 ],
 [
  "public void emitsource() {\twriteline();",
  "using system io",
  0
 ],
 [
  "actual = actual.add(value);\tbreak;\tcase operation.union: int inputlength = random.next(100);\tint[] values = enumerable.range(0, inputlength).select(i => random.next()).toarray();\texpected.unionwith(values);\tactual = actual.union(values);\tbreak;\tcase operation.remove: if (expected.count > 0) {\tint position = random.next(expected.count);\tint element = expected.skip(position).first();",
  "exception not generated for invalid ouput destinations",
  1
 ],
 [
  "public static void thread() {\ttry {\tthread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();",
  "abort reset",
  0
 ],
 [
  "if (process.exitcode == 0) {\treturn true;\t} else {\treturn false;\t}\t}\t} catch (operationcanceledexception) {\tthrow;\t} catch (exception ex) {\tprogressmonitor.log.writeline (ex.message);",
  "failed to install dotnet dev certs",
  0
 ],
 [
  "public static void testpersistsucurityinfo5() {\tconsole.writeline(\"\\ntestpersistsucurityinfo5 - persist security info=false\");\toracleconnection con = new oracleconnection(\"data source=palis;user id=scott;password=tiger;persist security info=false\");\tcon.open();",
  "connectionstate for con",
  0
 ],
 [
  "public void addmethodlists(ilist<methodlistwithdeclaringtype> methodlists) {\tif (methodlists == null) throw new argumentnullexception(\"methodlists\");\tbool[] ishiddenbyderivedtype;\tif (methodlists.count > 1) ishiddenbyderivedtype = new bool[methodlists.count];\telse ishiddenbyderivedtype = null;\tfor (int i = methodlists.count - 1; i >= 0; i--) {\tif (ishiddenbyderivedtype != null && ishiddenbyderivedtype[i]) {",
  "currencysymbol",
  1
 ],
 [
  "static void do_one () {",
  "usage ictool exe config xml",
  1
 ],
 [
  "public override object changetype(object value, type type, cultureinfo cultureinfo) {\tvariant myvalue = new variant(value);\tif (cultureinfo == null) cultureinfo = cultureinfo.currentculture;\t#endif if (type.isbyref) {\t#endif type = type.getelementtype();\t}\tif (!type.isprimitive && type.isinstanceoftype(value)) {",
  "source variant can be assigned to destination type",
  0
 ],
 [
  "public override t get<t>() {\tt resp = base.get<t> ();",
  "t",
  0
 ],
 [
  "public static async task formatfile (policycontainer policies, filepath file) {\tstring mime = desktopservice.getmimetypeforuri (file);\tif (mime == null) return;\tvar formatter = codeformatterservice.getformatter (mime);\tif (formatter != null) {\ttry {\tvar content = await textfileutility.readalltextasync (file);\tvar formatted = formatter.formattext (policies, content.text);\tif (formatted != null) textfileutility.writetext (file, formatted, content.encoding);\t} catch (exception ex) {",
  "file formatting failed",
  0
 ],
 [
  "public void readtimeout_0_1byteavailable_read_byte_int_int() {\tusing (var com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (var com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\tvar rcvbytes = new byte[128];\tint bytesread;",
  "verifying readtimeout with read byte buffer int offset int count and one byte available",
  0
 ],
 [
  "this.testoutputhelper.writeline(\"\");\ttaskconstraints comptc = mycompletedtask.constraints;\tassert.notnull(comptc);\tif (null == comptc) {\t}\telse {\tthis.testoutputhelper.writeline(\"\");\tassert.true(comptc.maxtaskretrycount.hasvalue);\tassert.equal(99, comptc.maxtaskretrycount.value);\t}",
  "file path",
  1
 ],
 [
  "public void suitestarted(testname testname) {\tif ( level++ == 0 ) {\tmessages = new stringcollection();\ttestruncount = 0;\ttestignorecount = 0;\tfailurecount = 0;",
  "unit tests",
  0
 ],
 [
  "s6.f5 = 5;\ts6.f6 = 6;\ts6 = mono_return_double6(s6, 9);\tif (s6.f1 != 1+9) {\treturn 1;\t}\tif (s6.f2 != 2+9) {\treturn 2;\t}\tif (s6.f3 != 3+9) {",
  "got but expected",
  0
 ],
 [
  "public static int main (string[] args) {\ttry {\tif (args.length != 1) {",
  "usage mono table to charset",
  0
 ],
 [
  "private static void dumpdatarow(datarow datarow, datatable datatable) {\tconsole.writeline(\" \");",
  "dumpdatarow",
  0
 ],
 [
  "using (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writesurrogatecharentity('\\u1025', '\\ud900');\t}\tcatch (argumentexception e) {\tcerror.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "public static void threadmethod_waiter_2() {",
  "thread b started",
  0
 ],
 [
  "got_assemblies = true;\tcontinue;\t}\tstring [] compare = arg.split ();\tif (compare.length != 2) {\treturn 1;\t}\tcompares.add (arg);\t}\tif (got_assemblies) {",
  "assembly list not provided for assemblies",
  0
 ],
 [
  "files = directory.getfiles (dir, pattern);\tforeach (string file in files) {\tfilenames.add (file);\t}\tbreak;\t}\t}\tstring subdir = path.combine (outputdir, version);\tif (!directory.exists (subdir)) directory.createdirectory (subdir);\tforeach (string file in filenames) {",
  "foo bar",
  1
 ],
 [
  "using (var script = ctx.startscript ()) {\tforeach (var issue in issues) {\tvar actions = issue.actions.where (a => a.siblingkey == siblingkey).tolist ();\tassert.istrue(actions.count <= 1, \"at most a single action expected per sibling key and issue.\");\tactions.first (a => a.siblingkey == siblingkey).run (script);\t}\t}\tbool pass = expectedoutput == ctx.text;\tif (!pass) {\tconsole.writeline (expectedoutput);",
  "got",
  0
 ],
 [
  "return true;\tcase \"/nostdlib-\": stdlib = true;\treturn true;\tcase \"/target\": if (value.length == 0) {\tenvironment.exit (1);\t}\tif (string.compare (\"exe\", value, true) == 0) {\t} else if (string.compare (\"library\", value, true) != 0) {\tenvironment.exit (1);\t} else {",
  "fatal error target is invalid specify exe or library",
  0
 ],
 [
  "public static flowcontrolcapabilities measureflowcontrolcapabilities(string portname) {\tfor (int probebase = 1; probebase <= 65536; probebase *= 2) {\tint probelength;\tprobelength = probebase + 1;\tint buffersize = measuretransmitbuffersize(portname, probelength);\tif (buffersize < probelength) {\treturn new flowcontrolcapabilities(probelength, buffersize, true);\t}\t}",
  "br false",
  1
 ],
 [
  "public int readvaluechunkworksproperlywithsubtreereaderinsertedattributes() {\tif (!isfactoryreader()) return test_skipped;\tstring xml = \"<root xmlns='foo'><bar/></root>\";\treloadsource(new stringreader(xml));\tdatareader.read();\tdatareader.read();\tusing (xmlreader sr = datareader.readsubtree()) {\tsr.read();\tsr.movetofirstattribute();",
  "fail",
  1
 ],
 [
  "switch (reader.localname) {\tcase node: string fileversion = reader.getattribute (versionattribute);\tif (fileversion != version) return null;\tbreak;\tcase codetemplate.node: result.add (codetemplate.read (reader));\tbreak;\t}\t}\t}\t} catch (exception e) {",
  "testing context injected methods on enums",
  1
 ],
 [
  "static void outparmtest2 (oracleconnection con) {\toraclecommand cmd2 = con.createcommand();\tcmd2.commandtext = \"create or replace function sf_testoutparm2(parm1 in number, parm2 out number, parm3 in out number) return number \" + \"is \" + \"   returnvalue number := 123.45; \" + \"begin \" + \"   if parm1 is null then \" + \"      parm2 := 18; \" + \"\t   parm3 := parm3 + 8000; \" + \"      returnvalue := 78; \" + \"   elsif parm1 = 999 then \" + \"         parm2 := null;\" + \"         parm3 := null;\" + \"         returnvalue := null;\" + \"   elsif parm3 is null then \" + \"         parm2 := 0; \" + \"         parm3 := 1234567890123.12345678; \" + \"   else \" + \"\t   parm2 := parm1 + 3; \" + \"      parm3 := parm3 + 70; \" + \"   end if;\" + \"   return returnvalue;\" + \"end;\";\tcmd2.executenonquery();\tcmd2.commandtext = \"commit\";\tcmd2.executenonquery();",
  "call stored function sp with parameters",
  0
 ],
 [
  "if (!string.isnullorempty (inputfile)) {\tforeach (string l in file.readalllines (inputfile)) {\tfor (int r = 0; r < repeat; ++r) tests.add (l);\t}\t} else {\tfor (int j = i; j < args.length; ++j) if (!disabled.containskey (args [j])) {\tfor (int r = 0; r < repeat; ++r) tests.add (args [j]);\t}\t}\tif (!tests.any ()) {",
  "no tests selected exiting",
  0
 ],
 [
  "do {\tdatatable dt = rdr.getschematable();\tif(rdr.recordsaffected != -1) {\t}\telse if(dt == null) console.writeline(\"result is from a sql command not (insert,update,delete).   records affected: \" + rdr.recordsaffected);\telse {\tresults++;\treadresult(rdr, dt);\t}\t} while(rdr.nextresult());",
  "total result sets",
  0
 ],
 [
  "public bool remove(t value) {\tmarkchange();\tforeach (valueel el in this.combinedvalues) {\tif (el.isinserted && el.insertedvalue.equals(value)) {\tthis.combinedvalues.remove(el);\treturn true;\t}\tif (!el.isinserted && el.originalvalue.right.equals(value)) {",
  "trackedcollection found value to remove on original",
  0
 ],
 [
  "public void writenode_xmlreader26() {\txdocument doc = new xdocument();\txmlreader xr = createreaderignorews(path.combine(filepathutil.gettestdatapath(), path.combine(\"xmlwriter2\", \"xmlreader.xml\")));\twhile (xr.read()) {\tif (xr.localname == \"commentnode\") {\txr.read();\tbreak;\t}\t}\tif (xr.nodetype != xmlnodetype.comment) {",
  "reader positioned on",
  0
 ],
 [
  "public void discardafterclose() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {",
  "verifying discard method throws exception after a call to cloes",
  0
 ],
 [
  "static void componentcontainersetup(object sender, componenteventargs e) {\tinestedcontainer nestedcontainer = e.component.site.getservice(typeof(inestedcontainer)) as inestedcontainer;\tif (nestedcontainer != null) {\tmethodinfo getservicemethod = nestedcontainer.gettype().getmethod(\"getservice\", bindingflags.instance | bindingflags.nonpublic, null, new [] {typeof(type)}, null);\tif (getservicemethod != null) {",
  "created pool",
  1
 ],
 [
  "xmlschemaattribute attribute = (xmlschemaattribute)derivedtype.attributeuses[attributebase.qualifiedname];\tif (attribute == null) {\tderivedtype.attributeuses.add(attributebase.qualifiedname, attributebase);\t}\telse {\tif (attributebase.use == xmlschemause.prohibited && attribute.use != xmlschemause.prohibited) {\t#if debug string position = string.empty;\tif (derivedtype.sourceuri != null) {\tposition = \" in \" + derivedtype.sourceuri + \"(\" + derivedtype.linenumber + \", \" + derivedtype.lineposition + \")\";\t}",
  "exception expected",
  1
 ],
 [
  "public void testnewline() {\tstringwriter writer = new stringwriter();\twriter.newline = \"\\n\\r\";\tassert.areequal (\"\\n\\r\", writer.newline, \"newline 1\");",
  "first",
  0
 ],
 [
  "public void testusageinifcondition() {\ttest<addnullcheckcoderefactoringprovider>(@\" using system;\tusing system.collections.generic;\tclass testclass {\tpublic void testmethod(ienumerable<string> list) {\tif ($list.contains(\"\"bla\"\")) {",
  "contains",
  0
 ],
 [
  "int verbose = 0;\tforeach (string arg in args) {\tif (arg == \"-v\") verbose = 1;\telse name = arg;\t}\ttype t = type.gettype (name);\tarray values = enum.getvalues (t);\tstring[] names = enum.getnames (t);\tint i;\tif (verbose != 0) {",
  "lookup method get by subject ex",
  1
 ],
 [
  "{\tjobscheduleexecutioninformation wiexinfo = curwi.executioninformation;\trecentjob rj = wiexinfo.recentjob;\tif (null == rj) {\t}\telse {\t}\t}\tjobspecification jobspec = curwi.jobspecification;\tif (null == jobspec) {",
  "null",
  0
 ],
 [
  "objectadapter.busystatechanged += (sender, e) => setbusystate (e);\tvar cancellationtoken = helperoperationscancellationtokensource.token;\tnew thread (() => {\ttry {\twhile (!cancellationtoken.iscancellationrequested) {\tvar action = helperoperationsqueue.take(cancellationtoken);\ttry {\taction ();\t}\tcatch (exception e) {",
  "exception on processing helper thread action",
  0
 ],
 [
  "public static int main () {\tguid id = guid.newguid ();\tdc dc = new dc (id);",
  "id default",
  0
 ],
 [
  "bool?[] boolvalues = new bool?[]\t{\ttrue, false, null }\t;\tforeach (bool? a1 in boolvalues) {\tforeach (bool? a2 in boolvalues) {\tif (a1 == null && a2 == null) continue;\tdynamic d1 = a1;\tdynamic d2 = a2;\tif ((d1 ^ d2) != (a1 ^ a2)) {",
  "failed bool bool",
  0
 ],
 [
  "if (diff != null) {\tstring diffhtml = string.empty;\tusing (var writer = new stringwriter ()) {\tstate.output = writer;\tac.compare ();\tdiffhtml = state.output.tostring ();\t}\tif (diffhtml.length > 0) {\tusing (var file = new streamwriter (diff)) {\tif (state.colorize) {",
  "waitsubsystemtests autoreseteventtest",
  1
 ],
 [
  "public void discardafterfailedopen() {\tusing (serialport com = new serialport(\"bad_port_name\")) {",
  "principalsearchresult checkdisposed accessing disposed object",
  1
 ],
 [
  "private static bool callsecondclassinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturndynamicclass();\tif ((!(bool)(s.instanceproperty.instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "couldn t resolve machine config location corlib issue",
  1
 ],
 [
  "bfinal = input.getbits(1);\tstate = inflaterstate.readingbtype;\t}\tif( state == inflaterstate.readingbtype) {\tif (!input.ensurebitsavailable(2)) {\tstate = inflaterstate.readingbtype;\treturn false;\t}\tblocktype = (blocktype)input.getbits(2);\tif (blocktype == blocktype.dynamic) {",
  "decoding dynamic block compression",
  0
 ],
 [
  "public abstract string getdescription (filteroptions filteroptions, string pattern, string replacepattern);\t}\tpublic class documentscope : scope {\tpublic override pathmode pathmode {\tget { return pathmode.hidden; }\t}\tpublic override int gettotalwork (filteroptions filteroptions) {\treturn 1;\t}\tpublic override ienumerable<fileprovider> getfiles (progressmonitor monitor, filteroptions filteroptions) {",
  "looking in",
  0
 ],
 [
  "public override void onstop() {",
  "orleansazuresilos onstop called information",
  0
 ],
 [
  "static void help () {",
  "severity all audit low medium high critical",
  0
 ],
 [
  "static void main(string[] args) {",
  "creating pgsqlconnectioin",
  0
 ],
 [
  "public static void threadmethod_waiter_2() {",
  "thread b started",
  0
 ],
 [
  "public void getextobject12() {\tm_xsltarg = new xsltargumentlist();\tretobj = m_xsltarg.getextensionobject(szdefaultns);\tif (retobj != null) {",
  "did not retrieve null value when using namespace",
  0
 ],
 [
  "private void checkdisposed() {\tif (_disposed) {",
  "i m writting a test and i will fill a screen with some useless code",
  1
 ],
 [
  "public void removeextobj8(xslinputtype xslinputtype, readertype readertype, outputtype outputtype, navtype navtype) {\tint i = 1;\tm_xsltarg = new xsltargumentlist();\tforeach (string str in szwhitespace) {\tmyobject obj = new myobject(i, _output);\tm_xsltarg.addextensionobject(szdefaultns + str, obj);\tm_xsltarg.removeextensionobject(szdefaultns + str);\tretobj = m_xsltarg.getextensionobject(szdefaultns + str);\tif (retobj != null) {",
  "error deleting case for whitespace arg",
  0
 ],
 [
  "public void testdonotremovebracesfromblockwithlabel() {\ttestwrongcontext<removebracescoderefactoringprovider>(@\"class testclass {\tvoid test() {\t$if (true) {",
  "hello",
  0
 ],
 [
  "public void linqtosqlobject03() {\tnorthwind db = createdb();\tvar custs = from c in db.customers where c.city == \"london\" select c;\tforeach (var cust in custs) foreach (var ord in cust.orders) foreach (var orderdetail in ord.orderdetails) {",
  "node ns",
  1
 ],
 [
  "public void removetoolboxitem(toolboxitem toolboxitem, string category) {",
  "removetoolboxitem",
  0
 ],
 [
  "public void ongoodtestinverted (eventargs e) {\teventhandler<eventargs> handler = testing;\tif (null != handler) {\thandler (this, e);\t}",
  "test",
  0
 ],
 [
  "private static void printhelp() {",
  "stresstest exe a module name arguments",
  0
 ],
 [
  "public void cleanup() {\tstring currentservice = \"\";\tforeach (servicecontroller controller in servicecontroller.getservices()) {\ttry {\tcurrentservice = controller.displayname;\tif (controller.displayname.startswith(\"test service\")) {\ttestserviceinstaller deleteservice = new testserviceinstaller() {\tservicename = controller.servicename };\tdeleteservice.removeservice();",
  "cleaned up",
  0
 ],
 [
  "myobject obj = new myobject(i, _output);\tm_xsltarg.addextensionobject(szdefaultns + str, obj);\ti++;\t}\ttry {\tif ((loadxsl(\"myobjectdef.xsl\", inputtype, readertype) == 1)) transform_arglist(\"fruits.xml\", true, transformtype, doctype);\t}\tcatch (system.xml.xsl.xsltexception) {\treturn;\t}",
  "did not throw expected exception",
  0
 ],
 [
  "assert.areequal (0, bytes [3], \"test#04\");\tstream.flush ();\tstream2.read (bytes, 0, 5);\tassert.areequal (1, bytes [0], \"test#05\");\tassert.areequal (2, bytes [1], \"test#06\");\tassert.areequal (3, bytes [2], \"test#07\");\tassert.areequal (4, bytes [3], \"test#08\");\t} finally {\tif (stream != null) stream.close ();\tif (stream2 != null) stream2.close ();",
  "p",
  0
 ],
 [
  "xmldocument coredoc = new xmldocument();\tcoredoc.load(srcdir + \"..\\\\bin\\\\icsharpcode.core.xml\");\treadxmldocu(coredoc, doozers, conditions);\tcomparison<xmlelement> comparison = delegate(xmlelement a, xmlelement b) {\tstring shortnamea = a.getattribute(\"name\").substring(a.getattribute(\"name\").lastindexof('.') + 1);\tstring shortnameb = b.getattribute(\"name\").substring(b.getattribute(\"name\").lastindexof('.') + 1);\treturn shortnamea.compareto(shortnameb);\t};\tdoozers.sort(comparison);\tconditions.sort(comparison);",
  "writing doozer list",
  0
 ],
 [
  "if (sn8.nested1.f1 != 1+90) {\treturn 1;\t}\tif (sn8.f2 != 2+90) {\treturn 2;\t}\tif (sn8.f3 != 3+90) {\treturn 3;\t}\tif (sn8.f4 != 4+90) {",
  "second",
  1
 ],
 [
  "public static fraction operator+(fraction lhs, fraction rhs) {",
  "typelib resolvecomref typelib ret",
  1
 ],
 [
  "public virtual void dispose() {\tif (!_disposed) {\tif ((this.underlyingsearcher != null) && (this.underlyingsearcher is idisposable)) {",
  "stored subthread is",
  1
 ],
 [
  "foreach (datacolumn mycolumn in myrow.row.table.columns) {\tconsole.writeline(\" \" + myrow[mycolumn.columnname]);\t}\t}*/ try {\tdbcmd.commandtext = \"select ndesc invalid syntax from mono_test where nid=2\";\tdbcmd.executenonquery();\t} catch (exception e) {\t}\tdbcmd.commandtext = \"select 0/0 from mono_test where nid=2\";\t} catch (exception e) {",
  "generating proxies",
  1
 ],
 [
  "private static bool callsecondstructindexer() {\tint failcount = 0;\tverify.firstcalled = false;\tdynamic d = new firstclassreturnstruct();\tif ((!(((secondstruct)d[1])[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "state doesn t work",
  1
 ],
 [
  "public void updatetranslations (progressmonitor monitor, bool sort, params translation[] translations) {\tmonitor.begintask (null, translations.count + 1);\ttry {\tlist<project> projects = new list<project> ();\tforeach (project p in parentsolution.getallprojects ()) {\tif (isincluded (p)) projects.add (p);\t}\tmonitor.begintask (gettextcatalog.getstring (\"updating message catalog\"), projects.count);\tcreatedefaultcatalog (monitor);",
  "done",
  0
 ],
 [
  "if (myparameter3.value == dbnull.value) sinoutvalue = \"dbnull.value\";\telse {\tinoutvalue = (datetime)myparameter3.value;\tsinoutvalue = inoutvalue.tostring(\"yyyy-mm-dd hh:mm:ss\");\t}\tif (myparameter4.value == dbnull.value) sreturnvalue = \"dbnull.value\";\telse {\treturnvalue = (datetime)myparameter4.value;\tsreturnvalue = returnvalue.tostring(\"yyyy-mm-dd hh:mm:ss\");\t}",
  "exception attempting a transform without loading an xsl file",
  1
 ],
 [
  "public void defaultcolumnnameaddlistchangedtest() {\tstring result = @\"setting table... ---- onlistchanged propertydescriptorchanged,0,0 ---- onlistchanged reset,-1,-1 table was set. ---- onlistchanged propertydescriptoradded,0,0 default named column added. ---- onlistchanged propertydescriptoradded,0,0 non-default named column added. ---- onlistchanged propertydescriptoradded,0,0 another default named column added (column2). ---- onlistchanged propertydescriptoradded,0,0 add a column with the same name as the default columnnames. ---- onlistchanged propertydescriptoradded,0,0 add a column with a null name. ---- onlistchanged propertydescriptoradded,0,0 add a column with an empty name. \";\t_eventwriter = new stringwriter();\tdatatable dt = new datatable(\"table\");\tcomplexeventsequence1view dv = new complexeventsequence1view(dt, _eventwriter);\tdt.columns.add();\tdt.columns.add(\"non-defaultnamedcolumn\");",
  "non default named column added",
  0
 ],
 [
  "bitmapdata data = bmp.lockbits (new rectangle (0, 0, bmp.width, bmp.height), imagelockmode.readonly, pixelformat.format24bpprgb);\ttry {\tassert.areequal (bmp.height, data.height, \"height\");\tassert.areequal (bmp.width, data.width, \"width\");\tassert.areequal (pixelformat.format24bpprgb, data.pixelformat, \"pixelformat\");\tassert.areequal (332, data.stride, \"stride\");\tint size = data.height * data.stride;\tunsafe {\tbyte* scan = (byte*) data.scan0;\t#if false for (int p = 0; p < size; p += 1009) {",
  "finally",
  1
 ],
 [
  "static void printlocation (ilocation loc) {",
  "principal checkdisposedordeleted accessing disposed object",
  1
 ],
 [
  "public void testaddbracestoforeach() {\ttest<addbracescoderefactoringprovider>(@\"class testclass {\tvoid test() {",
  "waitall testing cancellationtokentests waitall if join does not work then a deadlock will occur",
  1
 ],
 [
  "public csharpfile(csharpproject project, string filename) {\tthis.project = project;\tthis.filename = filename;\tcsharpparser p = new csharpparser(project.compilersettings);\tthis.originaltext = file.readalltext(filename);\tthis.syntaxtree = p.parse(this.originaltext, filename);\tthis.syntaxtree.freeze();\tif (p.haserrors) {",
  "error parsing",
  0
 ],
 [
  "public static void createxmlspacetestfile(string strfilename) {\tstream s = new memorystream();\ttextwriter tw = new streamwriter(s);\ttw.writeline(\"<xmlspace1 xml:space=\\'default\\'>&lt; &gt;</xmlspace1>\");\ttw.write(\"<xmlspace2 xml:space=\\'preserve\\'>&lt; &gt;<a><b><c>space test</c><persona>dromio of syracuse</persona></b></a></xmlspace2>\");",
  "you passed in",
  1
 ],
 [
  "public static void createxmllangtestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<xmllang0 xml:lang=\\\"en-us\\\">what color is it?</xmllang0>\");\ttw.write(\"<xmllang1 xml:lang=\\\"en-gb\\\">what color is it?<a><b><c>language test</c><persona>dromio of ephesus</persona></b></a></xmllang1>\");\ttw.writeline(\"<empty_xmllang attr0=\\\"0\\\" xml:lang=\\\"en-us\\\" />\");\ttw.writeline(\"<xmllang2 xml:lang=\\\"en-us\\\">what color is it?<title><!-- this is a comment--></title><xmllang1 xml:lang=\\\"en-gb\\\">testing language<xmllang0 xml:lang=\\\"en-us\\\">what color is it?</xmllang0>haha </xmllang1>hihihi</xmllang2>\");",
  "donexmllang",
  0
 ],
 [
  "outputline (@\"       \\open to open the connection\");\toutputline (@\"       \\close to close the connection\");\toutputline (@\"       \\e to execute sql query (select)\");\toutputline (@\"       \\h to show help (all commands).\");\toutputline (@\"       \\defaults to show default variables.\");\toutputline (\"\");\t}\tpublic void showhelp () {\tconsole.writeline (\"\");\tif (!waitforenterkey ()) return;",
  "h to show help all commands",
  0
 ],
 [
  "static bool callsecondstructindexer() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturnstruct();\tif ( (!(bool)(((dynamic)s.instanceproperty)[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "static void getheaders(out string req, out string[] headers, string data, socket sock) {\tint pos=data.indexof(\"\\r\\n\");\twhile(pos==-1) {",
  "verifying read method with sub strings of the new line appearing in the string being read",
  1
 ],
 [
  "static unsafe int test (sbyte* x) {\tif ((x + 1) < x) {",
  "eventlog staticcompletioncallback ignored an objectdisposedexception",
  1
 ],
 [
  "myobject obj = new myobject(i, _output);\tm_xsltarg.addextensionobject(szdefaultns + str, obj);\ti++;\t}\ttry {\tif ((loadxsl(\"myobjectdef.xsl\", xslinputtype, readertype) == 1)) transform_arglist(\"fruits.xml\", outputtype, navtype, true);\t}\tcatch (system.xml.xsl.xsltexception) {\treturn;\t}",
  "did not throw expected exception",
  0
 ],
 [
  "if (field == null) continue;\tif (checkfornullassignment (ins)) {\tsetfields.add (field);\t} else {\tnullfields.remove (field);\t}\tbreak;\tcase code.ldflda: case code.ldsflda: field = ins.getfield ();\tif (field == null) continue;\tnullfields.remove (field);",
  "got but expected",
  1
 ],
 [
  "public static void testpersistsucurityinfo6() {\tstring user = environment.username;\tif (!environment.userdomainname.equals(string.empty)) user = environment.userdomainname + \"\\\\\" + environment.username;\toracleconnection con = new oracleconnection(\"data source=palis;integrated security=true\");\ttry {\tcon.open();\toraclecommand cmd = con.createcommand();\tcmd.commandtext = \"select user from dual\";\toracledatareader reader = cmd.executereader();",
  "user user",
  0
 ],
 [
  "public new void queuedrawarea (int x, int y, int w, int h) {\tif (gdkwindow != null) {\tgdkwindow.invalidaterect (new rectangle (x, y, w, h), false);",
  "thread iter i with mutex idx",
  1
 ],
 [
  "public override void visitspan(span span) {",
  "error message is wrong",
  1
 ],
 [
  "if (output.count != 2) return 1;\tint[] results_a = new int[] { 0, 2, 4, 1, 3 };\tint pos = 0;\tforeach (igrouping<int, int> ig in e) {\tconsole.writeline (ig.key);\tforeach (int value in ig) {\tconsole.writeline (\"\\t\" + value);\tif (value != results_a [pos++]) return 3;\t}\t}",
  "ok",
  0
 ],
 [
  "boolflags[flag_notifying] = true;\t}\tint i = lastseencount;\ttry {\tint oldest = oldestentrynumber;\tint count = entrycount + oldest;\tif (lastseencount < oldest || lastseencount > count) {\tlastseencount = oldest;\ti = lastseencount;\t}",
  "sendmessage called",
  1
 ],
 [
  "public override void onstop() {\tif (orleansazuresilo != null) {\torleansazuresilo.stop();\t}\troleenvironment.changing -= roleenvironmentchanging;\tbase.onstop();",
  "null",
  1
 ],
 [
  "private void tryuninstallingpackage() {\ttry {\tuninstallpackage();\t}\tcatch (exception ex) {\treporterror(ex);",
  "options",
  1
 ],
 [
  "}\t}\t});\tthread1.start();\tthread1.join();\tthread thread2 = new thread(() => {\tfor (int i = 0; i < 1000; i++) {\tint idx = -1;\ttry {\tidx = waithandle.waitany (mutexes);",
  "thread iter i with mutex idx",
  0
 ],
 [
  "public override void methodenter (lm m, ulong counter) {",
  "thread c sleeping for",
  1
 ],
 [
  "static void onextensionchanged (object s, extensionnodeeventargs args) {\tif (args.change == extensionchange.add) {\ttry {\tif (typeof(commandhandler).isinstanceoftype (args.extensionobject)) typeof(commandhandler).getmethod (\"run\", system.reflection.bindingflags.nonpublic|system.reflection.bindingflags.instance, null, type.emptytypes, null).invoke (args.extensionobject, null);",
  "principal move back succeeded",
  1
 ],
 [
  "public void ongoodload (eventargs e) {\teventhandler handler = loading;\tif (handler != null) {\thandler (this, e);\t}",
  "verifying parity odd and then even",
  1
 ],
 [
  "static globaldebug() {\tglobaldebug.s_debuglevel = globalconfig.debuglevel;\t#if supportdebuglogfile string debuglogfile = globalconfig.debuglogfile;\tif (debuglogfile != null) {\tforeach (tracelistener listener in debug.listeners) {\tif (listener is defaulttracelistener) ((defaulttracelistener)listener).logfilename = debuglogfile;\t}",
  "verifying space before open",
  1
 ],
 [
  "try {\tvd.m(dynpara, str);\t}\tcatch (microsoft.csharp.runtimebinder.runtimebinderexception e) {\tif (errorverifier.verify(errormessageid.cantinfermethtypeargs, e.message, \"s.m<t>(t, t)\")) ret--;\t}\tdynpara = null;\tint n = 0;\ttry {\tvv.m(dynpara, n);",
  "warning no classes for name",
  1
 ],
 [
  "if( state == inflaterstate.readingbtype) {\tif (!input.ensurebitsavailable(2)) {\tstate = inflaterstate.readingbtype;\treturn false;\t}\tblocktype = (blocktype)input.getbits(2);\tif (blocktype == blocktype.dynamic) {\tstate = inflaterstate.readingnumlitcodes;\t}\telse if (blocktype == blocktype.static) {",
  "duplicate message id in po file ignoring it to achieve validity",
  1
 ],
 [
  "copy_c = null;\ttry {\tusing (mydispose c = new mydispose ()){\tcopy_c = c;\tthrow new exception ();\t}\t} catch {}\tif (!copy_c.disposed) return 3;\tusing (mydispose d = null){\t}",
  "welcome to the foo program",
  1
 ],
 [
  "protected static void checkbatchfix (testrefactoringcontext ctx, ienumerable<codeissue> issues, object siblingkey, string expectedoutput) {\tusing (var script = ctx.startscript ()) {\tforeach (var issue in issues) {\tvar actions = issue.actions.where (a => a.siblingkey == siblingkey).tolist ();\tassert.istrue(actions.count <= 1, \"at most a single action expected per sibling key and issue.\");\tactions.first (a => a.siblingkey == siblingkey).run (script);\t}\t}\tbool pass = expectedoutput == ctx.text;\tif (!pass) {",
  "expected",
  0
 ],
 [
  "public override void cleanup () {\tbase.cleanup ();\tstringbuilder aliases = new stringbuilder ();\tvar src_dir = path.combine (\"projects\", \"monotouch\");\tstring src_file = path.combine (src_dir, \"tests.cs\");\tusing (var file = new streamwriter (src_file, false)) {\tforeach (var e in entries) {",
  "donexmllang",
  1
 ],
 [
  "if (s9.f5 != 5+9) {\treturn 5;\t}\tif (s9.f6 != 6+9) {\treturn 6;\t}\tif (s9.f7 != 7+9) {\treturn 7;\t}\tif (s9.f8 != 8+9) {",
  "end of inner try",
  1
 ],
 [
  "private static bool nullablechartypewithidentityconversioninassignment() {\tint failcount = 0;\tchar? origin = '\\0';\tdynamic d = origin;\tchar? result = d;\tif (result != origin) {\tfailcount++;",
  "failed got wrong return type",
  1
 ],
 [
  "private void thread_func() {\tfor(int i=51200; i<102400; i++) {\tslot[i]=thread.allocatedataslot();\tthread.setdata(slot[i], i);\t}\tthread.sleep(5000);\tthread.setdata(slot[11111], 42);\tthread.setdata(slot[76801], 42);\tthread.sleep(20000);",
  "slot contains",
  0
 ],
 [
  "try {\ttransform((string) \"fruits.xml\", (outputtype) outputtype, navtype);\t}\tcatch (system.invalidoperationexception e) {\tcheckexpectederror(e, \"system.xml\", \"xslt_nostylesheetloaded\", new string[] { \"\" });\treturn;\t}\t}\t}\telse {",
  "failed to load style sheet",
  0
 ],
 [
  "}\toutput.writeline ();\tif (!iscurrentinterface) {\t++indent;\tif (property.hasget) {\t++indent;\tgeneratestatements (property.getstatements);\t--indent;\t}\tif (property.hasset) {",
  "unrequested result kvp key",
  1
 ],
 [
  "var qcache = caches[kvp.key];\tforeach (istreamidentity streamguid in kvp.value) {\tiqueuecachecursor cursor = qcache.getcachecursor(streamguid, firstincache);\tint messagecount = 0;\tstreamsequencetoken tenthincache = null;\tstreamsequencetoken lasttoken = firstincache;\twhile (cursor.movenext()) {\texception ex;\tmessagecount++;\tibatchcontainer batch = cursor.getcurrent(out ex);",
  "token",
  0
 ],
 [
  "}\tfinally {\tstagecomplete[chainnum] = tasknum;\texecutingchain[chainnum] = false;\texecutingglobal = -1;\t}\t}, scheduler);\t}\ttaskchainends[chainnum] = task.continuewith(t => {\tif (t.isfaulted) throw t.exception;",
  "inside chain final task",
  0
 ],
 [
  "s8.f7 = 7;\ts8.f8 = 8;\ts8 = mono_return_sbyte8(s8, 9);\tif (s8.f1 != 1+9) {\treturn 1;\t}\tif (s8.f2 != 2+9) {\treturn 2;\t}\tif (s8.f3 != 3+9) {",
  "localvariableset",
  1
 ],
 [
  "private static bool test1() {\tlong[] longvalues = new long[]\t{\tlong.minvalue, long.minvalue, 0 }\t;\tforeach (long a1 in longvalues) {\tdynamic d1 = a1;\tif ((method(d1) < 10) != (a1 < 10)) {",
  "failed long long",
  0
 ],
 [
  "using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {\tstring jobid = microsoft.azure.batch.constants.defaultconvenienceprefix + testutilities.getmyname() + \"-testboundjobverbs\";\ttry {\tcloudjob cloudjob = batchcli.joboperations.createjob(jobid, new poolinformation());\tcloudjob.poolinformation = new poolinformation() {\tpoolid = this.poolfixture.poolid };\tcloudjob.commit();\tcloudjob job = batchcli.joboperations.getjob(jobid);\tjob.disable(disablejoboption.terminate);\tcloudjob disabledjob = batchcli.joboperations.getjob(jobid);",
  "test",
  1
 ],
 [
  "var context = new authenticationcontext(authority, tokencache);\tvar result = await context.acquiretokenasync(resource, clientcredential).configureawait(false);\treturn result.accesstoken;\t}\tpublic async task<string> getuseraccesstoken(string authority, string resource, string scope) {\tstring clientid = testconfigurationmanager.trygetenvironmentorappsetting(\"nativeclientid\");\tvar context = new authenticationcontext(authority, tokencache);\tif (_devicecodeforstoragetests == null) {\t_devicecodeforstoragetests = await context.acquiredevicecodeasync(resource, clientid).configureawait(false);\tdebug.writeline(\"############################################################################################\");",
  "section endsection",
  1
 ],
 [
  "heapsnapshot.allocationstatisticsperclass [] allocationstatistics = heapsnapshot.allocationstatistics;\tif (allocationstatistics.length > 0) {\tarray.sort (allocationstatistics, heapsnapshot.allocationstatisticsperclass.comparebyallocatedbytes);\tarray.reverse (allocationstatistics);\tuint totalallocatedbytes = 0;\tforeach (heapsnapshot.allocationstatisticsperclass s in allocationstatistics) {\ttotalallocatedbytes += s.allocatedbytes;\t}\tforeach (heapsnapshot.allocationstatisticsperclass s in allocationstatistics) {\tif (s.allocatedbytes > 0) {",
  "long",
  1
 ],
 [
  "public static void help () {\tconsole.writeline (\"\\t--protocol=2\\tuse v2 protocol (not ssl related)\");\tconsole.writeline (\"\\t--protocol=3\\tuse v3 protocol (not ssl related)\");",
  "error message is wrong",
  1
 ],
 [
  "if (sd != null) {\tremoveservice (re.url);\t}\tcontinue;\t}\tif (sd == null) {\tsd = createservicedata (re);\tservices.services.add (sd);\t}\t}",
  "failed",
  1
 ],
 [
  "static int main () {\tz z = new z ();\tif (global != 1){",
  "error",
  0
 ],
 [
  "private static bool ulongtypewithnumbericconversionfromushortinassignment() {\tint failcount = 0;\tushort origin = ushort.maxvalue;\tdynamic d = origin;\tulong result = d;\tif (result != origin) {\tfailcount++;",
  "test failed at conversion result",
  0
 ],
 [
  "#endif }\tcon.connectionstring = constr;\ttry {\tcon.open();\t}\tcatch(sqlexception se) {\tforeach(sqlerror error in se.errors) {\t}\texception ie = se.innerexception;\tif(ie != null) {",
  "error cannot find an internal base type for",
  1
 ],
 [
  "private static bool callsecondstructinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturndynamicstruct();\tif ((!(bool)(s[1].instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "was",
  1
 ],
 [
  "public void createglobalfunctions_multipleglobalmethods() {\tmodulebuilder module = helpers.dynamicmodule();\tmethodbuilder method = module.defineglobalmethod(\"testmethod\", methodattributes.static | methodattributes.public, null, null);\tilgenerator ilgenerator = method.getilgenerator();",
  "hello world from global method",
  0
 ],
 [
  "public async task preferlocalplacementgrain_shouldmigratewhenhostsilokilled(string value) {\tawait hostedcluster.waitforlivenesstostabilizeasync();",
  "bad view hash offset size endsentinel should be",
  1
 ],
 [
  "private static bool nullableshorttypewithnumbericconversionfrombyteinassignment() {\tint failcount = 0;\tbyte? origin = byte.maxvalue;\tdynamic d = origin;\tshort? result = d;\tif (result != origin) {\tfailcount++;",
  "test failed at conversion result",
  0
 ],
 [
  "static int main(string[] args) {\tappdomain app2 = appdomain.createdomain(\"2\");\tif (!remotingservices.istransparentproxy(app2)) return 1;\tobjecthandle o = appdomain.currentdomain.createinstance(typeof(r1).assembly.fullname, typeof(r1).fullname);\tr1 myobj = (r1) o.unwrap();\tif (remotingservices.istransparentproxy(myobj)) {\treturn 2;\t}\to = app2.createinstance(typeof(r1).assembly.fullname, typeof(r1).fullname);",
  "process getprocesses",
  1
 ],
 [
  "dump (writer, df.monthnames, \"monthnames\");\tdump (writer, df.shortestdaynames, \"shortestdaynames\");\tvar ti = c.textinfo;\tvar nf = c.numberformat;\tdump (writer, nf.currencygroupsizes, \"currencygroupsizes\");\tdump (writer, nf.nativedigits, \"nativedigits\");\tdump (writer, nf.numbergroupsizes, \"numbergroupsizes\");\tdump (writer, nf.percentgroupsizes, \"percentgroupsizes\");\tif (!c.isneutralculture) {\tvar ri = new regioninfo (c.lcid);",
  "on changed",
  1
 ],
 [
  "assert.true(false);\t}\tm_xsltarg.addparam(\"myarg4\", szempty, d4);\tretobj = m_xsltarg.getparam(\"myarg4\", szempty);\tif (!d4.equals((double)retobj)) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg5\", szempty, d5);\tretobj = m_xsltarg.getparam(\"myarg5\", szempty);\tif (!d5.equals(retobj)) {",
  "failed to add get a value for",
  0
 ],
 [
  "public void enqueue (hwnd hwnd) {\tif (hwnds.contains (hwnd)) {\tconsole.writeline (environment.stacktrace);",
  "skipping negotiatestream echoserver ntlm clientwriteread successive sync success",
  1
 ],
 [
  "public override void classstartunload (lc c, ulong counter) {",
  "classstartunload",
  0
 ],
 [
  "return 1;\t}\tsbyte2 s2;\ts2.f1 = 1;\ts2.f2 = 2;\ts2 = mono_return_sbyte2(s2, 9);\tif (s2.f1 != 1+9) {\treturn 1;\t}\tif (s2.f2 != 2+9) {",
  "got but expected",
  0
 ],
 [
  "public void openclose_writemethods() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {",
  "sqlstring",
  1
 ],
 [
  "private static bool callsecondinterfaceinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tif ((!(bool)(firstclassreturndynamicinterface<int>.staticmethod().instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "dictionary<timertype, string> timer_names = new dictionary<timertype,string> {\t{ timertype.parsetotal, \"parsing source files\" }, { timertype.assemblybuildersetup, \"assembly builder setup\" }, { timertype.createtypetotal, \"compiled types created\" }, { timertype.referencesloading, \"referenced assemblies loading\" }, { timertype.referencesimporting, \"referenced assemblies importing\" }, { timertype.predefinedtypesinit, \"predefined types initialization\" }, { timertype.moduledefinitiontotal, \"module definition\" }, { timertype.emittotal, \"resolving and emitting members blocks\" }, { timertype.closetypes, \"module types closed\" }, { timertype.resouces, \"embedding resources\" }, { timertype.outputsave, \"writing output file\" }, { timertype.debugsave, \"writing debug symbols file\" }, };\tint counter = 0;\tdouble percentage = (double) total.elapsedmilliseconds / 100;\tlong subtotal = total.elapsedmilliseconds;\tforeach (var timer in timers) {\tstring msg = timer_names[(timertype) counter++];\tvar ms = timer == null ? 0 : timer.elapsedmilliseconds;\tsubtotal -= ms;\t}",
  "ok",
  1
 ],
 [
  "public static bool verifynode(xmlreader r, xmlnodetype eexpnodetype, string strexpname, string strexpvalue) {\tbool bpassed = true;\tif (r.nodetype != eexpnodetype) {\tbpassed = false;\t}\tif (r.name != strexpname) {\tbpassed = false;\t}\tif (r.value != strexpvalue) {",
  "verifying default writebuffersize after open",
  1
 ],
 [
  "}\tadspath.remove(adspath.length - 1, 1);\tde.path = adspath.tostring();\t}\telse {\tdebug.assert(sidtype == sidtype.realobject);\tde.path = nativemember.adspath;\t}\tif (islocalmember(sid)) {\tif (!_recursive || !samutils.isofobjectclass(de, \"group\")) {",
  "creating reflectpropertydescriptor for",
  1
 ],
 [
  "protected static void writeincludedeclaration (textwriter writer, string inc) {\tif (inc == null || inc.length == 0) return;\tmatch m = includeregex.match (inc);\tif (!m.groups [\"include\"].success) {\treturn;\t}\tif (m.success && m.groups [\"autoheader\"].success) {\tstring i = m.groups [\"includefile\"].value;\tstring def = \"have_\" + i.toupper ().replace (\"/\", \"_\").replace (\".\", \"_\");",
  "endif ndef",
  0
 ],
 [
  "static void main (string[] args) {",
  "computenodeid",
  1
 ],
 [
  "public task<string> b2method() {",
  "connection close",
  1
 ],
 [
  "}\t}\t}\t\";\tvar unit = syntaxtree.parse(code);\tvar type = unit.members.first() as typedeclaration;\tvar method = type.members.first() as methoddeclaration;\tvar stmt = method.body.statements.first () as returnstatement;\tbool passed = stmt.expression is objectcreateexpression;\tif (!passed) {",
  "was",
  1
 ],
 [
  "public static int test_shift_2 () {\tunchecked {\tlong c = (long)0x800000ff00000000;\tlong d = (long)0x8ef0abcd00000000;\tlong t;\tint sa;\tt = c>>4;\tif (t != (long)0xf800000ff0000000) return 1;\tif ((t << 4) != c) return 1;\tt = d>>40;",
  "failed byte byte",
  1
 ],
 [
  "static void outparmtest3 (oracleconnection con) {\toraclecommand cmd2 = con.createcommand();\tcmd2.commandtext = \"create or replace function sf_testoutparm3(parm1 in date, parm2 out date, parm3 in out date) return date \" + \"is \" + \"   returnvalue date := to_date('2001-07-01 15:32:52', 'yyyy-mm-dd hh24:mi:ss');\" + \"begin \" + \"   if parm1 is null then \" + \"      parm2 := to_date('1900-12-31', 'yyyy-mm-dd'); \" + \"      parm3 := to_date('1900-12-31', 'yyyy-mm-dd'); \" + \"   elsif parm1 = to_date('1979-11-25','yyyy-mm-dd') then \" + \"      parm2 := null;\" + \"      parm3 := null;\" + \"      returnvalue := null;\"+ \"   elsif parm3 is null then \" + \"      parm2 := to_date('2008-08-08', 'yyyy-mm-dd');\" + \"      parm3 := to_date('2000-01-01', 'yyyy-mm-dd');\" + \"   else \" + \"      -- add 3 days to date\\n \" + \"\t   parm2 := parm1 + 3; \" + \"      parm3 := parm3 + 5; \" + \"   end if; \" + \"   return returnvalue;\" + \"end;\";\tcmd2.executenonquery();",
  "commit",
  0
 ],
 [
  "}\telse {\t}\t}\tcatch (exception ex) {\ts_pass = false;\t}\t}\tcatch (exception ex) {\ts_pass = false;",
  "waiting for sample close",
  1
 ],
 [
  "private static bool test2() {\tint?[] intnvalues = new int?[]\t{\tint.maxvalue, int.minvalue, 0, null }\t;\tforeach (int? a1 in intnvalues) {\tdynamic d1 = a1;\tdynamic d2 = a1;\tif (d1 != d2) {",
  "assert areequal mtp replace out out out maskedtextresulthint out",
  1
 ],
 [
  "static void help () {",
  "ignore file do not report defects listed in the specified file",
  0
 ],
 [
  "public static int main () {\tm2 m2 = new m2();\ttry {\tvar dll = assembly.loadfile(@\"test-multi-netmodule-3-dll2.dll\");\tvar m3type = dll.gettype(\"m3\");\tvar m3 = activator.createinstance(m3type);\tvar m3m1field = m3type.getfield(\"m1\");\t} catch (system.typeloadexception) {\treturn 0;\t}",
  "hello",
  1
 ],
 [
  "this.orleanstaskscheduler.queueworkitem(new closureworkitem(() => {\tvar task1 = task.factory.startnew(() => {\tassert.false(insidetask, $\"starting new task when i am already inside task of iteration {n}\");\tinsidetask = true;\tthis.output.writeline(\"===> 1a\");\tthread.sleep(1000); n = n + 3;\tthis.output.writeline(\"===> 1b\");\tinsidetask = false;\t});\tvar task2 = task.factory.startnew(() => {",
  "inner exception is null",
  1
 ],
 [
  "public static void buildclient (servicedata sd) {\tstring file = getclientfile (sd);\tif (file.exists (file)) return;\tcreatefolderforfile (file);\tstreamwriter sw = new streamwriter (file);\tsw.writeline ();\tsw.writeline (\"{\");\tsw.writeline (\"\\t{\");",
  "test",
  0
 ],
 [
  "private static bool uninstallspecific (string name, string package, string gacdir, string libdir) {\tstring failure_msg = \"failure to remove assembly from the cache: \";\tif (!file.exists (name)) {",
  "foreach var ctor in t elements constructor ccomparer added ctor true",
  1
 ],
 [
  "if(rdr == null) {\t}\telse {\tdo {\tdatatable dt = rdr.getschematable();\tif(rdr.recordsaffected != -1) {\t}\telse if(dt == null) console.writeline(\"result is from a sql command not (insert,update,delete).   records affected: \" + rdr.recordsaffected);\telse {\tresults++;",
  "result set",
  0
 ],
 [
  "if (f) {\t_current = _enumerator.current;\treturn true;\t}\telse {\t_currentmode = currentenumeratormode.insertedvaluespending;\t_enumerator = (ienumerator<principal>)_insertedvaluespending.getenumerator();\t}\t}\tif (_currentmode == currentenumeratormode.insertedvaluespending) {",
  "waiting for error event ms",
  1
 ],
 [
  "public void createpad() {\tif (sd.mainthread.invokerequired) {\tthrow new invalidoperationexception(\"this action could trigger pad creation and is only valid on the main thread!\");\t}\tif (!padcontentcreated) {\tpadcontentcreated = true;\ttry {\tif (addin != null) {",
  "executing finally in",
  1
 ],
 [
  "static void test3() {\thashgraph<int, int, int> g = new hashgraph<int, int, int>(new countweight<int>(), grid(5));\tg.print(console.out);\tconsole.writeline(\"========= pfs accum =========\");\tconsole.writeline(\"========= pfs not accum =========\");",
  "edge at distance",
  0
 ],
 [
  "if (solution == null) {\treturn 1;\t}\tif (project != null) {\tsolutionitem item = solution.findprojectbyname (project);\tif (item == null) {\treturn 1;\t}\ttranslationproject tp = item as translationproject;\tif (tp == null) {",
  "the project is not a translation project",
  0
 ],
 [
  "public void testremovebracesfromwhile() {\ttest<removebracesaction>(@\"class testclass {\tvoid test () {\t$while (true) {",
  "codetemplateservice exception while loading templates",
  1
 ],
 [
  "static private void help () {",
  "in dn issuer distinguished name",
  0
 ],
 [
  "static void definedynamicassembly (appdomain domain) {\tassemblyname assemblyname = new assemblyname ();\tassemblyname.name = \"mydynamicassembly\";\tassemblybuilder assemblybuilder = domain.definedynamicassembly (assemblyname, assemblybuilderaccess.run);\tmodulebuilder modulebuilder = assemblybuilder.definedynamicmodule (\"mydynamicmodule\");\ttypebuilder typebuilder = modulebuilder.definetype (\"mydynamictype\", typeattributes.public);\tconstructorbuilder constructorbuilder = typebuilder.defineconstructor (methodattributes.public, callingconventions.standard, null);\tilgenerator ilgenerator = constructorbuilder.getilgenerator ();",
  "outgoingpacketswitherrors",
  1
 ],
 [
  "int fin = 0;\tiasyncresult ar1 = d.begininvoke (1, ac, state1);\tiasyncresult ar2 = d.begininvoke (2, ac, state2);\tiasyncresult ar3 = d.begininvoke (3, ac, state3);\tiasyncresult ar4 = d.begininvoke (4, ac, state4);\tint res = d.endinvoke (ar1);\tconsole.writeline (\"result = \" + res);\ttry {\td.endinvoke (ar1);\t} catch (invalidoperationexception) {",
  "error can not initialize gdi library please check http environment newline",
  1
 ],
 [
  "private static bool callsecondstructinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tdynamic d = new firstclassreturnstruct<int>();\tif ((!(((secondstruct<int>)d.instancemethod()).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "currentconnections",
  1
 ],
 [
  "public static void thread() {\tthread.sleep(500);\tthread.sleep(500);\tthread.sleep(500);\tthread.sleep(500);",
  "thread running",
  0
 ],
 [
  "public static void main () {\tfoo_delegate d = new foo_delegate (function);\tasynccallback ac = new asynccallback (async_callback);\tiasyncresult ar1 = d.begininvoke (ac, \"foo\");\tar1.asyncwaithandle.waitone();\tthread.sleep(1000);",
  "res files",
  1
 ],
 [
  "s3.f2 = 2;\ts3.f3 = 3;\ts3 = mono_return_sbyte3(s3, 9);\tif (s3.f1 != 1+9) {\treturn 1;\t}\tif (s3.f2 != 2+9) {\treturn 2;\t}\tif (s3.f3 != 3+9) {",
  "handlertype trystart tryend handlerstart handlerend filterstart catchtype",
  1
 ],
 [
  "assemblyname an = assemblyname.getassemblyname ( path.combine (dir, assembly_filename));\tdirectory.delete (dir, true);\tif (package != null) {\tstring link_dir = path.combine (libdir, package);\tstring link = path.combine (link_dir, assembly_filename);\ttry {\tfile.delete (link);\t} catch {\t}\tif (directory.getfiles (link_dir).length == 0) {",
  "cleaning package directory it is empty",
  0
 ],
 [
  "progressdialog.updateprogresstext(typelib.filename);\tguid guid = new guid(typelib.guid);\ttypelibrary.restoretypelib(typelib.filename, guid, typelib.version);\tprogressdialog.updateprogress(1);\t} catch (exception ex) {\t_typelibs.remove(typelib);\tprogressdialog.updateprogress(1);\t}\t}\t} catch (exception ex) {",
  "principalcollection containsnativetest clear pending",
  1
 ],
 [
  "public clientwrapperbase(string name, int gatewayport, string clusterid, action<clientconfiguration> configcustomizer, action<iclientbuilder> clientconfigurator) {\tthis.name = name;",
  "argumentnullexception is not supposed to be thrown for the input type",
  1
 ],
 [
  "static void displaycertificate (x509certificate x509, bool machine, bool verbose) {",
  "getphysicaladdress",
  1
 ],
 [
  "public void readwithoutopen() {\tusing (serialport com = new serialport()) {",
  "verifying read method throws exception without a call to open",
  0
 ],
 [
  "doc.add(xa);\txmlwriter w = doc.createwriter();\tw.dispose();\ttry {\tdoc.save(new memorystream());\t}\tcatch (argumentexception) {\tcheckclosedstate(w.writestate);\treturn;\t}",
  "the filename doesn t match the assembly name",
  1
 ],
 [
  "appdomain hostdomain = appdomain.createdomain(\"orleanshost\", null, new appdomainsetup {\tappdomaininitializer = initsilo, appdomaininitializerarguments = args, });\tvar config = clientconfiguration.localhostsilo();\tgrainclient.initialize(config);\tvar grain = grainclient.grainfactory.getgrain<iperson>(0);\tvar name = grain.getfirstname().result;\tif ( name != null) {\t}\telse {\tgrain.setpersonalattributes(new personalattributes { firstname = \"john\", lastname = \"doe\", gender = gendertype.male }).wait();",
  "reader positioned on",
  1
 ],
 [
  "private static int main() {\ttry {\tif (testtrycatch(15) || !testtrycatch(18)) {",
  "try catch test failed",
  0
 ],
 [
  "protected void testwrongcontext (codeactionprovider action, string input) {\tvar context = testrefactoringcontext.create (input);\tcontext.formattingoptions = formattingoptions;\tbool isvalid = action.getactions (context).any ();",
  "valid node is",
  0
 ],
 [
  "filepath migrateprefspath = migratableprofile.configdir.combine (filename);\ttry {\tvar parentdir = prefspath.parentdirectory;\tif (!directory.exists (parentdir)) directory.createdirectory (parentdir);\tfile.copy (migrateprefspath, prefspath);\t} catch (ioexception ex) {\tstring message = string.format (\"failed to migrate core properties from {0}\", migrateprefspath);\tloggingservice.logerror (message, ex);\t}\t} else {",
  "did not find previous version from which to migrate data",
  0
 ],
 [
  "public void readtimeout_default_readbyte() {",
  "successfully switched to mode",
  1
 ],
 [
  "test.abortproxy ();\treturn 2;\t} catch (threadabortexception e) {\tobject state;\tstate = e.exceptionstate;\tthread.resetabort ();\tif (state == null) {\treturn 3;\t} else {\tif (!remotingservices.istransparentproxy (state)) {",
  "state is not proxy",
  0
 ],
 [
  "#endif string copyrighttext = \"copyright (c) 2002-2012 charlie poole.\\r\\ncopyright (c) 2002-2004 james w. newkirk, michael c. two, alexei a. vorontsov.\\r\\ncopyright (c) 2000-2002 philip craig.\\r\\nall rights reserved.\";\tobject[] objectattrs = executingassembly.getcustomattributes(typeof(assemblycopyrightattribute), false);\tif ( objectattrs.length > 0 ) copyrighttext = ((assemblycopyrightattribute)objectattrs[0]).copyright;\tobjectattrs = executingassembly.getcustomattributes(typeof(assemblyconfigurationattribute), false);\tif (objectattrs.length > 0) {\tstring configtext = ((assemblyconfigurationattribute)objectattrs[0]).configuration;\tif (configtext != \"\") versiontext += string.format(\" ({0})\", configtext);\t}\tconsole.writeline(copyrighttext);\tconsole.writeline();",
  "runtime environment",
  0
 ],
 [
  "public static void main () {\tvar all = cultureinfo.getcultures (culturetypes.specificcultures | culturetypes.neutralcultures).orderby (l => l.lcid);\tconsole.outputencoding = encoding.utf8;\tvar writer = console.out;\tforeach (var c in all) {\tif (c.lcid == cultureinfo.invariantculture.lcid) continue;",
  "loaded assembly",
  1
 ],
 [
  "public void testinvalidcase4() {\ttestwrongcontext<stringcompareisculturespecificissue>(@\" class test {\tvoid foo () {",
  "got but expected",
  1
 ],
 [
  "protected void runaction (action<texteditordata> action) {\thidemousecursor ();\ttry {\taction (this.texteditordata);\t} catch (exception e) {",
  "error while executing action",
  0
 ],
 [
  "private static bool inifstatement1() {\tint failcount = 0;\tc origin = new c(1);\tdynamic d = origin;\tif ((bool)d) {\tfailcount++;",
  "test failed conversion result is incorrect",
  0
 ],
 [
  "private void dumpbitmapinfo(ref nativemethods.bitmapinfo_flat pbmi) {",
  "using system reflection",
  1
 ],
 [
  "protected override void run () {\tif (!options.hasmemoryleakfeature) return;\tvar type = typeof (glib.object).assembly.gettype (\"glib.pointerwrapper\");\tif (type == null) {\treturn;\t}",
  "gtk mac leak tracking pad enabled may cause performance issues",
  0
 ],
 [
  "double d7 = double.minvalue;\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(\"myarg1\", szempty, d1);\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);\tif (!double.ispositiveinfinity((double)retobj)) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg2\", szempty, d2);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (!double.isnegativeinfinity((double)retobj)) {",
  "failed to add get a value for",
  0
 ],
 [
  "public static int run() {\tint iterationcount = 0;\twhile (!visited && iterationcount++ < 10000) {\tgc.keepalive(new dummy());\tgc.collect();\t}\tif (visited) {\treturn program.pass;\t}\telse {",
  "finalizetest failed",
  0
 ],
 [
  "static void refcursortest3(oracleconnection con) {",
  "foo",
  1
 ],
 [
  "title = subissue.description.tostring ();\tdesc = subissue.description.tostring () != title ? subissue.description : \"\";\t}\t}\t}\t}\tvar providerstates = new dictionary<coderefactoringdescriptor, bool> ();\tforeach (var node in options.allrefactorings.where (x => x.language.contains (language))) {\tproviderstates [node] = node.isenabled;\t}",
  "code actions",
  0
 ],
 [
  "icollectiontestgrain grain = this.testcluster.grainfactory.getgrain<icollectiontestgrain>(i);\tgrainid grainid = ((grainreference)await grain.getgrainreference()).grainid;\tsiloaddress primaryforgrain = (await testutils.getdetailedgrainreport(this.testcluster.internalgrainfactory, grainid, this.testcluster.primary)).primaryforgrain;\tif (primaryforgrain.equals(this.testcluster.primary.siloaddress)) {\tcontinue;\t}\tstring silohostingactivation = await grain.getruntimeinstanceid();\tif (this.testcluster.primary.siloaddress.tolongstring().equals(silohostingactivation)) {\tcontinue;\t}",
  "created grain with key whose primary directory owner is silo and which was activated on silo",
  0
 ],
 [
  "public static int test_0_abort_finally_and_cancel () {\tfinally_done = false;\tresult = 0;\taction ac = guardfromeh1;\thandle = new manualresetevent (false);\tvar res = ac.begininvoke (null, null);\thandle.waitone ();\tthread.abort ();\tres.asyncwaithandle.waitone ();",
  "failed bool bool",
  1
 ],
 [
  "public static ienumerable<string> yieldreturnwithnestedtryfinally(bool breakinmiddle) {\tyield return \"start of method\";\ttry {\tyield return \"within outer try\";\ttry {\tyield return \"within inner try\";\tif (breakinmiddle) yield break;",
  "end of inner try",
  0
 ],
 [
  "static void dump_user (string username) {\tmembershipuser user = membership.getuser (username, false);",
  "error while saving layout",
  1
 ],
 [
  "static void main () {",
  "hello",
  0
 ],
 [
  "static void header () {\tconsole.writeline (new assemblyinfo ().tostring ());",
  "exe snapshot user id",
  1
 ],
 [
  "public void performsearchindexcreation () {\tfiresearchindexcreationevent (true);\ttry {\troottree.makesearchindex ();\t} catch (exception e) {\t}\ttry {\troottree.makeindex ();\t} catch (exception e) {",
  "main waiting for mon",
  1
 ],
 [
  "public static void main(string[] args) {\tsomeenum someenum = someenum.dog;",
  "someenum result",
  0
 ],
 [
  "private void backtrack() {\tint newpos = runtrack[runtrackpos++];\t#if dbg if (runmatch.debug) {",
  "pe",
  1
 ],
 [
  "static void main(string[] args) {\tappdomain hostdomain = appdomain.createdomain(\"orleanshost\", null, new appdomainsetup() {\tappdomaininitializer = initsilo });\tdosomeclientwork();",
  "orleans silo is running press enter to terminate",
  0
 ],
 [
  "public async task serverallownoencryption_clientrequireencryption_connectwithencryption() {\tusing (var serverallownoencryption = new dummytcpserver( new ipendpoint(ipaddress.loopback, 0), encryptionpolicy.allownoencryption)) using (var client = new tcpclient()) {\tawait client.connectasync(serverallownoencryption.remoteendpoint.address, serverallownoencryption.remoteendpoint.port);\tusing (var sslstream = new sslstream(client.getstream(), false, allowanyservercertificate, null, encryptionpolicy.requireencryption)) {\tawait sslstream.authenticateasclientasync(\"localhost\", null, sslprotocolsupport.defaultsslprotocols, false);",
  "client authenticated to server with encryption cipher bit strength",
  0
 ],
 [
  "static void showhelp (bool shorthelp, string exename) {\tif (shorthelp) {\tconsole.writeline ();\tconsole.writeline ();\treturn;\t}\tconsole.writeline ();",
  "did not throw error",
  1
 ],
 [
  "private void thread_func() {\tthread thr=thread.currentthread;\tlock(thr) {\tthread.sleep(2000);\tthread.sleep(15000);\t}\tlock(thr) {\tmonitor.wait(thr);\t}\tthread.sleep(2000);",
  "leaving thread",
  0
 ],
 [
  "public void resolveentityandbaseuri () {\tstring world = path.combine (path.gettemppath (), \"world.txt\");\tstring dtd = path.combine (path.gettemppath (), \"doc.dtd\");\ttry {\tusing (textwriter w = file.createtext (world)) {\t}\tusing (textwriter w = file.createtext (dtd)) {",
  "dummy",
  0
 ],
 [
  "public static void usage (string message) {\tif (message != null) {\tconsole.writeline (\"{0}{1}{0}\", environment.newline, message);\t}",
  "failed to grab culture culturelang using default",
  1
 ],
 [
  "static void writehelp () {\tconsole.writeline ();\tconsole.writeline ();\tconsole.writeline ();",
  "gc generatecode generate proxy source code",
  0
 ],
 [
  "public static int main() {\twaitsubsystemtests.doublesetoneventwithtimedoutwaitershouldnotstayinwaiterslist();\twaitsubsystemtests.manualreseteventtest();\twaitsubsystemtests.autoreseteventtest();\twaitsubsystemtests.semaphoretest();\twaitsubsystemtests.mutextest();\twaitsubsystemtests.waitdurationtest();\tthreadpooltests.runprocessorcountitemsinparallel();\tthreadpooltests.runmorethanmaxjobsmakesonejobwaitforstarvationdetection();\tthreadpooltests.threadpoolcanpickuponejobwhenthreadisavailable();",
  "threadpooltests threadpoolcanpickupmultiplejobswhenthreadsareavailable",
  0
 ],
 [
  "public int run (string[] args) {\tparseargs (args);\tif (!nologo) {\tconsole.writeline ();\t}\tif (unknownarg != null) {\tconsole.writeline ();\treturn 1;\t}\tif (help) {",
  "usage sgen options",
  0
 ],
 [
  "try {\tif (trycount > 1) {\t} else {\t}\tthis.compilation = await typesystemservice.getcompilationasync (this.service.project).configureawait (false);\tif (this.compilation == null) {\treturn false;\t}\tthis.initlookuptypes (token, this.lookuptypes.keys.toarray ());\tvar result = await this.removecodefromproject (token).configureawait (false);",
  "icontitlefont",
  1
 ],
 [
  "static xmldocument loadfeedbackdoc () {\txmldocument doc = new xmldocument ();\ttry {\tif (file.exists (feedbackfile)) doc.load (feedbackfile);\t} catch (exception ex) {",
  "imports",
  1
 ],
 [
  "while (!shuttingdown) {\tbinarymessage msg;\tint type;\ttry {\ttype = instream.readbyte ();\tif (type == -1) break;\tmsg = binarymessage.read (instream);\tmsg = loadmessagedata (msg);\tif (debugmode) {\tstring mtype = type == message_queue_end ? \"[m] \" : \"[q] \";",
  "server xs rp",
  0
 ],
 [
  "public void parity_odd_mark() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "configurationmanager appsettings add resulted in exception",
  1
 ],
 [
  "}\tif (allowselffound) {\tadssecurity.removeaccessrulespecific(allowselface);\t}\tif (allowworldfound) {\tadssecurity.removeaccessrulespecific(allowworldace);\t}\t}\telse {\tif (denyselffound) {",
  "adstorectx cannotchangepwdtoldapconverter remove deny self",
  0
 ],
 [
  "public void writestring_4(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writestring(\"\\ud812\");\tw.writeendelement();\t}\tcatch (argumentexception e) {",
  "exception",
  0
 ],
 [
  "private static void dumpdatatable(datatable datatable, int rowprintcount) {",
  "failed to trust https certificate",
  1
 ],
 [
  "private static bool test12() {\tdecimal a = 1.10m;\tdynamic b = a;\t++b;\tif (b == 2.10m) return true;",
  "add",
  1
 ],
 [
  "public void printsummaryreport() {",
  "reader movetocontent",
  1
 ],
 [
  "public static void main (string[] args) {\tstring filename = ((args.length > 0) ? args[0] : null);\tif ((filename != null) && (file.exists (filename))) new gtkcertificateviewer (filename);\telse {\theader ();",
  "usage mono gcertview exe certificate cer",
  0
 ],
 [
  "public static void dataadaptertest2_delete (oracleconnection con) {\tconsole.writeline(\"================================\");\tconsole.writeline(\"=== adapter delete =============\");\tconsole.writeline(\"================================\");\toracletransaction transaction = con.begintransaction ();\toracledataadapter da = new oracledataadapter(\"select * from mono_adapter_test\", con);\toraclecommandbuilder mycb = new oraclecommandbuilder(da);\tda.selectcommand.transaction = transaction;",
  "create data set",
  0
 ],
 [
  "public static int main () {\tvar t = typeof (c<>);\tif (t.getfields (bindingflags.public | bindingflags.nonpublic | bindingflags.instance | bindingflags.static).length != 1) return 1;\tt = typeof (c2<>);\tif (t.getfields (bindingflags.public | bindingflags.nonpublic | bindingflags.instance | bindingflags.static).length != 1) return 1;\tt = typeof (n1);\tif (t.getfields (bindingflags.public | bindingflags.nonpublic | bindingflags.instance | bindingflags.static).length != 0) return 1;",
  "couldn t reflect informations",
  1
 ],
 [
  "testutilities.assertthrows<invalidoperationexception>(() => mytask.filestostage = new list<ifilestagingprovider>());\tcloudpool boundpool = batchcli.pooloperations.getpool(boundjob.executioninformation.poolid);\tutilities utilities = batchcli.utilities;\ttaskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();\ttaskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(10), controlparams: null, additionalbehaviors: new[]\t{\tnew microsoft.azure.batch.protocol.requestinterceptor((x) => {\ttry {\tlist<computenode> allcomputenodes = boundpool.listcomputenodes().tolist();\tallcomputenodes.foreach( (icn) => {",
  "failure",
  1
 ],
 [
  "file.setattributes(testfile, fileattributes.normal);\tfile.delete(testfile);\t}\t}\tif (loadxsl(\"xmlresolver_document_function_absolute_uri.xsl\", xslinputtype, readertype) == 1) {\tif (transformresolver(\"fruits.xml\", outputtype, navtype, new xmlurlresolver()) == 1) {\tverifyresult(expected);\treturn;\t}\telse {",
  "total columns",
  1
 ],
 [
  "static void do_one () {\tbuild_array ();\tget_stats ();\tgc.collect ();\tget_stats ();\tfree_some (10);\tget_stats ();\tfree_some (4);\tget_stats ();\tgc.collect ();",
  "ok",
  1
 ],
 [
  "for (int i = 1; i < 27; i++) {\tallocationsizes.add(8 * (1<<i) + 24);\t}\tconsole.writeline(findperfecthash(allocationsizes.toarray(), 32));\tallocationsizes.clear();\tallocationsizes.add(3 * 4 + 4);\tfor (int i = 64; i <= 1024 * 1024; i *= 2) {\tallocationsizes.add(12 * i);\t}\tconsole.writeline(findperfecthash(allocationsizes, 16));",
  "stack bit",
  0
 ],
 [
  "public void at6_readblob() {\talltypes db = createdb();\tvar result = from p in db.othertypes orderby p.datetime select p.blob;\tforeach (var blob in result) {",
  "blob",
  0
 ],
 [
  "public static void main(string[] args) {\tprocessstartinfo benchmarkstartinfo = new processstartinfo(\"benchmark.exe\", \"/automated\");\tbenchmarkstartinfo.useshellexecute = false;\tprocessstartinfo benchmark32startinfo = new processstartinfo(\"benchmark32.exe\", \"/automated\");\tbenchmark32startinfo.useshellexecute = false;\tlist<testseries> testseries = new list<testseries>();\tif (file.exists(benchmark32startinfo.filename)) {\ttestseries.add(new testseries(\"without profiler (32-bit)\", () => withoutprofiler(benchmark32startinfo)));\ttestseries.add(new testseries(\"with profiler (32-bit)\", () => withprofiler(benchmark32startinfo)));\t} else {",
  "adding task to job",
  1
 ],
 [
  "public static ienumerable<string> yieldreturnwithnestedtryfinally(bool breakinmiddle) {\tyield return \"start of method\";\ttry {",
  "within outer try",
  0
 ],
 [
  "static void writehelp () {\tconsole.writeline ();\tconsole.writeline ();\tconsole.writeline ();\tconsole.writeline ();\tconsole.writeline ();",
  "exception not generated for non existent file parameter name",
  1
 ],
 [
  "public static int main () {\tappdomain.currentdomain.assemblyresolve += new resolveeventhandler (myresolveeventhandler);\tevent_handler_count = 0;\ttry {\tassembly a = assembly.loadfile (path.combine (directory.getcurrentdirectory (), \"assemblyresolve_asm.dll\"));\tforeach (type t in a.gettypes ()) {\t}\t} catch (exception ex) {",
  "exception",
  1
 ],
 [
  "public static void main () {\ta a = new a (8);\tb b = new b (9);\tb.setcount (10);",
  "number",
  1
 ],
 [
  "callinterceptorargs args = new callinterceptorargs();\targs.argumentsandreturnvalue = locals.locals1;\targs.locals = locals.locals2;\tlocals.interceptor.thunkexecute(ref args);\t}\tbreak;\tcase callconversionoperation.opcode.copy_x_bytes_from_localblock_y_offset_z_in_localblock_to_offset_w_in_transition_block: {\tvoid* psrc = ((byte*)locals.getlocalblock(op.y).getrawmemorypointer()) + op.z;\tvoid* pdst = locals.transitionblockptr + op.w;\tbuffer.memorycopy(psrc, pdst, op.x, op.x);",
  "the apiname option is required",
  1
 ],
 [
  "return;\t}\twriter.writeline (resp);\twriter.flush ();\tstr = reader.readline ();\tif (str != \"stor file.txt\") {\twhere = \"stor - \" + str;\tclient.close ();\treturn;\t}",
  "ok to send data",
  0
 ],
 [
  "protected void asynccompleted(object sender, socketasynceventargs e) {\teventwaithandle handle = (eventwaithandle)e.usertoken;",
  "asynccompleted socketasynceventargs with manual event error",
  0
 ],
 [
  "private static void printoutstorageaccount(storagebundle storagebundle) {",
  "storage account regeneration period days",
  0
 ],
 [
  "static async task testfinallywithreturnnovalue (int value) {\tfin = false;\ttry {\tif (value > 4) return;\tvalue += 10;\t} finally {\tfin = true;",
  "finally",
  0
 ],
 [
  "public void preparemethod(methoddesc method) {",
  "got but expected",
  1
 ],
 [
  "public void testemptycatchwithfinally() {\tvar input = baseinput + @\" try {\tf ();\t} catch {\tthrow;\t} finally {",
  "inside finally",
  0
 ],
 [
  "static bool method (pointf f) {",
  "flags",
  1
 ],
 [
  "public rid submit(ip ip, int time) {\tint jobcount = userjobs.containscount(ip);\trid rid = new rid();\tjob job = new job(rid, ip, time + 60 * jobcount);\tipriorityqueuehandle<job> h = null;\tjobqueue.add(ref h, job);\tuserjobs.add(ip);\tjobs.add(rid, h);",
  "submitted",
  0
 ],
 [
  "if (file.exists (filetoload)) {\txmldataserializer serializer = new xmldataserializer (new datacontext ());\tlist<tasklistentry> ts = (list<tasklistentry>) serializer.deserialize (filetoload, typeof(list<tasklistentry>));\tforeach (tasklistentry t in ts) {\tt.workspaceobject = e.item;\tusertasks.add (t);\t}\t}\t}\tcatch (exception ex) {",
  "extern alias",
  1
 ],
 [
  "private static bool callsecondstructoperator() {\tint failcount = 0;\tverify.firstcalled = false;\tdynamic d = new firstclassreturnstruct<int>();\tif ((!(((secondstruct<int>)d.instanceproperty) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "outputline (@\"       \\open to open the connection\");\toutputline (@\"       \\close to close the connection\");\toutputline (@\"       \\e to execute sql query (select)\");\toutputline (@\"       \\h to show help (all commands).\");\toutputline (@\"       \\defaults to show default variables.\");\toutputline (\"\");\t}\tpublic void showhelp () {\tconsole.writeline (\"\");\tif (!waitforenterkey ()) return;",
  "s true false to silent messages",
  0
 ],
 [
  "try {\tloadxsl_resolver(\"showparam.xsl\", xslinputtype, readertype, myresolver);\ttransform((string) \"fruits.xml\", (outputtype) outputtype, navtype);\tverifyresult(baseline, _stroutfile);\treturn;\t}\tcatch (argumentnullexception e) {\t_output.writeline(e.tostring());\tif (xslinputtype == xslinputtype.uri) return;\telse {",
  "got but expected",
  1
 ],
 [
  "public packagemanagementprojectservice () {\tif (ideapp.workspace != null) {\tideapp.workspace.solutionloaded += (sender, e) => onsolutionloaded (e.solution);\tideapp.workspace.solutionunloaded += (sender, e) => onsolutionunloaded (e.solution);\t} else {",
  "addinmanager installaddins finished",
  1
 ],
 [
  "try {\tvar a = new correctcasefriendassembly.internalclass(@internal: 0);\t} catch (memberaccessexception) {\tfailcount += 1;\t}\ttry {\tvar b = new correctcasefriendassembly.internalclass(@public: 'a');\tb.internalmethod();\t} catch (memberaccessexception) {\tfailcount += 1;",
  "forms designer cannot merge form changes because the designer is not loaded successfully or not loaded at all",
  1
 ],
 [
  "});\tinitialize(builder);\ticollectiontestgrain grain = await pickgraininnonprimary();\ttimespan age = await grain.getage();\toutput.writeline(age.tostring());\tawait grain.deactivateself();\tawait task.delay(3000);\tvar thrownexception = await record.exceptionasync(() => grain.getage());\tif (forwardcount != 0) {\tassert.null(thrownexception);",
  "the call after deactivateself has not thrown any exception as expected since forwardcount is",
  0
 ],
 [
  "return true;\tcase \"/nostdlib\": case \"/nostdlib+\": stdlib = false;\treturn true;\tcase \"/nostdlib-\": stdlib = true;\treturn true;\tcase \"/target\": if (value.length == 0) {\tenvironment.exit (1);\t}\tif (string.compare (\"exe\", value, true) == 0) {\t} else if (string.compare (\"library\", value, true) != 0) {",
  "hello name",
  1
 ],
 [
  "catch (notsupportedexception) {\treturn true;\t}\t}\ttry {\tdatareader.readvaluechunk(buffer, iindex, icount);\t}\tcatch (exception e) {\tbpassed = (e.gettype().tostring() == exceptiontype.tostring());\tif (!bpassed) {",
  "expected exception",
  0
 ],
 [
  "private void read(string filename) {\txmlserializer ser=new xmlserializer(typeof(employees));\tfilestream fs=new filestream(filename, filemode.open);\temployees emps;\temps=(employees)ser.deserialize(fs);\tfs.close();\tforeach(employee emp in emps) {",
  "employee name",
  0
 ],
 [
  "xmlinput.closereader ();\t}\txpathnavigator nav = xpathdoc.createnavigator ();\txpathexpression expr = null;\ttry {\texpr = nav.compile (_query);\t} catch (exception e) {\tif (iscriticalexception (e)) {\tthrow;\t}",
  "xpath query cannot be loaded",
  0
 ],
 [
  "static void help () {",
  "deleting task",
  1
 ],
 [
  "if ((i % 24) == 0){\tconsole.write (\"\\n{0:x6}: \", i);\t}\tconsole.write (\"{0:x2} \", d [i]);\tsb.append (string.format (\"{0:x2} \", d [i]));\t}\tif (s != null){\tstring result = sb.tostring ().trim ();\tif (s.trim () != result){\tconsole.writeline ();",
  "expected",
  0
 ],
 [
  "new string [ ] { counters[0].categoryname, counters[0].countername, counters[0].instancename, counters[0].rawvalue.tostring () }, new string [ ] { counters[1].categoryname, counters[1].countername, counters[1].instancename, counters[1].rawvalue.tostring () }\t}, is.equivalentto (new [ ] {\tnew string [ ] { a.category, a.basename, a.name, \"0\" }, new string [ ] { a.category, a.name,     a.name, \"0\" }\t}));\tint i = 0;\tforeach (var b in counters) {\tvar category = b.categoryname;\tvar name = b.countername;\tvar instance = b.instancename;\tvar value = b.rawvalue;",
  "total out of assemblies",
  1
 ],
 [
  "public void reportwarning (string message) {",
  "verifiedimagerefs version",
  1
 ],
 [
  "static void async_callback (iasyncresult ar) {",
  "async callback",
  0
 ],
 [
  "}\tcatch (filenotfoundexception e1) {\t_output.writeline(e1.tostring());\t}\tcatch (fileloadexception e2) {\t_output.writeline(e2.tostring());\t}\t}\t}\tcatch (exception e) {",
  "test failed at conversion result",
  1
 ],
 [
  "public void receivedbytesthreshold_int32minvalue() {",
  "verifying minvalue receivedbytesthreshold",
  0
 ],
 [
  "public bool trygetgenericvirtualtargetfortypeandslot(runtimetypehandle targethandle, ref runtimetypehandle declaringtype, runtimetypehandle[] genericarguments, ref string methodname, ref runtimesignature methodsignature, out intptr methodpointer, out intptr dictionarypointer, out bool slotupdated) {\tmethodnameandsignature methodnameandsignature = new methodnameandsignature(methodname, methodsignature);",
  "gvm resolution starting for on a target of type",
  0
 ],
 [
  "public async task<bool> removefromproject () {\tif (!this.getisaddedtoproject()) {",
  "skipping removing of the service it is not added to the project",
  0
 ],
 [
  "static bool runtest (methodinfo test) {\tconsole.write (\"running test {0, -25}\", test.name);\ttry {\ttest.invoke (new tester (), null);\treturn true;\t} catch (exception e) {",
  "failed",
  0
 ],
 [
  "}\t}\tcatch {\tfailed = true;\t}\t}\tif (failed) {\tbreak;\t}\tif (store.certificates.contains (x509)) {",
  "this certificate is already in the store",
  0
 ],
 [
  "public static void createwhitespacehandlingtestfile(string strfilename) {\tfilepathutil.addstream(strfilename, new memorystream());\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"]>\");",
  "failed loading icon",
  1
 ],
 [
  "public void dumpreader (xmlreader xr, bool attvalue) {",
  "depth",
  0
 ],
 [
  "try {\tcharsread = com1.read(rcvbuffer, offset, count);\t}\tcatch (timeoutexception) {\tbreak;\t}\tint bytesread = com1.encoding.getbytecount(rcvbuffer, offset, charsread);\ttotalbytesread += bytesread;\tif (expectedchars.length < totalcharsread + charsread) {\tdebug.writeline(\"count={0}, charsread={1} expectedchars.length={2}, totalcharsread={3}\", count, charsread, expectedchars.length, totalcharsread);",
  "error found unparented child in property grid",
  1
 ],
 [
  "protected override void generateattacheventstatement(codeattacheventstatement e) {",
  "codeattacheventstatement",
  0
 ],
 [
  "} else if (ins.opcode.code == code.stfld || ins.opcode.code == code.stsfld) {\tverifystorefieldinstruction (ins, stack_count);\t} else if (ins.isstorelocal ()) {\tverifystorelocalinstruction (ins, stack_count);\t}\tstack_count += push - pop;\twhile (stack_count > stack.count) stack.add (new ilrange (ins));\twhile (stack_count < stack.count) stack.removeat (stack.count - 1);\tif (stack_count > 0 && stack [stack_count - 1] != null) stack [stack_count - 1].last = ins;\t}",
  "checking method done result",
  0
 ],
 [
  "private static void invalidvalueinoutparam(string connectionstring) {",
  "unknown option or file not found",
  1
 ],
 [
  "static void test(pgsqlconnection con, string sql, commandtype cmdtype, commandbehavior behavior, string testdesc) {\tpgsqlcommand cmd = null;\tpgsqldatareader rdr = null;\tint c;\tint results = 0;",
  "begin sql",
  0
 ],
 [
  "}\t}\tlist<tuple<searchcategory, ireadonlylist<searchresult>>> failedresults = null;\titemidentifier topresult = null;\tfor (int i = 0; i < newresults.count; i++) {\tvar tuple = newresults [i];\ttry {\tif (tuple.item2.count == 0) continue;\tif (topresult == null || topresult.datasource [topresult.item].weight < tuple.item2 [0].weight) topresult = new itemidentifier (tuple.item1, tuple.item2, 0);\t} catch (exception e) {",
  "could not register extended response class not found",
  1
 ],
 [
  "writer.write(\"public void \");\twriter.write(methodname);\twriter.indent++;\twriter.writeline(\"if (o == null) {\");\twriter.indent++;\tif (element.isnullable) {\tif (mapping.issoap) writeencodednulltag(element.name, (element.form == xmlschemaform.qualified ? element.namespace : \"\"));\telse writeliteralnulltag(element.name, (element.form == xmlschemaform.qualified ? element.namespace : \"\"));\t}\telse writeemptytag(element.name, (element.form == xmlschemaform.qualified ? element.namespace : \"\"));",
  "return",
  0
 ],
 [
  "public void cleanup() {\tstring currentservice = \"\";\tforeach (servicecontroller controller in servicecontroller.getservices()) {\ttry {\tcurrentservice = controller.displayname;\tif (controller.displayname.startswith(\"test service\")) {",
  "main creating second thread",
  1
 ],
 [
  "else {\tthrow new testexception(testresult.failed, \"\");\t}\twhile (datareader.read()) ;\tdatareader.dispose();\treturn;\tcase \"dns\": datareader.readtodescendant(\"elem\", \"elem\");\tdatareader.readtonextsibling(\"elem\", \"elem\");\tif (datareader.hasattributes) {\tif (datareader.getattribute(\"att\") == null) {",
  "positioned on wrong element not on dns",
  0
 ],
 [
  "private static intptr openprinter(string printer) {\ttry {\tintptr ptr = libcupsnative.cupsgetppd(printer);\tstring ppd_filename = marshal.ptrtostringansi(ptr);\tintptr ppd_handle = libcupsnative.ppdopenfile(ppd_filename);\treturn ppd_handle;\t}\tcatch (exception) {",
  "client successfully connect to silo host",
  1
 ],
 [
  "static void header () {\tassembly a = assembly.getexecutingassembly ();\tversion v = a.getname ().version;\tif (v.tostring () != \"0.0.0.0\") {",
  "principalcollection add urn urn no match",
  1
 ],
 [
  "public static void usage (string message) {\tif (message != null) {\tconsole.writeline (\"{0}{1}{0}\", environment.newline, message);\t}",
  "show show the web page content on screen",
  0
 ],
 [
  "private void thread_func() {\tthread thr=thread.currentthread;",
  "executescalar",
  1
 ],
 [
  "xmlvalidatingreader xvr = new xmlvalidatingreader (xtr);\txtr.normalization = true;\tdoc.preservewhitespace = true;\tdoc.load (xvr);\ttry {\tsignedxml s = null;\tif (filename.indexof (\"enveloped\") >= 0) s = new signedxml (doc);\telse if (filename.indexof (\"signature-big\") >= 0) s = new signedxml (doc);\telse s = new signedxml ();\txmlnodelist nodelist = doc.getelementsbytagname (\"signature\", \"http: s.loadxml ((xmlelement) nodelist [0]);",
  "filename",
  0
 ],
 [
  "writeline($\"debug.assert({member.name} == null ||\");\tfor (int i = 0; i < typeset.length; i++) writeline($\"    {member.name}.handletype == handletype.{typeset[i]}\" + ((i == typeset.length - 1) ? \");\" : \" ||\"));\t}\t}\t}\tclosescope(\"save\");\topenscope($\"internal static {record.name}handle ashandle({record.name} record)\");\twriteline(\"if (record == null)\");\twriteline(\"{\");\twriteline(\"}\");",
  "else",
  0
 ],
 [
  "if (s11.f7 != 7+9) {\treturn 7;\t}\tif (s11.f8 != 8+9) {\treturn 8;\t}\tif (s11.f9 != 9+9) {\treturn 9;\t}\tif (s11.f10 != 10+9) {",
  "got but expected",
  0
 ],
 [
  "public void utf8encoding() {",
  "invalid complextype attributes restriction",
  1
 ],
 [
  "static int main() {\tint ms, ms2, ms3;\tunsafe {\tms = sizeof (mystruct);\tms2 = sizeof (mystruct2);\tms3 = sizeof (mystruct3);\t}",
  "error",
  1
 ],
 [
  "protected override void run () {\tvar windows = gtk.window.listtoplevels ();\tforeach (var window in windows) {",
  "window window title window gettype",
  0
 ],
 [
  "catch {\tcounter++;\tthrow;\t}\t}\tcatch (exception ex) {\tif (ex.message != \"hello\") return fail;\tcounter++;\t}\tif (counter != 10) {",
  "a test",
  1
 ],
 [
  "for (int i = 0; i < 10; i++) {\tint id = -1;\ttask.factory.startnew(() => {\tid = task.currentid.hasvalue ? (int)task.currentid : -1;\tlogcontext(\"sub-task \" + id + \" n=\" + n);\tint k = n;\tthread.sleep(100);\tn = k + 1;\t}) .continuewith(tsk => {\tlogcontext(\"sub-task \" + id + \"-continuewith\");",
  "loading xml",
  1
 ],
 [
  "if (s9.f6 != 6+90) {\treturn 6;\t}\tif (s9.f7 != 7+90) {\treturn 7;\t}\tif (s9.f8 != 8+90) {\treturn 8;\t}\tif (s9.f9 != 9+90) {",
  "error while reading monodoc file",
  1
 ],
 [
  "#endif return null;\t}\tdatacolumncollection columns = datatable.columns;\tdebug.assert(null != columns, \"getdatacolumnbyschemaaction: unexpected null datacolumncollection\");\tint index = columns.indexof(datasetcolumn);\tif ((0 <= index) && (index < columns.count)) {\tdatacolumn datacolumn = columns[index];\tdebug.assert(null != datacolumn, \"getdatacolumnbyschemaaction: unexpected null datacolumn\");\tif (!adp.isempty(datacolumn.expression)) {\t#if debug if (adapterswitches.dataschema.traceerror) {",
  "verifying default writetimeout with write byte buffer int offset int count",
  1
 ],
 [
  "else if (baseargs.count > 0) {\toutput.write(\"mybase.new(\");\toutputexpressionlist(baseargs);\toutput.write(')');\toutput.writeline();\t}\telse if (iscurrentclass) {\t}\tgeneratevbstatements(e.statements);\tindent--;",
  "cleanup gc",
  1
 ],
 [
  "public static int main () {\tvar m = typeof (c1).getmethod (\"test\");\tvar ta = m.getgenericarguments ()[0].getgenericparameterconstraints ();\tif (ta.length != 2) return 1;\tm = typeof (c2).getmethod (\"test\");\tta = m.getgenericarguments ()[0].getgenericparameterconstraints ();\tif (ta.length != 1) return 2;",
  "ok",
  0
 ],
 [
  "protected override void saveinternal(openedfile file, system.io.stream stream) {",
  "subjectnames",
  1
 ],
 [
  "private static bool callsecondstructinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturnstruct();\tif ((!(bool)(((dynamic)(s + 1)).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "cmd2.commandtext = \"alter session set nls_date_format = 'yyyy-mm-dd hh24:mi:ss'\";\tcmd2.executenonquery ();\ttry {\tcmd2.commandtext = \"drop table mono_test_table7\";\tcmd2.executenonquery ();\t}\tcatch(oracleexception) {\t}\tcmd2.commandtext = \"create table mono_test_table7(\" + \" col1 varchar2(8) not null, \" + \" col2 varchar2(32), \" + \" col3 number(18,2) not null, \" + \" col4 number(18,2), \" + \" col5 date not null, \" + \" col6 date, \" + \" col7 blob not null, \" + \" col8 blob, \" + \" col9 clob not null, \" + \" col10 clob \" + \")\";\tcmd2.executenonquery ();",
  "commit",
  0
 ],
 [
  "static bool callsecondclassoperator() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturndynamicclass();\tif ( (!(bool)(s.instancemethod() + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "can t get source code location for test",
  1
 ],
 [
  "code = string.join (\" | \", flags);\t} else {\tcode = value.tostring ();\t}\tbreak;\tcase typecode.char: code = \"'\" + ((char) value).tostring () + \"'\"; break;\tcase typecode.datetime: code = \"new system.datetime (\" + ((datetime) value).ticks + \")\"; break;\tcase typecode.dbnull: code = \"system.dbnull.value\" ; break;\tcase typecode.object: code = null;\tif (value is exception) {",
  "could not update jumplists",
  1
 ],
 [
  "public static ienumerable<string> yieldreturnwithnestedtryfinally(bool breakinmiddle) {",
  "libcups not found to have printing support you need cups installed",
  1
 ],
 [
  "if (variation.param.tostring() == \"null\") temp = null;\telse temp = string.empty;\tw.writename(temp);\tw.writeendelement();\t}\tcatch (argumentexception) {\tcheckelementstate(w.writestate);\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "static void main() {",
  "hello world",
  0
 ],
 [
  "static void metodo (exception e) {\tif (e is notimplementedexception){\t} else {",
  "fail",
  0
 ],
 [
  "static void writehelp () {\tconsole.writeline ();\tconsole.writeline ();\tconsole.writeline ();\tconsole.writeline ();\tconsole.writeline ();",
  "error",
  1
 ],
 [
  "public void nullablefieldsshouldsupportnullvalue () {\tstring json = @\"{\"\"should_have_value\"\":null}\";\tvar inputstream = new memorystream (encoding.utf8.getbytes (json));\tdatacontractjsonserializer serializer = new datacontractjsonserializer(typeof(datetest));",
  "serializer assembly",
  0
 ],
 [
  "if (t9 ()[0] != 4) return 9;\tvar t10 = arraymultimutate (new string[][] { new string[] { \"a\", \"b\", \"c\" }, new string[] { \"1\", \"2\", \"3\" }, new string[] { \"a\", \"b\", \"c\" } });\tif (t10 ()[2][2] != null) return 10;\tvar array = new short[,] { { 10, 20 } };\tvar t10a = arraymultimutate (array);\tif (t10a () != array[0, 0].gethashcode ()) return 100;\tvar t11 = typeof (\"b\");\tif (t11 () != typeof (string)) return 11;\tvar t12 = nestedtypemutate<ulong> () ();\tif (t12[0] != 0 || t12[1] != 0) return 12;",
  "ok",
  0
 ],
 [
  "static bool projectcontainsreference(iproject project, assemblyname referencename) {\tbool isalreadyinreffolder = false;\tforeach (projectitem projectitem in project.items) {\treferenceprojectitem referenceitem = projectitem as referenceprojectitem;\tif (referenceitem != null) {\tif (referenceitem.itemtype == itemtype.reference) {",
  "initial job schedule commit",
  1
 ],
 [
  "public async task longrunning_lowprioritycomputenodeallocated_isdedicatedfalse() {\tfunc<task> test = async () => {\tusing (batchclient batchcli = await testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment())) {\tstring poolid = \"testlowpri_longrunning\" + testutilities.getmyname();\tconst int targetlowpriority = 1;\ttry {\tcloudpool pool = batchcli.pooloperations.createpool( poolid, poolfixture.vmsize, new cloudserviceconfiguration(poolfixture.osfamily), targetlowprioritycomputenodes: targetlowpriority);\tawait pool.commitasync().configureawait(false);",
  "got but expected",
  1
 ],
 [
  "public xevent dequeue () {\tif (thread.currentthread != thread) {",
  "nested got but expected",
  1
 ],
 [
  "int fin = 0;\tiasyncresult ar1 = d.begininvoke (1, ac, state1);\tiasyncresult ar2 = d.begininvoke (2, ac, state2);\tiasyncresult ar3 = d.begininvoke (3, ac, state3);\tiasyncresult ar4 = d.begininvoke (4, ac, state4);\tint res = d.endinvoke (ar1);\tconsole.writeline (\"result = \" + res);\ttry {\td.endinvoke (ar1);\t} catch (invalidoperationexception) {",
  "rendercontents",
  1
 ],
 [
  "public static void clobtest (oracleconnection connection) {\toracletransaction transaction = connection.begintransaction ();\ttry {\toraclecommand cmd2 = connection.createcommand ();\tcmd2.transaction = transaction;\tcmd2.commandtext = \"drop table clobtest\";\tcmd2.executenonquery ();\t}\tcatch (oracleexception) {\t}",
  "create table",
  0
 ],
 [
  "object [] arguments;\targuments = new object [] { str, i, int32_out, maskedtextresulthint_out };\tif (compare (\"replace\", mask, ref stateindex, arguments, ref more_states)) {\tcontinue;\t}\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;",
  "no contracts found",
  1
 ],
 [
  "public void complexeventsequence1 () {\tstring result = @\"setting table... ---- onlistchanged propertydescriptorchanged,0,0 ----- updateindex : true ---- onlistchanged reset,-1,-1 table was set. ---- onlistchanged propertydescriptoradded,0,0 col1 added. ---- onlistchanged propertydescriptoradded,0,0 col2 added. ---- onlistchanged propertydescriptoradded,0,0 col3 added. uniq added. ----- updateindex : true ---- onlistchanged reset,-1,-1 sort changed. ---- onlistchanged propertydescriptordeleted,0,0 col3 removed. ----- updateindex : true ---- onlistchanged reset,-1,-1 rowfilter changed. ----- updateindex : true ---- onlistchanged reset,-1,-1 rowstatefilter changed. ----- updateindex : true ---- onlistchanged reset,-1,-1 rowstatefilter changed. ---- onlistchanged itemadded,0,-1 added row to rows. ---- onlistchanged itemadded,0,-1 added row to rows. ---- onlistchanged itemadded,0,-1 added row to rows. ---- onlistchanged itemadded,3,-1 addnew() invoked. 4 ---- onlistchanged itemdeleted,3,-1 ---- onlistchanged itemmoved,-2147483648,3 endedit() invoked. 3 ---- onlistchanged itemmoved,0,-2147483648 value changed to appear. 4 ---- onlistchanged itemmoved,3,0 value moved. 4 ---- onlistchanged itemmoved,1,3 value moved again. 4 ---- onlistchanged propertydescriptorchanged,0,0 ----- updateindex : true ---- onlistchanged reset,-1,-1 table changed. \";\teventwriter = new stringwriter ();\tdatatable dt = new datatable (\"table\");\tcomplexeventsequence1view dv = new complexeventsequence1view (dt, eventwriter);\tdt.columns.add (\"col1\");\tdt.columns.add (\"col2\");\tdt.columns.add (\"col3\");\tdt.constraints.add (new uniqueconstraint (dt.columns [0]));\tdv.sort = \"col2\";",
  "sort changed",
  0
 ],
 [
  "}\tts.close ();\tif (compress) tc.writeline (\"\\nstatic const compressedassembly *compressed [] = {\");\telse tc.writeline (\"\\nstatic const monobundledassembly *bundled [] = {\");\tforeach (string c in c_bundle_names){\ttc.writeline (\"\\t&{0},\", c);\t}\tforeach (string asm in aot_names){\t}\tforeach (string asm in aot_names){",
  "did not exception for object that could not be executed",
  1
 ],
 [
  "try {\tthread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();\t} finally {\t}\ttry {\tthread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();",
  "abort reset",
  0
 ],
 [
  "if (!codegenerator.generatecode(options)) {\t}\t}\telse {\treturn -2;\t}\tstopwatch.stop();\treturn 0;\t}\tcatch (exception ex) {",
  "hello world",
  1
 ],
 [
  "public void printusage() {",
  "exe snapshot user id",
  0
 ],
 [
  "public override void run() {\ttry {\tbase.run();\t}\tcatch (exception exc) {",
  "verifying discard method throws exception without a call to open",
  1
 ],
 [
  "system.console.writeline(indent + curvar.desc);\ttestmodule.skipcount++;\t}\t}\tcatch (ctestskippedexception tse) {\tsystem.console.writeline(indent + curvar.desc);\ttestmodule.skipcount++;\t}\tcatch (exception e) {\tsystem.console.writeline(indent + curvar.desc);",
  "unexpected exception happened",
  0
 ],
 [
  "private static bool callsecondstructinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tdynamic d = new firstclassreturnstruct<int>();\tif ((!(((secondstruct<int>)d.instanceproperty).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "boolxsd true boolxsd",
  1
 ],
 [
  "public static void threadmethod_b() {\tfor (int h=0;h<10;h++) {\tint i=5;\tm[i].waitone();",
  "thread b m locked recursively times",
  0
 ],
 [
  "private static async task doclientwork(iclusterclient client) {\tiatmgrain atm = client.getgrain<iatmgrain>(0);\tguid from = guid.newguid();\tguid to = guid.newguid();\tawait atm.transfer(from, to, 100);\tuint frombalance = await client.getgrain<iaccountgrain>(from).getbalance();\tuint tobalance = await client.getgrain<iaccountgrain>(to).getbalance();",
  "we transfered credits from from to to from balance frombalance to balance tobalance",
  0
 ],
 [
  "public static void main(string[] args) {\tisorted<int> sorted = new treeset<int>();\tsorted.addall(new int[] { 23, 29, 31, 37, 41, 43, 47, 53 });\tconsole.writeline(sorted);\tif (args.length == 1) {\tint n = int.parse(args[0]);\tint res;",
  "bytes instances inside",
  1
 ],
 [
  "static void validate_user (string username, string password) {",
  "failure",
  0
 ],
 [
  "static customtoolservice () {\taddinmanager.addextensionnodehandler (\"/monodevelop/ide/customtools\", delegate(object sender, extensionnodeeventargs args) {\tvar node = (customtoolextensionnode)args.extensionnode;\tswitch (args.change) {",
  "did not throw argumentnullexception",
  1
 ],
 [
  "private static bool callsecondstructinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tdynamic d = new firstclassreturnstruct();\tif ((!(((secondstruct)d[1]).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "verifying databits before open",
  1
 ],
 [
  "public static void runcontinuewithbase_exceptioncases( taskcontinuationoptions options, action initran, func<task, task> continuationmaker, func<bool> ranvalue, bool taskisfuture) {",
  "continuewith after task finishes exceptionally",
  0
 ],
 [
  "object val = \"\";\tif (f==3) {\tval = reader.getvalue(f);\tif (((byte[])val).length == 0) val = \"empty blob (not null)\";\telse val = bitconverter.tostring((byte[])val);\t}\telse val = reader.getoraclevalue(f);\t}\tr ++;\t}",
  "rows retrieved",
  0
 ],
 [
  "public void writeformatheader(solutionformatversion version) {\twriter.writeline();",
  "getschematable",
  1
 ],
 [
  "static void add (objecttype type, x509store store, string file, string password, bool verbose) {\tswitch (type) {\tcase objecttype.certificate: x509certificatecollection coll = loadcertificates (file, password, verbose);\tforeach (x509certificate x509 in coll) {\tstore.import (x509);\t}",
  "skipped assy typelib not opened or current",
  1
 ],
 [
  "int success = 0;\tint failed = 0;\tsw = stopwatch.startnew();\thashset<long> transactionsinflight = new hashset<long>();\tint generatedtransactions = 0;\twhile (generatedtransactions < transactionsperrun) {\tint generatecount = math.min(transactionsperrun - generatedtransactions, concurrenttransactionstransactions - transactionsinflight.count);\tstarttransactionsresponse startresponse = await tms.starttransactions(this.transactionbatchtimeouts.take(generatecount).tolist());\tlist<transactioninfo> newtransactions = startresponse.transactionid .select(this.maketransactioninfo) .tolist();\tgeneratedtransactions += newtransactions.count;",
  "generated newtransactions count transactions",
  0
 ],
 [
  "static void displaycertificate (x509certificate x509, bool machine, bool verbose) {",
  "hi",
  1
 ],
 [
  "public void testcase2() {\ttest<stringcompareisculturespecificissue>(@\" class test {\tvoid foo () {\t}\t}\", @\" class test {\tvoid foo () {",
  "usage mono hashwrap exe classname basename wraparound",
  1
 ],
 [
  "public static void connectionpoolingtest2 () {",
  "start connection pooling test",
  0
 ],
 [
  "public void testfieldaccess() {",
  "environmentsettings count",
  1
 ],
 [
  "public static bool verifynode(xmlreader r, xmlnodetype eexpnodetype, string strexpname, string strexpvalue) {\tbool bpassed = true;\tif (r.nodetype != eexpnodetype) {\tbpassed = false;\t}\tif (r.name != strexpname) {\tbpassed = false;\t}\tif (r.value != strexpvalue) {",
  "actual value",
  0
 ],
 [
  "public override bool check() {\tbool retval = true;\tif (underlyingsize > array.length) {",
  "savedlicensekey is null or doesnt contain our type",
  1
 ],
 [
  "string etag = store.writerow(keys, asdictionary(data.state), null);\toutput.writeline(\"write returned etag={0} after {1} {2}\", etag, sw.elapsed, storageproviderutils.printonewrite(keys, data, etag));\tsw.restart();\tvar storeddata = store.readrow(keys);\tassert.notnull(data);\tsw.restart();\tbool ok = store.deleterow(keys, etag);\tassert.true(ok, $\"row deleted ok after {sw.elapsed}. etag={etag} keys={storageproviderutils.printkeys(keys)}\");\tsw.restart();\tstoreddata = store.readrow(keys);",
  "solution version is different",
  1
 ],
 [
  "}\t}\telse if (a.contains(\"=\")) {\tstring[] split = a.split('=');\tif (string.isnullorempty(split[1])) {\treturn false;\t}\tswitch (split[0].tolowerinvariant()) {\tcase \"deploymentid\": deploymentid = split[1];\tbreak;",
  "converting primitive to enum",
  1
 ],
 [
  "assert.true(interceptorcount > prelistnodefilescount);\tint prelistjobscount = interceptorcount;\tvar jobs = batchcli.joboperations.listjobs().tolist();\tassert.true(interceptorcount > prelistjobscount);\tint prelistpoolscount = interceptorcount;\tvar pools = batchcli.pooloperations.listpools().tolist();\tassert.true(interceptorcount > prelistpoolscount);\tprotocol.batchrequestmodificationintercepthandler yieldinjectioninterceptor = baserequest => {\tvar request = (jobgetbatchrequest)baserequest;\trequest.servicerequestfunc = (token) => { return request.restclient.job.getwithhttpmessagesasync(bug1959324jobid, request.options, cancellationtoken: token); };",
  "leaving yield injector",
  0
 ],
 [
  "private void endelementidentityconstraints() {\tfor (int ci = this.validationstack.length - 1; ci >= this.startidconstraint; ci --) {\tif (((validationstate)(this.validationstack[ci])).constr == null) {\tcontinue;\t}\tconstraintstruct[] constraints = ((validationstate)this.validationstack[ci]).constr;\tfor (int i = 0; i < constraints.length; ++i) {\tfor (int j = 0; j < constraints[i].axisfields.count; ++j) {\tlocatedactiveaxis laxis = (locatedactiveaxis)constraints[i].axisfields[j];\tif (laxis.ismatched) {",
  "name uri value",
  0
 ],
 [
  "zs.putnextentry (infoentry);\tusing (stream s = file.openread (f)) {\tint nr;\twhile ((nr = s.read (buffer, 0, buffer.length)) > 0) zs.write (buffer, 0, nr);\t}\tzs.closeentry ();\t}\tzs.finish ();\tzs.close ();\tbreak;",
  "unsupported file format",
  0
 ],
 [
  "public override void renderendtag (htmltextwriter w) {",
  "unknown attribute set error",
  1
 ],
 [
  "if (!double.ispositiveinfinity((double)retobj)) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg2\", szempty, d2);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (!double.isnegativeinfinity((double)retobj)) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg3\", szempty, d3);\tretobj = m_xsltarg.getparam(\"myarg3\", szempty);",
  "added value retrieved value",
  0
 ],
 [
  "static void showhelp (bool shorthelp, string exename) {\tif (shorthelp) {\tconsole.writeline ();\tconsole.writeline ();\treturn;\t}\tconsole.writeline ();\tconsole.writeline ();\tconsole.writeline ();",
  "connection close",
  1
 ],
 [
  "public override void notifyfileremoved (string filename) {\ttry {\tsetfavoritefile (filename, false);\trecentfiles.removeitem (recentfilestorage.touri (filename));\t} catch (exception e) {",
  "can t remove from recent files list",
  0
 ],
 [
  "var doc = new monodevelop.xml.editor.xmlparseddocument (parseoptions.filename);\tdoc.flags = parseddocumentflags.nonserializable;\ttry {\tvar xmlparser = new xmlparser ( new xmlrootstate (new htmltagstate (), new htmlclosingtagstate (true)), true);\txmlparser.parse (parseoptions.content.createreader ());\tdoc.xdocument = xmlparser.nodes.getroot ();\tdoc.addrange (xmlparser.errors);\tif (doc.xdocument != null) doc.addrange (validate (doc.xdocument));\t}\tcatch (exception ex) {",
  "unhandled error parsing html document",
  0
 ],
 [
  "public static int main (string [] args) {\tappdomain domain = appdomain.createdomain (\"newdomain\");\tint i;\tfor (i = 0; i < 200; ++i) {\tdomain.createinstanceandunwrap (typeof (test).assembly.fullname, typeof (test).fullname);\t}\tappdomain.unload (domain);",
  "activeworkbenchwindowchanged to",
  1
 ],
 [
  "foreach (var file in directory.getfiles (policiesfolder, \"*.mdpolicy.mdpolicy.xml.previous\")) file.delete (file);\tif (file.exists (policiesfolder.combine (\"default.mdpolicy.xml\")) && file.exists (policiesfolder.combine (\"userdefault.mdpolicy.xml\"))) file.delete (policiesfolder.combine (\"default.mdpolicy.xml\"));\tforeach (var file in directory.getfiles (policiesfolder, \"*.mdpolicy.xml\")) {\ttry {\tloadpolicy (file);\t} catch (exception ex) {\t}\t}\t}\t} catch (exception ex) {",
  "reader movetocontent",
  1
 ],
 [
  "public void pinchangedevent_dsrchanged() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (serialport com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\tpinchangedeventhandler eventhandler = new pinchangedeventhandler(com1);\teventhandler.eventfilter = eventtype => eventtype != serialpinchange.cdchanged;",
  "verifying dsrchanged event",
  0
 ],
 [
  "outputline (@\"                  oracle,postgresql,sqlite,sybase,tds)\");\toutputline (@\"       \\open to open the connection\");\toutputline (@\"       \\close to close the connection\");\toutputline (@\"       \\e to execute sql query (select)\");\toutputline (@\"       \\h to show help (all commands).\");\toutputline (@\"       \\defaults to show default variables.\");\toutputline (\"\");\t}\tpublic void showhelp () {\tconsole.writeline (\"\");",
  "cs or connectionstring to set the connectionstring",
  0
 ],
 [
  "public static void main ( ) {\terrorcs3005 error = new errorcs3005 ();",
  "mono version",
  1
 ],
 [
  "public void attach(uint processid) {\tif (_debug == null) init();\t_activeprocess = _debug.debugactiveprocess(processid, 0);\ticordebugthreadenum threads = _activeprocess.enumeratethreads();\tuint count = 0;\tcount = threads.getcount();\ttype type = threads.gettype();\tmethodinfo mi = type.getmethod(\"getcount\");\tcount = (uint)mi.invoke(threads, new object[] { });",
  "thread count",
  0
 ],
 [
  "public override imessage invoke (imessage request) {\timethodcallmessage call = (imethodcallmessage)request;",
  "stats null",
  1
 ],
 [
  "for (int i = 0; i < n; i++) {\tvar promise = action(i);\tpromises.add(promise);\tif ((i % batchsize) == 0 && i > 0) {\ttask.waitall(promises.toarray(), azuretabledefaultpolicies.tablecreationtimeout);\tpromises.clear();\t}\t}\ttask.waitall(promises.toarray(), azuretabledefaultpolicies.tablecreationtimeout);\tsw.stop();",
  "waitall testing cancellationtokentests waitall if join does not work then a deadlock will occur",
  1
 ],
 [
  "using (xmlwriter w = utils.createwriter()) {\tusing (xmlreader xr = createreaderignorews(\"xmlreader.xml\")) {\twhile (xr.read()) {\tif (xr.localname == \"defattr\") {\txr.read();\txr.movetofirstattribute();\tbreak;\t}\t}\tif (xr.nodetype != xmlnodetype.attribute) {",
  "get set",
  1
 ],
 [
  "private void test_badtypes_manifest(eventsource source) {\ttry {\tusing (var listener = new eventlistenerlistener()) {\tvar events = new list<event>();",
  "adding delegate to onevent",
  0
 ],
 [
  "public void getextobject7() {\tm_xsltarg = new xsltargumentlist();\tstring obj = \"0.00\";\tm_xsltarg.addextensionobject(\"myarg1\", obj);\tretobj = m_xsltarg.getextensionobject(\"myarg1\");\tif (retobj.tostring() != \"0.00\") {",
  "retrieved",
  0
 ],
 [
  "throw;\t}\t}\tconsole = context.consolefactory.createconsole (monitor.cancellationtoken);\tstring url = string.format (\"http: if (isxsp) {\tconsole = new xspbrowserlauncherconsole (console, delegate (string port) {\tif (browserexctarget != null) browserexctarget.desktopapp.launch (string.format(\"{0}:{1}\", url, port));\telse browserlauncher.launchdefaultbrowser (string.format(\"{0}:{1}\", url, port));\t});\t}",
  "running web server",
  0
 ],
 [
  "w.writestartdocument();\tw.writestartelement(\"root\");\tw.writeendelement();\tw.writeentityref(\"ent\");\t}\tcatch (invalidoperationexception e) {\tcerror.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "public void testremovebracesfromdowhile() {\ttest<removebracescoderefactoringprovider>(@\"class testclass {\tvoid test() {\t$do {",
  "hello",
  0
 ],
 [
  "static void showhelp (optionset p) {\tconsole.writeline ();",
  "copying to",
  1
 ],
 [
  "if (op > 0 && op <= formats.length) break;\t}\t} while (true);\tformat = formats [op - 1];\t}\telse {\tforeach (var f in formats) {\tif (f.name == formatname) format = f;\t}\tif (format == null) {",
  "unknown file format",
  0
 ],
 [
  "}\tif (enablehistory && !designmode && (ipage != null)) {\twriter.addattribute(htmltextwriterattribute.type, \"hidden\");\twriter.addattribute(htmltextwriterattribute.name, this.uniqueid);\twriter.addattribute(htmltextwriterattribute.id, this.clientid);\twriter.renderbegintag(htmltextwritertag.input);\twriter.renderendtag();\tjavascriptserializer serializer = new javascriptserializer(new simpletyperesolver());\twriter.write(clientscriptmanager.clientscriptstart);\tif (isdebuggingenabled && (ajaxframeworkmode == ajaxframeworkmode.explicit)) {",
  "type checkdependency microsoftajaxhistory js scriptmanager enablehistory",
  0
 ],
 [
  "private void controllerthreadfunction(object instancetable) {\ttry {",
  "wde debugcontrollerthread controllerthreadfunction",
  0
 ],
 [
  "public override int init(object param) {",
  "principalcontext entering dodomaininit",
  1
 ],
 [
  "ipinterfaceproperties ipproperties = nic.getipproperties();\tif (!nic.supports(networkinterfacecomponent.ipv6)) {\tvar nie = assert.throws<networkinformationexception>(() => ipproperties.getipv6properties());\tassert.equal(socketerror.protocolnotsupported, (socketerror)nie.errorcode);\tcontinue;\t}\tipv6interfaceproperties ipv6properties = ipproperties.getipv6properties();\tif (ipv6properties == null) {\tcontinue;\t}",
  "index",
  0
 ],
 [
  "if (s != \"{x+y}\") return 10;\ts = $\"{ $\"{ res }\" }\";\tif (s != \"5\") return 11;\ts = $\" \\u004d \";\tif (s != \" m \") return 12;\tbyte b = 3;\ts = $\"b = {(int)b}\";\tif (s != \"b = 3\") return 13;\ts = $\"{{fo!o = {res}}}\";\tif (s != \"{fo!o = 5}\") return 14;",
  "ok",
  0
 ],
 [
  "protected override void generatetypeconstructor(codetypeconstructor e) {\tif (!(iscurrentclass || iscurrentstruct)) return;\tif (e.customattributes.count > 0) {\toutputattributes(e.customattributes, false);\t}\tindent++;\tgeneratevbstatements(e.statements);\tindent--;",
  "other options",
  1
 ],
 [
  "public virtual void addservice(type servicetype, servicecreatorcallback callback, bool promote) {",
  "adding service callback promoting",
  0
 ],
 [
  "public static void startreport (streamwriter sw) {\tsw.writeline (@\"<!doctype html public \"\"- sw.writeline (@\"<html xmlns=\"\"http: sw.writeline (@\"<title>mono: class libraries nunit test results</title>\");\tsw.writeline (@\"<link rel=\"\"stylesheet\"\" type=\"\"text/css\"\" href=\"\"media/style.css\"\" />\");\tsw.writeline (@\"<script type=\"\"text/ecmascript\"\" src=\"\"media/scripts.js\"\"></script></head>\");\tsw.writeline (@\"    <div class='header'>\");\tsw.writeline (@\"        <div class='headerimage'>\");\tsw.writeline (@\"            <img src='media/rupert.png' width='48' height='48' />\");\tsw.writeline (@\"        <div class='headertext'>class libraries nunit test results</div>\");\tsw.writeline (@\"    <div class='legend'>\");",
  "added value retrieved value",
  1
 ],
 [
  "int failcount = 0;\tbool ispass = false;\tforeach (var v in new nctestingreturnienumeratort(33)) {\tif (v == 33) {\tispass = true;\t}\tbreak;\t}\tif (!ispass) {\tfailcount++;",
  "test failed conversion result is incorrect",
  0
 ],
 [
  "} }, { \"z=\", \"create zoneinfodb from {dir}.\", v => {\tc = () => new zoneinfodb (v);\t} }, { \"offset=\", \"show timezone info offset for datetime {offset}.\", v => {\toffset = datetime.parse (v);\t} }, { \"r|dump-rules\", \"show timezone info offset for datetime {offset}.\", v => dump_rules = v != null }, { \"help\", \"show this message and exit\", v => {\tp.writeoptiondescriptions (console.out);\tenvironment.exit (0);\t} }, };\tp.parse (args);\tandroidtimezones.db = c ();",
  "analyticsmonitor could not upgrade database",
  1
 ],
 [
  "}\tint3 s3;\ts3.f1 = 1;\ts3.f2 = 2;\ts3.f3 = 3;\ts3 = mono_return_int3(s3, 906);\tif (s3.f1 != 1+906) {\treturn 1;\t}\tif (s3.f2 != 2+906) {",
  "got but expected",
  0
 ],
 [
  "public bool movetofirstpage (solutiontemplate template, projectcreateparameters parameters) {\treset ();\tif (!template.haswizard) {\treturn false;\t}\tcurrentwizard = getwizard (template.wizard);\tif (currentwizard == null) {",
  "unable to find project template wizard",
  0
 ],
 [
  "static void show () {",
  "setarg",
  1
 ],
 [
  "try {\tcmd2.commandtext = \"drop procedure sp_test1\";\tcmd2.executenonquery ();\t}\tcatch(oracleexception) {\t}\tcmd2.commandtext = \"create table mono_test_table1 (\" + \" col1 varchar2(8), \"+ \" col2 varchar2(32))\";\tcmd2.executenonquery ();\tcmd2.commandtext = \"create procedure sp_test1 \" + \" is \" + \" begin \" + \"\tinsert into mono_test_table1 (col1,col2) values ('aaa','bbbb');\" + \"\tcommit;\" + \" end;\";\tcmd2.executenonquery ();",
  "remove",
  1
 ],
 [
  "cloudtask directorycreationtask2 = new cloudtask(directorycreationtaskid2, string.format(\"cmd /c mkdir {0} && echo test > {0}/testfile.txt\", directorynametwo));\tboundjob.addtask(mytask);\tboundjob.addtask(directorycreationtask1);\tboundjob.addtask(directorycreationtask2);\tutilities utilities = batchcli.utilities;\ttaskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();\ttaskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(3));\tcloudtask boundtask = boundjob.gettask(taskid);\tstring computenodeid = boundtask.computenodeinformation.affinityid.split(':')[1];\tcomputenode computenode = batchcli.pooloperations.getcomputenode(this.poolfixture.poolid, computenodeid);",
  "task ran on compute node",
  0
 ],
 [
  "case \"array\": return new parray (new list<pobject> (f.elements ().select (convert)));\tcase \"object\": var val = new pdictionary ();\tforeach (var subelement in f.elements ()) {\tvar name = subelement.name.localname;\tif (string.isnullorempty (name)) continue;\tif (name == \"item\") name = subelement.attribute (\"item\").value;\tif (!val.containskey (name)) {\tvar converted = convert (subelement);\tif (converted != null) val.add (name, converted);\t} else {",
  "initialize gdi",
  1
 ],
 [
  "try {\tassembly = reflectiononlyloadfrom (name);\t} catch {\treturn false;\t}\tan = assembly.getname ();\tswitch (verifystrongname (an, name)) {\tcase verificationresult.strongnamed: case verificationresult.skipped: break;\tif (!in_bootstrap) return false;\tbreak;",
  "strong name cannot be verified for delay signed assembly continuing anyway",
  0
 ],
 [
  "static bool callsecondclassoperator() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturnclass();\tif ( (!(bool)(((dynamic)s[1]) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "color",
  1
 ],
 [
  "}\tstringwriter sw = new stringwriter ();\tif (!have_auth) {\tsw.writeline ();\tsw.flush ();\t} else if (cl > 0 && statusline.startswith (\"post \")) {\tsw.writeline ();\tsw.write (\"looks ok\");\tsw.flush ();\t} else {",
  "content length",
  0
 ],
 [
  "fileinfo fi = new fileinfo (di.fullname + \"/i.rng\");\tif (fi.exists) {\txtr = new xmltextreader (fi.fullname);\ttry {\trelaxngpattern.read (xtr).compile ();\t} catch (relaxngexception ex) {\t} catch (xmlexception ex) {\t} catch (argumentnullexception ex) {\t} catch (uriformatexception ex) {\t} catch (exception ex) {",
  "return ob",
  1
 ],
 [
  "public int getextnobject2(object args) {\tobject retobj;\tfor (int i = 1; i <= 100; i++) {\tretobj = xsltarg1.getextensionobject(((object[])args)[1].tostring());\tif (((myobject)retobj).myvalue() != (int)((object[])args)[0]) {",
  "error set and retrieved value appear to be different",
  0
 ],
 [
  "public void longmethod () {",
  "i m writting a test and i will fill a screen with some useless code",
  0
 ],
 [
  "public void m() {\t#line 40 console.writeline(4);\t#line hidden console.writeline();",
  "c",
  1
 ],
 [
  "static int main () {\tvar t = new thread (createfirstbridge);\tt.start ();\tt.join ();\tgc.collect ();\tgc.waitforpendingfinalizers ();",
  "expected exception",
  1
 ],
 [
  "object [] arguments;\targuments = new object [] { };\tif (compare (\"todisplaystring\", mask, ref stateindex, arguments, ref more_states)) {\tcontinue;\t}\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;",
  "added value retrieved value",
  1
 ],
 [
  "sequentialfilestagingartifact sfsa = specificartifact as sequentialfilestagingartifact;\tassert.notnull(sfsa);\tcloudpool boundpool = batchcli.pooloperations.getpool(boundjob.executioninformation.poolid);\ttaskstatemonitor taskstatemonitor = batchcli.utilities.createtaskstatemonitor();\ttaskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(10), controlparams: null, additionalbehaviors: new[]\t{\tnew microsoft.azure.batch.protocol.requestinterceptor((x) => {\ttry {\tlist<computenode> allcomputenodes = boundpool.listcomputenodes().tolist();\tallcomputenodes.foreach( (icn) => {",
  "computenode id state",
  0
 ],
 [
  "openscope($\"public {record.name} get{record.name}({record.name}handle handle)\");\tif (record.name == \"constantstringvalue\") {\t}\twriteline(\"record._reader = this;\");\twriteline(\"record._handle = handle;\");\twriteline(\"var offset = (uint)handle.offset;\");\tforeach (var member in record.members) {\tif ((member.flags & memberdefflags.notpersisted) != 0) continue;\twriteline($\"offset = _streamreader.read(offset, out record.{member.getmemberfieldname()});\");\t}",
  "return record",
  0
 ],
 [
  "typereference ctype = eh.catchtype;\tif (!(ctype == null || ctype.isnamed (\"system\", \"object\") || ctype.isnamed (\"system\", \"exception\"))) continue;\tint start_index = instructions.indexof (eh.trystart);\tint end_index = instructions.indexof (eh.tryend);\tfor (int j = start_index; j < end_index; j++) is_safe [j] = true;\t}\t}\tvalid_ex_handler = !is_safe.contains (false);\tfor (int i = 0; i < is_safe.count; i++) {\t}",
  "this method should complete immediately delay to complete indicates a deadlock failure",
  1
 ],
 [
  "this.threadinitializedevent.set();\tusing (new debuggerthreadmarker()) {\twhile (this.runthread) {\ttry {\tif (intptr.size == 8) {\tthread.sleep(timeout.infinite);\t}\telse while (this.runthread);\t}\tcatch (threadabortexception) {",
  "wde debugcontrollerthread expressionevaluationfunction threadabortexception",
  0
 ],
 [
  "public static void runcontinuewithbase( taskcontinuationoptions options, action initran, func<task, task> continuationmaker, func<bool> ranvalue, bool taskisfuture) {",
  "end sub",
  1
 ],
 [
  "console.title = progtitle;\tint result;\tif (!prog.parsearguments(args)) {\tprog.printusage();\tresult = -1;\t}\telse {\tresult = prog.run();\t}\tif (prog.pauseatend) {",
  "an error occurred while removing the service from the project",
  1
 ],
 [
  "static foo() {",
  "processed",
  1
 ],
 [
  "static void main (string[] args) {\tvar failcount = 0;\ttry {\tvar a = new correctcasefriendassembly.publicclass ();\ta.internalmethod ();\t} catch (memberaccessexception) {\tfailcount += 1;",
  "got but expected",
  1
 ],
 [
  "indent++;\tif (e.hasget) {\tif (!iscurrentinterface) {\tindent++;\tgeneratevbstatements(e.getstatements);\te.name = propname;\tindent--;\t}\t}\tif (e.hasset) {",
  "set",
  0
 ],
 [
  "try {\tyield return \"within outer try\";\ttry {\tyield return \"within inner try\";\tif (breakinmiddle) yield break;\tyield return \"end of inner try\";\t} finally {\t}\tyield return \"end of outer try\";\t} finally {",
  "dbdatareader",
  1
 ],
 [
  "private static bool testoropwithsametypeandreturntype() {\tclearflags();\tdynamic d1 = new myopclass();\tdynamic d2 = new myopclass();\tdynamic dr = d1 || d2;\tif (dr.gettype() != typeof(myopclass)) {\treturn false;\t}\tif (dr != d2) {",
  "failed to remove",
  1
 ],
 [
  "tw.writeline(\"<entity4 att1='xxx&lt;xxx&#65;xxx&#x43;xxxe1fooxxx'>xxx&gt;xxx&#66;xxx&#x44;xxxe1fooxxx</entity4>\");\ttw.writeline(\"<entity5>e1foo e3bzee </entity5>\");\ttw.writeline(\"<attribute1 />\");\ttw.writeline(\"<attribute2 a1='a1value' />\");\ttw.writeline(\"<attribute3 a1='a1value' a2='a2value' a3='a3value' />\");\ttw.writeline(\"<attribute4 a1='' />\");\ttw.writeline(string.format(\"<attribute5 crlf='x{0}x' cr='x{0}x' lf='x\\nx' ms='x     x' tab='x\\tx' />\", environment.newline));\ttw.writeline(\"<skip1 /><afterskip1 />\");\ttw.writeline(\"<skip2></skip2><afterskip2 />\");\ttw.writeline(\"<chars1>0123456789</chars1>\");",
  "deleted file",
  1
 ],
 [
  "static bool callsecondclassindexer() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturndynamicclass<int>();\tif ( (!(bool)(s[1][2])) || (!verify.firstcalled)) {\tfailcount++;",
  "cons",
  1
 ],
 [
  "public void transformstrstr4(inputtype inputtype, readertype readertype) {\tif (loadxsl(\"showparam.xsl\", inputtype, readertype) == 1) {\ttry {\tcalltransform(xslt, \"idontexist.xsl\", _stroutfile);\t}\tcatch (system.io.filenotfoundexception) {\treturn;\t}\t}",
  "in a thread",
  1
 ],
 [
  "public void removewebusernameandpassword (uri uri) {\tvar diddelete = removecredential (uri.host);\tif (diddelete) return;\tvar lasterror = (errorcode)marshal.getlastwin32error ();\tswitch (lasterror) {",
  "tried saving credentials but the logon session does not exist",
  0
 ],
 [
  "public static void creategenerictestfile(string strfilename) {\tfilepathutil.addstream(strfilename, new memorystream());\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"no\\\"?>\");\ttw.writeline(\"<!-- comment1 -->\");\ttw.writeline(\"<?pi1a?>\");\ttw.writeline(\"<?pi1b?>\");\ttw.writeline(\"<?pi1c?>\");",
  "attlist cdata implied cdata cdata required",
  0
 ],
 [
  "if (directory.getfiles (link_dir).length == 0) {\ttry {\tdirectory.delete (link_dir);\t} catch {\t}\t}\t}\tuninstalled++;\t}\tif (directory.getdirectories (asmdir).length == 0) {",
  "error",
  1
 ],
 [
  "private static void encryptdecrypt(keybundle key) {\tkeyoperationresult operationresult;\tvar algorithm = inputvalidator.getencryptionalgorithm();\tvar plaintext = inputvalidator.getplaintext();\tstring keyversion = inputvalidator.getkeyversion();\toperationresult = _encrypt(key, keyversion, algorithm, plaintext);\tvar decryptedtext = task.run(() => keyvaultclient.decryptasync(operationresult.kid, algorithm, operationresult.result)).configureawait(false).getawaiter().getresult();",
  "job tests",
  1
 ],
 [
  "output.write ('.');\toutput.write (property.name);\t}\toutput.writeline ();\tif (!iscurrentinterface) {\t++indent;\tif (property.hasget) {\t++indent;\tgeneratestatements (property.getstatements);\t--indent;",
  "end get",
  0
 ],
 [
  "static private void help () {",
  "listnodefiles",
  1
 ],
 [
  "static void main () {\ttinyhost h = createhost ();\tstreamwriter w = new streamwriter (\"page.aspx\");\tw.writeline (@\"<%@ page language=\"\"c#\"\" %>\");",
  "console writeline hello",
  0
 ],
 [
  "openscope($\"public enumerator getenumerator()\");\tclosescope(\"getenumerator\");\topenscope($\"public struct enumerator\");\topenscope($\"internal enumerator(nativereader reader, uint offset)\");\twriteline(\"_reader = reader;\");\twriteline(\"_offset = reader.decodeunsigned(offset, out _remaining);\");\twriteline($\"_current = default({elementtypename});\");\tclosescope();\topenscope($\"public {elementtypename} current\");\topenscope(\"get\");",
  "do",
  1
 ],
 [
  "using (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writebase64(null, 0, 0);\t}\tcatch (argumentnullexception) {\tcerror.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "var o = new stringwriter ();\tvar e = new stringwriter ();\tvar showversion = false;\tvar showhelp    = false;\tvar git = new commandset (\"git\", output: o, error: e) {\t\"usage: git [--version] ... <command> [<args>]\", \"\", \"common options:\", { \"version\", \"show version info\", v => showversion = v != null }, { \"help\", \"show this message and exit\", v => showhelp = v != null }, \"\", \"these are common git commands used in various situations:\", \"\", \"start a working area (see also: git help tutorial)\", new command (\"clone\", \"clone a repository into a new directory\"), new command (\"init\",  \"create an empty git repository or reinitialize an existing one\"), new command (\"thisisaverylongcommandnameinordertoinducewrapping\", \"create an empty git repository or reinitialize an existing one. let's make this really long to cause a line wrap, shall we?\"), };\tvar expectedhelp = new stringwriter ();\texpectedhelp.writeline (\"\");\texpectedhelp.writeline (\"\");\texpectedhelp.writeline (\"\");",
  "content length",
  1
 ],
 [
  "var formatter = codeformatterservice.getformatter (desktopservice.getmimetypeforuri (path));\tif (formatter != null && mdproject != null) {\tformattedtext = formatter.formattext (mdproject.policies, text.tostring ());\t} else {\tformattedtext = text.tostring ();\t}\tvar textsource = new stringtextsource (formattedtext, text.encoding ?? system.text.encoding.utf8);\ttry {\ttextsource.writetextto (path);\t} catch (exception e) {",
  "handlertype trystart tryend handlerstart handlerend filterstart catchtype",
  1
 ],
 [
  "public task<string> f1method() {",
  "calling",
  0
 ],
 [
  "private xplatuix11gtk () {",
  "ctor",
  0
 ],
 [
  "public void getparam16() {\tm_xsltarg = new xsltargumentlist();\tint i = 0;\tm_xsltarg.addparam(\"myarg1\", szempty, \"test16\");\tfor (i = 0; i < 200; i++) {\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);\tif (retobj.tostring() != \"test16\") {",
  "resourceassembly is null",
  1
 ],
 [
  "static bool callsecondstructoperator() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturnstruct<int>();\tif ( (!(bool)(((dynamic)s.instancemethod()) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public override testresult execute() {\ttestitems children = children;\tif (children != null && children.count > 0) {\tforeach (object child in children) {\ttestcase tc = child as testcase;\tif (tc != null) {\tif (testinput.istestcaseselected(tc.name)) {",
  "in a thread",
  1
 ],
 [
  "public override void update() {\tbase.update();\tthis.context.sessionid\t\t\t= this.sessionid;\tthis.context.serverrandom\t\t= this.random;\tthis.context.negotiating.cipher = this.ciphersuite;\tthis.context.compressionmethod\t= this.compressionmethod;\tthis.context.protocolnegotiated\t= true;",
  "selected cipher suite",
  0
 ],
 [
  "static void createfirefoxprofileifnecessary (string profilename) {\tfilepath profilepath = filepath.null;\ttry {\tprofilepath = getfirefoxprofilepath (profilename);\t} catch (exception ex) {",
  "got but expected",
  1
 ],
 [
  "try {\tint iterationcount = tcsupport.runshortstresstests ? 10 : 1000;\tfor (int i = 0; i < iterationcount; ++i) {\tcom.open();\tcom.handshake = handshake.requesttosend;\tcom.write(xmitbytes, 0, xmitbytes.length);\tcom.close();\t}\t}\tcatch (exception e) {",
  "uint",
  1
 ],
 [
  "public void initializeshareddata(datasource source) {",
  "creating shared objects",
  0
 ],
 [
  "public static void threadstart1 () {\ttry {\ttry {\ttry {\tlock (started) {\tmonitor.pulse (started);\t}\tint i = 0;\ttry {\twhile (true) {",
  "count",
  0
 ],
 [
  "public override void writeto(itextoutput output) {\tif (this.values != null) {\tforeach (int i in this.values) {",
  "case",
  0
 ],
 [
  "writelineuni (\"}\");\twriteline (\"\");\twritelineind (\"if (typedserializers == null) {\");\twriteline (\"typedserializers = new system.collections.hashtable ();\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twriteline (\"\");\twritelineind (\"{\");",
  "gateway addresses",
  1
 ],
 [
  "private void emitwrite(string typename) {\topenscope($\"public static void write(this nativewriter writer, {typename} record)\");\twriteline(\"if (record != null)\");",
  "system argumentnullexception not thrown for null object",
  1
 ],
 [
  "static string getmonoversionnumber () {\tvar t = type.gettype (\"mono.runtime\");\tif (t == null) return \"unknown\";\tvar mi = t.getmethod (\"getdisplayname\", bindingflags.nonpublic | bindingflags.static);\tif (mi == null) {",
  "no mono runtime getdisplayname method found",
  0
 ],
 [
  "if (args [i].startswith (\"-\")) {\tif (args [i] == \"-j\") {\tif (i + 1 >= args.length) {\treturn 1;\t}\tif (args [i + 1] == \"a\") concurrency = environment.processorcount;\telse concurrency = int32.parse (args [i + 1]);\ti += 2;\t} else if (args [i] == \"--timeout\") {\tif (i + 1 >= args.length) {",
  "missing argument to timeout command line option",
  0
 ],
 [
  "}\tfinally {\tmounthelper.unmount(mounteddirname);\tdeletedir(mounteddirname, true);\t}\tfile.appendalltext(debugfilename, string.format(\"completed scenario {0}\", environment.newline));\t}\t}\tcatch (exception ex) {\ts_pass = false;",
  "handling apperror",
  1
 ],
 [
  "w.writeendelement();\tw.writeenddocument();\tw.writestartdocument();\tw.writeenddocument();\t}\tcatch (invalidoperationexception e) {\tcerror.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "using (var e1 = expected.getenumerator()) using (var e2 = actual.getenumerator()) {\twhile (e1.movenext()) {\tif (!e2.movenext()) {\treturn false;\t}\tif (!e1.current.equals(e2.current)) {\treturn false;\t}\t}\tif (e2.movenext()) {",
  "partitioner returned more elements next element returned by partitioner",
  0
 ],
 [
  "xmlschemaelement localelement = (xmlschemaelement)all.items[i];\tif (!contentvalidator.addelement(localelement.qualifiedname, localelement, localelement.minoccurs == decimal.zero)) {\tsendvalidationevent(res.sch_dupelement, localelement.qualifiedname.tostring(), localelement);\t}\t}\treturn contentvalidator;\t}\telse {\tparticlecontentvalidator contentvalidator = new particlecontentvalidator(complextype.contenttype, compilationsettings.enableupacheck);\t#if debug string name = complextype.name != null ? complextype.name : string.empty;",
  "got but expected",
  1
 ],
 [
  "public override bool preparefordragoperation (nsdragginginfo sender) {",
  "drag delegate received preparefordragoperation",
  0
 ],
 [
  "case callconversionoperation.opcode.copy_x_bytes_to_localblock_y_offset_z_in_localblock_from_offset_w_in_transition_block: {\tvoid* psrc = locals.transitionblockptr + op.w;\tvoid* pdst = ((byte*)locals.getlocalblock(op.y).getrawmemorypointer()) + op.z;\tbuffer.memorycopy(psrc, pdst, op.x, op.x);\t#endif }\tbreak;\tcase callconversionoperation.opcode.copy_x_bytes_to_localblock_y_pointer_z_from_offset_w_in_transition_block: {\tvoid* psrc = locals.transitionblockptr + op.w;\tvoid* pdst = locals.getlocalblock(op.y).getrawmemorypointer()[op.z].topointer();\tbuffer.memorycopy(psrc, pdst, op.x, op.x);",
  "copy bytes from to",
  0
 ],
 [
  "private static bool verifyreadwrite(serialport com1, serialport com2) {\ttry {\tcom1.readtimeout = 1000;\tcom2.readtimeout = 1000;\tcom1.writetimeout = 1000;\tcom2.writetimeout = 1000;",
  "fill",
  1
 ],
 [
  "public dummy pop (label pc, source source, textwriter data) {",
  "verifying default readtimeout with read byte buffer int offset int count",
  1
 ],
 [
  "public override void computemastersecret(byte[] premastersecret) {\tthis.context.mastersecret = new byte[premastersecret.length];\tthis.context.mastersecret = this.prf( premastersecret, \"master secret\", this.context.randomcs, 48);",
  "mastersecret",
  0
 ],
 [
  "thread.resetabort();\t} finally {\t}\ttry {\tthread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();\t} finally {\t}\ttry {",
  "failed sbyte not selected for sbyte argument",
  1
 ],
 [
  "public static void startreport (streamwriter sw) {\tsw.writeline (@\"<!doctype html public \"\"- sw.writeline (@\"<html xmlns=\"\"http: sw.writeline (@\"<title>mono: class libraries nunit test results</title>\");\tsw.writeline (@\"<link rel=\"\"stylesheet\"\" type=\"\"text/css\"\" href=\"\"media/style.css\"\" />\");\tsw.writeline (@\"<script type=\"\"text/ecmascript\"\" src=\"\"media/scripts.js\"\"></script></head>\");",
  "body",
  0
 ],
 [
  "using (var reader = xmlreader.create (datapath)) {\twhile (reader.read ()) {\tif (reader.nodetype == xmlnodetype.element && reader.localname == \"file\") {\tinfo.version = reader.getattribute (\"version\");\tinfo.filename = reader.getattribute (\"name\");\t}\t}\t}\tcachedirectorycache [candidate] = info;\t} catch (exception e) {",
  "error while reading derived data file",
  0
 ],
 [
  "private static bool callsecondinterfaceinstanceproperty() {\tint failcount = 0;\tdynamic d = new firstclassreturninterface();\tverify.firstcalled = false;\tif ((!(((secondinterface)d.instancemethod()).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "scanaclforchangepasswordright(adssecurity, out denyselffound, out denyworldfound, out allowselffound, out allowworldfound);\tactivedirectoryaccessrule denyselface = new extendedrightaccessrule( new maclprinc.securityidentifier(selfsddl), accesscontroltype.deny, s_changepasswordguid);\tactivedirectoryaccessrule denyworldace = new extendedrightaccessrule( new maclprinc.securityidentifier(worldsddl), accesscontroltype.deny, s_changepasswordguid);\tactivedirectoryaccessrule allowselface = new extendedrightaccessrule( new maclprinc.securityidentifier(selfsddl), accesscontroltype.allow, s_changepasswordguid);\tactivedirectoryaccessrule allowworldace = new extendedrightaccessrule( new maclprinc.securityidentifier(worldsddl), accesscontroltype.allow, s_changepasswordguid);\tif (usercannotchangepassword) {\tif (!denyselffound) {\tadssecurity.addaccessrule(denyselface);\t}\tif (!denyworldfound) {",
  "adstorectx cannotchangepwdtoldapconverter add deny world",
  0
 ],
 [
  "public void methodpreprocesscontrolmessage () {\tbool testing_callstack = false;\tmycontrol c = new mycontrol ();\tmessage m = new message ();\tm.hwnd = c.handle;\tm.msg = wm_keydown;\tm.wparam = (intptr)keys.down;\tm.lparam = intptr.zero;\tassert.areequal (preprocesscontrolstate.messagenotneeded, c.preprocesscontrolmessage (ref m), \"a1\");",
  "the timer test failed timer fired earlier than expected",
  1
 ],
 [
  "static int verify (string assemblyname, bool forceverification, bool quiet) {\tassemblyname an = null;\ttry {\tan = assemblyname.getassemblyname (assemblyname);\t}\tcatch {\t}\tif (an == null) {",
  "unable to load assembly",
  0
 ],
 [
  "w.writeattributes(xr, false);\t}\tcatch (xmlexception) {\ttestlog.compare(w.writestate, writestate.element, \"writestate should be element\");\treturn;\t}\tfinally {\txr.dispose();\t}\t}",
  "ifndef disable jit offsets",
  1
 ],
 [
  "private void read(string filename) {\txmlserializer ser=new xmlserializer(typeof(xmlnode));\tfilestream fs=new filestream(filename, filemode.open);\txmlnode node;\tnode=(xmlnode)ser.deserialize(fs);\tfs.close();",
  "node name",
  0
 ],
 [
  "public static void main () {",
  "messageboxfont",
  0
 ],
 [
  "if (!int.tryparse (args [0], out tcpport)) return 2;\tif (!int.tryparse (args [1], out processid)) return 3;\tvar thread = new thread (new parameterizedthreadstart (loop));\tthread.start (tcpport);\tvar sw = stopwatch.startnew ();\twhile (!disonnected) {\tsentevent.waitone ();\tsw.restart ();\tif (!responseevent.waitone (100)) {\tstartcollectingstacks ();",
  "no response seq in",
  0
 ],
 [
  "public static int mainmethod() {\tint failcount = 0;\tdynamic d = new first();\tif ((!(bool)(((dynamic)(((second)d.m1()).m2().m3())).m4())) || (testcount.callcount != 4)) {\tfailcount++;",
  "datetimeformat",
  1
 ],
 [
  "public void ipinfotest_accessallproperties_noerrors() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfaceproperties ipproperties = nic.getipproperties();\tassert.notnull(ipproperties);\tassert.notnull(ipproperties.anycastaddresses);\tforeach (ipaddressinformation anyaddr in ipproperties.anycastaddresses) {\t_log.writeline(\"-- \" + anyaddr.address.tostring());",
  "transient",
  0
 ],
 [
  "public void addparam11() {\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(\"myarg1\", szempty, \"test2\");\ttry {\tm_xsltarg.addparam(\"myarg1\", szempty, \"test1\");\t}\tcatch (system.argumentexception) {\treturn;\t}",
  "did not throw system argumentexception for adding a param that already exists",
  0
 ],
 [
  "public override int invoke (ienumerable<string> arguments) {\tvar extra   = new list<string> (arguments ?? new string [0]);\tvar _       = commandset.options.messagelocalizer;\tif (extra.count == 0) {\tcommandset.options.writeoptiondescriptions (commandset.out);\treturn 0;\t}\tvar command = commandset.contains (extra [0]) ? commandset [extra [0]]\t: null;\tif (command == this || extra [0] == \"--help\") {",
  "use commandset suite help command for help on a specific command",
  0
 ],
 [
  "} else if (l.startswith (\"content-length:\")) {\tcl = int32.parse (l.substring (\"content-length: \".length));\t}\t}\t}\tstringwriter sw = new stringwriter ();\tif (!have_auth) {\tsw.writeline ();\tsw.flush ();\t} else if (cl > 0 && statusline.startswith (\"post \")) {",
  "content length",
  0
 ],
 [
  "if (length > 0) {\tstate.memory.write (state.buffer, 0, length);\tstate.stream.beginread (state.buffer, 0, state.buffer.length, new asynccallback (streamcallback), state);\t} else {\tstate.stream.close ();\tif (alone) {\tstate.memory.position = 0;\tstreamreader sr = new streamreader (state.memory, encoding.utf8);\tconsole.writeline (sr.readtoend ());\t}",
  "no default config file for target any",
  1
 ],
 [
  "s9.f2 = 2;\ts9.f3 = 3;\ts9.f4 = 4;\ts9.f5 = 5;\ts9.f6 = 6;\ts9.f7 = 7;\ts9.f8 = 8;\ts9.f9 = 9;\ts9 = mono_return_sbyte9(s9, 9);\tif (s9.f1 != 1+9) {",
  "helpviewer getting description of",
  1
 ],
 [
  "case \"sybaseclient\": con = new sybaseconnection();\tbreak;\treturn;\treturn;\t#endif }\tcon.connectionstring = constr;\ttry {\tcon.open();\t}\tcatch(sqlexception se) {",
  "initialized",
  1
 ],
 [
  "public void charentity_5(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writecharentity('\\ud812');\t}\tcatch (argumentexception e) {",
  "exception",
  0
 ],
 [
  "public void addparam12(object param, xslinputtype xslinputtype, readertype readertype, outputtype outputtype, navtype navtype) {\tstring baseline = path.combine(\"baseline\", (string)param);\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(\"myarg1\", szempty, \"test1\");\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);\tif (retobj.tostring() != \"test1\") assert.true(false);\tm_xsltarg.addparam(\"myarg1\", \"http: retobj = m_xsltarg.getparam(\"myarg1\", \"http: _output.writeline(\"added value:{0}\\nretrieved value: {1}\", \"test2\", retobj);\tif (retobj.tostring() != \"test2\") assert.true(false);\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);",
  "retrieve original value actual retrieved value",
  0
 ],
 [
  "public void os11(object param0, object param1) {\tinit(param0.tostring(), param1.tostring());\t_xsl.load(_xslfile);\tstream stm1 = new filestream(\"out1.xml\", filemode.create, fileaccess.readwrite);\t_xsl.transform(_xmlfile, null, stm1);\tstream stm2 = new filestream(\"out2.xml\", filemode.create, fileaccess.readwrite);\txmlwritersettings os = _xsl.outputsettings;\txmlwriter xw = xmlwriter.create(stm2, os);",
  "transforming to xmlwriter over with xslt outputsettings xml",
  0
 ],
 [
  "try {\textra = p.parse(args);\t}\tcatch(optionexception e) {\treturn 1;\t}\tif (!nologo) {\t}\tif (help) {\tconsole.writeline();",
  "error orleans codegen the input assembly does not reference orleans and therefore code can not be generated",
  1
 ],
 [
  "public void bytestowritesuccessive() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tvar asyncwriterndbytearray = new asyncwriterndbytearray(com, s_byte_size_bytes_to_write);\tvar t1 = new task(asyncwriterndbytearray.writerndbytearray);\tvar t2 = new task(asyncwriterndbytearray.writerndbytearray);",
  "verifying bytestowrite with successive calls to write",
  0
 ],
 [
  "if (s14.f1 != 1+9) {\treturn 1;\t}\tif (s14.f2 != 2+9) {\treturn 2;\t}\tif (s14.f3 != 3+9) {\treturn 3;\t}\tif (s14.f4 != 4+9) {",
  "xmoveresizewindow",
  1
 ],
 [
  "if (s12.f1 != 1+9) {\treturn 1;\t}\tif (s12.f2 != 2+9) {\treturn 2;\t}\tif (s12.f3 != 3+9) {\treturn 3;\t}\tif (s12.f4 != 4+9) {",
  "got but expected",
  0
 ],
 [
  "}\tfileservice.systemrename (temppath, path);\tgtk.application.invoke ((o, args) => {\tfileservice.notifyfilechanged (path);\t});\twrittencount++;\t} catch (ioexception ex) {\tif (monitor != null) monitor.reporterror (gettextcatalog.getstring (\"failed to write file '{0}'.\", path), ex);\t} catch (exception ex) {\tif (monitor != null) monitor.reporterror (gettextcatalog.getstring (\"failed to generate code for file '{0}'.\", path), ex);",
  "codebehindwriter failed",
  0
 ],
 [
  "if (!objecttocompareto.resourceid.equals(string.empty) && !objecttocompareto.resourceid.equals(xmluserex) && objecttocompareto.resourceid.equals(this.resourceid)) {\tif (objecttocompareto.exceptionid.equals(this.exceptionid)) return true;\telse {\treturn true;\t}\t}\telse if (!this.messagefragment.equals(string.empty) && _examinemessages) {\tif (objecttocompareto.resourceid.equals(this.resourceid) && objecttocompareto.messagefragment.contains(this.messagefragment)) {\tif (objecttocompareto.exceptionid.equals(this.exceptionid)) return true;\telse {",
  "smissingactivation runner",
  1
 ],
 [
  "static bool callsecondstructindexer() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturndynamicstruct();\tif ( (!(bool)(s.instancemethod()[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "static bool callsecondinterfaceindexer() {\tint failcount = 0; verify.firstcalled = false;\tif ( (!(bool)(((dynamic)firstclassreturninterface<int>.staticproperty)[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "if (this.islocalvariable && localvariabledeclaration != null) {\tif (variabledeclaration.name == this.resourcemanagermember.name) {\tif (localvariabledeclaration.startlocation.x == this.resourcemanagermember.region.begincolumn && localvariabledeclaration.startlocation.y == this.resourcemanagermember.region.beginline) {\t#endif data = true;\t}\t}\t}\tfielddeclaration fielddeclaration = data as fielddeclaration;\tif (!this.islocalvariable && fielddeclaration != null) {\tif (variabledeclaration.name == this.resourcemanagermember.name && fielddeclaration.startlocation.x == this.resourcemanagermember.region.begincolumn && fielddeclaration.startlocation.y == this.resourcemanagermember.region.beginline) {",
  "resourcetoolkit bclnrefactoryresourceresolver found field declaration at",
  0
 ],
 [
  "m_xsltarg = new xsltargumentlist();\tm_xsltarg.addextensionobject(szdefaultns, obj);\tif ((loadxsl(\"myobject_notfound.xsl\", inputtype, readertype) == 1)) {\ttry {\ttransform_arglist(\"fruits.xml\", true, transformtype, doctype);\t}\tcatch (system.xml.xsl.xsltexception) {\treturn;\t}\t}",
  "exception not thrown for method not found",
  0
 ],
 [
  "memberresolveresult mrr = this.resolve(assignmentexpression.left) as memberresolveresult;\tif (mrr != null && mrr.resolvedmember is ifield && !((ifield)mrr.resolvedmember).islocalvariable) {\tpropertydeclaration pd;\t#endif if (data as bool? ?? false) {\t#endif this.associatedmember = mrr.resolvedmember;\t} else if ((pd = (data as propertydeclaration)) != null) {\tif (this.membertofind.compareto(mrr.resolvedmember) == 0) {\tmemberresolveresult prr = nrefactoryastcacheservice.resolvelowlevel(this.filename, this.filecontent, pd.startlocation.y, pd.startlocation.x+1, null, pd.name, expressioncontext.default) as memberresolveresult;\tif (prr != null) {\t#endif if (prr.resolvedmember is iproperty) {",
  "numeric data",
  1
 ],
 [
  "var packages = this.service.dependencies.oftype<packagedependency> ().cast<ipackagedependency>().tolist();\tawait this.service.project.addpackagedependencies (packages).configureawait (false);\ttry {\tforeach (var dependency in service.dependencies) {\tif (packages.contains (dependency)) {\tcontinue;\t}\tawait dependency.addtoproject (token).configureawait (false);\t}\t} catch (exception ex) {",
  "could not add dependency",
  0
 ],
 [
  "public static void adddependentitemstoproject(func<ienumerable<fileprojectitem>> itemadder) {\tdirectorynode dir = projectbrowserpad.instance.projectbrowsercontrol.selecteddirectorynode;\tif (dir == null) return;\tfilenode filenode = projectbrowserpad.instance.projectbrowsercontrol.selectednode as filenode;\tif (filenode == null) {\treturn;\t}",
  "projectbrowser addnewdependentitemstoproject on",
  0
 ],
 [
  "public int loadxsl(string _strxslfile, inputtype inputtype, readertype readertype) {\t_strxslfile = fullfilepath(_strxslfile);\t#pragma warning disable 0618 xslt = new xsltransform();\t#pragma warning restore 0618 switch (inputtype) {\txslt.load(_strxslfile);\tbreak;\tcase inputtype.reader: switch (readertype) {\tcase readertype.xmltextreader: xmltextreader trtemp = new xmltextreader(_strxslfile);\ttry {",
  "loading style sheet as xmltextreader",
  0
 ],
 [
  "static void outparmtest1(oracleconnection con) {",
  "filename does not exist",
  1
 ],
 [
  "public void bug1501413testgetnodefilebytask() {\taction test = () => {\tusing (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {\tjoboperations joboperations = batchcli.joboperations;\tstring jobid = microsoft.azure.batch.constants.defaultconvenienceprefix + testutilities.getmyname() + \"-bug1501413testgetnodefilebytask\";\ttry {\tcloudjob job = joboperations.createjob(jobid, new poolinformation());\tjob.poolinformation = new poolinformation() {\tpoolid = this.poolfixture.poolid };\tjob.commit();",
  "statechange originalstate",
  1
 ],
 [
  "public void rtsenable_get_handshake_none() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "using internal nativeformat",
  1
 ],
 [
  "public static void usage (string message) {\tif (message != null) {\tconsole.writeline (\"{0}{1}{0}\", environment.newline, message);\t}",
  "test cwt keep child alive",
  1
 ],
 [
  "private void generatecompileunitstart(codecompileunit e) {\tif (e.startdirectives.count > 0) {\tgeneratedirectives(e.startdirectives);\t}\toutput.write(\" output.write(sr.autogen_comment_line3);\toutput.writeline(environment.version.tostring());",
  "file has last modified time",
  1
 ],
 [
  "if (!task.waitall (new[] { t }, 1000)) {\treturn false;\t}\tvar tb = t as task<bool>;\tif (tb != null) {\tif (!tb.result) {\tconsole.writeline (\"failed (result={0})\", tb.result);\treturn false;\t}\t}",
  "ok",
  0
 ],
 [
  "public void ipinfotest_accessallipv4properties_noerrors() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfaceproperties ipproperties = nic.getipproperties();\tipv4interfaceproperties ipv4properties = ipproperties.getipv4properties();",
  "thread running",
  1
 ],
 [
  "public void delegate_call () {\ttry {\tdelegatecalled = true;\tf.dispose ();",
  "exception",
  1
 ],
 [
  "public static void dumpstats(textwriter output) {\tif (totalevents == 0) return;\tconst double call_time = 0.0000051442355;\tconst double throw_time = 0.000025365656;\tconst double field_time = 0.0000018080093;\toutput.writeline();\toutput.writeline();\tforeach (keyvaluepair<categories, dictionary<string, int>> kvpcategories in _events) {\tif (kvpcategories.value.count > 0) {",
  "category",
  0
 ],
 [
  "static void test1() {\tigraph<int, int, int> g = new hashgraph<int, int, int>(new countweight<int>(), grid(3));",
  "dockingmanager ctr",
  1
 ],
 [
  "}\t}\t}\t}\tforeach (string possiblesourcefile in possiblesourcefiles) {\tstring possiblesourcefilename = path.getfilename(possiblesourcefile);\tforeach (projectitem pi in p.items) {\tfileprojectitem fpi = pi as fileprojectitem;\tif (fpi != null) {\tif (fpi.dependentupon != null && (fpi.itemtype == itemtype.embeddedresource || fpi.itemtype == itemtype.resource || fpi.itemtype == itemtype.none) && fileutility.isequalfilename(fpi.dependentupon, possiblesourcefilename)) {",
  "test failed at call result",
  1
 ],
 [
  "if (s15.f8 != 8+9) {\treturn 8;\t}\tif (s15.f9 != 9+9) {\treturn 9;\t}\tif (s15.f10 != 10+9) {\treturn 10;\t}\tif (s15.f11 != 11+9) {",
  "name uri",
  1
 ],
 [
  "public void conditionalmultiple () {",
  "too many command line arguments supplied",
  1
 ],
 [
  "public override void writeentry (string [] replacementstrings, eventlogentrytype type, uint instanceid, short category, byte [] rawdata) {\tlock (lockobject) {\tstring logdir = findlogstore (coreeventlog.log);\tint index = getlatestindex () + 1;\tstring logpath = path.combine (logdir, index.tostring (cultureinfo.invariantculture) + \".log\");\ttry {\tusing (textwriter w = file.createtext (logpath)) {",
  "default site removal from virtual network gateway is successful",
  1
 ],
 [
  "private static storagebundle regeneratestorageaccountkey(string storageaccountname) {\tvar vaultaddress = inputvalidator.getvaultaddress();\tvar keyname = \"key1\";\tvar storageaccount = task.run( () => userkeyvaultclient.regeneratestorageaccountkeyasync(vaultaddress, storageaccountname, keyname)) .configureawait(false).getawaiter().getresult();",
  "could not get codeanalysisproject for the given project cannot modify code",
  1
 ],
 [
  "record.setvalues(5, \"x-value\", datetime.parse(\"03/01/2000\"), 3);\trows.add(record);\trecord = new sqldatarecord(columnmetadata);\trecord.setvalues(4, \"x-value\", datetime.parse(\"01/01/2000\"), 3);\trows.add(record);\tparam.value = rows;\tusing (sqldatareader rdr = cmd.executereader()) {\twritereader(rdr);\t}\trows.clear();",
  "default column middle subset",
  0
 ],
 [
  "public void emitsource() {\twriteline();",
  "popping",
  1
 ],
 [
  "public static void createbigelementtestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\tstring str = new string('z', (1 << 20) - 1);\ttw.write(\"<\");\ttw.write(str);\ttw.flush();\ttw.write(\"<\");\ttw.write(str);",
  "mac menu cannot display accelerators with mode keys",
  1
 ],
 [
  "} else if (file == this.primaryfile || this.sourcecodestorage.containsfile(file)) {\tif (this.loader != null && this.loader.loading) {\tthrow new invalidoperationexception(\"designer loading a source code file while designerloader is loading and the view is not in a master load operation. this must not happen.\");\t}\tif (this.designsurface != null) {\tthis.unloaddesigner();\t}\tthis.inmasterloadoperation = true;\ttry {\tthis.sourcecodestorage.loadfile(file, stream);",
  "forms designer determining designer source files for",
  0
 ],
 [
  "public static void usage (string error) {\tif (error != null) {\t}",
  "default is",
  0
 ],
 [
  "static internal icon geticon (string name) {\tstream stream = assembly.getmanifestresourcestream (name);\tif (stream == null) {",
  "eventlog completionstatuschanged aborting because we re already notifying",
  1
 ],
 [
  "private void cancel() {\tsafehandle handle = this._handle;\tnativeoverlapped* overlapped = this._overlapped;\tif (handle != null && !handle.isinvalid && overlapped != null) {\tif (!unsafenativemethods.cancelioex(handle, overlapped)) {\tint errorcode = marshal.getlastwin32error();",
  "forms designer removing componentadded handler for nested container setup",
  1
 ],
 [
  "static void writehelp () {\tconsole.writeline ();\tconsole.writeline ();",
  "se serviceendpoint url url of the service to be placed in the",
  0
 ],
 [
  "public void loadgeneric5(object param, xslinputtype xslinputtype, readertype readertype, outputtype outputtype, navtype navtype) {\tstring baseline = path.combine(\"baseline\", (string)param);\tfor (int i = 0; i < 100; i++) {\tif (loadxsl(\"showparam.xsl\", xslinputtype, readertype) != 1) {",
  "nativename",
  1
 ],
 [
  "static void dotest (smtpserver s, smtpclient c, mailmessage m) {\tthread t = new thread (s.run);\tt.start ();\tc.send (m);\tt.join ();",
  "invoking",
  1
 ],
 [
  "public void writedot(string filename) {\ttextwriter wr = new streamwriter(new filestream(filename, filemode.create, fileaccess.write));",
  "wr writeline digraph dfa",
  0
 ],
 [
  "static void showhelp (optionset p) {",
  "usage options input files",
  0
 ],
 [
  "static bool runtest (methodinfo test) {\tconsole.write (\"running test {0, -25}\", test.name);\ttry {\ttest.invoke (new tester (), null);\treturn true;\t} catch (exception e) {",
  "failed",
  0
 ],
 [
  "public void addparam15() {\tm_xsltarg = new xsltargumentlist();\ttry {\tm_xsltarg.addparam(\"myarg1\", szempty, null);\t}\tcatch (system.argumentnullexception) {\treturn;\t}",
  "assembly",
  1
 ],
 [
  "public void readtimeout_zero_resizebuffer() {\tusing (serialport com1 = tcsupport.initfirstserialport()) using (serialport com2 = tcsupport.initsecondserialport(com1)) {\tbyte[] bytexmitbuffer = new byte[1024];\tchar utf32char = 'a';\tbyte[] utf32charbytes = encoding.utf32.getbytes(new[] { utf32char });\tchar[] charxmitbuffer = tcsupport.getrandomchars(16, false);\tchar[] expectedchars = new char[charxmitbuffer.length + 1];",
  "error loading properties from file",
  1
 ],
 [
  "d.begininvoke (dispatcherpriority.send, (action) delegate {\tif (next != 1) throw new exception (\"expected state 1, got \" + next.tostring ());\tnext = 2;\td.begininvoke (dispatcherpriority.send, (action) delegate {\tif (next != 2) throw new exception (\"expected state 2, got \" + next.tostring ());\tnext = 3;\t});\t});\td.begininvoke (dispatcherpriority.systemidle, (action) delegate {\tif (next != 6) throw new exception (\"expected state 6, got \" + next.tostring ());",
  "idle",
  0
 ],
 [
  "static void do_one () {\tbuild_array ();\tget_stats ();\tgc.collect ();\tget_stats ();\tfree_some (10);\tget_stats ();\tfree_some (4);\tget_stats ();\tgc.collect ();",
  "after collect",
  0
 ],
 [
  "public static void createlinenumbertestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<?xml version=\\\"1.0\\\" ?>\");\ttw.writeline(\" <element a0='a0&e1;v' a1='a1value' a2='a2&e1;v'><embedded /></element>\");",
  "charentity ab cd charentity",
  0
 ],
 [
  "private static bool callsecondinterfaceinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tif ((!(bool)(firstclassreturndynamicinterface.staticproperty.instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "attlist isdefault cdata fixed",
  1
 ],
 [
  "}\t}\tif (filename != null) {\treturn new resourcesetreference(resourcename, filename);\t}\tif ((filename = findresourcefilename(possiblesourcefile)) != null) {\treturn new resourcesetreference(resourcename, filename);\t}\t}\t} else {",
  "unknown option or file not found",
  1
 ],
 [
  "public void transformstrstr5(inputtype inputtype, readertype readertype) {\tstring szfullfilename = fullfilepath(\"fruits.xml\");\tif (loadxsl(\"showparam.xsl\", inputtype, readertype) == 1) {\ttry {\txslt.transform(szfullfilename, szinvalid);\t}\tcatch (system.argumentexception) {\treturn;\t}\t}",
  "assembly is not strong named",
  1
 ],
 [
  "additemsaddedcounter(coll);\tadditemsremovedcounter(coll);\tcoll.addall(bag1);\tcoll.removeall(new int[] { 2, 5, 6, 3, 7, 2 });\tcoll.clear();\ticollection<int> bag2 = new hashbag<int>();\tbag2.itemsadded += delegate(object c, itemcounteventargs<int> args) {\t};\tbag2.addall(bag1);\tbag2.itemsremoved += delegate(object c, itemcounteventargs<int> args) {",
  "transform file does not exist",
  1
 ],
 [
  "static private void help () {\tconsole.writeline ();",
  "label",
  1
 ],
 [
  "break;\t} else {\tstring typename = (string)o;\ttoolboxitem = null;\ttry {\tresolver.resolve (typereferencefromstring (module, typename));\t} catch (exception ex) {\tsystem.diagnostics.debug.writeline (ex);\t}\tif (toolboxitem == null) {",
  "ceciltoolboxitemscanner error resolving type",
  0
 ],
 [
  "private void thread_func() {\tthread.sleep(10000);",
  "thread waiting for mon",
  0
 ],
 [
  "public abstract bool receive(out int bytestransferred, out socketerror socketerror, action<int, socketerror> onsendcallback);\tprivate async task doreceive() {\tint total_bytes_received = 0;\twhile (total_bytes_received < _current_bytes) {\tint receivedbytes = await receivehelper();\tif (receivedbytes == 0) {",
  "got but expected",
  1
 ],
 [
  "public int loadxsl(string _strxslfile, inputtype inputtype, readertype readertype) {\t_strxslfile = fullfilepath(_strxslfile);\t#pragma warning disable 0618 xslt = new xsltransform();\t#pragma warning restore 0618 switch (inputtype) {\txslt.load(_strxslfile);\tbreak;\tcase inputtype.reader: switch (readertype) {\tcase readertype.xmltextreader: xmltextreader trtemp = new xmltextreader(_strxslfile);\ttry {",
  "second",
  1
 ],
 [
  "if (actualexceptiontype == expectedexceptions[i]) {\texceptionfound = true;\tbreak;\t}\t}\tif (exceptionfound) {\t}\telse {\tfail(\"error!!! expected open() throw \");\tfor (int i = 0; i < expectedexceptions.length; ++i) console.write(expectedexceptions[i] + \" \");",
  "and the following was thrown",
  0
 ],
 [
  "static void monotest(oracleconnection con) {",
  "position",
  1
 ],
 [
  "public void writeattributes_12(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\tusing (xmlreader xr = createreader(\"xmlreader.xml\")) {\twhile (xr.read()) {\tif (xr.localname == \"onehundredattributes\") {\txr.movetofirstattribute();\tbreak;\t}\t}\tif (xr.nodetype != xmlnodetype.attribute) {",
  "reader positioned on",
  0
 ],
 [
  "static bool callsecondclassoperator() {\tint failcount = 0; verify.firstcalled = false;\tif ( (!(bool)(firstclassreturndynamicclass.staticproperty + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public void ipinfotest_accessallipv6properties_noerrors() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {",
  "foo bar",
  1
 ],
 [
  "public mainwindow () {\ttitle = \"xwt demo application\";\twidth = 500;\theight = 400;\ttry {\tstatusicon = application.createstatusicon ();\tstatusicon.menu = new menu ();\tstatusicon.menu.items.add (new menuitem (\"test\"));\tstatusicon.image = image.fromresource (gettype (), \"package.png\");\t} catch {",
  "resourcetoolkit bclnrefactoryresourceresolver found assignment to field",
  1
 ],
 [
  "if (caretpositon > 0) input = input.substring(0, caretpositon) + input.substring(caretpositon + 1);\tvar document1 = new stringbuilderdocument(input);\tint expectedcaretposition = expectedoutput.indexof('$');\tif (expectedcaretposition > 0) expectedoutput = expectedoutput.substring(0, expectedcaretposition) + expectedoutput.substring(expectedcaretposition + 1);\tvar fixer = new constructfixer(formattingoptionsfactory.createmono (), new texteditoroptions { eolmarker = \"\\n\" });\tint newcaretposition;\tassert.istrue(fixer.tryfix(document1, caretpositon, out newcaretposition));\tvar isequal = expectedoutput == document1.text.replace(\"\\r\\n\", \"\\n\");\tif (!isequal) {\tsystem.console.writeline(expectedoutput);",
  "direction",
  1
 ],
 [
  "string statusline = null;\tusing (streamreader sr = new streamreader (ms, encoding.utf8)) {\tstatusline = sr.readline ();\t}\tstring verb = \"default\";\tif (statusline != null) {\tstring [] parts = statusline.split (' ');\tif (parts.length > 0) verb = parts [0];\t}\tstringwriter sw = new stringwriter ();",
  "content type text plain",
  0
 ],
 [
  "public void test () {",
  "createdelegate success",
  0
 ],
 [
  "public override void methodstatisticalhit (lm m) {",
  "methodstatisticalhit",
  0
 ],
 [
  "m_xsltarg.removeparam(\"myarg7\", szempty);\tretobj = m_xsltarg.getparam(\"myarg7\", szempty);\tif (retobj != null) {\tassert.true(false);\t}\tstring obj = \"0.00\";\tm_xsltarg.addparam(\"myarg1\", szempty, obj);\tm_xsltarg.removeparam(\"myarg1\", szempty);\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);\tif (retobj != null) {",
  "failed to remove",
  0
 ],
 [
  "outputline (@\"       \\open to open the connection\");\toutputline (@\"       \\close to close the connection\");\toutputline (@\"       \\e to execute sql query (select)\");\toutputline (@\"       \\h to show help (all commands).\");\toutputline (@\"       \\defaults to show default variables.\");\toutputline (\"\");\t}\tpublic void showhelp () {\tconsole.writeline (\"\");\tif (!waitforenterkey ()) return;",
  "load filename to load from file sql commands into sql buffer",
  0
 ],
 [
  "}\ttry {\twrongcasefriendassembly.internalclass.internalstaticmethod();\t} catch (memberaccessexception) {\tfailcount += 1;\t}\ttry {\twrongcasefriendassembly.publicclass.internalstaticmethod();\t} catch (memberaccessexception) {\tfailcount += 1;",
  "exception not generated for null output filename",
  1
 ],
 [
  "try {\tusing (var fs = new filestream (path, system.io.filemode.create, fileaccess.write)) {\tusing (var writer = new binarywriterwith7bitencodedints (fs)) {\tlock (sharedserializer) {\tsharedserializer.serialize (writer, obj);\t}\t}\t}\t} catch (exception e) {\tconsole.writeline (environment.stacktrace);",
  "ok",
  1
 ],
 [
  "public void basictest_getipv4interfacestatistics_success_osx() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipv4interfacestatistics stats = nic.getipv4statistics();",
  "skipping negotiatestream streamtostream kerberosauthwithoutrealm success",
  1
 ],
 [
  "public object getunderlyingsearcher() {",
  "principalsearcher entering getunderlyingsearcher",
  0
 ],
 [
  "exc14n = (cryptoconfig.createfromname (\"http: hmacmd5 = (cryptoconfig.createfromname (\"hmacmd5\") != null);\tmerlin ();\tconsole.writeline ();\tphaos ();\t}\tcatch (exception ex) {\tconsole.writeline (ex);\t}\tfinally {\tconsole.writeline ();",
  "total invalid",
  0
 ],
 [
  "if (s3.f3 != 3+906) {\treturn 3;\t}\tfloat4 s4;\ts4.f1 = 1;\ts4.f2 = 2;\ts4.f3 = 3;\ts4.f4 = 4;\ts4 = mono_return_float4(s4, 906);\tif (s4.f1 != 1+906) {",
  "a b",
  1
 ],
 [
  "if (s16.f2 != 2+9) {\treturn 2;\t}\tif (s16.f3 != 3+9) {\treturn 3;\t}\tif (s16.f4 != 4+9) {\treturn 4;\t}\tif (s16.f5 != 5+9) {",
  "got but expected",
  0
 ],
 [
  "try {\tdroptable (cnc);\t}\tcatch (sqlexception e) {\t}\ttry {\tcreatetable (cnc);\tinsertdata (cnc);\tupdatedata (cnc);\tinsertdata (cnc);",
  "abort reset",
  1
 ],
 [
  "static void appdomainmethod () {\tvar socket = new socket (addressfamily.internetwork, sockettype.stream, protocoltype.tcp);\tipendpoint ep = new ipendpoint(ipaddress.any, 0);\tsocket.bind (ep);\tsocket.listen (10);\tsocket.beginaccept ( delegate {",
  "delegate should not be called",
  0
 ],
 [
  "private void thread_func() {\tthread thr=thread.currentthread;\tlock(thr) {\tthread.sleep(2000);\tthread.sleep(15000);\t}\tlock(thr) {\tmonitor.wait(thr);\t}\tthread.sleep(2000);",
  "pumped the tp test times and no progress o giving up",
  1
 ],
 [
  "}\te.setattribute(\"shortname\", shortname);\thtml.writeline(\"  <li><a href=\\\"#\" + shortname + \"\\\">\" + shortname + \"</a>\");\t}\tforeach (xmlelement e in elementlist) {\tstring fullname = e.getattribute(\"name\").substring(2);\tstring shortname = e.getattribute(\"shortname\");\thtml.writeline(\"  <h2><a name=\\\"\" + shortname + \"\\\">\" + shortname + \"</a></h2>\");\tif (isdoozer) html.writeline(\"       <th colspan=2>doozer name:</td>\");\telse html.writeline(\"       <th colspan=2>condition name:</td>\");",
  "td td",
  0
 ],
 [
  "private void emitreadcollection(string typename) {\tstring collectiontypename = $\"{typename}collection\";\topenscope($\"public static uint read(this nativereader reader, uint offset, out {collectiontypename} values)\");\twriteline($\"values = new {collectiontypename}(reader, offset);\");",
  "uint count",
  0
 ],
 [
  "static int main (string[] args) {\tif (args.length == 1 && directory.exists (args[0])) parse (new directoryinfo (args[0]));\telse if (args.length == 1 && file.exists (args[0])) parse (new fileinfo (args[0]));\telse return printusage ();",
  "drop table",
  1
 ],
 [
  "public static int main () {\tvar t2 = run (() => task<int>.factory.startnew (() => 5));\tif (!t2.wait (1000)) {\tconsole.writeline (t2.status);\treturn 1;\t}",
  "ok",
  0
 ],
 [
  "public void discardafteropen() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {",
  "t status",
  1
 ],
 [
  "static stream getfile () {\ttry {\tif (inputfile != null) {\treturn file.openread (inputfile);\t} else {",
  "downloading from",
  0
 ],
 [
  "writeline ();\tif (detailed) {\t}\twriteline ();\twriteline (\"-?\");\twriteline ();\tif (!detailed) return;\twriteline ();\twriteline ();\twriteline ();",
  "bytesreceived",
  1
 ],
 [
  "if (el != null) result.basescheme = el.value;\tvar palette = new dictionary<string, hslcolor> ();\tforeach (var color in root.xpathselectelements (\"palette/*\")) {\tvar name = color.xpathselectelement (\"name\").value;\tif (palette.containskey (name)) throw new invaliddataexception (\"duplicate palette color definition for: \" + name);\tpalette.add ( name, parsecolor (color.xpathselectelement (\"value\").value) );\t}\tforeach (var colorelement in root.xpathselectelements (\" var color = ambientcolor.create (colorelement, palette);\tpropertydescription info;\tif (!ambientcolors.trygetvalue (color.name, out info)) {",
  "passed failed",
  1
 ],
 [
  "private static bool test3() {\tdynamic a = 10.10f;\tfloat b = -a;\tif (b == -10.10f) return true;",
  "div end namespace",
  1
 ],
 [
  "double d2 = double.negativeinfinity;\tdouble d3 = double.nan;\tdouble d4 = 2.000001;\tdouble d5 = 0.00;\tdouble d6 = double.maxvalue;\tdouble d7 = double.minvalue;\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(\"myarg1\", szempty, d1);\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);\tif (!double.ispositiveinfinity((double)retobj)) {",
  "retrieved",
  0
 ],
 [
  "public void testnullnode() {\ttestwrongcontext<addbracescoderefactoringprovider>(@\"class testclass {\tvoid test() {\tif (true) {",
  "mtp clear out resulthint",
  1
 ],
 [
  "cmd2.transaction = transaction;\tcmd2.commandtext = \"drop table blobtest\";\tcmd2.executenonquery ();\t}\tcatch (oracleexception) {\t}\toraclecommand create = connection.createcommand ();\tcreate.transaction = transaction;\tcreate.commandtext = \"create table blobtest (blob_column blob)\";\tcreate.executenonquery ();",
  "insert record",
  0
 ],
 [
  "private static void testxml2text(bool sync, bool oldtypes, int paramlen, bool nvarchar) {\ttesttextwrite(xmlstr, xmlreader.create(new stringreader(xmlstr)), sync, oldtypes, paramlen, nvarchar, false, false);",
  "sync paramlen nvarchar old is ok",
  0
 ],
 [
  "public void writegrammar (relaxnggrammar g) {",
  "grammar",
  0
 ],
 [
  "public void writetimeout_neg2() {",
  "verifying writetimeout",
  0
 ],
 [
  "public void eventhandlers_calledserially() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (serialport com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\tpinchangedeventhandler pinchangedeventhandler = new pinchangedeventhandler(com1, false, true);\treceivedeventhandler receivedeventhandler = new receivedeventhandler(com1, false, true);\terroreventhandler erroreventhandler = new erroreventhandler(com1, false, true);\tint numpinchangedevents = 0, numerrorevents = 0, numreceivedevents = 0;\tint iterationwaittime = 100;",
  "y",
  1
 ],
 [
  "static void showconnectionproperties (oracleconnection con) {\ttry {",
  "thread running",
  1
 ],
 [
  "assert.areequal (test, uri.tostring (), \"tostring/\" + test);\t}\t}\t[test]\tpublic void unixlocalpath_wtf () {\tstring path = \"file: uri fileuri = new uri( path );\tassert.areequal (\"/tmp/foo/bar\", fileuri.absolutepath, path);\tstring path2 = \"file: fileuri = new uri (path2);\tassert.areequal (\"file: }\tpublic static void print (uri uri) {",
  "hostnametype",
  0
 ],
 [
  "public dummy storefield (label pc, field field, source obj, source value, textwriter data) {",
  "stfld",
  0
 ],
 [
  "private static bool test1() {\tstring[] stringvalues = new string[]\t{\tstring.empty, \"abc\", null }\t;\tforeach (string a1 in stringvalues) {\tdynamic d1 = a1;\tif ((d1 ?? null) != (a1 ?? null)) {",
  "smissingactivation runner",
  1
 ],
 [
  "public void insertafterstatementindentslikestatement() {\tvar input =@\" public class test {\tvoid doublyindented() {\t}\t}\";\tvar expected = @\" public class test {\tvoid doublyindented() {",
  "end try",
  1
 ],
 [
  "static void trygdb (int pid, processdata data) {\tstring filename = path.gettempfilename ();\tusing (streamwriter sw = new streamwriter (new filestream (filename, filemode.open, fileaccess.write))) {",
  "adstorectx updategroupmembership add",
  1
 ],
 [
  "private void dumpsqlparam(sqlparameter param) {",
  "precision",
  0
 ],
 [
  "foreach (directoryinfo di in dirs) {\tforeach (fileinfo fi in di.getfiles (\"*.xml\")) {\ttry {\txmltextreader xtr = new xmltextreader (fi.fullname);\txtr.namespaces = false;\txtr.normalization = true;\txmlvalidatingreader xr = new xmlvalidatingreader (xtr);\twhile (!xr.eof) xr.read ();\t} catch (xmlschemaexception) {\t} catch (exception ex) {",
  "exception",
  1
 ],
 [
  "public static void usage (string message) {\tif (message != null) {\tconsole.writeline (\"{0}{1}{0}\", environment.newline, message);\t}",
  "failed to parse string",
  1
 ],
 [
  "object [] arguments;\targuments = new object [] { str, i, j, int32_out, maskedtextresulthint_out };\tif (compare (\"replace\", mask, ref stateindex, arguments, ref more_states)) {\tcontinue;\t}\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;",
  "assert areequal out",
  0
 ],
 [
  "public ienumerable foo (int a) {\ttry {\ttry {\tyield return a;\t} finally {",
  "hello world",
  0
 ],
 [
  "#if trace if (o != null) {\ttrace.indent ();\t} else {\t}\tlong pos = w.basestream.position;\t#endif if (o == null) {\tw.write ((byte) 0);\treturn;\t}\ttype t = o.gettype ();",
  "looking up formatter for type",
  0
 ],
 [
  "public static void testmethod() {",
  "with priority",
  0
 ],
 [
  "static private void dumpdecimalhelperparts(int index) {\tsqldecimal sqldecimalvalue = 10;\tconsole.writeline(\"static private readonly uint32[] {0} = {{\", helpernames[index]);\tfor (int precision = 2; precision <= sqldecimal.maxprecision; precision++){",
  "if precision sqldecimal maxprecision",
  0
 ],
 [
  "private static void generatemodelfiles() {\tvar inputfolder = path.combine(getsourcedirectory(), @\"spec\");\tvar inputpattern = \"*.json\";\tvar model = new filereader(inputfolder, inputpattern).readtypes();\tvar seen = new hashset<string>();\tforeach (var type in model.types) {\tif (seen.contains(type.name)) {",
  "return base getserializer type",
  1
 ],
 [
  "try {\tfilestream f=new filestream(req, filemode.open, fileaccess.read);\tbyte[] fbuf=new byte[256];\treplyheaders(sock, 200, \"ok\", mime_type, null, f.length);\tint count;\twhile((count=f.read(fbuf, 0, 256))>0) {\tsock.send(fbuf, count, socketflags.none);\t}\tf.close();\t} catch(filenotfoundexception) {",
  "where options can be one or more of the following",
  1
 ],
 [
  "private void verifyoutput(string expected) {\tstring actual = _strwriter.tostring();\tif (actual != expected) {",
  "unwrapping startelement",
  1
 ],
 [
  "test test=new test();\tthread thr=new thread(new threadstart(test.thread_func));\tthr.start();\tfor(int i=0; i<51200; i++) {\tslot[i]=thread.allocatedataslot();\tthread.setdata(slot[i], i);\t}\tthread.setdata(slot[11111], 69);\tthread.setdata(slot[26801], 69);\tthread.sleep(10000);",
  "main thread done",
  0
 ],
 [
  "log.writeline (this, type);\t#endif int numflags = 0;\tint nummasks = 0;\tforeach (ulong value in values) {\tif (ispoweroftwo (value)) ++numflags;\telse if (isbitmask (value)) ++nummasks;\t}\tif (numflags + nummasks == values.count) {\tvalues.sort ();\tint numsequential = countsequential ();",
  "create table mono test",
  1
 ],
 [
  "static internal void writeattribute(string depath, string attribute, int value, netcred credentials, authenticationtypes authtypes) {",
  "sdsutils writeattribute writing to on",
  0
 ],
 [
  "public void defaultcolumnnameaddlistchangedtest () {\tstring result = @\"setting table... ---- onlistchanged propertydescriptorchanged,0,0 ---- onlistchanged reset,-1,-1 table was set. ---- onlistchanged propertydescriptoradded,0,0 default named column added. ---- onlistchanged propertydescriptoradded,0,0 non-default named column added. ---- onlistchanged propertydescriptoradded,0,0 another default named column added (column2). ---- onlistchanged propertydescriptoradded,0,0 add a column with the same name as the default columnnames. ---- onlistchanged propertydescriptoradded,0,0 add a column with a null name. ---- onlistchanged propertydescriptoradded,0,0 add a column with an empty name. \";\teventwriter = new stringwriter ();\tdatatable dt = new datatable (\"table\");\tcomplexeventsequence1view dv = new complexeventsequence1view (dt, eventwriter);\tdt.columns.add ();\tdt.columns.add (\"non-defaultnamedcolumn\");",
  "verifying rxparity event try",
  1
 ],
 [
  "static void help (string details) {\tswitch (details) {\tbreak;\tbreak;\tbreak;",
  "verifying baudrate",
  1
 ],
 [
  "public static void runruntests_cancellation_negative() {\tcancellationtokensource cts = new cancellationtokensource();\tcancellationtoken token = cts.token;\tint count = 0;\tcts.cancel();\ttask task3 = task.run(() => { count = 41; }, token);",
  "orleansazuresilos onstop called information",
  1
 ],
 [
  "public static ienumerable<string> yieldreturnwithnestedtryfinally(bool breakinmiddle) {\tyield return \"start of method\";\ttry {\tyield return \"within outer try\";\ttry {",
  "create an empty git repository or reinitialize an",
  1
 ],
 [
  "static private void help () {",
  "thread running",
  1
 ],
 [
  "if (i != 0) _tw.write(\", \");\t_tw.write(fmt.formatname(owningmethod.instantiation[i]));\t}\t_tw.write(\">\");\t}\t_tw.write(\"(\");\tfor (int i = 0; i < owningmethod.signature.length; i++) {\tif (i != 0) _tw.write(\", \");\t_tw.write(fmt.formatname(owningmethod.signature[i]));\t}",
  "mtp clear out resulthint",
  1
 ],
 [
  "e.compile () ();\te = () => new node () { values = { } };\tmie = (memberinitexpression) e.body;\tif (mie.bindings[0].bindingtype != memberbindingtype.memberbinding) return 4;\te.compile () ();\te = () => new node() { parent = { name = \"parent\" }, values = { 4, 5, 7, 8 } };\tmie = (memberinitexpression) e.body;\tif (mie.bindings[0].bindingtype != memberbindingtype.memberbinding) return 5;\tif (mie.bindings[1].bindingtype != memberbindingtype.listbinding) return 6;\te.compile () ();",
  "ok",
  0
 ],
 [
  "}\tconsole.writeline (\");\");\tif (c [0] != 'v') console.writeline ($\"\\t*({typetosigtype (c [0])}*)margs->retval = res;\");\tconsole.writeline (\"\\n}\\n\");\t}\tconsole.writeline (\"{\");\tfor (int i = 0; i < cookies.length; ++i) {\tvar c = cookies [i];\tconsole.write (\"\\t\");\tif (i > 0) console.write (\"else \");",
  "end of inner try",
  1
 ],
 [
  "public delegate int mydel(int x);\tprivate class myclass {\tpublic int do(int p) {\treturn 1;\t}\tpublic short do(short x) {",
  "doshort",
  0
 ],
 [
  "private void oncreatetablethreaded (object state) {\tobject[] objs = state as object[];\tischemaprovider provider = objs[0] as ischemaprovider;\ttableschema table = objs[1] as tableschema;\tbasenode node = objs[2] as basenode;",
  "add table",
  0
 ],
 [
  "public void openclose() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "calling close after calling open",
  0
 ],
 [
  "public peerservicesettingsinfo getcustomservicesettings () {",
  "request getcustomservicesettings",
  0
 ],
 [
  "public override readwritecontext startreading (stream input) {\tvar settings = new xmlreadersettings () {\tcloseinput = true, dtdprocessing = dtdprocessing.ignore, xmlresolver = null, };\txmlreader reader = null;\tinput.seek (0, seekorigin.begin);\ttry {\treader = xmlreader.create (input, settings);\treader.readtodescendant (\"plist\");\twhile (reader.read () && reader.nodetype != xmlnodetype.element) ;\t} catch (exception ex) {",
  "exception",
  0
 ],
 [
  "if (index >= 0) {\tlinelayout.indextolinex (index, true, out l, out x1);\t} else {\tl = x1 = 0;\t}\tindex = result.offset - line.offset - 1 + result.length;\tif (index >= 0) {\tlinelayout.indextolinex (index, true, out l, out x2);\t} else {\tx2 = 0;",
  "error loading",
  1
 ],
 [
  "public static void thread() {\ttry {\tthread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();",
  "abort reset",
  0
 ],
 [
  "if (s6.f1 != 1+906) {\treturn 1;\t}\tif (s6.f2 != 2+906) {\treturn 2;\t}\tif (s6.f3 != 3+906) {\treturn 3;\t}\tif (s6.f4 != 4+906) {",
  "show strongname informations about the assembly",
  1
 ],
 [
  "static void main () {\ttinyhost h = createhost ();\tstreamwriter w = new streamwriter (\"page.aspx\");\tw.writeline (@\"<%@ page language=\"\"c#\"\" %>\");",
  "label",
  1
 ],
 [
  "public void test_eventsource_lowtrust() {\ttestutilities.checknoeventsourcesrunning(\"start\");",
  "at least one whitespace test failed",
  1
 ],
 [
  "switch (args [0]) {\tcase \"big5\": main (new string [] {\t\"cp950.txt\", \"big5.table\", \"a1\", \"43\"});\treturn;\tcase \"gb2312\": main (new string [] {\t\"cp936.txt\", \"gb2312-new.table\", \"81\", \"5e\"});\treturn;\t}\t}\tif (args.length < 3) {",
  "get at",
  1
 ],
 [
  "thread = thread.currentthread;\tmethodinfo mi = typeof (driver).getmethod (\"sleeploop\");\ttry {\ttry {\tthrow new argumentexception ();\t} finally {\thandle.set ();\tsleeploop ();\tfinally_done = true;\t}",
  "async callback",
  1
 ],
 [
  "}\tif (_typeinfo == null) {\tthrow new exception(\"(probably a bug, please report) \" + \"null typeinfo pointer returned\");\t}\t_typeinfo.getcontainingtypelib(out itypelib, out index);\t_typelib = typelibrary.gettypelib(itypelib);\t}\tcatch (exception ex) {\tif (_typeinfo != null) {\tguid guid = basicinfo.guidfromtypeinfo(_typeinfo);",
  "comobjinfo type",
  0
 ],
 [
  "public static void help () {\tconsole.writeline (\"\\t--protocol=2\\tuse v2 protocol (not ssl related)\");\tconsole.writeline (\"\\t--protocol=3\\tuse v3 protocol (not ssl related)\");",
  "nossl do not use ssl for communication",
  0
 ],
 [
  "generatevbstatements(e.truestatements);\tindent--;\tcodestatementcollection falsestatemetns = e.falsestatements;\tif (falsestatemetns.count > 0) {\toutput.write(\"else\");\toutput.writeline();\tindent++;\tgeneratevbstatements(e.falsestatements);\tindent--;\t}",
  "end if",
  0
 ],
 [
  "outputline (@\"                  oracle,postgresql,sqlite,sybase,tds)\");\toutputline (@\"       \\open to open the connection\");\toutputline (@\"       \\close to close the connection\");\toutputline (@\"       \\e to execute sql query (select)\");\toutputline (@\"       \\h to show help (all commands).\");\toutputline (@\"       \\defaults to show default variables.\");\toutputline (\"\");\t}\tpublic void showhelp () {\tconsole.writeline (\"\");",
  "hostname",
  1
 ],
 [
  "stringbuilder sb = new stringbuilder();\tfor (int i = 0; i < 1000000; i++) sb.append(i);\tcmd.commandtext = \"insert into #blobs (id, blob) values (1, @blob)\";\tcmd.parameters.add(\"@blob\", sqldbtype.varchar, -1);\tcmd.parameters[\"@blob\"].direction = parameterdirection.input;\tcmd.parameters[\"@blob\"].value = new stringreader(sb.tostring());\ttask t = cmd.executenonqueryasync(cts.token);\tif (!t.iscompleted) cts.cancel();\ttry {\tt.wait();",
  "t status",
  0
 ],
 [
  "public override void methodstatisticalhit (lm m) {",
  "type checkdependency microsoftajaxhistory js scriptmanager enablehistory",
  1
 ],
 [
  "static bool callsecondinterfaceindexer() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturninterface();\tif ( (!(bool)(((dynamic)s[1])[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "probing assembly location",
  1
 ],
 [
  "for (int i = 0; i < direntrycount; i++) {\ticondirentry ide;\tide.width = reader.readbyte ();\tide.height = reader.readbyte ();\tide.colorcount = reader.readbyte ();\tide.reserved = reader.readbyte ();\tide.planes = reader.readuint16 ();\tide.bitcount = reader.readuint16 ();\tide.bytesinres = reader.readuint32 ();\tide.imageoffset = reader.readuint32 ();",
  "attributes empty",
  1
 ],
 [
  "public static void main(string[] args) {\tisorted<int> sorted = new treeset<int>();\tsorted.addall(new int[] { 23, 29, 31, 37, 41, 43, 47, 53 });\tconsole.writeline(sorted);\tif (args.length == 1) {\tint n = int.parse(args[0]);\tint res;",
  "create tolboxservice",
  1
 ],
 [
  "reader.close();\ttrans.commit();\t}\tcatch(oracleexception e) {\ttrans.commit();\t}\tcmd.commandtext = \"create table mono_adapter_test ( \" + \" varchar2_value varchar2(32),  \" + \" number_whole_value number(18,0) primary key ) \";\ttrans = con.begintransaction();\tcmd.transaction = trans;\treader = cmd.executereader();",
  "rowsaffected before read",
  0
 ],
 [
  "}\tif (addprimarykeys && schemarow.iskey) {\tif (keys == null) {\tkeys = new datacolumn[schemarows.length];\t}\tkeys[keycount++] = datacolumn;\t#if debug if (adapterswitches.dataschema.traceverbose) {\t}\t#endif if (isprimary && datacolumn.allowdbnull) {\t#if debug if (adapterswitches.dataschema.traceverbose) {",
  "constraints",
  1
 ],
 [
  "editortheme theme;\ttry {\ttheme = oldformat.importvssetting (stylename, getstreamprovider ().open ());\t} catch (styleimportexception e) {\tswitch (e.reason) {\tbreak;\tbreak;\t}\treturn null;\t} catch (exception e) {",
  "invalid theme",
  0
 ],
 [
  "public void bytestoread_readbyte() {",
  "verifying bytestoread with readbyte",
  0
 ],
 [
  "public override void removed (xelement source) {\tvar name = source.attribute (\"name\").value;\tvar namespacedescription  = $\"{name}: removed namespace\";\tstate.logdebugmessage ($\"possible -r value: {namespacedescription}\");\tif (state.ignoreremoved.any (re => re.ismatch (namespacedescription))) return;\toutput.writeline ();\tforeach (var removedtype in source.element (\"classes\").elements (\"class\")) comparer.removed (removedtype);",
  "div end namespace",
  0
 ],
 [
  "public void validationcallback(object sender, validationeventargs args) {\tif (args.severity == xmlseveritytype.error) {\tberrorcallback = true;\txmlschemaexception se = args.exception as xmlschemaexception;\terrorlinenumbers[errorcount] = se.linenumber;\terrorcount++;",
  "exception message",
  0
 ],
 [
  "proc.startinfo.arguments = \"/out:\" + pfile + \" /nologo /namespace:\" + ns + \" /protocol:\" + prot + \" \" + wsdl;\tproc.start();\tif (!proc.waitforexit (30000)) {\ttry {\tproc.kill ();\t} catch {}\tif (file.exists (pfile)) file.delete (pfile);\twriteerror (errdoc, ns, \"errors found while generating \" + prot + \" proxy for wsdl: \" + wsdl, \"wsdl.exe timeout\");\t}\telse if (proc.exitcode != 0) {",
  "fail",
  0
 ],
 [
  "public void basestream_default() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "exception during loading",
  1
 ],
 [
  "private static bool callsecondinterfaceinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tif ((!(bool)(firstclassreturndynamicinterface<int>.staticmethod().instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public override void setobject (string foo) {",
  "exception not generated for an empty string filename",
  1
 ],
 [
  "if ((0 <= index) && (index < columns.count)) {\tdatacolumn datacolumn = columns[index];\tdebug.assert(null != datacolumn, \"getdatacolumnbyschemaaction: unexpected null datacolumn\");\tif (!adp.isempty(datacolumn.expression)) {\t#if debug if (adapterswitches.dataschema.traceerror) {\t}\t#endif throw adp.columnschemaexpression(sourcecolumn, datasetcolumn);\t}\tif ((null == datatype) || (datatype.isarray == datacolumn.datatype.isarray)) {\t#if debug if (adapterswitches.dataschema.traceinfo) {",
  "schema match on datacolumn datasetcolumn",
  0
 ],
 [
  "public void async_asyncexecutorwithretriestest_4() {\tint counter = 0;\tint lastiteration = 0;\tfunc<int, task<int>> myfunc = ((int funccounter) => {\tlastiteration = funccounter;\tassert.equal(counter, funccounter);",
  "running for time",
  0
 ],
 [
  "public void canseek_afteropen() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tcom.open();",
  "verifying canseek property returns true after a call to open",
  0
 ],
 [
  "cmd.commandtext = sql;\tcmd.connection = conn;\tbuildparameters (cmd);\tdataset dataset = new dataset ();\tdbdataadapter adapter = createnewdataadapter (cmd, conn);\tadapter.fill (dataset);\tdataset.writexml (filename);\toutputline (\"data written to xml file: \" + filename);\t}\tcatch (exception exexml) {",
  "error execute sql xml failure",
  0
 ],
 [
  "private void openforread(string currentmachinename) {",
  "eventlog openforread",
  0
 ],
 [
  "static bool callsecondclassindexer() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturnclass<int>();\tif ( (!(bool)(((dynamic)s.instanceproperty)[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "libcups not found to have printing support you need cups installed",
  1
 ],
 [
  "public void testremovebracesfromlock() {\ttest<removebracescoderefactoringprovider>(@\"class testclass {\tvoid test() {\t$lock (this) {",
  "failed in part to add remove iteration",
  1
 ],
 [
  "}\tdbconnectionstringbuilder sb = factory.createconnectionstringbuilder ();\tif (!connectionstring.equals(string.empty)) sb.connectionstring = connectionstring;\tbool found = false;\tforeach (string key in sb.keys) {\tif (key.toupper().equals(\"password\") || key.toupper().equals(\"pwd\")) {\tstring pwd = getpasswordfromconsole ();\ttry {\tsb[key] = pwd;\t} catch(exception e) {",
  "error unable to set key reason",
  0
 ],
 [
  "private static streamwriter createbugreport (string[] source_texts, string[] source_names, string path) {\tstreamwriter bug_report = null;\ttry {\tbug_report = new streamwriter (path);\tfor (int i=0; i<source_texts.length; i++) {",
  "failed to resolve service",
  1
 ],
 [
  "m_xsltarg.removeextensionobject(szdefaultns);\tm_xsltarg.clear();\tif ((loadxsl(\"myobjectdef.xsl\", xslinputtype, readertype) == 1)) {\ttry {\ttransform_arglist(\"fruits.xml\", outputtype, navtype);\t}\tcatch (system.xml.xsl.xsltexception) {\treturn;\t}\t}",
  "exception not thrown for ns not found",
  0
 ],
 [
  "public void getparam6() {\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(szlongstring, szempty, \"test6\");\tretobj = m_xsltarg.getparam(szlongstring, szempty);",
  "added value retrieved value",
  0
 ],
 [
  "public void testremovebracesfromif() {\ttest<removebracesaction>(@\"class testclass {\tvoid test () {\t$if (true) {\t}\t}\t}\", @\"class testclass {\tvoid test () {",
  "can t rename file in recent files list",
  1
 ],
 [
  "public void invalidmethodtest() {\tvar actions = getactions<abstractandvirtualconversionaction>( abstract class test {\tpublic virtual string $tostring() {",
  "encoders",
  1
 ],
 [
  "public void loadurl (string url) {\tif (url.startswith(\"#\")) {\tcurrenttab.html.jumptoanchor(url.substring(1));\treturn;\t}\tif (url.startswith (\"edit:\")) {",
  "endglobal",
  1
 ],
 [
  "}\t}\twriter.indent--;\twriter.writeline(\"}\");\tif (needdummyarraymethod) {\twriter.writeline();\twriter.write(\"object \");\twriter.write(dummyarraymethodname);\twriter.writeline(\"() {\");\twriter.indent++;",
  "hello async",
  1
 ],
 [
  "public void testdisable() {\ttestwrongcontext<stringcomparetoisculturespecificissue>(@\" public class test {\tvoid foo (string b) {",
  "added row to rows",
  1
 ],
 [
  "public void validationcallback(object sender, validationeventargs args) {\tif (args.severity == xmlseveritytype.error) {",
  "error",
  0
 ],
 [
  "static void refcursortest3(oracleconnection con) {\toraclecommand cmd = new oraclecommand();\tcmd.connection = con;\tcmd.commandtext = \"curspkg_join.open_join_cursor1\";\tcmd.commandtype = commandtype.storedprocedure;",
  "create parameters",
  0
 ],
 [
  "public override bool saveoptions() {\ttry {\tvar viewmodel = datacontext as packagemanagementoptionsviewmodel;\tviewmodel.saveoptions();\treturn true;\t} catch (exception ex) {",
  "b messasge",
  1
 ],
 [
  "public override void draggingended (nsdragginginfo sender) {",
  "drag delegate received draggingended",
  0
 ],
 [
  "public void basictest_getipinterfacestatistics_success_linux() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfacestatistics stats = nic.getipstatistics();",
  "etag is",
  1
 ],
 [
  "static bool callsecondstructoperator() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturnstruct<int>();\tif ( (!(bool)(((dynamic)(s + 1)) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "gc generatecode generate proxy source code",
  1
 ],
 [
  "public void enddisplayinitializationui (iasyncresult result) {",
  "after",
  1
 ],
 [
  "static void trylldb (int pid, processdata data) {\tstring filename = path.gettempfilename ();\tusing (streamwriter sw = new streamwriter (new filestream (filename, filemode.open, fileaccess.write))) {",
  "positioned on wrong element not on dns",
  1
 ],
 [
  "public async task closeasync_serverinitiatedclose_success(uri server) {\tconst string closewebsocketmetacommand = \".close\";\tusing (clientwebsocket cws = await websockethelper.getconnectedwebsocket(server, timeoutmilliseconds, _output)) {\tvar cts = new cancellationtokensource(timeoutmilliseconds);\tawait cws.sendasync( websocketdata.getbufferfromtext(closewebsocketmetacommand), websocketmessagetype.text, true, cts.token);\tvar recvbuffer = new byte[256];\twebsocketreceiveresult recvresult = await cws.receiveasync(new arraysegment<byte>(recvbuffer), cts.token);",
  "fatal test error",
  1
 ],
 [
  "if (field.isprivate && !field.fieldtype.isvaluetype) if (!iswinformcontrol || field.name != \"components\") nullfields.add (field);\t}\tcheckmethods (type);\tif (type.hasnestedtypes) {\tforeach (typedefinition nested in type.nestedtypes) checkmethods (nested);\t}\tsetfields.intersectwith (nullfields);\tsetfields.exceptwith (usedfields);\tif (setfields.count > 0) {\tforeach (fielddefinition field in setfields) {",
  "todo",
  1
 ],
 [
  "static bool runtest (methodinfo test) {\tconsole.write (\"running test {0, -25}\", test.name);\ttry {\ttest.invoke (new tester (), null);",
  "serverwriteiv",
  1
 ],
 [
  "private void checkrowversion(datarow dr) {\tconsole.writeline(\"\");",
  "has",
  0
 ],
 [
  "if (copypixeloperation != copypixeloperation.sourcecopy) throw new notimplementedexception (\"operation not implemented under x11\");\tif (gdiplus.display == intptr.zero) {\tgdiplus.display = gdiplus.xopendisplay (intptr.zero);\t}\twindow = gdiplus.xrootwindow (gdiplus.display, 0);\tdefvisual = gdiplus.xdefaultvisual (gdiplus.display, 0);\txvisualinfo visual = new xvisualinfo ();\tvisual.visualid = gdiplus.xvisualidfromvisual(defvisual);\tvptr = gdiplus.xgetvisualinfo (gdiplus.display, 0x1 /* visualidmask */, ref visual, ref nitems);\tvisual = (xvisualinfo) marshal.ptrtostructure(vptr, typeof (xvisualinfo));",
  "error while removing outdated cache",
  1
 ],
 [
  "private static bool test2() {\tbyte a = 10;\tdynamic b = a;\tb++;\tif (b == 11) return true;",
  "hello",
  1
 ],
 [
  "private static bool userdefinedstructwithuserdefinedimplicitconversioninassignment() {\tint failcount = 0;\ts origin = new s(10);\tdynamic d = origin;\ts2 result = d;\tif (result.f != origin.f) {\tfailcount++;",
  "test failed at conversion result",
  0
 ],
 [
  "public override void help() {\tconsole.writeline();\tconsole.writeline();\tconsole.writeline();\tconsole.writeline();",
  "options",
  0
 ],
 [
  "int verbose = 0;\tforeach (string arg in args) {\tif (arg == \"-v\") verbose = 1;\telse name = arg;\t}\ttype t = type.gettype (name);\tarray values = enum.getvalues (t);\tstring[] names = enum.getnames (t);\tint i;\tif (verbose != 0) {",
  "enum",
  0
 ],
 [
  "private void version () {\tstring version = system.reflection.assembly.getexecutingassembly ().getname ().version.tostring ();",
  "mono il assembler compiler version",
  0
 ],
 [
  "public void printtree (streamwriter msw) {\tfor (int i = 0; i < faxisarray.count; ++i) {\tforwardaxis axis = (forwardaxis)faxisarray[i];\tmsw.writeline(\"<tree isdss=\\\"{0}\\\" isattribute=\\\"{1}\\\">\", axis.isdss, axis.isattribute);\tdoublelinkaxis printaxis = axis.topnode;\twhile ( printaxis != null ) {",
  "axistype axistype",
  0
 ],
 [
  "public void pinchangedevent_break() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (serialport com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\tpinchangedeventhandler eventhandler = new pinchangedeventhandler(com1);",
  "write change cipher spec",
  1
 ],
 [
  "public void basictest_getipinterfacestatistics_success_linux() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfacestatistics stats = nic.getipstatistics();",
  "stats for",
  0
 ],
 [
  "static void help () {",
  "confidence all low normal high total",
  0
 ],
 [
  "public override object trackedvisitobjectcreateexpression(objectcreateexpression objectcreateexpression, object data) {\tif (data as bool? ?? false) {\t#endif memberresolveresult mrr = this.resolve(objectcreateexpression) as memberresolveresult;\t#if debug if (mrr != null) {",
  "ok",
  1
 ],
 [
  "public static int main () {\ttype t = typeof (newslotvirtualfinal);\tmethodinfo mi = t.getmethod (\"somemethod\");\tif (mi.attributes != (methodattributes.privatescope | methodattributes.public | methodattributes.final | methodattributes.virtual | methodattributes.hidebysig | methodattributes.vtablelayoutmask)) return 1;\tmi = t.getmethod (\"somemethod2\");\tif (mi.attributes != (methodattributes.privatescope | methodattributes.public | methodattributes.virtual | methodattributes.hidebysig | methodattributes.vtablelayoutmask)) return 2;",
  "ok",
  0
 ],
 [
  "m_xsltarg.addparam(\"myarg2\", szempty, (int64)i);\tm_xsltarg.removeparam(\"myarg2\", szempty);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (retobj != null) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg2\", szempty, (uint64)i);\tm_xsltarg.removeparam(\"myarg2\", szempty);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (retobj != null) {",
  "error",
  1
 ],
 [
  "public void getparam4() {\tm_xsltarg = new xsltargumentlist();\tretobj = m_xsltarg.getparam(\"randomname\", szempty);\tif (retobj != null) {",
  "warning enum member",
  1
 ],
 [
  "static void main (string[] args) {",
  "hello world",
  0
 ],
 [
  "private static certificatebundle deletecertificate(string certificatename) {\tvar vaultaddress = inputvalidator.getvaultaddress();\tcertificatename = (certificatename == string.empty) ? inputvalidator.getcertificatename() : certificatename;\tvar certificate = task.run(() => keyvaultclient.deletecertificateasync(vaultaddress, certificatename)).configureawait(false).getawaiter().getresult();",
  "secutil assembly",
  1
 ],
 [
  "}\t}\tforeach (directoryinfo di in dirs) {\tforeach (fileinfo fi in di.getfiles (\"*.xml\")) {\ttry {\txmltextreader xtr = new xmltextreader (fi.fullname);\txtr.namespaces = false;\txtr.normalization = true;\txmlvalidatingreader xr = new xmlvalidatingreader (xtr);\twhile (!xr.eof) xr.read ();",
  "used by developers integrating this with automake tools or packaging tools that require a prefix directory to be specified the root represents the component of a prefix typically prefix lib",
  1
 ],
 [
  "if (!templateinfos.trygetvalue (template.templateid, out templateinfo)) {\tcontinue;\t}\tnewprojecttemplates.add (new microsofttemplateenginesolutiontemplate (template, templateinfo));\t}\tprojecttemplates = newprojecttemplates;\tvar newitemtemplates = new list<microsofttemplateengineitemtemplate> ();\tforeach (var template in itemtemplatenodes) {\titemplateinfo templateinfo;\tif (!templateinfos.trygetvalue (template.templateid, out templateinfo)) {",
  "template not found",
  0
 ],
 [
  "private byte callbackok_nonvoid () {\ttry {",
  "other useless string",
  1
 ],
 [
  "processstartinfo psi = new processstartinfo();\tpsi.filename = manager;\tpsi.workingdirectory = help3environment.approot;\tpsi.arguments = help3service.activecatalog.ascmdlineparam;\tpsi.useshellexecute = true;\tif (runprivileged) psi.verb = \"runas\";\tpsi.windowstyle = processwindowstyle.normal;\ttry {\tprocess p = process.start(psi);\tp.waitforinputidle();",
  "componentlibraryloader loadtoolcomponentlibrary",
  1
 ],
 [
  "public void applydispatchbehavior (contractdescription contractdescription, serviceendpoint endpoint, dispatchruntime dispatchruntime) {",
  "got",
  1
 ],
 [
  "bool ssl = true;\tint verbose = 0;\tint protocol = 3;\tif (args.length > 0) {\tforeach (string arg in args) {\tswitch (arg.tolower ()) {\tcase \"--protocol=2\": protocol = 2;\tbreak;\tcase \"--protocol=3\": protocol = 3;\tbreak;",
  "test failed at call result",
  1
 ],
 [
  "public static void deletejobifexistsnothrow(batchserviceclient client, string jobid, itestoutputhelper output) {\ttry {\tclient.job.delete(jobid);\t}\tcatch (batcherrorexception e) {",
  "get",
  1
 ],
 [
  "values.add (exceptionpagetemplate.template_fullstacktracename, formatfullstacktrace ());\thtmlizedexception htmlexception = ex as htmlizedexception;\tif (htmlexception == null) filldefaulterrorvalues (true, true, ex, values);\telse {\tpagetype = exceptionpagetemplatetype.htmlized;\tfillhtmlizederrorvalues (values, htmlexception, ref pagetype);\t}\t}\treturn template.render (values, pagetype);\t} catch (exception ex) {",
  "refactorings",
  1
 ],
 [
  "static bool callsecondstructoperator() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturndynamicstruct();\tif ( (!(bool)((s + 1) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public static void taskawaiter() {\tmanualresetevent mre = new manualresetevent(false);\tmanualresetevent mre2 = new manualresetevent(false);\tmanualresetevent mre3 = new manualresetevent(false);\ttask t1 = task.factory.startnew(() => { mre.waitone(); });\ttask<int> t11 = task.factory.startnew(() => { mre.waitone(); return 1; });\tt1.getawaiter().unsafeoncompleted(() => { mre2.set(); });\tt11.getawaiter().unsafeoncompleted(() => { mre3.set(); });\tmre.set();",
  "fieldchanged type",
  1
 ],
 [
  "public bool onclientmouseover (mouseinfo mouseinfo, modifierkeys modifiers, nsidomnode target) {\t#if debug ongeneric (\"onclientmouseover\");",
  "onclientmouseover",
  0
 ],
 [
  "static bool loadconfig (bool quiet) {\tsystem.reflection.methodinfo config = typeof (system.environment).getmethod (\"getmachineconfigpath\", system.reflection.bindingflags.static | system.reflection.bindingflags.nonpublic);\tif (config != null) {\tstring path = (string) config.invoke (null, null);\tbool exist = file.exists (path);\tstrongnamemanager.loadconfig (path);\treturn exist;",
  "analyzers",
  1
 ],
 [
  "s_event = new autoresetevent(false);\ts_timer = new timer(timercallback, null, 200, timeout.infinite);\tbool timerfired = s_event.waitone(timespan.fromseconds(5));\tif (!timerfired) {\treturn program.fail;\t}\ts_event.reset();\ts_timer.change(3000000, timeout.infinite);\ttimerfired = s_event.waitone(500);\tif (timerfired) {",
  "added value retrieved value",
  1
 ],
 [
  "try {\tclient = result.result;\t}\tcatch {\t}\tif (client != null) {\tonclientaccepted(client);\tclientstate state;\tif (_usessl) {\tstate = new clientstate(client, _sslencryptionpolicy);",
  "server starting ssl authentication",
  0
 ],
 [
  "public void generatecontract (arraylist generatedmaps) {\tif (generatedmaps.count == 0) return;\tgenerationresult main = (generationresult) generatedmaps[0];\tstring baseserializername = main.baseserializerclassname;\tstring access_mod = (_config == null || !_config.generateasinternal) ? \"public\" : \"internal\";\twriteline (\"\");\twritelineind (\"{\");\twritelineuni (\"}\");\twriteline (\"\");",
  "return new",
  0
 ],
 [
  "for (int i=0; i<100; i++) {\tisequenced<int> inner = new treeset<int>();\tinner.add(i); inner.add(i+1);\touter.add(inner);\t}\tisequenced<int> inner1 = new treeset<int>(), inner2 = new treeset<int>(), inner3 = new treeset<int>();\tinner1.addall<int>(new int[] { 2, 3, 5, 7, 11 });\tinner2.addall(inner1); inner2.add(13);\tinner3.addall(inner1);\touter.add(inner1);",
  "in outer",
  0
 ],
 [
  "yield return \"start of method\";\ttry {\tyield return \"within outer try\";\ttry {\tyield return \"within inner try\";\tif (breakinmiddle) yield break;\tyield return \"end of inner try\";\t} finally {\t}\tyield return \"end of outer try\";",
  "bad",
  1
 ],
 [
  "type membertype = member.gettype();\tif ((membertype != typeof(userprincipal)) && (!membertype.issubclassof(typeof(userprincipal))) && (membertype != typeof(computerprincipal)) && (!membertype.issubclassof(typeof(computerprincipal))) && (membertype != typeof(groupprincipal)) && (!membertype.issubclassof(typeof(groupprincipal))) && (!membertype.issubclassof(typeof(authenticableprincipal)))) {\tthrow new invalidoperationexception( string.format(cultureinfo.currentculture, sr.storectxunsupportedprincipaltypeforgroupinsert, membertype.tostring()));\t}\tif (member.unpersisted) throw new invalidoperationexception(sr.storectxgrouphasunpersistedinsertedprincipal);\tdebug.assert(member.context != null);\tif (member.contexttype == contexttype.machine) throw new invalidoperationexception(sr.adstorectxunsupportedprincipalcontextforgroupinsert);\t}\tforeach (principal member in insertedmembers) {\tif (!member.fakeprincipal && adutils.areprincipalsinsameforest(group, member)) {",
  "adstorectx updategroupmembership add",
  0
 ],
 [
  "public static void displaypools(itestoutputhelper testoutputhelper, ienumerable<cloudpool> poolsenumerable) {\tlist<cloudpool> pools = new list<cloudpool>(poolsenumerable);\tint numpools = (null != pools) ? pools.count : 0;\ttestoutputhelper.writeline(\"\");\ttestoutputhelper.writeline(\"\");\tforeach (cloudpool curpool in pools) {\ttestoutputhelper.writeline(curpool.id + \":\");",
  "deleting job",
  1
 ],
 [
  "public static void main (string[] args) {\tprintersettings.stringcollection col = system.drawing.printing.printersettings.installedprinters;\tfor (int i = 0; i < col.count; i++) {\tconsole.writeline (\"--- {0}\", col[i]);\tprintersettings ps = new printersettings ();\tps.printername = col[i];",
  "couldn t find any tzdata",
  1
 ],
 [
  "public static void rev<t> (list <t> y) {",
  "cons",
  0
 ],
 [
  "static void dumpsignedinfo (signedinfo s) {",
  "id",
  0
 ],
 [
  "public void testfieldconstant() {\ttest<introduceconstantaction>(@\"class testclass {\tpublic void hello () {",
  "hello world",
  0
 ],
 [
  "public static bool start() {\tif (isrunning) return true;\tif (!help3environment.islocalhelp) return false;\ttry {\tprocess p = process.start(agent);\tp.waitforinputidle();",
  "helpviewer helplibraryagent started",
  0
 ],
 [
  "exception = false;\td = char.minvalue;\ttry {\tchar rchar = checked(d--);\t}\tcatch (system.overflowexception) {\texception = true;\t}\tfinally {\tif (exception) rez++;",
  "test failed",
  0
 ],
 [
  "public void parityreplace_after_parity() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (serialport com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "long multi line description that also",
  1
 ],
 [
  "using (var repo = new libgit2sharp.repository (path)) {\tretryuntilsuccess (monitor, credtype => {\tint transferprogress = 0, checkoutprogress = 0;\tsubmoduleupdateoptions updateoptions = new submoduleupdateoptions () {\tinit = true, credentialsprovider = (url, userfromurl, types) => {\ttransferprogress = checkoutprogress = 0;\treturn gitcredentials.tryget (url, userfromurl, types, credtype);\t}, ontransferprogress = (tp) => ontransferprogress (tp, monitor, ref transferprogress), oncheckoutprogress = (file, completedsteps, totalsteps) => {\toncheckoutprogress (completedsteps, totalsteps, monitor, ref checkoutprogress);\truntime.runinmainthread (() => {",
  "checking out file",
  0
 ],
 [
  "if (s6.f2 != 2+90) {\treturn 2;\t}\tif (s6.f3 != 3+90) {\treturn 3;\t}\tif (s6.f4 != 4+90) {\treturn 4;\t}\tif (s6.f5 != 5+90) {",
  "got",
  1
 ],
 [
  "private void writeusings(codewriter writer, generationcontext context) {\twriter.writeusingnamespace(\"system\");\twriter.writeusingnamespace(\"system.data\");\twriter.writeusingnamespace(\"system.data.linq.mapping\");\twriter.writeusingnamespace(\"system.diagnostics\");\twriter.writeusingnamespace(\"system.reflection\");\t#if mono_strict writer.writeusingnamespace(\"system.data.linq\");\twriter.writeusingnamespace(\"system.data.linq\");",
  "else writer writeusingnamespace linq",
  0
 ],
 [
  "return null;\t}\tnrefactoryresolver resolver = resourceresolverservice.createresolver(filename) as nrefactoryresolver;\tif (resolver == null) {\tresolver = new nrefactoryresolver(languageproperties.csharp);\t}\tif (compilationunit == null) {\tcompilationunit = getfullast(resolver.language, filename, filecontent);\t}\tif (compilationunit == null) {",
  "not modified since sun feb gmt",
  1
 ],
 [
  "public extractinterfaceoptionsresult getextractinterfaceoptions (isyntaxfactsservice syntaxfactsservice, inotificationservice notificationservice, list<isymbol> extractablemembers, string defaultinterfacename, list<string> conflictingtypenames, string defaultnamespace, string generatednametypeparametersuffix, string languagename) {\tvar dialog = new extractinterfacedialog ();\ttry {\tdialog.init (syntaxfactsservice, notificationservice, extractablemembers, defaultinterfacename, conflictingtypenames, defaultnamespace, generatednametypeparametersuffix, languagename);\tbool performchange = dialog.run () == xwt.command.ok;\tif (!performchange) return extractinterfaceoptionsresult.cancelled;\treturn new extractinterfaceoptionsresult (false, dialog.includedmembers, dialog.interfacename, dialog.filename);\t} catch (exception ex) {",
  "error while signature changing",
  0
 ],
 [
  "try {\tconsole.writeline (\"defaultprovider = {0}\", protectedconfiguration.defaultprovider);\trsaprotectedconfigurationprovider rsa = (rsaprotectedconfigurationprovider)protectedconfiguration.providers [protectedconfiguration.defaultprovider];\tconsole.writeline (rsa.name);\tconsole.writeline (\"cspprovidername = '{0}'\", rsa.cspprovidername == null ? \"(null)\" : rsa.cspprovidername);\tconsole.writeline (\"keycontainername = '{0}'\", rsa.keycontainername == null ? \"(null)\" : rsa.keycontainername);\tconsole.writeline (\"usemachinecontainer = '{0}'\", rsa.usemachinecontainer);\tconsole.writeline (\"useoaep = '{0}'\", rsa.useoaep);\t}\tcatch (exception e) {",
  "found metadata template for method",
  1
 ],
 [
  "else {\tsystem.console.writeline(indent + var.desc);\tmodule.skipcount++;\t}\t}\tcatch (testskippedexception tse) {\tif (!string.isnullorwhitespace(var.desc)) {\tsystem.console.writeline(indent + var.desc);\t}\tif (!string.isnullorwhitespace(tse.message)) {",
  "adstorectx getsidadspathfromprincipal no sid",
  1
 ],
 [
  "switch (self.opcode.code) {\tcase code.ldarg_0: case code.ldarg_1: case code.ldarg_2: case code.ldarg_3: case code.ldarg: case code.ldarg_s: case code.ldarga: case code.ldarga_s: case code.starg: case code.starg_s: i = 1;\tbreak;\tcase code.conv_r4: case code.ldc_r4: case code.ldelem_r4: case code.ldind_r4: case code.stelem_r4: case code.stind_r4: i = 2;\tbreak;\tcase code.conv_r8: case code.ldc_r8: case code.ldelem_r8: case code.ldind_r8: case code.stelem_r8: i = 3;\tbreak;\tcase code.ldloc_0: case code.ldloc_1: case code.ldloc_2: case code.ldloc_3: case code.ldloc: case code.ldloc_s: case code.ldloca: case code.ldloca_s: case code.stloc_0: case code.stloc_1: case code.stloc_2: case code.stloc_3: case code.stloc: case code.stloc_s: i = 4;\tbreak;\tcase code.ldfld: case code.ldflda: case code.ldsfld: case code.ldsflda: case code.stfld: case code.stsfld: i = 5;",
  "fields",
  0
 ],
 [
  "var lang = projectoptions.getattribute (\"language\");\tvar splittype = !string.isnullorempty (type) ? type.split (new char [] {','}, stringsplitoptions.removeemptyentries).select (t => t.trim()).toarray() : null;\tvar projecttypes = splittype != null ? splittype : new string[] {lang};\tvar projecttype = projecttypes [0];\tstring[] flavors;\tif (!services.projectservice.cancreatesolutionitem (projecttype, projectcreateinformation, projectoptions) && projecttype != lang && !string.isnullorempty (lang)) {\tprojecttype = lang;\tflavors = splittype ?? new string[0];\t} else flavors = projecttypes.skip (1).toarray ();\tif (!services.projectservice.cancreatesolutionitem (projecttype, projectcreateinformation, projectoptions)) {",
  "after",
  1
 ],
 [
  "if (this.islocalvariable && localvariabledeclaration != null) {\tif (variabledeclaration.name == this.resourcemanagermember.name) {\tif (localvariabledeclaration.startlocation.x == this.resourcemanagermember.region.begincolumn && localvariabledeclaration.startlocation.y == this.resourcemanagermember.region.beginline) {\t#endif data = true;\t}\t}\t}\tfielddeclaration fielddeclaration = data as fielddeclaration;\tif (!this.islocalvariable && fielddeclaration != null) {\tif (variabledeclaration.name == this.resourcemanagermember.name && fielddeclaration.startlocation.x == this.resourcemanagermember.region.begincolumn && fielddeclaration.startlocation.y == this.resourcemanagermember.region.beginline) {",
  "adstorectx cannotchangepwdtoldapconverter add deny self",
  1
 ],
 [
  "static void dump_user (string username) {\tmembershipuser user = membership.getuser (username, false);",
  "test failed at call result",
  1
 ],
 [
  "public static void main (string [] args) {\tif (args.length == 2) {\tstring [] tmp = new string [4];\ttmp [0] = args [0] + \"-utf8.txt\";\ttmp [1] = \"65001\";\ttmp [2] = args [1];\ttmp [3] = args [0] + \"-\" + args [1] + \".txt\";\targs = tmp;\t}\tif (args.length < 4) {",
  "pass input file input encoding output encoding output file",
  0
 ],
 [
  "int value = 0;\ttry {\tfor (int i = 0; i < 8; ++i) {\ttry {\ttry {\tvalue += await yieldvalue (1);\tconsole.writeline (\"i = \" + i);\tif (i < 2) continue;\tif (i > 1) throw new applicationexception ();\t} catch (applicationexception) {",
  "catch",
  0
 ],
 [
  "public void asciiencoding() {",
  "failed string string",
  1
 ],
 [
  "static int test_0_cwt_keep_child_alive () {\tfinalizerhelpers.performnopinaction (setuplinks3);\tgc.collect ();\tgc.waitforpendingfinalizers ();\tconsole.writeline (\"a is null {0}\", a == null);\tconsole.writeline (\"b is null {0}\", b == null);\tif (a == null || b != null) return 1;",
  "a test",
  0
 ],
 [
  "public async task bug1360227_addtasksbatchcancelation(bool usejoboperations) {\tconst string testname = \"bug1360227_addtasksbatchcancelation\";\tconst int taskcount = 322;\tawait synchronizationcontexthelper.runtestasync(async () => {\tusing (batchclient batchcli = await testutilities.openbatchclientfromenvironmentasync()) {\tusing (cancellationtokensource source = new cancellationtokensource()) {\tbatchclientparalleloptions paralleloptions = new batchclientparalleloptions() {\tmaxdegreeofparallelism = 2, cancellationtoken = source.token };\tsystem.threading.tasks.task t = this.addtaskssimpletestasync( batchcli, testname, taskcount, paralleloptions, usejoboperations: usejoboperations);\tthread.sleep(timespan.fromseconds(.3));",
  "renderbegintag",
  1
 ],
 [
  "var t = new thread (() => {\trefs = new lotsarefs();\trefs.referee = new referee();\t});\tt.start ();\tt.join ();\tfor (var i = 0; i < 100000000; ++i) {\tvar o = new object();\t}\tif (refs.referee.gettype() != typeof(referee)) {",
  "wrong type",
  0
 ],
 [
  "public override void run() {",
  "hello",
  1
 ],
 [
  "public void dtrenable_default() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "hello",
  1
 ],
 [
  "string filename = path.combine(testdata, \"common\", \"invalid-ucs4.xml\");\tif (!iscustomreader()) {\ttry {\treloadsource(filename);\twhile (datareader.read()) ;\treturn test_fail;\t}\tcatch (xmlexception e) {\tcerror.writeline(e.message);\tcerror.equals(datareader.linenumber, issubtreereader() ? 0 : e.linenumber, \"reader line number and exception line number must be same\");",
  "reader position exception position",
  0
 ],
 [
  "public byte[] getsymmetrickey() {\tvar tag = \"-symkeyfile\";\tvar symmetrickeyfile = getargumentvalue( tag );\tvar symmetrickey = symmetricalgorithm.create().key;\tif ( symmetrickeyfile != string.empty ) {\tsymmetrickey = file.readallbytes( symmetrickeyfile );\t}\telse {",
  "is not provided using default value",
  0
 ],
 [
  "private static bool test5() {\tint a = -1;\tdynamic b = a;\tb++;\tif (b == 0) return true;",
  "failed got wrong result",
  1
 ],
 [
  "public bool onpromptusernameandpassword (intptr title, intptr text, intptr chkmsg, ref bool chkstate, out intptr username, out intptr password) {\t#if debug ongeneric (\"onpromptusernameandpassword\");",
  "stupid code",
  1
 ],
 [
  "static internal icon geticon (string name) {\tstream stream = assembly.getmanifestresourcestream (name);\tif (stream == null) {",
  "failed to read",
  0
 ],
 [
  "public static void usage (string message) {\tif (message != null) {\tconsole.writeline (\"{0}{1}{0}\", environment.newline, message);\t}",
  "url one or more url to download",
  0
 ],
 [
  "if (module.hasexportedtypes) {\tforeach (exportedtype exportedtype in module.exportedtypes) {\toutput.write(\".class extern \");\tif (exportedtype.isforwarder) output.write(\"forwarder \");\toutput.write(exportedtype.declaringtype != null ? exportedtype.name : exportedtype.fullname);\topenblock(false);\tif (exportedtype.declaringtype != null) output.writeline(\".class extern {0}\", disassemblerhelpers.escape(exportedtype.declaringtype.fullname));\tcloseblock();\t}\t}",
  "output writeline",
  0
 ],
 [
  "private static bool callsecondinterfaceindexer() {\tint failcount = 0;\tverify.firstcalled = false;\tdynamic d = new firstclassreturninterface<int>();\tif ((!(((secondinterface<int>)d.instanceproperty)[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "p12.password = p12pwd;\tarraylist list = new arraylist ();\tlist.add (new byte [4] { 1, 0, 0, 0 });\thashtable attributes = new hashtable (1);\tattributes.add (pkcs9.localkeyid, list);\tp12.addcertificate (new x509certificate (rawcert), attributes);\tif (issuercertificate != null) p12.addcertificate (issuercertificate);\tp12.addpkcs8shroudedkeybag (subjectkey, attributes);\tp12.savetofile (p12file);\t}",
  "success",
  0
 ],
 [
  "string result;\tusing (var sr = new streamreader (resp.getresponsestream ())) result = sr.readtoend ();\tif (result != \"ok\") throw new exception (result);\t}\tcatch (exception ex) {\tlock (sendinglock) {\tsending = false;\t}\treturn;\t}",
  "feedback successfully sent",
  0
 ],
 [
  "public static int test_0_setjmp_exn_handler () {\tintptr res;\tcaller.setup ();\tvoidvoiddelegate f = new voidvoiddelegate (caller.m);\ttry {\tmono_test_setjmp_and_call (f, out res);\t} catch (specialexn) {",
  "hello",
  1
 ],
 [
  "}\t}\tif (filename != null) {\treturn new resourcesetreference(resourcename, filename);\t}\tif ((filename = findresourcefilename(possiblesourcefile)) != null) {\treturn new resourcesetreference(resourcename, filename);\t}\t}\t} else {",
  "resourcetoolkit nrefactoryresourceresolver getresourcesetreference could not determine the project for the source file null",
  0
 ],
 [
  "protected override void onpaint(activitydesignerpainteventargs e) {\tgraphics graphics = e.graphics;\tactivitydesignertheme designertheme = e.designertheme;\tambienttheme ambienttheme = e.ambienttheme;\t#if debug try {\t#endif this.rootdesignerlayout.onpaint(graphics, designertheme, ambienttheme);\tthis.paintcontaineddesigners(e);\t#if debug }\tcatch (exception exception) {",
  "elem",
  1
 ],
 [
  "public byte[] getciphertext() {\tvar tag = \"-text\";\tvar text = getargumentvalue( tag );\tif ( text == string.empty ) {",
  "two",
  1
 ],
 [
  "request.useragent = \"mozilla/4.0 (compatible; msie 6.0; windows nt 5.1; sv1; .net clr 1.1.4322)\";\trequest.accept = \"image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, application/x-shockwave-flash, */*\";\thttpwebresponse response = (httpwebresponse)request.getresponse();\tstream responsestream = response.getresponsestream();\tstreamreader sr = new streamreader(responsestream);\tstring s = sr.readtoend();\tsr.close();\treturn s;\t}\tcatch(exception e) {",
  "cannot retrieve document from url",
  0
 ],
 [
  "public object instantiate () {",
  "assembly",
  1
 ],
 [
  "if (arguments.length == 0) {\tshowusage ();\treturn 0;\t}\tforeach (string s in arguments) {\tif (s == \"--simple-makefiles\" || s == \"-s\") {\tgenerateautotools = false;\t} else if (s.startswith (\"-d:\")) {\tif (s.length > 3) defaultconfig = s.substring (3);\t} else if (s [0] == '-') {",
  "loading",
  1
 ],
 [
  "public static void threadmethod_b() {\tfor (int h=0;h<10;h++) {\tint i=5;\tm[i].waitone();\tthread.sleep(4500);\t}\tfor (int h=0;h<10;h++) {\tint i=5;\tm[i].releasemutex();",
  "element catmixed pcdata",
  1
 ],
 [
  "protected override tchannel onacceptchannel (timespan timeout) {\tif (active_server != null) {\ttry {\tserver_release_handle.waitone (timeout);\t} catch (timeoutexception) {\treturn null;\t}\t}\tvar server = new namedpipeserverstream (uri.localpath.substring (1).replace ('/', '\\\\'), pipedirection.inout);\tactive_server = server;",
  "gtk version is incompatible with required version",
  1
 ],
 [
  "public static void main(string[] args) {",
  "else",
  1
 ],
 [
  "private void debug (timespan ts) {",
  "got but expected",
  1
 ],
 [
  "private testoledb () {\toledbcommand cmd;\tm_cnc = new oledbconnection (\"provider=postgresql;addr=127.0.0.1;database=rodrigo\");\tm_cnc.open ();",
  "provider",
  0
 ],
 [
  "public static void main () {",
  "trying to assign i to this outside a method property or ctr",
  0
 ],
 [
  "private static bool test2() {\tbyte a = 10;\tdynamic b = a;\tb--;\tif (b == 9) return true;",
  "positioned on wrong element not on ns",
  1
 ],
 [
  "protected override void sendcompletedevent (iasyncresult result) {",
  "test failed at call result",
  1
 ],
 [
  "using (xmlwriter w = createwriter(doc)) {\ttry {\tw.writestartelement(\"root\");\tw.writeraw(null, 0, 0);\t}\tcatch (argumentnullexception) {\ttestlog.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "does not support xmldecl node",
  1
 ],
 [
  "w.writestartelement(\"root\");\tw.writeattributestring(\"xmlns\", \"x\", null, \"foo\");\tw.writeattributestring(\"xmlns\", \"x\", null, \"foo\");\tw.writeendelement();\t}\tcatch (xmlexception e) {\tcerror.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "key absoluteexpiration slidingexpiration priority lastchange expiresat disabled guid priorityqueueindex",
  1
 ],
 [
  "static bool callsecondstructoperator() {\tint failcount = 0; verify.firstcalled = false;\tif ( (!(bool)(((dynamic)firstclassreturnstruct<int>.staticproperty) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "catched exception in cctor",
  1
 ],
 [
  "object [] arguments;\targuments = new object [] { i, k, value };\tif (compare (methodname, mask, ref stateindex, arguments, ref more_states)) {\tcontinue;\t}\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;",
  "assert areequal mtp true false",
  0
 ],
 [
  "public void testmultiplepastes() {\tvar indent = createengine(@\" class foo {\tvoid bar () {\tsystem.console.writeline ();\t}\t$ }\t\");\titextpastehandler handler = new textpasteindentengine(indent, new texteditoroptions { eolmarker = \"\\n\" }, formattingoptionsfactory.createmono());\tfor (int i = 0; i < 2; i++) {\tvar text = handler.formatplaintext(indent.offset, \"void bar ()\\n{\\nsystem.console.writeline ();\\n}\", null);",
  "assert areequal mtp tostring",
  1
 ],
 [
  "static void guardfromeh () {\ttry {\tinnerfromeh ();\t} catch (exception e) {\tif (!(e is threadabortexception)) result |= 0x8;",
  "caught a while on res",
  0
 ],
 [
  "jsondata = dotnetjsonserializer.serialize(datavalues);\t});\tidx[0] = 0;\ttimespan elapsed = testutils.timerun(numiterations, baseline, \"newtonsoft json javascriptserializer\", () => {\tdatavalues.clear();\tdatavalues.add(\"a\", idx[0]++);\tdatavalues.add(\"b\", idx[0]++);\tdatavalues.add(\"c\", idx[0]++);\tjsondata = newtonsoft.json.jsonconvert.serializeobject(datavalues);\t});",
  "try get b",
  1
 ],
 [
  "rs.dtdprocessing = dtdprocessing.ignore;\tif (sr != null) {\txmlreader reader = readerhelper.create(sr, rs, string.empty);\treturn reader;\t}\tif (stream != null) {\txmlreader reader = readerhelper.create(stream, rs, filename);\treturn reader;\t}\tif (fragment != null) {",
  "fragment",
  0
 ],
 [
  "if (pkcs7filename != null) {\tsoftwarepublishercertificate pkcs7 = new softwarepublishercertificate ();\tpkcs7.certificates.addrange (roots);\tusing (filestream fs = file.openwrite (pkcs7filename)) {\tbyte[] data = pkcs7.getbytes ();\tfs.write (data, 0, data.length);\tfs.close ();\t}\t}\tif (import) {",
  "importing certificates into store machine user",
  0
 ],
 [
  "static void warnaboutsymbolwriter (string message) {\tif (has_warned_about_symbolwriter) return;\thas_warned_about_symbolwriter = true;",
  "div end type",
  1
 ],
 [
  "if (m_conn.state != connectionstate.open) return false;\tstring query = \"select * from wordlist\";\tnpgsqlcommand cmd = new npgsqlcommand (query, m_conn);\tnpgsqldatareader rdr = cmd.executereader ();\tint i=0;\twhile (rdr.read ()) {\ti++;\tif (verbose > 2) console.writeline (i);\t}\trdr.close ();",
  "npgsqldatareader executereader",
  0
 ],
 [
  "public async task awaitwithstack(task<int> task) {",
  "oncreated",
  1
 ],
 [
  "cerror.writelineignore(e.tostring());\tcerror.compare(w.writestate, (utils.writertype == writertype.charcheckingwriter) ? writestate.start : writestate.error, \"writestate should be error\");\treturn;\t}\tcatch (nullreferenceexception e) {\tcerror.writelineignore(e.tostring());\tcerror.compare(w.writestate, (utils.writertype == writertype.charcheckingwriter) ? writestate.start : writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "garbagecollectionsweepend",
  1
 ],
 [
  "public override void run() {",
  "orleansazuresilos run starting orleans silo information",
  0
 ],
 [
  "boolean bt = (1 == 1);\tm_xsltarg.addparam(\"myarg4\", szempty, bt);\tretobj = m_xsltarg.getparam(\"myarg4\", szempty);\tif (!bt.equals(retobj)) {\tassert.true(false);\t}\txpathdocument xd = new xpathdocument(fullfilepath(\"fish.xml\"));\tm_xsltarg.addparam(\"myarg5\", szempty, ((ixpathnavigable)xd).createnavigator());\tretobj = m_xsltarg.getparam(\"myarg5\", szempty);\tif (retobj == null) {",
  "failed to add get a value of type xpathnavigator",
  0
 ],
 [
  "public void attrnamespace_1(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writeattributestring(\"xmlns\", \"xml\", null, \"foo\");\t}\tcatch (argumentexception e) {",
  "got but expected",
  1
 ],
 [
  "static xmlassembly createxmlassembly (string file) {\txmldocument doc = new xmldocument ();\tdoc.load (file.openread (file));\txmlnode node = doc.selectsinglenode (\"/assemblies/assembly\");\txmlassembly result = new xmlassembly ();\ttry {\tresult.loaddata (node);\t} catch (exception e) {",
  "error loading",
  0
 ],
 [
  "public static int main () {\tx x = new x ();\tx.test (1);\tif (x.sbyte_selected){\treturn 1;\t} else {",
  "creating session",
  1
 ],
 [
  "static targetframework readtargetframework (targetframeworkmoniker moniker, filepath directory) {\ttry {\treturn targetframework.fromframeworkdirectory (moniker, directory);\t} catch (exception ex) {",
  "adstorectx extensioncachetoldapconverter",
  1
 ],
 [
  "public void transformgeneric5(xslinputtype xslinputtype, readertype readertype, outputtype outputtype, navtype navtype) {\tfilestream s2;\tif ((loadxsl(\"showparam.xsl\", xslinputtype, readertype) == 1) && (transform((string) \"fruits.xml\", (outputtype) outputtype, navtype) == 1)) {\ts2 = new filestream(fullfilepath(\"showparam.xsl\"), filemode.open, fileaccess.read);\ts2.dispose();\ts2 = new filestream(fullfilepath(\"fruits.xml\"), filemode.open, fileaccess.read);\ts2.dispose();\treturn;\t}",
  "encountered errors performing transform and could not verify if files were closed",
  0
 ],
 [
  "public void frag_7(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter(conformancelevel.fragment)) {\ttry {\tw.writedoctype(\"root\", \"publicid\", \"sysid\", \"<!entity e 'abc'>\");\t}\tcatch (invalidoperationexception e) {\tcerror.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "tw.writeline(\"<entity4 att1='xxx&lt;xxx&#65;xxx&#x43;xxxe1fooxxx'>xxx&gt;xxx&#66;xxx&#x44;xxxe1fooxxx</entity4>\");\ttw.writeline(\"<entity5>e1foo e3bzee </entity5>\");\ttw.writeline(\"<attribute1 />\");\ttw.writeline(\"<attribute2 a1='a1value' />\");\ttw.writeline(\"<attribute3 a1='a1value' a2='a2value' a3='a3value' />\");\ttw.writeline(\"<attribute4 a1='' />\");\ttw.writeline(string.format(\"<attribute5 crlf='x{0}x' cr='x{0}x' lf='x\\nx' ms='x     x' tab='x\\tx' />\", environment.newline));\ttw.writeline(\"<skip1 /><afterskip1 />\");\ttw.writeline(\"<skip2></skip2><afterskip2 />\");\ttw.writeline(\"<chars1>0123456789</chars1>\");",
  "chars cdata yyy zzz chars",
  0
 ],
 [
  "public static void throwexception (string message, t arg) {",
  "generic to string",
  0
 ],
 [
  "public void writetimeout_neg2() {",
  "error message is wrong",
  1
 ],
 [
  "public void basictest_accessinstanceproperties_noexceptions() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {",
  "todototal",
  1
 ],
 [
  "argpos++;\tif (!graphdatafile.exists) {\tok = false;\t}\t}\telse {\treturn false;\t}\t}\tif (graphdatafile == null) {",
  "no graph data file supplied driver cannot run",
  0
 ],
 [
  "public override void garbagecollectionstartworldstart (uint collection, uint generation, ulong counter) {",
  "bad command line arguments supplied",
  1
 ],
 [
  "try {\tasm = assembly.loadfrom (assembly);\t} catch {\tconsole.writeline ();\treturn 1;\t}\t}\tarraylist usertypes = new arraylist ();\tarraylist maps = new arraylist ();\txmlreflectionimporter imp = new xmlreflectionimporter ();",
  "ok",
  1
 ],
 [
  "#if debug try {\treturn new program().run(args);\t}\tcatch (codegenerationfailedexception ex) when (dumpreproarguments(ex)) {\tthrow new notsupportedexception();\t}\t#else try {\treturn new program().run(args);\t}\tcatch (exception e) {",
  "error",
  0
 ],
 [
  "public void readafterbasestreamclose() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {",
  "port",
  1
 ],
 [
  "private void dochecktimeout() {\tif (--_timeoutcheckstoskip != 0) return;\t_timeoutcheckstoskip = timeoutcheckfrequency;\tint currentmillis = environment.tickcount;\tif (currentmillis < _timeoutoccursat) return;\tif (0 > _timeoutoccursat && 0 < currentmillis) return;\t#if debug if (runregex.debug) {\tdebug.writeline(\"\");",
  "bitmap stored to",
  1
 ],
 [
  "public static int main(string[] args) {\ttry {\tusing (xunitperformanceharness harness = new xunitperformanceharness(args)) {\tforeach(var testname in gettestassemblies()) {\tharness.runbenchmarks(gettestassembly(testname));\t}\t}\treturn 0;\t}\tcatch (exception ex) {",
  "dll vs dll",
  1
 ],
 [
  "rettype = elemdesc.tdesc;\tlimit--;\t}\t}\tadddomparams(funcdesc, meth, limit);\t}\tif ((varenum)rettype.vt != varenum.vt_hresult) {\tstring typename = typelibutil.typedesctostring (_typelib, _typeinfo, rettype, !typelibutil.comtype);\tif (typename.startswith(\"ref \")) typename = typename.substring(4);\tif (traceutil.if(this, tracelevel.info)) {",
  "show add reference dialog for",
  1
 ],
 [
  "public list<packagecontent> getpackagecontentfromvarname (string varname) {\tif (!pkgvarnametopkgname.containskey (varname)) {",
  "pkg config variable not found in pkgvarnametopkgname",
  0
 ],
 [
  "outputline (@\"       \\close to close the connection\");\toutputline (@\"       \\e to execute sql query (select)\");\toutputline (@\"       \\h to show help (all commands).\");\toutputline (@\"       \\defaults to show default variables.\");\toutputline (\"\");\t}\tpublic void showhelp () {\tconsole.writeline (\"\");\tif (!waitforenterkey ()) return;\tif (!waitforenterkey ()) return;",
  "sdb protocol version",
  1
 ],
 [
  "public void writenode_xmlreader25(xmlwriterutils utils) {\txmlreader xr = createreaderignorews(\"xmlreader.xml\");\twhile (xr.read()) {\tif (xr.localname == \"pinode\") {\txr.read();\tbreak;\t}\t}\tif (xr.nodetype != xmlnodetype.processinginstruction) {",
  "reader positioned on",
  0
 ],
 [
  "public static void teststyles(streamwriter file, control control, string name) {\tstring[] results;\tresults = getstyles(control);",
  "test",
  0
 ],
 [
  "public void ipinfotest_accessallipv4properties_noerrors() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfaceproperties ipproperties = nic.getipproperties();\tipv4interfaceproperties ipv4properties = ipproperties.getipv4properties();\tassert.throws<platformnotsupportedexception>(() => ipv4properties.isautomaticprivateaddressingactive);\tassert.throws<platformnotsupportedexception>(() => ipv4properties.isautomaticprivateaddressingenabled);\tassert.throws<platformnotsupportedexception>(() => ipv4properties.isdhcpenabled);",
  "unknown scope value defaulting to all",
  1
 ],
 [
  "private static bool testoropwithsametypebutwrongreturntype() {\tclearflags();\tdynamic d1 = new myopclasswitherrorreturntype();\tdynamic d2 = new myopclasswitherrorreturntype();\tdynamic dr = d1 || d2;\tif (dr.gettype() != typeof(myopclasswitherrorreturntype)) {",
  "failed got wrong return type",
  0
 ],
 [
  "public override string tostring() {\tstringwriter writer = new stringwriter(cultureinfo.invariantculture);",
  "certificatechainvalidation",
  1
 ],
 [
  "private static bool test3() {\tshort a = 1;\tdynamic b = a;\tb++;\tif (b == 2) return true;",
  "failed short",
  0
 ],
 [
  "public void generateserializers (textwriter writer) {\t_writer = writer;\t_results = new generationresult [_xmlmaps.length];\tif (_config != null && _config.namespaceimports != null && _config.namespaceimports.length > 0) {",
  "using",
  0
 ],
 [
  "static byte [] faultresponse_qualified (socket socket) {\tstring responsecontent = \"<soap:envelope xmlns:soap=\\\"http: \"  <soap:body>\" + \"    <soap:fault>\" + \"      <soap:faultcode>soap:server</soap:faultcode>\" + \"      <soap:faultstring>failure processing request.</soap:faultstring>\" + \"      <soap:faultactor>mono web service</soap:faultactor>\" + \"      <soap:detail>\" + \"        <se:systemerror xmlns:se=\\\"http: \"          <se:code>5000</se:code>\" + \"          <se:description>invalid credentials.</se:description>\" + \"        </se:systemerror>\" + \"      </soap:detail>\" + \"    </soap:fault>\" + \"  </soap:body>\" + \"</soap:envelope>\";\tstringwriter sw = new stringwriter ();",
  "create stored function sf to test date parameters",
  1
 ],
 [
  "public void disassemble(methodbody body, methoddebugsymbols debugsymbols) {\tmethoddefinition method = body.method;",
  "output writeline maxstack",
  0
 ],
 [
  "public void verifynametableadd(object objactual, string str, char[] ach, int offset, int length) {\tobject objexpected = null;\tif (nametablever == enametable_ver.verify_with_addstr) {\tobjexpected = datareader.nametable.add(ach, offset, length);\tcerror.compare(objactual, objexpected, \"verifynametablewaddstr\");\t}\telse if (nametablever == enametable_ver.verify_with_addchar) {\tobjexpected = datareader.nametable.add(str);",
  "verifynametablewaddchar",
  0
 ],
 [
  "x.test (1);\tif (x.sbyte_selected){\treturn 1;\t} else {\t}\tx y = new x ();\tsbyte s = 10;\ty.test (s);\tif (y.sbyte_selected){\t} else {",
  "failed sbyte not selected for sbyte argument",
  0
 ],
 [
  "elementlist.removeat(i--);\tcontinue;\t}\te.setattribute(\"shortname\", shortname);\thtml.writeline(\"  <li><a href=\\\"#\" + shortname + \"\\\">\" + shortname + \"</a>\");\t}\tforeach (xmlelement e in elementlist) {\tstring fullname = e.getattribute(\"name\").substring(2);\tstring shortname = e.getattribute(\"shortname\");\thtml.writeline(\"  <h2><a name=\\\"\" + shortname + \"\\\">\" + shortname + \"</a></h2>\");",
  "p summary p",
  0
 ],
 [
  "private async task operation(int opnumber) {\tif (operationsinprogress > 0) assert.true(false, $\"1: operation {opnumber} found {operationsinprogress} operationsinprogress.\");\toperationsinprogress++;\tvar delay = random.nexttimespan(timespan.fromseconds(2));\tawait task.delay(delay);\tif (operationsinprogress != 1) assert.true(false, $\"2: operation {opnumber} found {operationsinprogress} operationsinprogress.\");\tawait task.delay(delay);\tif (operationsinprogress != 1) assert.true(false, $\"3: operation {opnumber} found {operationsinprogress} operationsinprogress.\");\toperationsinprogress--;",
  "task done",
  0
 ],
 [
  "static bool resign (string assemblyname, rsa key, bool quiet) {\tassemblyname an = null;\ttry {\tan = assemblyname.getassemblyname (assemblyname);\t}\tcatch {\t}\tif (an == null) {",
  "malformed server comment",
  1
 ],
 [
  "while (xr.read()) {\tif (xr.localname == \"attributesgeneric\") {\tdo { xr.read(); } while (xr.localname != \"node\");\txr.movetonextattribute();\txr.movetonextattribute();\txr.movetonextattribute();\tbreak;\t}\t}\tif (xr.nodetype != xmlnodetype.attribute) {",
  "reader not positioned on attribute",
  0
 ],
 [
  "static private void help () {\tconsole.writeline ();",
  "overload binary operator",
  1
 ],
 [
  "static string getkeyfromexpression(expression expr) {",
  "wait returned",
  1
 ],
 [
  "public void basictest_getipinterfacestatistics_success_linux() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfacestatistics stats = nic.getipstatistics();",
  "incomingpacketswitherrors",
  0
 ],
 [
  "_querymembersresults = _primarygroupmemberssearcher.findall();\tdebug.assert(_querymembersresults != null);\t_querymembersresultenumerator = _querymembersresults.getenumerator();\t}\tf = _querymembersresultenumerator.movenext();\tif (f) {\tthis.current = (searchresult)_querymembersresultenumerator.current;\tdebug.assert(this.current != null);\t_currentforeignde = null;\t_currentforeignprincipal = null;",
  "addnlinkedattrset movenextquerymember got a result using as current",
  0
 ],
 [
  "public static void printcar (t _car) {",
  "stats for",
  1
 ],
 [
  "public static void creategenerictestfile(string strfilename) {\tfilepathutil.addstream(strfilename, new memorystream());\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"no\\\"?>\");\ttw.writeline(\"<!-- comment1 -->\");\ttw.writeline(\"<?pi1a?>\");\ttw.writeline(\"<?pi1b?>\");\ttw.writeline(\"<?pi1c?>\");",
  "hello",
  1
 ],
 [
  "private async system.threading.tasks.task addtaskssimpletestasync( batchclient batchcli, string testname, int taskcount, batchclientparalleloptions paralleloptions, func<addtaskresult, cancellationtoken, addtaskresultstatus> resulthandlerfunc, stagingstorageaccount storagecredentials, ienumerable<string> localfilestostage, concurrentbag<concurrentdictionary<type, ifilestagingartifact>> filestagingartifacts = null, timespan? timeout = null, bool usejoboperations = true) {\tjoboperations joboperations = batchcli.joboperations;\tstring jobid = \"bulk-\" + testutilities.getmyname() + \"-\" + testname + \"-\" + usejoboperations;\ttry {\tcloudjob unboundjob = joboperations.createjob();",
  "initial job commit for job",
  0
 ],
 [
  "public void disconnect () {",
  "passwordinfo expirepasswordnow sending request",
  1
 ],
 [
  "parm.dbtype = dbtype.string;\tparm.direction = parameterdirection.input;\tparm.value = tablename;\tcmd.parameters.add(parm);\tpgsqldatareader rdr;\trdr = cmd.executereader();\tint c;\tint results = 0;\tdo {\tresults++;",
  "result set",
  0
 ],
 [
  "public chirperperformancecounters(string instancename) {\tchirpspersecond = new chirperperformancecounterlong(null);\tif (performancecountercategory.exists(categoryname)) {\ttry {\tchirpspersecond = new chirperperformancecounterlong(new performancecounter(categoryname, chirpspersecondname, instancename, false));\t}\tcatch {\t}\t}\telse {",
  "class myunicode does not have unicode bit set",
  1
 ],
 [
  "public static int main(string[] args) {\tint result = pass;\tif (!testpreinitprimitivedata()) {",
  "failed",
  0
 ],
 [
  "public unittestresult [] getresultstodate (datetime enddate, int count) {\ttry {\tif (store != null) return store.getresultstodate (test.activeconfiguration, test, enddate, count);\t} catch (exception ex) {",
  "test",
  1
 ],
 [
  "private static void verifyreader(string tag, sqldatareader dr, string expectedtypename, string expectedbasetypename) {\tdr.read();\tstring actualtypename = dr.getsqlvalue(0).gettype().tostring();\tstring actualbasetypename = dr.getstring(1);\tconsole.writeline(\"{0,-40} -> {1}:{2}\", tag, actualtypename, actualbasetypename);\tif (!actualtypename.equals(expectedtypename)) {",
  "genproj exe visual studio release output full solutions with tests",
  1
 ],
 [
  "public override conversion isvalid(itype[] parametertypes, itype returntype, csharpconversions conversions) {",
  "testing validity of for parameters and return type",
  0
 ],
 [
  "public override void writeassemblyattributes (assembly assembly) {\tforeach (string def in configuration.publicmacros) {\twritemacrodefinition (sh, def);\t}\tsh.writeline ();",
  "failed to remove",
  1
 ],
 [
  "public static void connectionpoolingtest2 () {\toracleconnection[] connections = null;\tint maxcon = max_connections;\tint i = 0;\tconnections = new oracleconnection[maxcon];\tfor (i = 0; i < maxcon; i++) {\tconnections[i] = new oracleconnection(constr);\tconnections[i].open ();\t}",
  "failed enum enum",
  1
 ],
 [
  "public void performancecounter_counters () {",
  "did not throw error",
  1
 ],
 [
  "public static void readlist (xmlreader reader, icollection<string> endnodes, readercallbackwithdata callback) {\tif (reader.isemptyelement) return;\treadcallbackdata data = new readcallbackdata ();\tbool didreadstartnode = false;\twhile (reader.read()) {\tskip: data.skipnextread = false;\tswitch (reader.nodetype) {\tcase xmlnodetype.endelement: if (endnodes.contains (reader.localname)) return;",
  "unknown end node valid end nodes are",
  0
 ],
 [
  "}\tmemoryneeded = memoryneeded.alignup(type.typeinstancefieldalignment);\tmemoryneeded += type.typeinstancefieldsize;\t}\tmemoryneeded = memoryneeded.alignup(intptr.size);\treturn memoryneeded;\t}\t#if ccconverter_trace public unsafe void dumpdebuginfo() {\ttypesystemcontext context = typesystemcontextfactory.create();\t{",
  "error use either or pvk and cert",
  1
 ],
 [
  "public void writeprojectsection(solutionsection section) {\tif (section.count != 0) {\twriter.writeline(\"\\tprojectsection({0}) = {1}\", section.sectionname, section.sectiontype);\twritesectionentries(section);",
  "endprojectsection",
  0
 ],
 [
  "private static void printhelp() {\tconsole.writeline();\tconsole.writeline();\tconsole.writeline();\tconsole.writeline();\tconsole.writeline();",
  "milliseconds",
  1
 ],
 [
  "public void delete() {",
  "principal entering delete",
  0
 ],
 [
  "type t = typeof (myunicode);\tif ((t.attributes & typeattributes.stringformatmask) != typeattributes.unicodeclass){\terrors += 1;\t}\tt = typeof (myauto);\tif ((t.attributes & typeattributes.stringformatmask) != typeattributes.autoclass){\terrors += 2;\t}\tt = typeof (myansi);\tif ((t.attributes & typeattributes.stringformatmask) != typeattributes.ansiclass){",
  "class myunicode does not have ansi bit set",
  0
 ],
 [
  "}\t} else if (!services.projectservice.isworkspaceitemfile (file)) {\treturn 1;\t}\tconsoleprogressmonitor monitor = new consoleprogressmonitor ();\tmonitor.ignorelogmessages = true;\tworkspaceitem centry = await services.projectservice.readworkspaceitem (monitor, file);\tmonitor.ignorelogmessages = false;\tsolution solution = centry as solution;\tif (solution == null) {",
  "capnum",
  1
 ],
 [
  "public void string_null_char() {\tusing (serialport com1 = tcsupport.initfirstserialport()) using (serialport com2 = tcsupport.initsecondserialport(com1)) {",
  "elementname",
  1
 ],
 [
  "protected virtual void onunamsactivated(object sender, system.eventargs e) {",
  "opcionat",
  0
 ],
 [
  "public static void main (string [] args) {\tforeach (string arg in args){\tif (arg == \"-h\" || arg == \"--help\"){",
  "h help shows help",
  0
 ],
 [
  "public static void displaypools(itestoutputhelper testoutputhelper, ienumerable<cloudpool> poolsenumerable) {\tlist<cloudpool> pools = new list<cloudpool>(poolsenumerable);\tint numpools = (null != pools) ? pools.count : 0;\ttestoutputhelper.writeline(\"\");\ttestoutputhelper.writeline(\"\");\tforeach (cloudpool curpool in pools) {\ttestoutputhelper.writeline(curpool.id + \":\");\tif (curpool.statistics != null) {",
  "diskwriteiops",
  0
 ],
 [
  "public void position_open_basestreamclose() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tcom.open();\tstream serialstream = com.basestream;\tcom.basestream.close();",
  "verifying position property throws exception after open then basestream close",
  0
 ],
 [
  "public void encoding_utf32encoding_beforeopen() {",
  "no data found",
  1
 ],
 [
  "public static int main () {\tif (test_1 (5) != 0) return 1;\tif (test_2 (6) != 0) return 2;\tif (test_3 (\"\") != 0) return 3;\tif (test_4 (null) != 0) return 4;\tif (test_5 () != 0) return 5;\tif (test_6 () != 1) return 6;\tif (test_7 (false) != 1) return 7;\tif (test_8 (typeof (bool)) != 0) return 8;",
  "ok",
  0
 ],
 [
  "private void emitrecord(recorddef record) {\tbool isconstantstringvalue = record.name == \"constantstringvalue\";\topenscope($\"public partial class {record.name} : metadatarecord\");\tif ((record.flags & recorddefflags.reentrantequals) != 0) {\topenscope($\"public {record.name}()\");\twriteline(\"_equalsreentrancyguard = new threadlocal<reentrancyguardstack>(() => new reentrancyguardstack());\");\tclosescope();\t}\topenscope(\"public override handletype handletype\");\topenscope(\"get\");",
  "return handletype record name",
  0
 ],
 [
  "public void generatestructures () {\tw.writeline (\"/* ======== structures ======== */\");\tguint32 codepoint;\tguint32 upper;\tguint32 title;\t} simpletitlecasemapping;\");",
  "typedef struct",
  0
 ],
 [
  "}\tfinally {\tmounthelper.unmount(mounteddirname);\tdeletedir(mounteddirname, true);\t}\tfile.appendalltext(debugfilename, string.format(\"completed scenario {0}\", environment.newline));\t}\t}\tcatch (exception ex) {\ts_pass = false;",
  "err exception caught in scenario",
  0
 ],
 [
  "s9.f5 = 5;\ts9.f6 = 6;\ts9.f7 = 7;\ts9.f8 = 8;\ts9.f9 = 9;\ts9 = mono_return_short9(s9, 90);\tif (s9.f1 != 1+90) {\treturn 1;\t}\tif (s9.f2 != 2+90) {",
  "tp window duration",
  1
 ],
 [
  "private ienumerator getnextchunk() {\tstring rangedattribute = string.format( cultureinfo.invariantculture, \"{0};range={1}-*\", _propertyname, _lowrange);\tglobaldebug.writelineif(globaldebug.info, \"rangeretriever\", \"getnextchunk: rangedattribute={0}\", rangedattribute);\ttry {\t_de.refreshcache(new string[] { rangedattribute, _propertyname });\t}\tcatch (system.runtime.interopservices.comexception e) {\tif (e.errorcode == unchecked((int)0x80072020)) {",
  "rangeretriever getnextchunk no more results",
  0
 ],
 [
  "public override object trackedvisitobjectcreateexpression(objectcreateexpression objectcreateexpression, object data) {\tif (data as bool? ?? false) {\t#endif memberresolveresult mrr = this.resolve(objectcreateexpression) as memberresolveresult;\t#if debug if (mrr != null) {",
  "resourcetoolkit bclnrefactoryresourceresolver resolved constructor",
  0
 ],
 [
  "static void startcommandline(string cmd, string workingdir) {",
  "x x",
  1
 ],
 [
  "canwrite = pinfo.setmethod != null;\t}\telse {\tname = elem.getattribute (\"name\");\ttname = elem.getattribute (\"type\");\tcanwrite = elem.attributes [\"canwrite\"] == null;\t}\tload (elem);\ttype = stetic.registry.gettype (tname, false);\tif (type == null) {",
  "number of storage sas definitions in the vault",
  1
 ],
 [
  "public static void assertiscoercion(unaryexpression u, string opname, type expected) {",
  "unexpected character in name",
  1
 ],
 [
  "private static bool callsecondclassinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturnclass();\tif ((!(bool)(((dynamic)s.instanceproperty).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "func<iandroidtimezonedb> c = () => getdefaulttimezonedb ();\tbool dump_rules            = false;\tmono.options.optionset p = null;\tp = new mono.options.optionset () {\t{ \"i=\", \"timezone data {file} to parse and dump\", v => dumptimezonefile (v, offset) }, { \"o=\", \"write timezone data files to {path}\", v => timezoneinfo.timezonedataexportpath = v }, { \"t=\", \"create androidtzdata from {path}.\", v => {\tc = () => new androidtzdata (v);\t} }, { \"z=\", \"create zoneinfodb from {dir}.\", v => {\tc = () => new zoneinfodb (v);\t} }, { \"offset=\", \"show timezone info offset for datetime {offset}.\", v => {\toffset = datetime.parse (v);",
  "exception not thrown for ns not found",
  1
 ],
 [
  "public contentvalidator finish(bool usedfa) {\tdebug.assert(contenttype == xmlschemacontenttype.elementonly || contenttype == xmlschemacontenttype.mixed);\tif (_contentnode == null) {\tif (contenttype == xmlschemacontenttype.mixed) {\tstring ctype = isopen ? \"any\" : \"textonly\";",
  "usage crash bisector exe mono mono executable opt option name mono arg",
  1
 ],
 [
  "public void transformgeneric3(object param, xslinputtype xslinputtype, readertype readertype, outputtype outputtype, navtype navtype) {\tstring baseline = path.combine(\"baseline\", (string)param);\tif (loadxsl(\"showparam.xsl\", xslinputtype, readertype) == 1) {\tfor (int i = 0; i < 100; i++) {\tif (transform((string) \"fruits.xml\", (outputtype) outputtype, navtype) != 1) {",
  "test failed to transform after iterations",
  0
 ],
 [
  "foreach (symvalue sv in this.unmodifiedsinceentry.elements) tw.write (\"{0} \", sv);\ttw.writeline ();\tforeach (symvalue sv in this.unmodifiedfieldssinceentry.elements) tw.write (\"{0} \", sv);\ttw.writeline ();\tif (this.modifiedatcall != null) {\tforeach (symvalue sv in this.modifiedatcall.elements) tw.write (\"{0} \", sv);\ttw.writeline ();\t}\tif (olddomain == null) return;\tolddomain.egraph.dump (tw);",
  "got but expected",
  1
 ],
 [
  "static int main () {\ttest t1 = new test ();\tobjref myref = remotingservices.marshal (t1, \"/test\");\tstring url = \"corba: string uri;\tcorbachannel chnl = new corbachannel (8000);\tchannelservices.registerchannel (chnl);",
  "after finally",
  1
 ],
 [
  "public void getparam4() {\tm_xsltarg = new xsltargumentlist();\tretobj = m_xsltarg.getparam(\"randomname\", szempty);\tif (retobj != null) {",
  "did not return null for non existent parameter name",
  0
 ],
 [
  "public void ipinfotest_accessallipv4properties_noerrors() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfaceproperties ipproperties = nic.getipproperties();\tif (!nic.supports(networkinterfacecomponent.ipv4)) {\tvar nie = assert.throws<networkinformationexception>(() => ipproperties.getipv4properties());\tassert.equal(socketerror.protocolnotsupported, (socketerror)nie.errorcode);\tcontinue;\t}\tipv4interfaceproperties ipv4properties = ipproperties.getipv4properties();",
  "isautomaticprivateaddressingactive",
  0
 ],
 [
  "public override t test<t> (t t) {",
  "got but expected",
  1
 ],
 [
  "public static void main () {\tvar all = cultureinfo.getcultures (culturetypes.specificcultures | culturetypes.neutralcultures).orderby (l => l.lcid);\tconsole.outputencoding = encoding.utf8;\tvar writer = console.out;\tforeach (var c in all) {\tif (c.lcid == cultureinfo.invariantculture.lcid) continue;\tvar df = c.datetimeformat;\tdump (writer, df.abbreviateddaynames, \"abbreviateddaynames\");\tdump (writer, df.abbreviatedmonthgenitivenames, \"abbreviatedmonthgenitivenames\");\tdump (writer, df.abbreviatedmonthnames, \"abbreviatedmonthnames\");",
  "two",
  1
 ],
 [
  "public void fixvbcasingandaddmethodcallparenthesis2() {",
  "console writeline appdomain getcurrentthreadid console writeline appdomain getcurrentthreadid",
  0
 ],
 [
  "private void dochecktimeout() {\tint currentmillis = environment.tickcount;\tif (currentmillis < timeoutoccursat) return;\tif (0 > timeoutoccursat && 0 < currentmillis) return;\t#if dbg if (runregex.debug) {\tdebug.writeline(\"\");",
  "error there is already a certificate for that port",
  1
 ],
 [
  "batchcli.joboperations.addtask(jobid, tasktoadd);\tlist<cloudtask> tasks = batchcli.joboperations.listtasks(jobid).tolist();\tassert.equal(1, tasks.count);\ttaskstatemonitor taskstatemonitor = batchcli.utilities.createtaskstatemonitor();\ttaskstatemonitor.waitall( tasks, taskstate.running, timespan.fromseconds(30), new odatamonitorcontrol {delaybetweendatafetch = timespan.fromseconds(5)});\tcloudtask runningtask = batchcli.joboperations.gettask(jobid, taskid);\trunningtask.terminate();\trunningtask.refresh();\tassert.equal(taskstate.completed, runningtask.state);\trunningtask.refresh();",
  "deleting task",
  0
 ],
 [
  "public static void runcontinuewithbase( taskcontinuationoptions options, action initran, func<task, task> continuationmaker, func<bool> ranvalue, bool taskisfuture) {",
  "looking for member",
  1
 ],
 [
  "}\t}\t});\tthread1.start();\tthread1.join();\tthread thread2 = new thread(() => {\tfor (int i = 0; i < 1000; i++) {\tint idx = -1;\ttry {\tidx = waithandle.waitany (mutexes);",
  "test failed at call result",
  1
 ],
 [
  "s8.f1 = 1;\ts8.f2 = 2;\ts8.f3 = 3;\ts8.f4 = 4;\ts8.f5 = 5;\ts8.f6 = 6;\ts8.f7 = 7;\ts8.f8 = 8;\ts8 = mono_return_sbyte8(s8, 9);\tif (s8.f1 != 1+9) {",
  "yield injector",
  1
 ],
 [
  "private static bool callsecondstructinstancemethod() {\tint failcount = 0;\tdynamic d = new firstclassreturnstruct();\tverify.firstcalled = false;\tif ((!(((d + 1)).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "config dir",
  1
 ],
 [
  "private bool hascertificatecollectionchanged() {\tif (_certificates.count != _certificateoriginalthumbprints.count) {",
  "authenticableprincipal hascertificatecollectionchanged original count current count",
  0
 ],
 [
  "dt.rows.add (new object [] {2, 2});\tdt.rows.add (new object [] {3, 1});\tdatarowview drv = dv.addnew ();\teventwriter.writeline (dv.count);\tdrv [0] = 0;\tdrv.endedit ();\teventwriter.writeline (dv.count);\tdt.rows [dt.rows.count - 1] [0] = 4;\teventwriter.writeline (dv.count);\tdt.rows [dt.rows.count - 1] [1] = 4;",
  "value moved",
  0
 ],
 [
  "return;\t}\tif (args.change == extensionchange.add) {\thandlers.add (vcs);\ttry {\trepository r = vcs.createrepositoryinstance ();\tr.addref ();\tdatacontext.includetype (r.gettype ());\tr.unref ();\t} catch (exception e) {",
  "missing argument to runtime args command line option",
  1
 ],
 [
  "private void processprotocol(short protocol) {\tsecurityprotocoltype serverprotocol = this.context.decodeprotocolcode(protocol);\tif ((serverprotocol & this.context.securityprotocolflags) == serverprotocol || (this.context.securityprotocolflags & securityprotocoltype.default) == securityprotocoltype.default) {\tthis.context.securityprotocol = serverprotocol;\tthis.context.supportedciphers = ciphersuitefactory.getsupportedciphers (false, serverprotocol);",
  "selected protocol",
  0
 ],
 [
  "console.writeline();\tcc = 0;\t}\tconsole.write(\"{0,-2:x2} \", _inbuff[i]);\tcc++;\t}\tif (cc>0) {\tconsole.writeline();\t}\tcc = 0;",
  "unused buffer",
  0
 ],
 [
  "public bool checkvalidationresult (servicepoint sp, x509certificate certificate, webrequest request, int error) {\tif (error != 0) {\tconsole.writeline (certificate.tostring (true));",
  "new dataset",
  1
 ],
 [
  "public override void renderbegintag (htmltextwriter w) {",
  "renderbegintag",
  0
 ],
 [
  "bool? b4 = b1^b2, b5 = b1&b2, b6 = b1|b2;\tconsole.writeline(\"[{0}] [{1}] [{2}]\", b4, b5, b6);\tbool? b7 = b1^b3, b8 = b1&b3, b9 = b1|b3;\tconsole.writeline(\"[{0}] [{1}] [{2}]\", b7, b8, b9);\tconsole.writeline(b1 != null ? \"null is true\" : \"null is false\");\tconsole.writeline(b1 == null ? \"!null is true\" : \"!null is false\");\tconsole.writeline();\tbool?[] bvals = new bool?[] { null, false, true };\tforeach (bool? x in bvals) foreach (bool? y in bvals) console.writeline(\"{0,-6} {1,-6} {2,-6} {3,-6} {4,-6}\", x, y, x&y, x|y, x^y);\tconsole.writeline();",
  "warning requesting icon that not been tuned",
  1
 ],
 [
  "byte[] fbuf=new byte[256];\treplyheaders(sock, 200, \"ok\", mime_type, null, f.length);\tint count;\twhile((count=f.read(fbuf, 0, 256))>0) {\tsock.send(fbuf, count, socketflags.none);\t}\tf.close();\t} catch(filenotfoundexception) {\tnotfound(sock);\t} catch(ioexception) {",
  "csp options",
  1
 ],
 [
  "public async void awaitinloopcondition() {\twhile (await this.simplebooltaskmethod()) {",
  "index",
  1
 ],
 [
  "public void enqueue (xevent xevent) {\tif (thread.currentthread != thread) {",
  "hwnd queue enqueue called from a different thread without locking",
  0
 ],
 [
  "dynamic dr = test(dobj);\t}\tcatch (microsoft.csharp.runtimebinder.runtimebinderexception ex) {\tif (errorverifier.verify(errormessageid.badbinaryops, ex.message, exp_msg)) {\tflag = 0;\t}\telse {\t}\t}\tcatch (exception ex) {",
  "got but expected",
  1
 ],
 [
  "storectx storectxtouse = _owninggroup.getstorectxtouse();\tstring explanation;\tdebug.assert(storectxtouse != null || _owninggroup.unpersisted == true);\tif ((storectxtouse != null) && (!storectxtouse.cangroupmemberberemoved(_owninggroup, principal, out explanation))) throw new invalidoperationexception(explanation);\tbool removed = false;\tif (_insertedvaluespending.contains(principal)) {\tmarkchange();\t_insertedvaluespending.remove(principal);\tremoved = true;\tif (!_removedvaluescompleted.contains(principal)) {",
  "principalcollection remove adding to removedvaluescompleted",
  0
 ],
 [
  "static int main2(string[] args) #else static int main(string[] args) #endif {\ttype type = null;\tsystem.text.stringbuilder code = new stringbuilder ();\ttry {\tif (args.length != 2 && args.length != 3) {",
  "must supply at least two arguments",
  0
 ],
 [
  "int count = marshal.releasecomobject(o);\tif (count <= 0) break;\t}\t}\twhile (true) {\tint count = marshal.release(comobj);\tif (count <= 0) break;\t}\t}\tcatch (exception ex) {",
  "error on cleanup",
  0
 ],
 [
  "public void validationcallback(object sender, validationeventargs args) {\tswitch (args.severity) {\tbwarningcallback = true;\twarningcount++;\tbreak;\tberrorcallback = true;\terrorcount++;\tbreak;\t}",
  "exception message",
  0
 ],
 [
  "break;\tcase \"-t\": an = assemblyname.getassemblyname (args [i++]);\tbyte [] pkt = an.getpublickeytoken ();\tif (pkt == null) {\t} else {\t}\tbreak;\tcase \"-tp\": an = assemblyname.getassemblyname (args [i++]);\tbyte [] token = an.getpublickeytoken ();\tif (token == null) {",
  "exception caught",
  1
 ],
 [
  "private static bool test1() {\tlong[] longvalues = new long[]\t{\tlong.minvalue, long.minvalue, 0 }\t;\tforeach (long a1 in longvalues) {\tdynamic d1 = a1;\tif ((d1 < 10) != (a1 < 10)) {",
  "copyright c mike krueger released under gpl",
  1
 ],
 [
  "private void writebuffersize_default() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "cleanup gc",
  1
 ],
 [
  "try {\tthrow new exception ();\t} catch (exception e) {\tone = true;\tthrow;\t}\t} catch {\ttwo = true;\t}\tif (one && two){",
  "ok",
  0
 ],
 [
  "output.writeline($\"after 2nd call. newlabel = '{newlabel}'\");\tif (forcecreationinsecondary) {\tgrainsiloaddress = await grain.getruntimeinstanceid();\toutput.writeline( grainsiloaddress == primarysiloaddress ? \"recreated in primary\" : \"recreated in secondary\");\toutput.writeline( grainsiloaddress == primarysiloaddress ? \"recreated in primary\" : \"recreated in secondary\");\t}\t}\telse {\tvar secondex = await assert.throwsasync<orleansmessagerejectionexception>(() => grain.getlabel());\tassert.true( secondex.message.contains(\"duplicate activation\") || secondex.message.contains(\"non-existent activation\") || secondex.message.contains(\"forwarding failed\"), \"2nd exception message: \" + secondex);",
  "hello world",
  1
 ],
 [
  "if (child != null && child.name == \"methods\") {\tmethods = new xmlmethods ();\tmethods.loaddata (child);\tchild = child.nextsibling;\t}\tif (child != null && child.name == \"generic-parameters\") {\treturn;\t}\tif (child == null) return;\tif (child.name != \"classes\") {",
  "a",
  1
 ],
 [
  "public void getextobject1(xslinputtype xslinputtype, readertype readertype, outputtype outputtype, navtype navtype) {\tmyobject obj = new myobject(1, _output);\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addextensionobject(szdefaultns, obj);\tretobj = m_xsltarg.getextensionobject(szdefaultns);\tif (((myobject)retobj).myvalue() != obj.myvalue()) {",
  "set and retrieved value appear to be different",
  0
 ],
 [
  "{\tstring.empty, \"abc\", null }\t;\tforeach (bool a1 in boolvalues) {\tforeach (string a2 in stringvalues) {\tforeach (string a3 in stringvalues) {\tdynamic d1 = a1;\tstring d2 = a2;\tstring d3 = a3;\tif ((d1 ? d2 : d3) != (a1 ? a2 : a3)) {",
  "an exception has occurred while generating httpexception page",
  1
 ],
 [
  "public void writeattributes_9(xmlwriterutils utils, string tokentype) {\tstring strxml = \"\";\tswitch (tokentype) {\tcase \"documenttype\": if (isxpathdatamodelreader()) {\treturn;\t}\tstrxml = \"<!doctype root[]><root/>\";\tbreak;\tcase \"cdata\": if (isxpathdatamodelreader()) {",
  "test failed caught an unexpected exception",
  1
 ],
 [
  "public static void threadmethod_b() {\tfor (int h=0;h<10;h++) {\tint i=5;\tm[i].waitone();\tthread.sleep(4500);\t}\tfor (int h=0;h<10;h++) {\tint i=5;\tm[i].releasemutex();\t}",
  "thread b finished",
  0
 ],
 [
  "cleanupcache ();\tparsers = addinmanager.getextensionnodes<typesystemparsernode> (\"/monodevelop/typesystem/parser\");\tbool initialload = true;\taddinmanager.addextensionnodehandler (\"/monodevelop/typesystem/parser\", delegate (object sender, extensionnodeeventargs args) {\tif (!initialload) parsers = addinmanager.getextensionnodes<typesystemparsernode> (\"/monodevelop/typesystem/parser\");\t});\tinitialload = false;\ttry {\temptyworkspace = new monodevelopworkspace (null);\t} catch (exception e) {",
  "got but expected",
  1
 ],
 [
  "public static int mainmethod() {\tint failcount = 0;\tdynamic d = new first();\tif ((!(bool)(((second)d.m1()).m2().m3().m4())) || (testcount.callcount != 4)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public void nocheckload (eventargs e) {\tloading (this, e);",
  "load",
  0
 ],
 [
  "options.add (\"help\", \"\", sethelp, hidden: true);\t}\tif (!options.contains (\"?\")) {\toptions.add (\"?\", \"\", sethelp, hidden: true);\t}\tvar extra   = options.parse (arguments);\tif (extra.count == 0) {\tif (showhelp) {\treturn help.invoke (extra);\t}",
  "request missing service from assembly is not available",
  1
 ],
 [
  "public override void dispose() {\ttry {\tif (!_disposed) {\tif (_primarygroupmemberssearcher != null) {",
  "addnlinkedattrset dispose disposing primarygroupmemberssearcher",
  0
 ],
 [
  "using (var tcpclient = new tcpclient ()) {\ttry {\ttcpclient.connect (launchuri.host, launchuri.port);\tawait task.delay (timespan.fromseconds (1));\tbreak;\t} catch {\t}\t}\t}\tif (processtask.iscompleted) {",
  "got but expected",
  1
 ],
 [
  "m_xsltarg.removeparam(\"myarg2\", szempty);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (retobj != null) {\tassert.true(false);\t}\tboolean bf = (1 == 0);\tm_xsltarg.addparam(\"myarg4\", szempty, bf);\tm_xsltarg.removeparam(\"myarg4\", szempty);\tretobj = m_xsltarg.getparam(\"myarg4\", szempty);\tif (retobj != null) {",
  "started thread running concurrently",
  1
 ],
 [
  "}\tcatch (argumentexception e) {\tcerror.compare(w.writestate, (utils.writertype == writertype.charcheckingwriter) ? writestate.element : writestate.error, \"writestate should be error\");\treturn;\t}\tcatch (nullreferenceexception e) {\tcerror.compare(w.writestate, (utils.writertype == writertype.charcheckingwriter) ? writestate.element : writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "garbagecollectionend",
  1
 ],
 [
  "comm.append ((param.precision !=0 ) ? param.precision : precision);\tcomm.append (param.scale);\tif (param.value != null && param.value != dbnull.value && ((decimal)param.value) != decimal.maxvalue && ((decimal)param.value) != decimal.minvalue && ((decimal)param.value) != long.maxvalue && ((decimal)param.value) != long.minvalue && ((decimal)param.value) != ulong.maxvalue && ((decimal)param.value) != ulong.minvalue) {\tlong expo = (long)new decimal (system.math.pow (10, (double)param.scale));\tlong pval = (long)(((decimal)param.value) * expo);\tparam.value = pval;\t}\t}\tif (collation != null) {\t} else {",
  "addnlinkedattrset entering movenextforeign",
  1
 ],
 [
  "da.fill(ds, \"mono_adapter_test\");\tdatarow myrow;\tmyrow = ds.tables[\"mono_adapter_test\"].newrow();\tbyte[] bytes = new byte[] { 0x45,0x46,0x47,0x48,0x49,0x50 };\tmyrow[\"varchar2_value\"] = \"oracleclient\";\tmyrow[\"number_whole_value\"] = 22;\tmyrow[\"number_scaled_value\"] = 12.34;\tmyrow[\"number_integer_value\"] = 456;\tmyrow[\"float_value\"] = 98.76;\tmyrow[\"date_value\"] = new datetime(2001,07,09);",
  "test failed at call result",
  1
 ],
 [
  "static void run(object state) {\tthread.sleep(100);\twhile (true) {\tif (sd.parserservice.loadsolutionprojectsthread.isrunning) {\tthread.sleep(100);\t}\tabstractprojectbrowsertreenode node;\tlock (queue) {\tif (queue.count == 0) {",
  "calling taskstatemonitor waitall this will take a while",
  1
 ],
 [
  "s8.f4 = 4;\ts8.f5 = 5;\ts8.f6 = 6;\ts8.f7 = 7;\ts8.f8 = 8;\ts8 = mono_return_float8(s8, 906);\tif (s8.f1 != 1+906) {\treturn 1;\t}\tif (s8.f2 != 2+906) {",
  "got but expected",
  0
 ],
 [
  "static void rollbacktest (oracleconnection connection) {\toracletransaction transaction = connection.begintransaction ();\toraclecommand insert = connection.createcommand ();\tinsert.transaction = transaction;\tinsert.commandtext = \"insert into scott.emp (empno, ename, job) values (8787, 't coleman', 'monoist')\";",
  "onevent",
  1
 ],
 [
  "public static void usage (string message) {\tif (message != null) {\tconsole.writeline (\"{0}{1}{0}\", environment.newline, message);\t}",
  "options",
  0
 ],
 [
  "static private void help () {",
  "show data in a visualbasic friendly format",
  0
 ],
 [
  "promises.clear();\ttry {\tfor (int i = 0; i < ngames; i++) {\theartbeats[i].status.score = string.format(\"{0}:{1}\", iteration, iteration > 5 ? iteration - 5 : 0);\ttask t = presence.heartbeat(heartbeatdatadotnetserializer.serialize(heartbeats[i]));\tpromises.add(t);\t}\ttask.waitall(promises.toarray());\t}\tcatch (exception exc) {",
  "exception",
  0
 ],
 [
  "public void storeconfiguration() {\ttry {\tlayoutconfiguration current = layoutconfiguration.currentlayout;\tif (current != null && !current.readonly) {\tstring configpath = layoutconfiguration.configlayoutpath;\tdirectory.createdirectory(configpath);\tstring filename = path.combine(configpath, current.filename);",
  "saving layout file",
  0
 ],
 [
  "static void run() {\tprocess proc = new process();\tbool ret;\tproc.startinfo.filename=\"wibble\";\tproc.startinfo.arguments=\"arg1    arg2\\targ3 \\\"arg4a arg4b\\\"\";\tproc.startinfo.useshellexecute=false;\tret=proc.start();",
  "skipping test unable to find a not ready drive such as cd rom with no disc inserted",
  1
 ],
 [
  "case \"sybaseclient\": con = new sybaseconnection();\tbreak;\treturn;\treturn;\t#endif }\tcon.connectionstring = constr;\ttry {\tcon.open();\t}\tcatch(sqlexception se) {",
  "key",
  1
 ],
 [
  "protected override void generatetrycatchfinallystatement(codetrycatchfinallystatement e) {",
  "task got status code",
  1
 ],
 [
  "private void reportdefect (imetadatatokenprovider metadata, severity severity, confidence confidence, string mesg) {\t++defectcount;",
  "defect",
  0
 ],
 [
  "if (view.offset + view.size > size || view.offset + view.size < 0) {\tretval = false;\t}\telse if (view.endsentinel != nodes[view.offset + view.size + 1]) {\tretval = false;\t}\tif (view.views != views) {\tretval = false;\t}\tif (view.underlying != this) {",
  "test won t run until you perform following steps",
  1
 ],
 [
  "file.appendalltext(babysitterxmllist, fullxmlpath + environment.newline);\t} catch (exception e) {\t}\t}\t}\tif (verbose) {\tconsole.writeline ();\tconsole.writeline ();\t} else {\tconsole.writeline ();",
  "test s passed test s did not pass",
  0
 ],
 [
  "string docname;\tstring docstring;\tint helpcontext;\tstring helpfile;\tutypeinfo.getdocumentation(-1, out docname, out docstring, out helpcontext, out helpfile);\tif (docname.equals(\"guid\")) docname = \"system.guid\";\tif (!comtype) return typelib.resolvetypedef(docname, comtype);\treturn docname;\t}\telse {",
  "x ram attempt to marshal function pointers with al getprocaddress failed",
  1
 ],
 [
  "static void dump_user (string username) {\tmembershipuser user = membership.getuser (username, false);",
  "creation date",
  0
 ],
 [
  "static int main () {\ttype t = typeof (t);\tt obj = new t ();\tmethodbase m1;\tobj.a = 2;\tobj.v = 5;",
  "retrieve original value actual retrieved value",
  1
 ],
 [
  "private void dualmodeconnect_acceptasync_helper(ipaddress listenon, ipaddress connectto) {\tusing (socket serversocket = new socket(sockettype.stream, protocoltype.tcp)) {\tint port = serversocket.bindtoanonymousport(listenon);\tserversocket.listen(1);\tsocketasynceventargs args = new socketasynceventargs();\targs.completed += asynccompleted;\tmanualresetevent waithandle = new manualresetevent(false);\targs.usertoken = waithandle;\targs.socketerror = socketerror.socketerror;",
  "has",
  1
 ],
 [
  "public void writeattributes_12() {\txdocument doc = new xdocument();\txmlreader xr = createreader(path.combine(filepathutil.gettestdatapath(), path.combine(\"xmlwriter2\", \"xmlreader.xml\")));\twhile (xr.read()) {\tif (xr.localname == \"onehundredattributes\") {\txr.movetofirstattribute();\tbreak;\t}\t}\tif (xr.nodetype != xmlnodetype.attribute) {",
  "create parameters",
  1
 ],
 [
  "static void main () {\tappdomain domain = appdomain.createdomain (\"new-domain\");\tdomain.docallback (run);\ttype sttype = typeof (something<string, string>);\tother<string, string> st = (other<string, string>) domain.createinstanceandunwrap (sttype.assembly.fullname, sttype.fullname);",
  "hello",
  1
 ],
 [
  "} else if (args [j] == \"--exclude\") {\texclude [args [j + 1]] = args [j + 1];\tj += 2;\t} else if (args [j] == \"--exclude-test\") {\texclude_test.add (args [j + 1]);\tj += 2;\t} else if (args [j] == \"--run-only\") {\trun_only.add (args [j + 1]);\tj += 2;\t} else {",
  "storage account id",
  1
 ],
 [
  "public void bug2342986_starttaskmissingoncomputenode() {\taction test = () => {\tusing (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {\tcloudpool pool = batchcli.pooloperations.getpool(this.poolfixture.poolid);\tstarttask poolstarttask = pool.starttask;\tassert.notnull(poolstarttask);\tassert.notnull(poolstarttask.environmentsettings);\tienumerable<computenode> computenodes = pool.listcomputenodes();\tassert.true(computenodes.any());\tforeach (computenode computenode in computenodes) {",
  "checking start task of compute node",
  0
 ],
 [
  "public void condition (int x) {\tif (x == 0) {",
  "certificate opeation status status detail target issuer reference name",
  1
 ],
 [
  "protected override xslflags visituseattributeset(xslnode node) {\tattributeset attset;\tif (!_compiler.attributesets.trygetvalue(node.name, out attset)) {",
  "password for user",
  1
 ],
 [
  "markup.appendtaggedtext (theme, documentation, 0, maxparamcolumncount);\tmarkup.append (\"</span>\");\t}\tif (currentparameter >= 0 && currentparameter < item.parameters.length) {\tvar p = item.parameters [currentparameter];\tif (p.documentationfactory != null) {\ttry {\tdocumentation = p.documentationfactory (canceltoken).tolist ();\t} catch (exception e) {\tdocumentation = emptytaggedtextlist;",
  "heapreportstart",
  1
 ],
 [
  "public static void usage (string message) {\tif (message != null) {\tconsole.writeline (\"{0}{1}{0}\", environment.newline, message);\t}",
  "tlstest protocol class credentials x x time show url",
  0
 ],
 [
  "static bool buildx509chain (x509certificatecollection certs, x509chain chain, ref sslpolicyerrors errors, ref int status11) {\t#if mobile return false;\t#else if (is_macosx) return false;\tvar leaf = (x509certificate2)certs [0];\tbool ok;\ttry {\tok = chain.build (leaf);\tif (!ok) errors |= geterrorsfromchain (chain);\t} catch (exception e) {",
  "please report this problem to the mono team",
  0
 ],
 [
  "if (receivedbytes == 0) {\tthrow new exception(\"socket unexpectedly closed\");\t}\ttotal_bytes_received += receivedbytes;\tassert.true(total_bytes_received <= _current_bytes);\t_recvbufferindex += receivedbytes;\tassert.true(_recvbufferindex <= _bufferlen);\tif (_recvbufferindex == _bufferlen) {\t_recvbufferindex = 0;\tif (!sockettestmemcmp.compare(_sendbuffer, _recvbuffer)) {",
  "failed bool bool as circuiting operators",
  1
 ],
 [
  "private  void generatelinepragmaend(codelinepragma e) {\toutput.writeline();",
  "http too lazy",
  1
 ],
 [
  "private void thread_func() {",
  "thread in a thread",
  0
 ],
 [
  "protected override void generatecomment(codecomment e) {",
  "codecomment",
  0
 ],
 [
  "public override void run() {",
  "orleansazuresilos onstart starting orleans silo information",
  0
 ],
 [
  "private static bool inmethod() {\tint failcount = 0;\tif (testingmethod(25) != 25) {\tfailcount++;",
  "test failed conversion result is incorrect",
  0
 ],
 [
  "public async static task run (monodevelop.ide.gui.document doc) {\tvar ad = doc.analysisdocument;\tif (ad == null) return;\ttry {\tdocument newdocument = await sortandremoveasync (ad, default (cancellationtoken));\tad.project.solution.workspace.applydocumentchanges (newdocument, cancellationtoken.none);\t} catch (exception e) {",
  "error while removing unused usings",
  0
 ],
 [
  "static async task<int> testfinallywithgotoandreturn (int value) {\tfin = false;\ttry {\tif (value > 4) goto l;\tvalue += 10;\tif (value > 12) return 9;\t} finally {\tfin = true;",
  "test failed",
  1
 ],
 [
  "using (bitmap bmp = new bitmap (sinfile)) {\tbitmapdata data = bmp.lockbits (new rectangle (0, 0, bmp.width, bmp.height), imagelockmode.readonly, pixelformat.format24bpprgb);\ttry {\tassert.areequal (bmp.height, data.height, \"height\");\tassert.areequal (bmp.width, data.width, \"width\");\tassert.areequal (pixelformat.format24bpprgb, data.pixelformat, \"pixelformat\");\tint size = data.height * data.stride;\tunsafe {\tbyte* scan = (byte*) data.scan0;\t#if false for (int p = 0; p < size; p += 13) {",
  "verifying default ctsholding before open",
  1
 ],
 [
  "public void addextobject15(inputtype inputtype, readertype readertype, transformtype transformtype, doctype doctype) {\tmyobject obj = new myobject(15, _output);\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addextensionobject(szsimple, obj);\ttry {\tif ((loadxsl(\"myobjectdef.xsl\", inputtype, readertype) == 1)) transform_arglist(\"fruits.xml\", true, transformtype, doctype);\t}\tcatch (system.xml.xsl.xsltexception) {\treturn;\t}",
  "did not throw expected exception",
  0
 ],
 [
  "try {\tstate = e.exceptionstate;\t} catch (exception) {\tstateexc = true;\tquietly quits */ thread.resetabort ();\t}\tif (!stateexc) {\treturn 3;\t}\tif (remotingservices.istransparentproxy (e)) {",
  "exception is proxy",
  0
 ],
 [
  "int tests_passed = populatefailuretable (file, failed_tests, ignored_tests);\tfail_total += failed_tests.count;\tpass_total += tests_passed;\trun_total += failed_tests.count + tests_passed;\tif (failed_tests.count > 0) {\tsw.writeline (\"        <tr class='errorrow' onclick=\\\"toggle('el{0}')\\\" onmouseover='highlight(this)' onmouseout='unhighlight(this)'>\", assembly);\tsw.writeline (@\"            <td><img src='media/fail.png' /></td>\");\t} else {\tsw.writeline (@\"            <td><img src='media/pass.png' /></td>\");\t}",
  "test failed at call result",
  1
 ],
 [
  "public void discardafterclose() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {",
  "verifying discard method throws exception after a call to cloes",
  0
 ],
 [
  "public void validationcallback(object sender, validationeventargs args) {\tswitch (args.severity) {\tbwarningcallback = true;\twarningcount++;\tbreak;",
  "error",
  0
 ],
 [
  "environment.exit (1);\t}\tvar maps = new dictionary<string,string> () {\t{\"name\", \"assemblytitle\"}, {\"description\", \"assemblydescription\"}, {\"version\", \"assemblyversion\"}, {\"copyright\", \"assemblycopyright\"}\t};\tusing (textwriter writer = new streamwriter (outfile)) {\twriter.writeline ();\tforeach (keyvaluepair<string, string> map in maps) {\txattribute att = el.attribute (map.key);\tif (att == null || string.isnullorempty (att.value)) console.writeline (\"warning: missing {0} in addin file '{1}'.\", map.key, args[0]);",
  "fail",
  1
 ],
 [
  "public bool test () {",
  "todo",
  1
 ],
 [
  "protected override void addedtotree() {\ttry {\tif (isautoinvoked(constants.ignore_exception)) {\tinvoke(false, true, constants.ignore_exception);\tadddummy();\t}\t} catch (exception ex) {",
  "errors",
  1
 ],
 [
  "this.context.clientwritekey = keyblock.readbytes(this.keymaterialsize);\tthis.context.serverwritekey = keyblock.readbytes(this.keymaterialsize);\tif (this.ivsize != 0) {\tthis.context.clientwriteiv = keyblock.readbytes(this.ivsize);\tthis.context.serverwriteiv = keyblock.readbytes(this.ivsize);\t}\telse {\tthis.context.clientwriteiv = ciphersuite.emptyarray;\tthis.context.serverwriteiv = ciphersuite.emptyarray;\t}",
  "keyblock",
  0
 ],
 [
  "public void randomoperationstest() {\tint operationcount = this.randomoperationscount;\tvar expected = new sortedset<int>();\tvar actual = immutablesortedset<int>.empty;\tint seed = unchecked((int)datetime.now.ticks);",
  "writer writeline",
  1
 ],
 [
  "output.write (evaluator.getusing ());\toutput.flush ();\t}\tstatic public timespan time (action a) {\tdatetime start = datetime.now;\ta ();\treturn datetime.now - start;\t}\tstatic public void loadpackage (string pkg) {\tif (pkg == null){",
  "test x",
  1
 ],
 [
  "xdocument doc = new xdocument();\txmlreader xr = createreaderignorews(path.combine(filepathutil.gettestdatapath(), path.combine(\"xmlwriter2\", \"xmlreader.xml\")));\twhile (xr.read()) {\tif (xr.localname == \"middle\") {\txr.read();\txr.read();\tbreak;\t}\t}\tif (xr.nodetype != xmlnodetype.text) {",
  "ok",
  1
 ],
 [
  "public void displaydatasimple (idatareader reader) {\tint row = 0;\twhile (reader.read ()){\trow++;",
  "dfs",
  1
 ],
 [
  "public override object trackedvisitassignmentexpression(assignmentexpression assignmentexpression, object data) {\tif (this.associatedmember == null && this.currentcontext == visitorcontext.propertysetregion && assignmentexpression.op == assignmentoperatortype.assign && data != null) {\tif (!fileutility.isequalfilename(this.filename, this.membertofind.declaringtype.compilationunit.filename)) {\tthrow new invalidoperationexception(\"the propertyfieldassociationvisitor does currently not support the case that the field is declared in a different file than the property.\");\t}\tmemberresolveresult mrr = this.resolve(assignmentexpression.left) as memberresolveresult;\tif (mrr != null && mrr.resolvedmember is ifield && !((ifield)mrr.resolvedmember).islocalvariable) {\tpropertydeclaration pd;\t#endif if (data as bool? ?? false) {",
  "delegate invocation of one returned",
  1
 ],
 [
  "uri uri = new uri(\"file:\" + filename);\treloadsource(filename);\tdatareader.positiononelement(\"root\");\tdatareader.read();\tbpassed = cerror.equals(datareader.baseuri.contains(\"common/bug_62426.xml\"), true, \"before resolveentity\");\tif (isxmltextreader() || isxmlnodereader() || isxmlvalidatingreader()) {\tbpassed = datareader.verifynode(xmlnodetype.entityreference, \"bug62426\", string.empty);\tif (datareader.canresolveentity) {\tdatareader.resolveentity();\tdatareader.read();",
  "failed string string",
  1
 ],
 [
  "public void emitsource() {\twriteline();",
  "using system",
  0
 ],
 [
  "public static int test_0_abort_finally_after_throw () {\tfinally_done = false;\tresult = 0;\taction ac = guardfromeh0;\thandle = new manualresetevent (false);\tvar res = ac.begininvoke (null, null);\thandle.waitone ();\tthread.abort ();",
  "waiting on the long running operation to complete creating the certificate",
  1
 ],
 [
  "static bool callsecondclassindexer() {\tint failcount = 0; verify.firstcalled = false;\tif ( (!(bool)(((dynamic)firstclassreturnclass<int>.staticmethod())[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "skipping nameof usecallback callbackthrowsexception exceptionpropagatesasbaseexception",
  1
 ],
 [
  "public void testcase1() {\ttest<stringcompareisculturespecificissue>(@\" class test {\tvoid foo () {\t}\t}\", @\" class test {\tvoid foo () {",
  "foo bar",
  0
 ],
 [
  "writestatus(string.format(\"**lookupgrain finished ok. lookup result is:\"));\tvar list = lookupresult.addresses;\tif (list == null) {\twritestatus(string.format(\"**the returned activation list is null.\"));\treturn;\t}\tif (list.count == 0) {\twritestatus(string.format(\"**the returned activation list is empty.\"));\treturn;\t}",
  "there activations registered in the directory for this grain the activations are are is",
  0
 ],
 [
  "public void test(foo f) {",
  "error wrong number of parameters",
  1
 ],
 [
  "xmldocument coredoc = new xmldocument();\tcoredoc.load(srcdir + \"..\\\\bin\\\\icsharpcode.core.xml\");\treadxmldocu(coredoc, doozers, conditions);\tcomparison<xmlelement> comparison = delegate(xmlelement a, xmlelement b) {\tstring shortnamea = a.getattribute(\"name\").substring(a.getattribute(\"name\").lastindexof('.') + 1);\tstring shortnameb = b.getattribute(\"name\").substring(b.getattribute(\"name\").lastindexof('.') + 1);\treturn shortnamea.compareto(shortnameb);\t};\tdoozers.sort(comparison);\tconditions.sort(comparison);",
  "comparison results",
  1
 ],
 [
  "m_xsltarg = new xsltargumentlist();\tstring obj = \"0.00\";\tm_xsltarg.addextensionobject(\"myarg1\", obj);\tretobj = m_xsltarg.getextensionobject(\"myarg1\");\tif (retobj.tostring() != \"0.00\") {\tassert.true(false);\t}\tint i = 8;\tm_xsltarg.addextensionobject(\"myarg2\", i);\tretobj = m_xsltarg.getextensionobject(\"myarg2\");",
  "call stored procedure sp",
  1
 ],
 [
  "localdatastoreslot namedslot=thread.allocatenameddataslot(\"data-slot\");\ttest test = new test();\tthread thr=new thread(new threadstart(test.thread_func));\tthr.start();\tthread.sleep(1000);\tthread main=thread.currentthread;\tmain.name=\"wibble\";\tthread othermain=thread.currentthread;\tthread.sleep(0);\tif(monitor.tryenter(thr, 100)==true) {",
  "is not a strongly named assembly",
  1
 ],
 [
  "public static void main (string[] args) {",
  "throwing unserializable exception in appdomain",
  1
 ],
 [
  "fail(\"err_2288ajed a thread is in receivedevent and pinchangedevent\");\t}\tif (erroreventhandler.numeventshandled != numerrorevents) {\tfail(\"err_25158ajeiod a thread is in receivedevent and errorevent\");\t}\t++numreceivedevents;\treceivedeventhandler.resumehandleevent();\tthreadfound = true;\tbreak;\t}",
  "waiting for error event ms",
  0
 ],
 [
  "while (reader.peek () != -1) {\tstring line = reader.readline ();\tlinecount++;\tif (line.startswith (\"@\")) continue;\tint idx = line.indexof ('#');\tif (idx >= 0) line = line.substring (0, idx);\tif (line.length == 0) continue;\tint cp = int.parse (line.substring (0, 5), numberstyles.hexnumber);\tint collelemidx = collationelementtableutil.indexer.toindex (cp);\tif (collelemidx < 0) {",
  "warning handle character x in collation element table",
  0
 ],
 [
  "public void addmethodlists(ilist<methodlistwithdeclaringtype> methodlists) {\tif (methodlists == null) throw new argumentnullexception(\"methodlists\");\tbool[] ishiddenbyderivedtype;\tif (methodlists.count > 1) ishiddenbyderivedtype = new bool[methodlists.count];\telse ishiddenbyderivedtype = null;\tfor (int i = methodlists.count - 1; i >= 0; i--) {\tif (ishiddenbyderivedtype != null && ishiddenbyderivedtype[i]) {",
  "skipping methods in because they are hidden by an applicable method in a derived type",
  0
 ],
 [
  "if (diff != null) {\tstring diffhtml = string.empty;\tusing (var writer = new stringwriter ()) {\tstate.output = writer;\tac.compare ();\tdiffhtml = state.output.tostring ();\t}\tif (diffhtml.length > 0) {\tusing (var file = new streamwriter (diff)) {\tif (state.colorize) {",
  "added color green",
  0
 ],
 [
  "public void addparam14(object param, xslinputtype xslinputtype, readertype readertype, outputtype outputtype, navtype navtype) {\tstring baseline = path.combine(\"baseline\", (string)param);\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(\"myarg1\", szempty, \"test1\");\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);",
  "added value retrieved value",
  0
 ],
 [
  "private static streamwriter createbugreport (string[] source_texts, string[] source_names, string path) {\tstreamwriter bug_report = null;\ttry {\tbug_report = new streamwriter (path);",
  "net detection failed image has no cli header",
  1
 ],
 [
  "protected override void generateconditionstatement(codeconditionstatement e) {\toutput.write(\"if \");\tgenerateexpression(e.condition);",
  "ul",
  1
 ],
 [
  "public void ipinfotest_accessallipv4properties_noerrors() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfaceproperties ipproperties = nic.getipproperties();\tif (!nic.supports(networkinterfacecomponent.ipv4)) {\tvar nie = assert.throws<networkinformationexception>(() => ipproperties.getipv4properties());\tassert.equal(socketerror.protocolnotsupported, (socketerror)nie.errorcode);\tcontinue;\t}\tipv4interfaceproperties ipv4properties = ipproperties.getipv4properties();",
  "static intptr getunmanagedcallbacks out object keepalive",
  1
 ],
 [
  "try {\tothersharpdevelopversions = directory.getdirectories(path.combine(propertyservice.configdirectory, \"..\"));\t} catch (ioexception) {\tothersharpdevelopversions = new string[0];\t} catch (unauthorizedaccessexception) {\tothersharpdevelopversions = new string[0];\t}\tforeach (string path in othersharpdevelopversions) {\tstring dbfilename = path.combine(path, \"usagedata.dat\");\tif (file.exists(dbfilename)) {",
  "name",
  1
 ],
 [
  "string code = {\tpublic void main(string[] args) {\ttry {\t} catch (exception name) }\t}\";\tvar unit = syntaxtree.parse(code);\tvar type = unit.members.first() as typedeclaration;\tvar method = type.members.first() as methoddeclaration;\tbool passed = method.body.statements.firstordefault() is trycatchstatement;\tif (!passed) {",
  "could not install global menu",
  1
 ],
 [
  "try {\tw.writestartelement(\"root\");\tw.writename(variation.param.tostring());\tw.writeendelement();\t}\tcatch (argumentexception) {\tcheckelementstate(w.writestate);\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "if (!exists) order.add (key);\tdict [key] = value;\tif (exists) onchildreplaced (key, existing, value);\telse onchildadded (key, value);\t}\t}\tpublic void add (string key, pobject value) {\ttry {\tdict.add (key, value);\t} catch (exception e) {",
  "could not queue packages for uninstallation",
  1
 ],
 [
  "private static bool test1() {\tbool[] boolvalues = new bool[]\t{\ttrue, false }\t;\tforeach (bool a1 in boolvalues) {\tdynamic d1 = a1;\tif ((d1 || true) != (a1 || true)) {",
  "added value retrieved value",
  1
 ],
 [
  "nlilcontext = state.nativelayoutinfo.loadcontext;\t}\telse {\truntimetypehandle declaringtypehandle;\tmethodnameandsignature nameandsignature;\truntimetypehandle[] genericmethodarghandles;\tbool success = typeloaderenvironment.instance.trygetgenericmethodcomponents(context, out declaringtypehandle, out nameandsignature, out genericmethodarghandles);\tdebug.assert(success);\tdeftype declaringtype = (deftype)typesystemcontext.resolveruntimetypehandle(declaringtypehandle);\tinstantiatedmethod methodcontext = (instantiatedmethod)typesystemcontext.resolvegenericmethodinstantiation( false, declaringtype, nameandsignature, typesystemcontext.resolveruntimetypehandles(genericmethodarghandles), intptr.zero, false);",
  "building floating dictionary layout for method",
  0
 ],
 [
  "public void loadgeneric5(object param, xslinputtype xslinputtype, readertype readertype, outputtype outputtype, navtype navtype) {\tstring baseline = path.combine(\"baseline\", (string)param);\tfor (int i = 0; i < 100; i++) {\tif (loadxsl(\"showparam.xsl\", xslinputtype, readertype) != 1) {",
  "failed to load stylesheet showparam xsl on the attempt",
  0
 ],
 [
  "writeline (\"\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twriteline (\"\");\t}\twritelineind (\"{\");\twriteline (\"system.collections.hashtable readmethods = null;\");\twriteline (\"system.collections.hashtable writemethods = null;\");\twriteline (\"system.collections.hashtable typedserializers = null;\");\twriteline (\"\");",
  "number of versions of key in the vault",
  1
 ],
 [
  "}\tif (xevent.clientmessageevent.message_type == atoms.postatom) {\tmsg.hwnd = xevent.clientmessageevent.ptr1;\tmsg.message = (msg) xevent.clientmessageevent.ptr2.toint32 ();\tmsg.wparam = xevent.clientmessageevent.ptr3;\tmsg.lparam = xevent.clientmessageevent.ptr4;\tif (msg.message == (msg)msg.wm_quit) return false;\telse return true;\t}\tif (xevent.clientmessageevent.message_type == atoms._xembed) {",
  "sort sorts the output po file",
  1
 ],
 [
  "return 42;\t});\tf1.wait();\ttinner.start();\ttinner.wait();\ttask t2 = task.run(() => {\ttinner = new task(() => { }, taskcreationoptions.attachedtoparent);\ttask returntask = task.factory.startnew(() => { });\treturn returntask;\t});",
  "runruntests attachtoparentignored waiting on outer task unwrap style if we hang that s a failure",
  0
 ],
 [
  "if ( --level == 0) {\ttrace.writeline( \"############################################################################\" );\tif (messages.count == 0) {\t}\telse {\tforeach ( string s in messages ) {\ttrace.writeline(s);\t}\t}\ttrace.writeline( \"############################################################################\" );",
  "clientwritekey",
  1
 ],
 [
  "byte[] aj = new byte[sizeof(nativemethods.paletteentry) * 256];\tfixed (byte* pcolors = pbmi.bmicolors) {\tfixed (byte* ppal = aj) {\tnativemethods.rgbquad* prgb = (nativemethods.rgbquad*)pcolors;\tnativemethods.paletteentry* lppe = (nativemethods.paletteentry*)ppal;\tint ccolors = 1 << pbmi.bmiheader_bibitcount;\tif (ccolors <= 256) {\tuint palret;\tintptr palhalftone = intptr.zero;\tif (hpal == intptr.zero) {",
  "usage mautil options command arguments",
  1
 ],
 [
  "rsa rsa = cryptoconvert.fromcapipublickeyblob (publickey, 12);\tstrongname sn = new strongname (rsa);\tif (sn.verify (assemblyname)) {\treturn 0;\t}\telse {\treturn 1;\t}\t}\telse {",
  "adamstorectx populatauxobjectlist unable to read schemanamingcontrext from",
  1
 ],
 [
  "stringbuilder psb;\tif (properties.trygetvalue (name, out psb)) {\trsb.appendformat (\"## configuration{0}{0}\", environment.newline);\trsb.appendformat (\"some elements of this rule can be customized to better fit your needs.{0}{0}\", environment.newline);\trsb.append (psb);\trsb.appendline ();\t}\twriter.writeline (rsb);\tif (version == \"git\") {\twriter.writeline ();",
  "did not throw exception",
  1
 ],
 [
  "var alloc = allocation;\tusing (var cr = cairohelper.create (evnt.window)) {\tcr.translate (alloc.x, alloc.y);\tcr.translate (xexpandedoffset * (1 - scale), yexpandedoffset * (1 - scale));\tvar scalex = (alloc.width / userspacearea.width - 1) * scale + 1;\tvar scaley = (alloc.height / userspacearea.height - 1) * scale + 1;\tcr.scale (scalex, scaley);\tdraw (cr, userspacearea);\t}\t} catch (exception e) {",
  "length",
  1
 ],
 [
  "if (d0['a'] != 14) ispass &= false;\telse ispass &= true;\t}\ttry {\td1['a'] = 0;\tispass &= false;\t}\tcatch (microsoft.csharp.runtimebinder.runtimebinderexception ex) {\tret = errorverifier.verify(errormessageid.inaccessiblesetter, ex.message, \"mystruct.this[char]\");\tif (!ret) {",
  "error message is wrong",
  0
 ],
 [
  "public void trials () {",
  "name",
  1
 ],
 [
  "}\tconsole.writeline (\");\");\tif (c [0] != 'v') console.writeline ($\"\\t*({typetosigtype (c [0])}*)margs->retval = res;\");\tconsole.writeline (\"\\n}\\n\");\t}\tconsole.writeline (\"{\");\tfor (int i = 0; i < cookies.length; ++i) {\tvar c = cookies [i];\tconsole.write (\"\\t\");\tif (i > 0) console.write (\"else \");",
  "wasm invoke c tolower target func margs",
  0
 ],
 [
  "public void dumpreader (xmlreader xr, bool attvalue) {",
  "verifying empty string newline",
  1
 ],
 [
  "public override void moduleloaded (ulong threadid, uint id, ulong startcounter, ulong endcounter, string name, bool success) {",
  "integer integer",
  1
 ],
 [
  "public f (int value) : base (11) {",
  "int",
  0
 ],
 [
  "static void trygdb (int pid, processdata data) {\tstring filename = path.gettempfilename ();\tusing (streamwriter sw = new streamwriter (new filestream (filename, filemode.open, fileaccess.write))) {",
  "info threads",
  0
 ],
 [
  "}\t#region test helpers private class bug1770942retrypolicy : iretrypolicy {\tpublic int numtimescalled { get; private set; }\tprivate readonly itestoutputhelper testoutputhelper;\tpublic bug1770942retrypolicy(itestoutputhelper testoutputhelper) {\tthis.testoutputhelper = testoutputhelper;\t}\tpublic task<retrydecision> shouldretryasync(exception exception, operationcontext operationcontext) {\ttimespan retryinterval = timespan.zero;\tthis.numtimescalled++;",
  "foo",
  1
 ],
 [
  "public void usingalias () {\tevaluator.run(\"using system;\");\tevaluator.run(\"using myconsole = system.console;\");",
  "issued from",
  1
 ],
 [
  "static void prints (string s, object x) {",
  "verifying parity odd and then mark",
  1
 ],
 [
  "static void main (string[] args) {",
  "verifying zero readtimeout before open with readbyte",
  1
 ],
 [
  "public void start () {\tvalidatemonodevelopbinpath ();\tsetupidelogfolder ();\tstring profilepath = util.createtmpdir ();\tfolderstoclean.add (profilepath);\tif (profileroptions.type != stresstestoptions.profileroptions.profilertype.disabled) {\tif (profileroptions.mlpdoutputpath == null) profileroptions.mlpdoutputpath = path.combine (profilepath, \"profiler.mlpd\");\tprofilerprocessor = new profilerprocessor (profileroptions);\tstring monopath = environment.getenvironmentvariable (\"path\") .split (path.pathseparator) .select (p => path.combine (p, \"mono\")) .firstordefault (s => file.exists (s));\ttestservice.startsession (monopath, profilepath, $\"{profilerprocessor.getmonoarguments ()} \\\"{monodevelopbinpath}\\\"\");",
  "successfully registered type",
  1
 ],
 [
  "static void taskscheduler_unobservedtaskexception (object sender, unobservedtaskexceptioneventargs e) {\tunobserved = true;",
  "unobserved",
  0
 ],
 [
  "public void setlength_open_close() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tcom.open();\tstream serialstream = com.basestream;\tcom.close();",
  "error trust evaluation is incomplete",
  1
 ],
 [
  "failcount += 1;\t}\ttry {\tvar a = new wrongcasefriendassembly.internalclass(@private: false);\t} catch (memberaccessexception) {\t}\ttry {\tvar a = new wrongcasefriendassembly.internalclass(@internal: 0);\t} catch (memberaccessexception) {\tfailcount += 1;",
  "exception",
  1
 ],
 [
  "if (datareader.nodetype != xmlnodetype.element) {\tstring nodetype = datareader.nodetype.tostring();\tbool flag = true;\ttry {\tdatareader.readsubtree();\t}\tcatch (invalidoperationexception) {\tflag = false;\t}\tif (flag) {",
  "readsubtree doesn t throw invalidop exception on nodetype",
  0
 ],
 [
  "if (variation.param.tostring() == \"null\") temp = null;\telse temp = string.empty;\tw.writenmtoken(temp);\tw.writeendelement();\t}\tcatch (argumentexception) {\tcheckelementstate(w.writestate);\treturn;\t}\t}",
  "verifying read method throws exception with a failed call to open",
  1
 ],
 [
  "sn8.f4 = 4;\tsn8.f5 = 5;\tsn8.f6 = 6;\tsn8.f7 = 7;\tsn8.nested2.f8 = 8;\tsn8 = mono_return_short8_nested(sn8, 90);\tif (sn8.nested1.f1 != 1+90) {\treturn 1;\t}\tif (sn8.f2 != 2+90) {",
  "nested got but expected",
  0
 ],
 [
  "public void ipinfotest_accessallproperties_noerrors() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {",
  "nic",
  0
 ],
 [
  "list<cloudtask> tasks = boundjob.listtasks().tolist();\tcloudtask mycompletedtask = tasks.single();\tforeach (cloudtask curtask in tasks) {\t}\tboundpool.refresh();\tstring stdout = mycompletedtask.getnodefile(constants.standardoutfilename).readasstring();\tstring stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();\tthis.testoutputhelper.writeline(stdout);\tthis.testoutputhelper.writeline(stderr);\tforeach (nodefile curfile in mycompletedtask.listnodefiles(recursive: true)) {",
  "file path",
  0
 ],
 [
  "try {\tbool runhandler = false;\ttry {\tif (s_globalflag = !s_globalflag) {\treturn test(recurselevel - 2);\t}\telse {\trunhandler = true;\tint[] p = null;\tp[0] = 0;",
  "dns suffix",
  1
 ],
 [
  "static private void dumpdecimalhelperparts(int index) {\tsqldecimal sqldecimalvalue = 10;\tconsole.writeline(\"static private readonly uint32[] {0} = {{\", helpernames[index]);\tfor (int precision = 2; precision <= sqldecimal.maxprecision; precision++){",
  "resourceassembly is null",
  1
 ],
 [
  "public void testaddbracestoif() {\ttest<addbracesaction>(@\"class testclass {\tvoid test () {\t}\t}\",@\"class testclass {\tvoid test () {\tif (true) {",
  "abstractdesignergenerator reparse primary file is unavailable",
  1
 ],
 [
  "public override void dispose () {\tif (disposed) return;\tdisposed = true;",
  "trying to close designer gui thread",
  0
 ],
 [
  "static private void help () {\tconsole.writeline ();",
  "other options",
  0
 ],
 [
  "private void accumulatedestroyedhandles (control c, arraylist list) {\tif (c != null) {\tcontrol[] controls = c.controls.getallcontrols ();\tif (c.ishandlecreated && !c.isdisposed) {\tx11hwnd hwnd = (x11hwnd)hwnd.objectfromhandle(c.handle);",
  "parent x window is x",
  0
 ],
 [
  "static void main(string[] args) {\tappdomain hostdomain = appdomain.createdomain(\"orleanshost\", null, new appdomainsetup {\tappdomaininitializer = initsilo, appdomaininitializerarguments = args, });",
  "orleans silo is running press enter to terminate",
  0
 ],
 [
  "public void parseassembly (byte[] data, string version, string name, string fullname, bool dump_asm, bool dump_ver, bool dump_guids_for_msbuild) {\tvar a = assembly.reflectiononlyload (data);\tvar m = a.getmodules ()[0];\tvar id = m.moduleversionid.tostring ().toupper ();\tvar hash_code = hash (id).tostring (\"x\");\tvar str = filetoenum (name);\tstring ver_str = version + \" \" + filetomoniker (fullname);\tvar ver = a.getname ().version;\tif (dump_ver) {",
  "error in line",
  1
 ],
 [
  "private bool movenextlocal() {\tbool needtoretry;\tdo {\tneedtoretry = false;\tobject[] nativemembers = new object[1];\tbool f = _membersenumerator.movenext();\tif (f) {",
  "sammembersset movenextlocal got a value from the enumerator",
  0
 ],
 [
  "writeline(\"_reader = reader;\");\twriteline(\"_offset = reader.decodeunsigned(offset, out _remaining);\");\twriteline($\"_current = default({elementtypename});\");\tclosescope();\topenscope($\"public {elementtypename} current\");\topenscope(\"get\");\tclosescope();\tclosescope(\"current\");\topenscope(\"public bool movenext()\");\twriteline(\"if (_remaining == 0)\");",
  "remaining",
  0
 ],
 [
  "if (s6.f2 != 2+9) {\treturn 2;\t}\tif (s6.f3 != 3+9) {\treturn 3;\t}\tif (s6.f4 != 4+9) {\treturn 4;\t}\tif (s6.f5 != 5+9) {",
  "got but expected",
  0
 ],
 [
  "xmldocument doc = null;\ttry {\tdoc = new xmldocument ();\tdoc.loadxml (xml);\t} catch (xmlexception ex) {\tmonitor.reporterror (ex.message, ex);\taddtask (filename, ex.message, ex.lineposition, ex.linenumber, taskseverity.error, workspaceobject);\terror = true;\t}\tif (error) {",
  "validation failed",
  0
 ],
 [
  "private static int main(string[] args) {\ttry {\treturn new program().run(args);\t}\tcatch (exception e) {",
  "step",
  1
 ],
 [
  "public static void createxsltstylesheetwcopytestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<xsl:stylesheet version=\\\"1.0\\\" xmlns:xsl=\\\"http: tw.writeline(\"<xsl:template match=\\\"/\\\">\");\ttw.writeline(\"<xsl:copy-of select=\\\"/\\\" />\");",
  "press enter to continue",
  1
 ],
 [
  "var lce = ce as linkcommandentry;\tif (lce != null) {\tadditem (new mdlinkmenuitem (lce));\tcontinue;\t}\tcommand cmd = ce.getcommand (manager);\tif (cmd == null) {\tcontinue;\t}\tif (cmd is customcommand) {",
  "error task in unknown state",
  1
 ],
 [
  "public static bool verifynode(xmlreader r, xmlnodetype eexpnodetype, string strexpname, string strexpvalue) {\tbool bpassed = true;\tif (r.nodetype != eexpnodetype) {",
  "using system",
  1
 ],
 [
  "public xmlschema loadschema(string path, string baseuri) {\tstring includeuri = path.getfullpath(baseuri);\tstring correcturi = path.getfullpath(path);",
  "correct uri",
  0
 ],
 [
  "public static int test_1225_marshal_inout_array () {\tint [] a1 = new int [50];\tfor (int i = 0; i < 50; i++) a1 [i] = i;\tint res = mono_test_marshal_inout_array (a1);\tfor (int i = 0; i < 50; i++) if (a1 [i] != 50 - i) {",
  "lc c filename t targetassembly i references v o nologo",
  1
 ],
 [
  "public static void gencase (streamwriter w, string rettype, string retval, string[] types, string[] values) {\ttestid_gen ++;\tstring callee_name = \"meth_\" + testid_gen;\tw.write (\"\\t\\t\");\tif (rettype != \"void\") w.write (rettype + \" res = (\" + rettype + \")\");\tw.write (\"typeof (tests).getmethod (\\\"\" + callee_name + \"\\\").invoke (null, new object [] { \");\twritelist (w, values);\tw.writeline (\"});\");\tif (rettype != \"void\") w.writeline (\"\\t\\tif (res !=  \" + retval + \") return 1;\");",
  "int arrays",
  1
 ],
 [
  "public void updateblobs() {\tstring testdatafilepath = gettestdatafilepath();\tstring[] coretypeblobs = serializableequalitycomparers_memberdata() .concat(serializableobjects_memberdata()) .select(record => binaryformatterhelpers.tobase64string(record[0])) .toarray();\tvar (numberofblobs, numberoffoundblobs, numberofupdatedblobs) = updatecoretypeblobs(testdatafilepath, coretypeblobs);",
  "numberofblobs existing blobs environment newline numberoffoundblobs found blobs with regex search environment newline numberofupdatedblobs updated blobs with regex replace",
  0
 ],
 [
  "public static void libyatimezone() {\ttimezoneinfo tripoli;\ttry {\ttripoli = timezoneinfo.findsystemtimezonebyid(s_strlibya);\t}\tcatch (exception /* timezonenotfoundexception in netstandard1.7 test*/ ) {",
  "warning libya time zone is not exist in this machine",
  0
 ],
 [
  "private void addmethod () {\tforeach (var method in class.methods) {\tif(method.name==\".ctor\") continue;\ttry {\tstring key = method.fullname + \" \" + serializeparameters(method);\tif(methods.containskey(key)) continue;\tmethods.add(key, new methodproperties(method));\tmethods[key].parentclass = this;\t} catch (exception ex) {",
  "finished",
  1
 ],
 [
  "public void lock (simlock lk, string frame) {\tforeach (lockrecord lr in locks) {",
  "error tried to acquire lock at while holding at",
  0
 ],
 [
  "i += 2;\t} else if (args [i] == \"--verbose\") {\tverbose = true;\ti ++;\t} else if (args [i] == \"--repeat\") {\tif (i + 1 >= args.length) {\treturn 1;\t}\trepeat = int32.parse (args [i + 1]);\tif (repeat <= 1) {",
  "error while scanning json",
  1
 ],
 [
  "try {\tunchecked {\tushort rez2 = (ushort)-d;\t}\t}\tcatch (system.overflowexception) {\texception = false;\t}\tfinally {\tif (exception) rez++;",
  "assert areequal scan",
  1
 ],
 [
  "private principalsearchresult<principal> findall(bool returnone) {\tglobaldebug.writelineif(globaldebug.info, \"principalsearcher\", \"entering findall, returnone=\" + returnone.tostring());\tif (_qbefilter == null) throw new invalidoperationexception(sr.principalsearchermustsetfilter);\tif (!_qbefilter.unpersisted) throw new invalidoperationexception(sr.principalsearcherpersistedprincipal);\tif (hasreferentialpropertiesset()) throw new invalidoperationexception(sr.principalsearchernonreferentialprops);",
  "principalsearcher findall qbefilter is non null and passes",
  0
 ],
 [
  "output.write(\">\");\tif (showlinenumbers) {\toutput.write(\"<span\");\twritestyle(output, linenumberstyle);\toutput.write('>');\toutput.write(linenumber.tostring().padleft(longestnumberlength));\toutput.write(\":  \");\toutput.write(\"</span>\");\t}\tprintwords(output, line);",
  "using system runtime remoting metadata",
  1
 ],
 [
  "private void writeservicepoint (servicepoint sp) {",
  "principalcollectionenumerator movenext resultset mode found remove skipping",
  1
 ],
 [
  "}\tcatch (filenotfoundexception e1) {\t_output.writeline(e1.tostring());\t}\tcatch (fileloadexception e2) {\t_output.writeline(e2.tostring());\t}\t}\t}\tcatch (exception e) {",
  "exception",
  0
 ],
 [
  "public static int main () {\tassembly thisasm = assembly.getexecutingassembly ();\tassemblyname name = thisasm.getname (false);\tif (name.flags != (assemblynameflags.enablejitcompileoptimizer | assemblynameflags.retargetable | assemblynameflags.publickey)) return 1;\tbyte[] key = name.getpublickey ();\tif (key.length != 160) return 2;\tif (key [56] != 170) return 3;\tif (name.hashalgorithm != system.configuration.assemblies.assemblyhashalgorithm.sha1) return 4;\tif (name.versioncompatibility != system.configuration.assemblies.assemblyversioncompatibility.samemachine) return 6;",
  "default",
  1
 ],
 [
  "public void addextobject15(inputtype inputtype, readertype readertype, transformtype transformtype, doctype doctype) {\tmyobject obj = new myobject(15, _output);\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addextensionobject(szsimple, obj);\ttry {\tif ((loadxsl(\"myobjectdef.xsl\", inputtype, readertype) == 1)) transform_arglist(\"fruits.xml\", true, transformtype, doctype);\t}\tcatch (system.xml.xsl.xsltexception) {\treturn;\t}",
  "error clearing recent projects list",
  1
 ],
 [
  "do {\tf = getnextsearchresult();\tneedtoretry = false;\tif (f) {\tsearchresult currentsr = (searchresult)_membersearchresultsenumerator.current;\tstring memberdn = (string)currentsr.properties[\"distinguishedname\"][0];\tif ((!adutils.isofobjectclass(currentsr, \"group\")) && (!adutils.isofobjectclass(currentsr, \"user\")) && (!adutils.isofobjectclass(currentsr, \"foreignsecurityprincipal\"))) {\tneedtoretry = true;\t}\telse if (_recursive && adutils.isofobjectclass(currentsr, \"group\")) {",
  "addnlinkedattrset movenextmembersearcher adding to groupstovisit",
  0
 ],
 [
  "public static async task launchbrowser (string appurl, string launchurl, task processtask) {\tlaunchurl = launchurl ?? \"\";\turi launchuri;\tif (!uri.trycreate (launchurl, urikind.absolute, out launchuri)) {\turi appuri;\tif (!uri.trycreate (appurl, urikind.absolute, out appuri)) {\treturn;\t}\tif (!uri.trycreate (launchurl, urikind.relative, out launchuri)) {",
  "failed to launch browser because invalid launch url",
  0
 ],
 [
  "if (0 != com2.bytestoread) {\tfail(\"error!!! bytestoread={0} expected 0\", com2.bytestoread);\t}\tint expectedindex = 0, actualindex = 0;\tfor (; expectedindex < expectedbytes.length && actualindex < rcvbytes.length; ++expectedindex, ++actualindex) {\tif (expectedbytes[expectedindex] != rcvbytes[actualindex]) {\tif (actualindex != rcvbytes.length - 1 && expectedbytes[expectedindex] == rcvbytes[actualindex + 1]) {\tactualindex++;\t}\telse {",
  "bytes sent",
  0
 ],
 [
  "public static int main(string[] args) {\tfirstouter.firstinner.first v1 = new firstouter.firstinner.first();\tfirstouter.second v2 = new firstouter.second();\tfirstouter.secondinner.third v3 = new firstouter.secondinner.third();\tfirstouter.firstinner.fourth v4 = new firstouter.firstinner.fourth();\tfifth v5 = new fifth();",
  "verifying random parityreplace with read char int int",
  1
 ],
 [
  "if (result != null) {\tstring xmloutput = createxmloutput(result);\tresultsummarizer summary = new resultsummarizer(result);\tif (options.xmlconsole) {\tconsole.writeline(xmloutput);\t}\telse {\twritesummaryreport(summary);\tbool haserrors = summary.errors > 0 || summary.failures > 0 || result.iserror || result.isfailure;\tif (options.stoponerror && (haserrors || summary.notrunnable > 0)) {",
  "test run was stopped after first error as requested",
  0
 ],
 [
  "public bool stop() {\tbool ok = false;\ttry {\tsilohost.stoporleanssilo();",
  "orleans silo shutdown",
  0
 ],
 [
  "writelineuni (\"}\");\twriteline (\"\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twriteline (\"\");\tforeach (generationresult res in generatedmaps) {\tres.serializerclassname = getuniqueclassname (res.mapping.elementname + \"serializer\");\twritelineind (\"{\");\twritelineuni (\"}\");\twriteline (\"\");",
  "protected override object deserialize system xml serialization xmlserializationreader reader",
  0
 ],
 [
  "public void eventsandprocessingorder () {\tvar asm = assembly.getexecutingassembly ();\tvar context = new xamlschemacontext (new assembly [] { asm });\tvar output = xamarinbug3003.testcontext.writer;\toutput.writeline ();\tvar reader = new xamlxmlreader (xmlreader.create (new stringreader (xamarinbug3003.testcontext.xmlinput)), context);\tvar writersettings = new xamlobjectwritersettings ();\twritersettings.afterbegininithandler = (sender, e) => {",
  "verifying write method with a random newline string and writing a string that contains the newline",
  1
 ],
 [
  "static int async_func (int a) {",
  "test failed conversion result is incorrect",
  1
 ],
 [
  "public void setschemasettonull() {\txmlschemavalidator val;\ttry {\tval = new xmlschemavalidator(new nametable(), null, new xmlnamespacemanager(new nametable()), allflags);\t}\tcatch (argumentnullexception) {\treturn;\t}",
  "adstorectx updategroupmembership add",
  1
 ],
 [
  "}\tschedule sched = curwi.schedule;\tif (null == sched) {\t}\telse {\t}\tjobschedulestatistics stats = curwi.statistics;\tif (null == stats) {\t}\telse {",
  "resourcetoolkit nrefactoryastcacheservice resolvelowlevel failed project is null for file",
  1
 ],
 [
  "protected override string generateinfo (string filename) {\ttry {\tvar doc = typesystemservice.parsefile (null, filename, desktopservice.getmimetypeforuri (filename), stringtextsource.readfrom (filename)).result as webformsparseddocument;\tif (doc != null && !string.isnullorempty (doc.info.inheritedclass)) return doc.info.inheritedclass;\t} catch (exception ex) {",
  "addnlinkedattrset movenextmembersearcher using as current",
  1
 ],
 [
  "break;\treturn;\treturn;\t#endif }\tcon.connectionstring = constr;\ttry {\tcon.open();\t}\tcatch(sqlexception se) {\tforeach(sqlerror error in se.errors) {",
  "message",
  0
 ],
 [
  "public static void main () {\tfloat width = 400.0f;\tfloat height = 800.0f;\tfontcollection ifc = new installedfontcollection ();\tforeach (fontfamily ffm in ifc.families) {\tconsole.writeline (ffm.name);\t}\tfont f = new font (\"arial\",12);",
  "using internal lowlevellinq",
  1
 ],
 [
  "public bool onpromptusernameandpassword (intptr title, intptr text, intptr chkmsg, ref bool chkstate, out intptr username, out intptr password) {\t#if debug ongeneric (\"onpromptusernameandpassword\");",
  "onpromptusernameandpassword",
  0
 ],
 [
  "public virtual void mymethod () {",
  "this is me",
  0
 ],
 [
  "public static void createlinenumbertestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<?xml version=\\\"1.0\\\" ?>\");\ttw.writeline(\" <element a0='a0&e1;v' a1='a1value' a2='a2&e1;v'><embedded /></element>\");\ttw.writeline(\"<?pi1?>\");\ttw.writeline(\"<base64>9f6hju++</base64>\");",
  "datetime datetime",
  0
 ],
 [
  "public static void creategenerictestfile(string strfilename) {\tmemorystream ms = new memorystream();\ttextwriter tw = new streamwriter(ms);\ttw.writeline(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"no\\\"?>\");\ttw.writeline(\"<!-- comment1 -->\");\ttw.writeline(\"<?pi1a?>\");\ttw.writeline(\"<?pi1b?>\");\ttw.writeline(\"<?pi1c?>\");",
  "nic",
  1
 ],
 [
  "private static bool inforstatement() {\tint failcount = 0;\tbool origin = false;\tdynamic d = origin;\tfor (; d;) {\tfailcount++;",
  "h number add a path length restriction to the certificate chain",
  1
 ],
 [
  "private static principal findbyidentitywithtypehelper(principalcontext context, type principaltype, nullable<identitytype> identitytype, string identityvalue, datetime refdate) {\tprincipal p = context.queryctx.findprincipalbyidentref(principaltype, (identitytype == null) ? null : (string)identmap.stringmap[(int)identitytype, 1], identityvalue, refdate);\tif (p != null) {\treturn p;\t}\telse {",
  "test",
  1
 ],
 [
  "using (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();\tserportprop.setallpropertiestodefaults();\tserportprop.setproperty(\"portname\", tcsupport.localmachineserialinfo.firstavailableportname);\tserportprop.verifypropertiesandprint(com1);\tcom1.open();\tserportprop = new serialportproperties();\tserportprop.setallpropertiestoopendefaults();\tserportprop.setproperty(\"portname\", tcsupport.localmachineserialinfo.firstavailableportname);\tserportprop.verifypropertiesandprint(com1);",
  "verifying default readbuffersize after close",
  0
 ],
 [
  "public void dump (textwriter tw) {\tvar set = new hashset<symvalue> ();\tvar worklist = new worklist<symvalue> ();\tiimmutablemap<symvalue, int> triggers = immutableintkeymap<symvalue, int>.empty (symvalue.getuniquekey);",
  "egraphid",
  0
 ],
 [
  "if (this.synchronizingobject != null && this.synchronizingobject.invokerequired) this.synchronizingobject.begininvoke(exited, new object[]{this, eventargs.empty});\telse exited(this, eventargs.empty);\t}\t}\t[resourceexposure(resourcescope.none)]\t[resourceconsumption(resourcescope.machine, resourcescope.machine)]\tsafeprocesshandle getprocesshandle(int access, bool throwifexited) {\tdebug.writelineif(processtracing.traceverbose, \"getprocesshandle(access = 0x\" + access.tostring(\"x8\", cultureinfo.invariantculture) + \", throwifexited = \" + throwifexited + \")\");\t#if debug if (processtracing.traceverbose) {\tstackframe calledfrom = new stacktrace(true).getframe(0);",
  "called from line",
  0
 ],
 [
  "assert.true(false);\t}\tm_xsltarg.addparam(\"myarg5\", szempty, d5);\tretobj = m_xsltarg.getparam(\"myarg5\", szempty);\tif (!d5.equals(retobj)) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg6\", szempty, d6);\tretobj = m_xsltarg.getparam(\"myarg6\", szempty);\tif (!d6.equals(retobj)) {",
  "retrieved",
  0
 ],
 [
  "if (!environment.userdomainname.equals(string.empty)) user = environment.userdomainname + \"\\\\\" + environment.username;\toracleconnection con = new oracleconnection(\"data source=palis;integrated security=true\");\ttry {\tcon.open();\toraclecommand cmd = con.createcommand();\tcmd.commandtext = \"select user from dual\";\toracledatareader reader = cmd.executereader();\tcon.close();\t}\tcatch (exception e) {",
  "compiler said value is",
  1
 ],
 [
  "public void buildrepository (iprogressstatus statusmonitor, string path) {\tstring mainpath = path.combine (path, \"main.mrep\");\tarraylist alladdins = new arraylist ();\trepository rootrep = (repository) addinstore.readobject (mainpath, typeof(repository));\tif (rootrep == null) rootrep = new repository ();\tiprogressmonitor monitor = progressstatusmonitor.getprogressmonitor (statusmonitor);\tbuildrepository (monitor, rootrep, path, \"root.mrep\", alladdins);\taddinstore.writeobject (mainpath, rootrep);\tgenerateindexpage (rootrep, alladdins, path);",
  "second finally block",
  1
 ],
 [
  "public task<string> d2method() {",
  "calling",
  0
 ],
 [
  "var statstasks = new list<task<tuple<guid, string, list<tuple<datetime, datetime>>>>>();\tfor (int i = 0; i < numberofcalls; i++) statstasks.add(grain.getcallstats());\tawait task.whenall(promises);\tvar responsespersilo = statstasks.select(t => t.result).groupby(s => s.item2);\tforeach (var silogroup in responsespersilo) {\tvar silo = silogroup.key;\thashset<guid> activations = new hashset<guid>();\tforeach (var response in silogroup) {\tif (activations.contains(response.item1)) continue;\tactivations.add(response.item1);",
  "blah",
  1
 ],
 [
  "console.error.writeline(formatmessage(parsableerrors, true, sr.format(sr.warning, err)));\t}\t}\tif (args.length == 0 || assembly == null) {\tif (assembly == null) {\t}\twritehelp();\treturn 0;\t}\tif(disablerun) {",
  "this tool is not intended to be used directly",
  0
 ],
 [
  "public virtual iasyncresult begintryreceiverequest (timespan timeout, asynccallback callback, object state) {\tiasyncresult result = null;\tif (try_recv_delegate == null) try_recv_delegate = new tryreceivedelegate (delegate (timespan tout, out requestcontext ctx) {\tlock (async_result_lock) {\tif (currentasyncresults.contains (result)) currentasyncthreads.add (thread.currentthread);\t}\ttry {\treturn tryreceiverequest (tout, out ctx);\t} catch (xmlexception ex) {\t} catch (socketexception ex) {",
  "socket exception dropped connection",
  0
 ],
 [
  "public override void loaddata (xmlnode node) {\tif (node == null) throw new argumentnullexception (\"node\");\tif (node.name != \"namespace\") throw new formatexception (\"expecting <namespace>\");\tname = node.attributes  [\"name\"].value;\txmlnode classes = node.firstchild;\tif (classes == null) {",
  "warning no classes for name",
  0
 ],
 [
  "public static void main() {\tstring connectionstring = null;\tconnectionstring = \"host=localhost;\" + \"dbname=test;\" + \"user=postgres\";\tpgsqlconnection con;\tcon = new pgsqlconnection(connectionstring);",
  "config file specify the rule sets and rule settings default is rules xml",
  1
 ],
 [
  "}\tif ((data.flags & profilerflags.method_events) != 0) {\tarray.sort (methods, loadedmethod.comparebytotalclicks);\tarray.reverse (methods);\tulong totalexecutionclicks = 0;\tforeach (loadedmethod m in methods) {\ttotalexecutionclicks += m.clicks;\t}\tif (totalexecutionclicks > 0) {\tprintseparator (writer);",
  "reporting execution time on methods",
  0
 ],
 [
  "try {\tfor (loopcount = 1; loopcount <= maxexpectedperstream; loopcount++) {\tistreamlifecycleconsumergrain consumer = this.grainfactory.getgrain<istreamlifecycleconsumergrain>(guid.newguid());\tawait consumer.becomeconsumer(streamid, this.streamnamespace, streamprovidername);\t}\t}\tcatch (exception exc) {\tthis.output.writeline(\"stopping loop at loopcount={0} due to exception {1}\", loopcount, exc);\t}\tmaxconsumersperstream = loopcount - 1;",
  "thread running",
  1
 ],
 [
  "if (s8.f4 != 4+9) {\treturn 4;\t}\tif (s8.f5 != 5+9) {\treturn 5;\t}\tif (s8.f6 != 6+9) {\treturn 6;\t}\tif (s8.f7 != 7+9) {",
  "got but expected",
  0
 ],
 [
  "public void read_surrogatecharacter() {\tusing (serialport com1 = tcsupport.initfirstserialport()) using (serialport com2 = tcsupport.initsecondserialport(com1)) {",
  "verifying read method with surrogate pair in the input and a surrogate pair for the newline",
  0
 ],
 [
  "public virtual int onreloaded () {",
  "hit",
  0
 ],
 [
  ";\tguid?[] guidnvalues = new guid?[]\t{\tguid.newguid(), default (guid), null }\t;\tforeach (bool a1 in boolvalues) {\tforeach (guid? a2 in guidnvalues) {\tdynamic d1 = a1;\tdynamic d2 = a2;\tif ((d1 ? d2 : null) != (a1 ? a2 : null)) {",
  "failed bool nullable guid nullable guid",
  0
 ],
 [
  "static int main () {",
  "e",
  1
 ],
 [
  "static bool splitdriverandscriptarguments (ref string [] driver_args, out string [] script_args) {\tint driver_args_count = 0;\tint script_args_offset = 0;\tstring script_file = null;\twhile (driver_args_count < driver_args.length && script_args_offset == 0) {\tswitch (driver_args [driver_args_count]) {\tcase \"--\": script_args_offset = driver_args_count + 1;\tbreak;\tcase \"-s\": if (driver_args_count + 1 >= driver_args.length) {\tscript_args = null;",
  "usage is s script file",
  0
 ],
 [
  "string line;\twhile ((line = sout.readline ()) != null) {\ttry {\tprocessoutput (line);\t} catch (exception ex) {\tconsole.writeline (ex);\t}\t}\t}\tvoid processoutput (string line) {",
  "dbg",
  0
 ],
 [
  "writeline (\"\\t<assembly_list_file> is the path to a test file containing a list of\\n\" + \"\\tassembly names on separate lines.\\n\" + \"\\texample -ul assembly_list.txt\\n\" + \"\\t\\tassembly_list.txt contents:\\n\" + \"\\t\\tassembly1,version=1.0.0.0,culture=en,publickeytoken=0123456789abcdef\\n\" + \"\\t\\tassembly2,version=2.0.0.0,culture=en,publickeytoken=0123456789abcdef\");\t}\twriteline ();\tif (detailed) {\t}\twriteline ();\tif (detailed) {\t}\twriteline ();\twriteline (\"-?\");",
  "displays a detailed help screen",
  0
 ],
 [
  "public static void createxmlspacetestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<xmlspace1 xml:space=\\'default\\'>&lt; &gt;</xmlspace1>\");\ttw.write(\"<xmlspace2 xml:space=\\'preserve\\'>&lt; &gt;<a><b><c>space test</c><persona>dromio of syracuse</persona></b></a></xmlspace2>\");\ttw.writeline(\"<empty_xmlspace attr0=\\\"0\\\" xml:space=\\'default\\' />\");\ttw.writeline(\"<xmlspace2a xml:space=\\'default\\'>&lt; <xmlspace3 xml:space=\\'preserve\\'>  &lt; &gt; <xmlspace4 xml:space=\\'default\\'>  &lt; &gt;  </xmlspace4> test </xmlspace3> &gt;</xmlspace2a>\");",
  "iteration",
  1
 ],
 [
  "public static int main () {\tif (test<string> () () != typeof (string)) return 1;\tif (test<int> () () != typeof (int)) return 2;",
  "added value retrieved value",
  1
 ],
 [
  "private static void addlistenercomponent(eventloginternal component, string compmachinename, string complogname) {\tlock (internalsyncobject) {",
  "abstractdesignergenerator reparse could not find designed class in primary file",
  1
 ],
 [
  "public void methodbegin(methodbase methinfo, isourcelineinfo sourceinfo, bool initwriters) {\tthis.methinfo = methinfo;\tthis.ilgen = xmlilmodule.definemethodbody(methinfo);\tthis.lastsourceinfo = null;\t#if debug if (xmliltrace.isenabled) {\tthis.numlocals = 0;\tthis.symbols = new hashtable();\tthis.lblnum = 0;\tthis.sourcefile = null;\tthis.writerdump = xmliltrace.gettracewriter(\"dump.il\");",
  "method",
  0
 ],
 [
  "bool denyworldfound;\tbool allowselffound;\tbool allowworldfound;\tscanaclforchangepasswordright(adssecurity, out denyselffound, out denyworldfound, out allowselffound, out allowworldfound);\tactivedirectoryaccessrule denyselface = new extendedrightaccessrule( new maclprinc.securityidentifier(selfsddl), accesscontroltype.deny, s_changepasswordguid);\tactivedirectoryaccessrule denyworldace = new extendedrightaccessrule( new maclprinc.securityidentifier(worldsddl), accesscontroltype.deny, s_changepasswordguid);\tactivedirectoryaccessrule allowselface = new extendedrightaccessrule( new maclprinc.securityidentifier(selfsddl), accesscontroltype.allow, s_changepasswordguid);\tactivedirectoryaccessrule allowworldace = new extendedrightaccessrule( new maclprinc.securityidentifier(worldsddl), accesscontroltype.allow, s_changepasswordguid);\tif (usercannotchangepassword) {\tif (!denyselffound) {",
  "adstorectx cannotchangepwdtoldapconverter add deny self",
  0
 ],
 [
  "private simplegrainstatistic[] getsimplegrainstatisticsrunner(string when) {\tsimplegrainstatistic[] stats = mgmtgrain.getsimplegrainstatistics(null).result;\tstringbuilder sb = new stringbuilder();\tforeach (var s in stats) sb.appendline().append(s);\tsb.appendline();",
  "grain statistics returned by orleans management grain",
  0
 ],
 [
  "static void onstatechange (object sender, statechangeeventargs e) {",
  "did not throw exception",
  1
 ],
 [
  "public override void attachplaceholder () {\tif (type == nvdlresulttype.unwrap) parent.attachplaceholder ();\t}\tpublic override void detachplaceholder () {\tif (type == nvdlresulttype.unwrap) parent.detachplaceholder ();\t}\tpublic override void startelement () {\tif (type != nvdlresulttype.unwrap) validatestartelement ();\t}\tpublic override void endelement () {",
  "result endelement",
  0
 ],
 [
  "public void ipinfotest_accessallproperties_noerrors() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {",
  "total assemblies",
  1
 ],
 [
  "public void closewithoutopen() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "test failed conversion result is incorrect",
  1
 ],
 [
  "if (s11.f1 != 1+9) {\treturn 1;\t}\tif (s11.f2 != 2+9) {\treturn 2;\t}\tif (s11.f3 != 3+9) {\treturn 3;\t}\tif (s11.f4 != 4+9) {",
  "helpviewer",
  1
 ],
 [
  "public static string getxspname (aspnetexecutioncommand cmd) {\tswitch (cmd.clrversion) {\tcase clrversion.net_1_1: return \"xsp1\";\tcase clrversion.net_2_0: return \"xsp2\";\tcase clrversion.net_4_0: return \"xsp4\";\tcase clrversion.net_4_5: return \"xsp4\";",
  "asp net is not supported for unknown runtime version",
  0
 ],
 [
  "using (xmlwriter w = createwriter(doc)) {\ttry {\tw.writestartelement(\"root\");\tw.writesurrogatecharentity('\\udd12', '\\udd01');\t}\tcatch (argumentexception) {\ttestlog.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "range the whole ring is",
  1
 ],
 [
  "public static void usage (string message) {\tif (message != null) {\tconsole.writeline (\"{0}{1}{0}\", environment.newline, message);\t}",
  "tls use",
  0
 ],
 [
  "if (!ismatch (text, generated, out i, out j)) {\tif (i > 0 && j > 0 && verboseoutput) {\tconsole.writeline (text.substring (0, math.min (text.length, i + 1)));\tconsole.writeline (generated.substring (0, math.min (generated.length, j + 1)));\t}\tfailed++;\t} else {\tpassed++;\t}\t}",
  "got but expected",
  1
 ],
 [
  "protected virtual string getexpectedresult (symmetricalgorithm algo, byte [] encrypteddata) {\tint id = getid (algo);\tstring expected = bitconverter.tostring (encrypteddata);",
  "clean up",
  1
 ],
 [
  "static void main (string [] args) {\tstring [] files;\tif (args.length < 1) {",
  "bad command line arguments supplied",
  1
 ],
 [
  "try {\txslcompiledtransform xslt = new xslcompiledtransform();\txslt.load(fullfilepath(\"identity.xsl\"));\txslt.transform((ixpathnavigable)null, (xsltargumentlist)null, (textwriter)null);\t}\tcatch (argumentnullexception) {\treturn;\t}\tcatch (exception e) {\t_output.writeline(e.tostring());",
  "times",
  1
 ],
 [
  "public static void runtestwithoutunresolvedfile(csharpfile file) {\tcsharpastresolver resolver = new csharpastresolver(file.project.compilation, file.syntaxtree);\tvar navigator = new validatingresolveallnavigator(file.filename);\tresolver.applynavigator(navigator, cancellationtoken.none);\tnavigator.validate(resolver, file.syntaxtree);\tcsharpastresolver originalresolver = new csharpastresolver(file.project.compilation, file.syntaxtree, file.unresolvedtypesystemforfile);\tforeach (var node in file.syntaxtree.descendantsandself) {\tvar originalresult = originalresolver.resolve(node);\tvar result = resolver.resolve(node);\tif (!randomizedorderresolvertest.isequalresolveresult(result, originalresult)) {",
  "exception while trying to subscribe for updates exception",
  1
 ],
 [
  "outputtype (method.privateimplementationtype);\toutput.write ('.');\toutput.write (method.name);\t}\toutput.writeline ();\tif (!iscurrentinterface) {\tif ((attributes & memberattributes.scopemask) != memberattributes.abstract) {\t++indent;\tgeneratestatements (method.statements);\t--indent;",
  "reading to a",
  1
 ],
 [
  "++indent;\tgeneratestatements (clause.statements);\t--indent;\t}\tcodestatementcollection finallies = statement.finallystatements;\tif (finallies.count > 0) {\t++indent;\tgeneratestatements (finallies);\t--indent;\t}",
  "set mono cairo debug dispose to track allocation traces",
  1
 ],
 [
  "public void errorevent_frame() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (serialport com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\terroreventhandler erreventhandler = new erroreventhandler(com1);\tcom1.databits = 7;\tcom1.open();\tcom2.open();\tcom1.errorreceived += erreventhandler.handleevent;\tvar frameerrorbytes = new byte[] { 0x01 };\tfor (int i = 0; i < num_trys; i++) {",
  "verifying frame event try",
  0
 ],
 [
  "public override string getindentationstring (int linenumber) {\tvar line = data.getline (linenumber);\tif (line == null) return \"\";\tvar offset = line.offset;\tstring curindent = line.getindentation (data);\ttry {\tstatetracker.update (data, math.min (data.length, offset + line.length));\tint nlwsp = curindent.length;\tif (!statetracker.linebeganinsidemultilinecomment || (nlwsp < line.lengthincludingdelimiter && data.getcharat (offset + nlwsp) == '*')) return statetracker.thislineindent;\t} catch (exception e) {",
  "symgraph widen join",
  1
 ],
 [
  "public static void eval(dynamic result, string comment) {\tif ((int)result != 0) {\tfailcount++;",
  "test failed at",
  0
 ],
 [
  "public static ienumerable<int> yieldreturnwithtryfinally() {\tyield return 0;\ttry {\tyield return 1;\t} finally {",
  "finally",
  0
 ],
 [
  "s6.f5 = 5;\ts6.f6 = 6;\ts6 = mono_return_sbyte6(s6, 9);\tif (s6.f1 != 1+9) {\treturn 1;\t}\tif (s6.f2 != 2+9) {\treturn 2;\t}\tif (s6.f3 != 3+9) {",
  "got but expected",
  0
 ],
 [
  "assert.true(boundpool.autoscaleenabled.hasvalue);\tassert.true(boundpool.autoscaleenabled.value);\tassert.equal(poolasformulaorig, boundpool.autoscaleformula);\tautoscalerun eval = boundpool.evaluateautoscale(poolasformula2);\tassert.contains(poolasformula2, eval.results);\tboundpool.disableautoscale();\tboundpool.refresh();\tassert.true(boundpool.autoscaleenabled.hasvalue);\tassert.false(boundpool.autoscaleenabled.value);\twhile (allocationstate.steady != boundpool.allocationstate) {",
  "waiting for pool to be steady before enableautoscale call",
  0
 ],
 [
  "public override string tostring () {\tstringwriter sw = new stringwriter ();",
  "got but expected",
  1
 ],
 [
  "static void dumpkeyinfo (keyinfo ki) {",
  "adstorectx cannotchangepwdtoldapconverter remove allow world",
  1
 ],
 [
  "public void breakstate_default() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "o input output txt convert the input file to a csv file using decimal",
  1
 ],
 [
  "protected void createassynames() {\tif (_assyinfo._name == null) {\tstring dir = componentinspectorproperties.convertedassemblydirectory;\tstring basename = _name + \"_\" + _typelibkey._version.replace(\".\", \"_\");\tbasename = basename.replace(\":\", \"_\");\tbasename = basename.replace(\".\", \"_\");\tbasename = basename.replace(\"\\\\\", \"_\");",
  "eventlog removelistenercomponent",
  1
 ],
 [
  "return 1;\t}\ttry {\ttest.abortproxy ();\treturn 2;\t} catch (threadabortexception e) {\tobject state;\tstate = e.exceptionstate;\tthread.resetabort ();\tif (state == null) {",
  "state is null",
  0
 ],
 [
  "}\tcatch (exception ex) {\tftest_fail = true;\tthrow (ex);\t}\tfinally {\tif (!ftest_fail || (xrtemp.readstate != readstate.closed)) ftest_fail = false;\txrtemp.dispose();\t}\tif (ftest_fail) {",
  "digest username password domain digest authentication",
  1
 ],
 [
  "private static bool callsecondstructinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tdynamic d = new firstclassreturnstruct<int>();\tif ((!(((secondstruct<int>)d.instancemethod()).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "error execute sql xml failure",
  1
 ],
 [
  "public void handshake_int32maxvalue() {",
  "port",
  1
 ],
 [
  "public static int test_0_abort_string () {\ttest test = (test) domain.createinstanceandunwrap (typeof (test).assembly.fullname, typeof (test).fullname);\tif (!remotingservices.istransparentproxy (test)) {\treturn 1;\t}\ttry {\ttest.abortstring ();",
  "usage mono table from charset",
  1
 ],
 [
  "if (filename != null) {\treturn 1;\t}\tfilename = s;\t}\t}\tif (filename == null) {\tshowusage ();\treturn 1;\t}",
  "loading solution file",
  0
 ],
 [
  "public void sendalert(alert alert) {\talertlevel level;\talertdescription description;\tbool close;\tif (alert == null) {",
  "write alert null",
  0
 ],
 [
  "public void readtimeout_infinite_read_byte_int_int() {",
  "write change cipher spec",
  1
 ],
 [
  "writeline (\"\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twriteline (\"\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twriteline (\"\");\twritelineind (\"if (readmethods == null) {\");\twriteline (\"readmethods = new system.collections.hashtable ();\");\twritelineuni (\"}\");",
  "something await foo",
  1
 ],
 [
  "static void printoptionkey (optionkey optionkey) {\tvar locations = optionkey.option.storagelocations;\tif(locations.isdefault) {\treturn;\t}\tforeach (var loc in locations) {\tswitch (loc) {\tbreak;\tbreak;",
  "passing null argument should have thrown argumentnullexception",
  1
 ],
 [
  "public void notifynodeexpandedchanged(t changednode) {",
  "hierarchylist start notifynodeexpandedchanged",
  0
 ],
 [
  "public static void createxmllangtestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<xmllang0 xml:lang=\\\"en-us\\\">what color is it?</xmllang0>\");\ttw.write(\"<xmllang1 xml:lang=\\\"en-gb\\\">what color is it?<a><b><c>language test</c><persona>dromio of ephesus</persona></b></a></xmllang1>\");\ttw.writeline(\"<empty_xmllang attr0=\\\"0\\\" xml:lang=\\\"en-us\\\" />\");\ttw.writeline(\"<xmllang2 xml:lang=\\\"en-us\\\">what color is it?<title><!-- this is a comment--></title><xmllang1 xml:lang=\\\"en-gb\\\">testing language<xmllang0 xml:lang=\\\"en-us\\\">what color is it?</xmllang0>haha </xmllang1>hihihi</xmllang2>\");",
  "other useless string",
  1
 ],
 [
  "public static void parametertest (oracleconnection connection) {",
  "imports system class somedata public property name as string end class class testclass public sub testmethod dim data as new somedata console writeline data name end sub end class imports system class somedata public property name as string end class class testclass public sub testmethod dim data as new somedata if data isnot nothing then console writeline data name end if end sub end class",
  1
 ],
 [
  "cmd.commandtext = sql;\trdr = cmd.executereader(commandbehavior.keyinfo | commandbehavior.schemaonly);\tdatatable dt;\tdt = rdr.getschematable();\tforeach (datarow schemarow in dt.rows) {\tforeach (datacolumn schemacol in dt.columns) {\tconsole.writeline(schemacol.columnname + \" = \" + schemarow[schemacol]);\t}\tconsole.writeline(\"\");\t}",
  "read schema with no keyinfo",
  0
 ],
 [
  "protected override void performload(idesignerserializationmanager serializationmanager){",
  "reportdesignerloader performload",
  0
 ],
 [
  "static void main (string[] args) {\tvar failcount = 0;",
  "after",
  1
 ],
 [
  "thread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();\t} finally {\t}\ttry {\tthread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();\t} finally {",
  "ifndef inc h",
  1
 ],
 [
  "const long l = -9223372036854775808;\tconst long l2 = -uint.maxvalue;\tconst e1 e = (e1)~e2.a;\tunchecked {\tif (-int.minvalue != int.minvalue) return 1;\t}\tint b = -lm;\tif (b != -22) return 2;\tuint ua = 2;\tif (-ua != -2) return 3;",
  "test failed at call result",
  1
 ],
 [
  "private static bool callsecondclassinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tif ((!(bool)(((dynamic)firstclassreturnclass<int>.staticproperty).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "install failed dotnet install returned",
  1
 ],
 [
  "private void thread_func() {\tfor(int i=51200; i<102400; i++) {\tslot[i]=thread.allocatedataslot();\tthread.setdata(slot[i], i);\t}\tthread.sleep(5000);\tthread.setdata(slot[11111], 42);\tthread.setdata(slot[76801], 42);\tthread.sleep(20000);",
  "error loading sidebarconfig xml",
  1
 ],
 [
  "protected override void generatenamespaceimport(codenamespaceimport e) {",
  "out of printname",
  1
 ],
 [
  "public static void dataadaptertest2_insert (oracleconnection con) {\tconsole.writeline(\"================================\");\tconsole.writeline(\"=== adapter insert =============\");\tconsole.writeline(\"================================\");\toracletransaction transaction = con.begintransaction ();",
  "ref cursor test using begin end for proc begin",
  1
 ],
 [
  "public void removeparam2() {\tm_xsltarg = new xsltargumentlist();\tretobj = m_xsltarg.removeparam(null, szempty);\tif (retobj != null) {",
  "did not return null for null parameter name",
  0
 ],
 [
  "public static int main(string[] args) {\tfirstouter.firstinner.first v1 = new firstouter.firstinner.first();\tfirstouter.second v2 = new firstouter.second();\tfirstouter.secondinner.third v3 = new firstouter.secondinner.third();\tfirstouter.firstinner.fourth v4 = new firstouter.firstinner.fourth();\tfifth v5 = new fifth();",
  "is",
  0
 ],
 [
  "testwithstruct(new mystruct2(), new mystruct2(), new mystruct2());\tconsole.writeline(\"====================\");\ts_ifoostring = \"mystruct3.imethod1<system.int32>(1,2)\";\ts_ifooobject = \"mystruct3.imethod1<system.int32>(3,4)\";\ts_ifooint = \"mystruct3.ifoo<int>.imethod1<system.int32>(5,6)\";\ttestwithstruct(new mystruct3(), new mystruct3(), new mystruct3());\tconsole.writeline(\"====================\");\t}\t{\tstring res = ((iface<string>)new anotherderivedclass<string>()).ifacegvmethod1<string>(\"string1\", \"string2\");",
  "anotherbaseclass",
  0
 ],
 [
  "protected safehandlebase() : base(intptr.zero, true) {\tnativemethods.addhandle();\tregistered = 1;\t#if leaks_tracking id = guid.newguid();",
  "allocating handle",
  0
 ],
 [
  "try {\tif (thisnode == null || othernode == null) return -1;\tvar e1 = thisnode.dataitem as iunresolvedentity;\tvar e2 = othernode.dataitem as iunresolvedentity;\tif (e1 == null && e2 == null) return 0;\tif (e1 == null) return -1;\tif (e2 == null) return 1;\tif (e1.symbolkind != e2.symbolkind) return e2.symbolkind.compareto (e1.symbolkind);\treturn e1.name.compareto (e2.name);\t} catch (exception e) {",
  "exception in assembly browser sort function",
  0
 ],
 [
  "if (!fileutility.isequalfilename(path.getdirectoryname(this.filename), path.getdirectoryname(other.filename))) {\texttreenode p = this;\tdirectorynode parentdirectory;\tdo {\tp = (exttreenode)p.parent;\tparentdirectory = p as directorynode;\t} while (parentdirectory == null && p != null);\tif (parentdirectory == null) {\tthrow new invalidoperationexception(\"file '\" + this.filename + \"' does not have a parent directory.\");\t}",
  "validation failed",
  1
 ],
 [
  "public void ipinfotest_accessallipv4properties_noerrors() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfaceproperties ipproperties = nic.getipproperties();\tipv4interfaceproperties ipv4properties = ipproperties.getipv4properties();\tassert.throws<platformnotsupportedexception>(() => ipv4properties.isautomaticprivateaddressingactive);\tassert.throws<platformnotsupportedexception>(() => ipv4properties.isautomaticprivateaddressingenabled);\tassert.throws<platformnotsupportedexception>(() => ipv4properties.isdhcpenabled);",
  "isforwardingenabled",
  0
 ],
 [
  "public void testdonotwarncase () {\ttestwrongcontext<basemethodcallwithdefaultparameterissue>(@\" public class mybase {\tpublic virtual void foobar(int x = 12) {",
  "foo bar",
  0
 ],
 [
  "static void main(string[] args) {\tconst string basepath = @\"..\\..\\refactoringessentials\";\tusing (var missingmdwriter = new streamwriter(path.combine(basepath, \"missing.md\"), false, encoding.utf8)) {",
  "done with the re enable",
  1
 ],
 [
  "public static void thread() {\ttry {\tthread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();\t} finally {\t}\ttry {",
  "thread running",
  0
 ],
 [
  "public static void main (string[] args) {\tcompositepoker poker;\tpoker = new compositepoker ();\tconsole.writeline (\"--------\");\ttry { poker.databind(); } catch (exception e) { console.writeline (e);}\tpoker = new compositepoker ();\tconsole.writeline (\"--------\");\ttry { poker.databind(); } catch (exception e) { console.writeline (e);}\tpoker = new compositepoker ();",
  "client authenticated to server with encryption cipher bit strength",
  1
 ],
 [
  "name = ipconfigname, privateipallocationmethod = ipallocationmethod.dynamic, publicipaddress = new subresource() {\tid = nic1publicip.id }, subnet = new subresource() {\tid = getsubnetresponse.id }\t}\t}\t};\tvar putvirtualnetworkgatewayresponse = networkmanagementclient.virtualnetworkgateways.createorupdate(resourcegroupname, virtualnetworkgatewayname, virtualnetworkgateway);\tassert.equal(\"succeeded\", putvirtualnetworkgatewayresponse.provisioningstate);\tvar getvirtualnetworkgatewayresponse = networkmanagementclient.virtualnetworkgateways.get(resourcegroupname, virtualnetworkgatewayname);\tassert.notnull(getvirtualnetworkgatewayresponse.gatewaydefaultsite);",
  "default site set at virtual network gateway",
  0
 ],
 [
  "protected sealed override async task<bool> onaddtoproject (cancellationtoken token) {\tint trycount = 1;\tbool keeptrying = true;\twhile (keeptrying) {\ttry {\tif (trycount > 1) {",
  "test failed at call result",
  1
 ],
 [
  "wsettings.omitxmldeclaration = true;\txmlwriter w = utils.createwriter(wsettings);\tcerror.compare(w.settings.conformancelevel, conformancelevel.document, \"mismatch in cl\");\tcerror.compare(w.settings.omitxmldeclaration, true, \"mismatch in omitxmldecl\");\tw.writestartelement(\"root\");\tw.writeendelement();\tw.dispose();\txmlreader xr = utils.getreader();\twhile (xr.read()) {\tif (xr.nodetype == xmlnodetype.xmldeclaration) {",
  "wrote xmldecl when omitxmldecl was true",
  0
 ],
 [
  "output.write(\".hash algorithm 0x{0:x8}\", (int)asm.name.hashalgorithm);\tif (asm.name.hashalgorithm == assemblyhashalgorithm.sha1) output.write(\" output.writeline();\t}\tversion v = asm.name.version;\tif (v != null) {\t}\tcloseblock();\t}\tpublic void writeassemblyreferences(moduledefinition module) {\tforeach (var mref in module.modulereferences) {",
  "module extern",
  0
 ],
 [
  "static longstaticconstructorwithoutfields () {",
  "i m writting a test and i will fill a screen with some useless code",
  0
 ],
 [
  "jobconstraints jobcon = jobspec.constraints;\tif (null == jobcon) {\t}\telse {\ttestoutputhelper.writeline(\"\");\t}\tjobmanagertask ijm = jobspec.jobmanagertask;\tif (null == ijm) {\t}\telse {",
  "testing version",
  1
 ],
 [
  "private static bool testandopwithsametypeandreturntype() {\tclearflags();\tdynamic d1 = new myopclass();\tdynamic d2 = new myopclass();\tdynamic dr = d1 && d2;\tif (dr.gettype() != typeof(myopclass)) {",
  "exexml filename to execute sql and save output to xml file",
  1
 ],
 [
  "protected override void setauthprincipalenablestatus(authenticableprincipal ap, bool enable) {\tdebug.assert(ap.fakeprincipal == false);\tbool acctdisabled;\tdirectoryentry de = (directoryentry)ap.underlyingobject;\tif (de.properties[\"msds-useraccountdisabled\"].count > 0) {\tdebug.assert(de.properties[\"msds-useraccountdisabled\"].count == 1);\tacctdisabled = (bool)de.properties[\"msds-useraccountdisabled\"][0];\t}\telse {",
  "adamstorectx setauthprincipalenablestatus can t read useraccountcontrol",
  0
 ],
 [
  "public async task serverrequireencryption_clientrequireencryption_connectwithencryption() {\tusing (var serverrequireencryption = new dummytcpserver( new ipendpoint(ipaddress.loopback, 0), encryptionpolicy.requireencryption)) using (var client = new tcpclient()) {\tawait client.connectasync(serverrequireencryption.remoteendpoint.address, serverrequireencryption.remoteendpoint.port);\tusing (var sslstream = new sslstream(client.getstream(), false, allowanyservercertificate, null, encryptionpolicy.requireencryption)) {\tawait sslstream.authenticateasclientasync(\"localhost\", null, sslprotocolsupport.defaultsslprotocols, false);",
  "client authenticated to server with encryption cipher bit strength",
  0
 ],
 [
  "public void onoperationcompleted () {\tcancelregistration.dispose ();\ttry {\tif (exited != null) runtime.runinmainthread (() => {\texited (operation, eventargs.empty);\t});\telse if (operation.exitcode != 0) console.log.writeline (gettextcatalog.getstring (\"the application exited with code: {0}\"), operation.exitcode);\t} catch (argumentexception ex) {",
  "x v crl",
  1
 ],
 [
  "static void main (string [] args) {\tif (args.length != 1) {",
  "exception",
  1
 ],
 [
  "if (datareader.hasattributes) {\tbool flag = true;\tdatareader.movetofirstattribute();\ttry {\tdatareader.readsubtree();\t}\tcatch (invalidoperationexception) {\tflag = false;\t}\tif (flag) {",
  "readsubtree doesn t throw invalidop exception on attribute node type",
  0
 ],
 [
  "public void bytestowrite() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tasyncwriterndbytearray asyncwriterndbytearray = new asyncwriterndbytearray(com, byte_size_bytes_to_write);\tvar t = new task(asyncwriterndbytearray.writerndbytearray);",
  "verifying bytestowrite with one call to write",
  0
 ],
 [
  "static void setupcustompeerresolverservicehost () {\tstring customport = environment.getenvironmentvariable (\"mono_custompeerresolverservice_port\");\tif (customport == null || !int.tryparse (customport, out port)) port = 8931;\tvar t = new tcplistener (port);\ttry {\tt.start ();\tt.stop ();\t} catch {\treturn;\t}",
  "warning it is running peer resolver service locally this means the node registration is valid only within this application domain",
  0
 ],
 [
  "spid = spid.substring (0, i);\tint pid;\tif (int.tryparse (path.getfilename (spid), out pid)) {\ttry {\tif (process.getprocessbyid (pid) != null) continue;\t} catch {\t}\ttry {\tdirectory.delete (dir, true);\t} catch (exception ex) {",
  "nested got but expected",
  1
 ],
 [
  "public void test(t param) {",
  "assert areequal mtp tostring true false",
  1
 ],
 [
  "private void testtvppermutations(stestructuredtypeboundaries bounds, bool runonlydatarecordtest) {\tienumerator<stepermutation> boundsmd = bounds.getenumerator(boundariestestkeys);\tobject[][] basevalues = stestructuredtypeboundaries.getseparatevalues(boundsmd);\tilist<datatable> dtlist = generatedatatables(basevalues);\ttransactionoptions opts = new transactionoptions();\topts.isolationlevel = system.transactions.isolationlevel.readcommitted;\tint iter = 0;\twhile (boundsmd.movenext()) {",
  "iteration",
  0
 ],
 [
  "private static bool test1() {\tstring[] stringvalues = new string[]\t{\tstring.empty, \"abc\", null }\t;\tforeach (string a1 in stringvalues) {\tdynamic d1 = a1;\tif (d1 != a1) {",
  "got but expected",
  1
 ],
 [
  "public static int main () {\tint result = test ();\tif (result != 0) console.writeline (\"error: {0}\", result);",
  "ok",
  0
 ],
 [
  "int failcount = 0;\tdynamic d = null;\ttry {\tint result = d;\tfailcount++;\t}\tcatch (microsoft.csharp.runtimebinder.runtimebinderexception e) {\t}\tcatch (exception e) {\tfailcount++;",
  "found assembly",
  1
 ],
 [
  "}\t}\telse {\tif (denyselffound) {\tadssecurity.removeaccessrulespecific(denyselface);\t}\tif (denyworldfound) {\tadssecurity.removeaccessrulespecific(denyworldace);\t}\tif (!allowselffound) {",
  "computenodeinfo",
  1
 ],
 [
  "w.writestartdocument();\tw.writestartelement(\"root\");\tw.writeendelement();\tw.writestring(\"top level text\");\t}\tcatch (invalidoperationexception e) {\tcerror.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "} catch (optionexception e) {\tshowhelp = true;\t}\tif (extra.count > 0 && extra[0] == \"store-symbols\") cmd = new command (storesymbolsaction, 2);\tif (cmd != null) {\textra.removeat (0);\t} else {\tcmd = new command (symbolicateaction, 2, 2);\t}\tif (showhelp || extra == null || extra.count < cmd.minargcount || extra.count > cmd.maxargcount) {",
  "you passed in",
  1
 ],
 [
  "public void bug1433069testboundjobcommit() {\taction test = () => {\tusing (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {\tstring jobid = microsoft.azure.batch.constants.defaultconvenienceprefix + testutilities.getmyname() + \"-testboundjobcommit\";\ttry {\tcloudjob cloudjob = batchcli.joboperations.createjob(jobid, new poolinformation());\tcloudjob.poolinformation = new poolinformation() {\tpoolid = this.poolfixture.poolid };",
  "ambient color not found",
  1
 ],
 [
  "directoryentry groupde = (directoryentry)g.underlyingobject;\tdirectorysearcher ds = null;\ttry {\tif (groupde.properties[\"objectsid\"].count > 0) {\tdebug.assert(groupde.properties[\"objectsid\"].count == 1);\tbyte[] groupsid = (byte[])groupde.properties[\"objectsid\"][0];\tds = getdirectorysearcherfromgroupid(groupsid);\tds.sizelimit = 1;\tsearchresult sr = ds.findone();\tif (sr != null) {",
  "adstorectx ismemberofinstore found member can t clear",
  0
 ],
 [
  "static bool callsecondstructoperator() {\tint failcount = 0; verify.firstcalled = false;\tif ( (!(bool)(((dynamic)firstclassreturnstruct.staticmethod()) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "passed failed",
  1
 ],
 [
  "static void listdescriptions () {\tprintglobalinfo ();\tforeach (policylevel pl in levels) {",
  "code groups",
  0
 ],
 [
  "public static void threadmethod_waiter_2() {",
  "test failed unexpected marker found",
  1
 ],
 [
  "public int getextnobject2(object args) {\tobject retobj;\tfor (int i = 1; i <= 100; i++) {\tretobj = xsltarg1.getextensionobject(((object[])args)[1].tostring());",
  "getextensionobject thread iteration value returned",
  0
 ],
 [
  "public void readtimeout_0_readbyte_beforeopen() {",
  "nested got but expected",
  1
 ],
 [
  "private static void dumpdatatable(datatable datatable, int rowprintcount) {\tconsole.writeline(\"\");\tif (datatable == null) {\treturn;\t}\tint columncount = datatable.columns.count;\tint currentcolumn;\tint rowcount = datatable.rows.count;\tint currentrow;",
  "table has rows at most the first are dumped",
  0
 ],
 [
  "public void emitsource() {\twriteline();",
  "namespace",
  1
 ],
 [
  "s10.f6 = 6;\ts10.f7 = 7;\ts10.f8 = 8;\ts10.f9 = 9;\ts10.f10 = 10;\ts10 = mono_return_sbyte10(s10, 9);\tif (s10.f1 != 1+9) {\treturn 1;\t}\tif (s10.f2 != 2+9) {",
  "got but expected",
  0
 ],
 [
  "#endregion x-ram function pointer definitions #region x-ram tokens private int al_eax_ram_size, al_eax_ram_free, al_storage_automatic, al_storage_hardware, al_storage_accessible;\t#endregion x-ram tokens #region constructor / extension loading /// <summary> /// <summary> /// constructs a new xramextension instance. /// constructs a new xramextension instance. /// </summary> /// </summary> public xramextension() {\t_valid = false;\tif (al.isextensionpresent(\"eax-ram\") == false) return;\tal_eax_ram_size = al.getenumvalue(\"al_eax_ram_size\");\tal_eax_ram_free = al.getenumvalue(\"al_eax_ram_free\");\tal_storage_automatic = al.getenumvalue(\"al_storage_automatic\");\tal_storage_hardware = al.getenumvalue(\"al_storage_hardware\");\tal_storage_accessible = al.getenumvalue(\"al_storage_accessible\");\tif (al_eax_ram_size == 0 || al_eax_ram_free == 0 || al_storage_automatic == 0 || al_storage_hardware == 0 || al_storage_accessible == 0) {",
  "x ram token values could not be retrieved",
  0
 ],
 [
  "public async task simplevoidtaskmethod() {",
  "verifying write method throws exception after a call to cloes",
  1
 ],
 [
  "try {\txslcompiledtransform xslt = new xslcompiledtransform();\txslt.load(fullfilepath(\"identity.xsl\"));\txslt.transform((ixpathnavigable)null, (xsltargumentlist)null, (textwriter)null);\t}\tcatch (argumentnullexception) {\treturn;\t}\tcatch (exception e) {\t_output.writeline(e.tostring());",
  "did not throw argumentnullexception",
  0
 ],
 [
  "break;\t}\t}\ti--;\terr = 0;\t}\tcatch (exception e) {\terr = i;\t}\tfinally {",
  "starting a request",
  1
 ],
 [
  "writeline (typemap.typedata.csharpfullname + string.format (\" ob = ({0}) activator.createinstance(typeof({0}), true);\", typemap.typedata.csharpfullname));\tif (generatereadhook (hooktype.type, typemap.typedata.type)) {\treturn;\t}\t}\twriteline (\"system.xml.xmlqualifiedname t = getxsitype();\");\twriteline (\"if (t == null)\");\tif (typemap.typedata.type != typeof(object)) writeline (\"{ }\");\tforeach (xmltypemapping realmap in typemap.derivedtypes) {\twritelineind (\"else if (t.name == \" + getliteral (realmap.xmltype) + \" && t.namespace == \" + getliteral (realmap.xmltypenamespace) + \")\");",
  "read",
  1
 ],
 [
  "public static int main () {\tint total = 0;\tforeach (int i in getit (new int [] { 1, 2, 3})){",
  "count",
  1
 ],
 [
  "static int main () {\tif ((int) (0.7f * 100.0f) != 69) return 1;\tif ((double) (0.7f * 100.0f) != 69.9999988079071) return 2;\tif (!foo (0.7f * 100.0f)) return 3;\ta attr = (a)methodbase.getcurrentmethod ().getcustomattributes (false) [0];\tif (attr.d != 69.9999988079071) return 4;",
  "adding code dependency to",
  1
 ],
 [
  "public void pinchangedevent_dsrchanged() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (serialport com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\tpinchangedeventhandler eventhandler = new pinchangedeventhandler(com1);\teventhandler.eventfilter = eventtype => eventtype != serialpinchange.cdchanged;\tcom1.pinchanged += eventhandler.handleevent;\tcom1.open();\tcom2.open();\tfor (int i = 0; i < num_trys; i++) {",
  "verifying when dtrenable set to true on remote port",
  0
 ],
 [
  "object [] arguments;\targuments = new object [] { value1, value2, value3, i, j };\tif (compare (\"tostring\", mask, ref stateindex, arguments, ref more_states)) {\tcontinue;\t}\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;",
  "success",
  1
 ],
 [
  "if (copypixeloperation != copypixeloperation.sourcecopy) throw new notimplementedexception (\"operation not implemented under x11\");\tif (gdiplus.display == intptr.zero) {\tgdiplus.display = gdiplus.xopendisplay (intptr.zero);\t}\twindow = gdiplus.xrootwindow (gdiplus.display, 0);\tdefvisual = gdiplus.xdefaultvisual (gdiplus.display, 0);\txvisualinfo visual = new xvisualinfo ();\tvisual.visualid = gdiplus.xvisualidfromvisual(defvisual);\tvptr = gdiplus.xgetvisualinfo (gdiplus.display, 0x1 /* visualidmask */, ref visual, ref nitems);\tvisual = (xvisualinfo) marshal.ptrtostructure(vptr, typeof (xvisualinfo));",
  "total string data size",
  1
 ],
 [
  "public void ipinfotest_accessallproperties_noerrors() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {",
  "first",
  1
 ],
 [
  "private static void printoutstoragesasdefinition(sasdefinitionbundle sasdefinitionbundle) {",
  "event counts pinchange rx error",
  1
 ],
 [
  "public static int main () {\tvar t2 = run (() => task<int>.factory.startnew (() => 5));\tif (!t2.wait (1000)) {\tconsole.writeline (t2.status);\treturn 1;\t}",
  "failed to reload settings",
  1
 ],
 [
  "public static decimal insertblob(oracleconnection con) {\tbyte[] bytearray = new byte[2000];\tbyte j = 0;\tfor (int i = 0; i < bytearray.length; i++) {\tbytearray[i] = j;\tif (j > 255) j = 0;\tj++;\t}",
  "test blob data beginning",
  0
 ],
 [
  "}\t}\ttry {\txmldocument doc = new xmldocument ();\tdoc.load (\"test/rnctest.xml\");\tint success = 0;\tint failure = 0;\tforeach (xmlelement el in doc.selectnodes (\"/rnctestcases/testcase\")) {\tstring id = el.getattribute (\"id\");\tif (filter != null && id.indexof (filter) < 0) continue;",
  "testing",
  0
 ],
 [
  "public override string tostring() {\tstringwriter writer = new stringwriter(cultureinfo.invariantculture);",
  "validfrom",
  0
 ],
 [
  "public bool comparereader(xdocument doc, string expectedxml) {\txmlreadersettings rs = new xmlreadersettings();\trs.conformancelevel = conformancelevel.auto;\trs.dtdprocessing = dtdprocessing.ignore;\trs.closeinput = true;\t_diff.option = xmldiffoption.ignoreattributeorder;\tusing (xmlreader r1 = doc.createreader()) using (xmlreader r2 = xmlreader.create(new stringreader(expectedxml), rs)) {\tif (!_diff.compare(r1, r2)) {",
  "has",
  1
 ],
 [
  "public override void onstop() {\tif (orleansazuresilo != null) {\torleansazuresilo.stop();\t}\troleenvironment.changing -= roleenvironmentchanging;\tbase.onstop();",
  "verifying bytestowrite with successive calls to write",
  1
 ],
 [
  "public async task activationsched_whenany_busy_timeout() {\ttaskscheduler scheduler = this.masterscheduler.getworkitemgroup(this.context).taskrunner;\tvar pause1 = new taskcompletionsource<bool>();\tvar pause2 = new taskcompletionsource<bool>();\tvar finish = new taskcompletionsource<bool>();\ttask<int> task1 = null;\ttask<int> task2 = null;\ttask join = null;\ttask wrapper = new task(() => {\ttask1 = task<int>.factory.startnew(() => {",
  "creating job",
  1
 ],
 [
  "public xmlschemaelement findelement (qualifiedname name) {\tensureloaded();\tforeach (xmlschemaelement element in schema.elements.values) {\tif (name.equals (element.qualifiedname)) {\treturn element;\t}\t}",
  "xmlschemadataobject did not find element in the schema",
  0
 ],
 [
  "writebuffer (ts, conf, buffer);\tts.write (\"\\t.byte 0\\n\");\tts.writeline ();\t}\tts.close ();\tif (compress) tc.writeline (\"\\nstatic const compressedassembly *compressed [] = {\");\telse tc.writeline (\"\\nstatic const monobundledassembly *bundled [] = {\");\tforeach (string c in c_bundle_names){\ttc.writeline (\"\\t&{0},\", c);\t}",
  "missing argument to mono gac prefix command line option",
  1
 ],
 [
  "public void run (object o) {\tstring arg = (string)o;\tstring ports = arg.substring (8);\tint sp = ports.indexof (':');\tint port = int32.parse (ports.substring (0, sp));\tint interrupt_port = int32.parse (ports.substring (sp+1));\ttcpclient client = new tcpclient (\"127.0.0.1\", port);\ttcpclient interrupt_client = new tcpclient (\"127.0.0.1\", interrupt_port);",
  "csharp agent connected",
  0
 ],
 [
  "static void encrypt () {\tstring ans = \"green\";\tstring key = \"1e14fc86752772f5db58b99764d0168106d336563d77ccba\";\tstring salt = \"xxsrnq4n1jebmric/ty46g==\";\tbyte[] key_bytes = getbytes (key, key.length);\tbyte[] ans_bytes = encoding.unicode.getbytes (ans);\tbyte[] salt_bytes = convert.frombase64string (salt);\tbyte[] buf = new byte[ans_bytes.length + salt_bytes.length];\tarray.copy (ans_bytes, 0, buf, salt_bytes.length, ans_bytes.length);",
  "before encryption",
  0
 ],
 [
  "static void producesimpleheapwithlos () {",
  "verifying endread with multiple calls to beginread",
  1
 ],
 [
  "private static bool callsecondstructinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tif ((!(bool)(((dynamic)firstclassreturnstruct.staticproperty).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "failed bool nullable long nullable long",
  1
 ],
 [
  "new virtualnetworkgatewayipconfiguration() {\tname = ipconfigname, privateipallocationmethod = ipallocationmethod.dynamic, publicipaddress = new subresource() {\tid = nic1publicip.id }, subnet = new subresource() {\tid = getsubnetresponse.id }\t}\t}, sku = new virtualnetworkgatewaysku() {\tname = virtualnetworkgatewayskuname.standard, tier = virtualnetworkgatewayskutier.standard }\t};\tvar putvirtualnetworkgatewayresponse = networkmanagementclient.virtualnetworkgateways.createorupdate(resourcegroupname, virtualnetworkgatewayname, virtualnetworkgateway);\tassert.equal(\"succeeded\", putvirtualnetworkgatewayresponse.provisioningstate);",
  "storing satellite assembly path with name name",
  1
 ],
 [
  "}\tfinally {\tmounthelper.unmount(mounteddirname);\tdeletedir(mounteddirname, true);\t}\tfile.appendalltext(debugfilename, string.format(\"completed scenario {0}\", environment.newline));\t}\t}\tcatch (exception ex) {\ts_pass = false;",
  "err exception caught in scenario",
  0
 ],
 [
  "dynamic d = new target();\tint x = 3;\tbool ret = true;\ttry {\tchar s = d[x, x];\td[x, x] = 'a';\t}\tcatch (microsoft.csharp.runtimebinder.runtimebinderexception ex) {\tret = errorverifier.verify(errormessageid.ambigcall, ex.message, \"target.this[int, float]\", \"target.this[float, int]\");\tif (ret) return 0;",
  "unexpected error message",
  0
 ],
 [
  "public void discardnull_default_readto() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "verifying default discardnull with readto",
  0
 ],
 [
  "static void showhelp (optionset p) {",
  "rewrites all occurences of string keys with their values from string resource file",
  0
 ],
 [
  "private static bool callsecondclassinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tif ((!(bool)(((dynamic)firstclassreturnclass<int>.staticproperty).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public static void usage (string message) {\tif (message != null) {\tconsole.writeline (\"{0}{1}{0}\", environment.newline, message);\t}",
  "projectbrowser addnewdependentitemstoproject creating dependency for upon",
  1
 ],
 [
  "}\telse {\t_currentmode = currentenumeratormode.insertedvaluescompleted;\t_enumerator = (ienumerator<principal>)_insertedvaluescompleted.getenumerator();\tneedtorepeat = false;\t}\t}\twhile (needtorepeat);\t}\tif (_currentmode == currentenumeratormode.insertedvaluescompleted) {",
  "getextensionobject thread iteration value returned",
  1
 ],
 [
  "}\telse {\t}\t}\tjobspecification jobspec = curwi.jobspecification;\tif (null == jobspec) {\t}\telse {\ttestoutputhelper.writeline(\"\");\tjobconstraints jobcon = jobspec.constraints;",
  "constraints",
  0
 ],
 [
  "continue;\t}\tconstraintstruct[] constraints = ((validationstate)_validationstack[i]).constr;\tfor (int j = 0; j < constraints.length; ++j) {\tif (constraints[j].axisselector.movetostartelement(reader.localname, reader.namespaceuri)) {\tconstraints[j].axisselector.pushks(positioninfo.linenumber, positioninfo.lineposition);\t}\tfor (int k = 0; k < constraints[j].axisfields.count; ++k) {\tlocatedactiveaxis laxis = (locatedactiveaxis)constraints[j].axisfields[k];\tif (laxis.movetostartelement(reader.localname, reader.namespaceuri)) {",
  "found extenders",
  1
 ],
 [
  "public void defaultvalues() {\tvar main = new codeentrypointmethod();\tforeach (type t in new[] { typeof(int), typeof(object), typeof(datetime), typeof(string) }) {",
  "ok",
  1
 ],
 [
  "private void addcontentrenderer (idatagridcontentrenderer renderer) {\tforeach (type type in renderer.datatypes) {",
  "testing dynamic invoke stubs",
  1
 ],
 [
  "public static void unindexedcollectionevents() {\ticollection<int> coll = new arraylist<int>();\ticollection<int> bag1 = new hashbag<int>();\tbag1.addall(new int[] { 3, 2, 5, 5, 7, 7, 5, 3, 7, 7 });\tcoll.collectionchanged += delegate(object c)  {",
  "threadabortexception finally",
  1
 ],
 [
  "client[i] = this.multicluster.newclient(clustername, 0, clientwrapper.factory);\t}\toutput.writeline(\"clusters and clients are ready (elapsed = {0})\", stopwatch.elapsed);\tmulticluster.waitforlivenesstostabilizeasync().waitwiththrow(timespan.fromminutes(1));\tclient[0].injectclusterconfiguration(cluster);\tmulticluster.waitformulticlustergossiptostabilizeasync(false).waitwiththrow(timespan.fromminutes(system.diagnostics.debugger.isattached ? 60 : 1));\tstopwatch.stop();\toutput.writeline(\"multicluster is ready (elapsed = {0}).\", stopwatch.elapsed);\t}\telse {",
  "reusing existing clusters and clients",
  0
 ],
 [
  "public void state_8(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartdocument();\tw.writestartelement(\"root\");\tw.writeendelement();\tw.writestartattribute(\"attr\", \"\");\t}\tcatch (invalidoperationexception e) {",
  "exception",
  0
 ],
 [
  "public void test () {",
  "missing argument to mono gac prefix command line option",
  1
 ],
 [
  "public void test (u index) {",
  "test",
  0
 ],
 [
  "public virtual void afterremoving () {",
  "azuretable readalltableentities clear cleared table of entries in at rps",
  1
 ],
 [
  "marshal.addref(dispptr);\tretval = gettypelib(dispptr);\t}\tfinally {\tif (dispptr != intptr.zero) marshal.release(dispptr);\t}\treturn retval;\t}\tprotected int gettypelib(intptr dispptr) {\tif (traceutil.if(this, tracelevel.info)) {",
  "comobjinfo gettypelib type",
  0
 ],
 [
  "public static int main () {\tvar tests = from test in typeof (tester).getmethods (bindingflags.instance | bindingflags.nonpublic | bindingflags.declaredonly) where test.getparameters ().length == 0 && !test.isdefined (typeof (compilergeneratedattribute), false) orderby test.name select runtest (test);\tint failures = tests.count (a => !a);",
  "tests failed",
  0
 ],
 [
  "fail(\"err_191818ahied a thread is in pinchangedevent and receivedevent\");\t}\tif (erroreventhandler.numeventshandled != numerrorevents) {\tfail(\"err_198119hjaheid a thread is in pinchangedevent and errorevent\");\t}\t++numpinchangedevents;\tpinchangedeventhandler.resumehandleevent();\tthreadfound = true;\tbreak;\t}",
  "mapping match on sourcecolumn sourcecolumn",
  1
 ],
 [
  "}\terror = wldap32.ber_printf_int(berelement, new string(fmt, 1), (int)value[valuecount]);\tvaluecount++;\t}\telse if (fmt == 'b') {\tif (valuecount >= value.length) {\tdebug.writeline(\"value argument is not valid, valuecount >= value.length\\n\");\tthrow new argumentexception(string.format(cultureinfo.currentculture, sr.berconverternotmatch));\t}\tif (!(value[valuecount] is bool)) {",
  "uint value",
  1
 ],
 [
  "string a = args[i];\tif (a.startswith(\"-\") || a.startswith(\"/\")) {\tswitch (a.tolowerinvariant()) {\tcase \"/?\": case \"/help\": case \"-?\": case \"-help\": return false;\treturn false;\t}\t}\telse if (a.contains(\"=\")) {\tstring[] split = a.split('=');\tif (string.isnullorempty(split[1])) {",
  "bad command line arguments supplied",
  0
 ],
 [
  "public void addwebusernameandpassword (uri url, string username, string password) {\tvar didwrite = writecredential (url.host, username, password);\tif (didwrite) return;\tvar lasterror = (errorcode)marshal.getlastwin32error ();\tswitch (lasterror) {\tbreak;\tbreak;",
  "offset size underlyingsize",
  1
 ],
 [
  "using (xmlwriter w = utils.createwriter()) {\ttry {\tw.writeprocessinginstruction(\"xml\", \"version = \\\"1.0\\\"\");\tw.writestartdocument();\t}\tcatch (invalidoperationexception e) {\tcerror.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "public static void printtracelogfunction (string domain, loglevelflags level, string message) {\tprintlogfunction (domain, level, message);",
  "trace follows",
  0
 ],
 [
  "public static void main () {\tvar all = cultureinfo.getcultures (culturetypes.specificcultures | culturetypes.neutralcultures).orderby (l => l.lcid);\tconsole.outputencoding = encoding.utf8;\tvar writer = console.out;\tforeach (var c in all) {\tif (c.lcid == cultureinfo.invariantculture.lcid) continue;\tvar df = c.datetimeformat;",
  "no client certificate provided",
  1
 ],
 [
  "}\tstrxml = \"<root>\t\t\t </root>\";\tbreak;\t}\txmlreader xr;\txr = createreader(new stringreader(strxml));\tdo { xr.read(); }\twhile ((xr.nodetype.tostring() != tokentype) && (xr.readstate != readstate.endoffile));\tif (xr.readstate == readstate.endoffile || xr.nodetype.tostring() != tokentype) {\txr.dispose();",
  "readstate",
  0
 ],
 [
  "public bool run() {\tbool ok = false;\ttry {\tsilohost.initializeorleanssilo();\tok = silohost.startorleanssilo();\tif (ok) {",
  "successfully started orleans silo as a node",
  0
 ],
 [
  "public static int main () {\tm2 m2 = new m2();\ttry {\tvar dll = assembly.loadfile(@\"test-multi-netmodule-3-dll2.dll\");\tvar m3type = dll.gettype(\"m3\");\tvar m3 = activator.createinstance(m3type);\tvar m3m1field = m3type.getfield(\"m1\");\t} catch (system.typeloadexception) {\treturn 0;\t}",
  "assembly",
  0
 ],
 [
  "static int main () {\tint size = marshal.sizeof(typeof(teststructure));",
  "failed",
  1
 ],
 [
  "public static int main () {\tint result = test ();",
  "result",
  0
 ],
 [
  "bool is_child_of_main = false; ;\tdo {\tif (current.parent == context.mainform) {\tis_child_of_main = true;\tbreak;\t}\tcurrent = current.parent;\t} while (current != null);\tif (is_child_of_main) continue;\tif (f.ishandlecreated && xplatui.isenabled (f.handle)) {",
  "unhandledexception caught",
  1
 ],
 [
  "public static void threadmethod_b() {",
  "thread b started",
  0
 ],
 [
  "private void writeservicepoint (servicepoint sp) {",
  "idlesince",
  0
 ],
 [
  "if (s16.f4 != 4+9) {\treturn 4;\t}\tif (s16.f5 != 5+9) {\treturn 5;\t}\tif (s16.f6 != 6+9) {\treturn 6;\t}\tif (s16.f7 != 7+9) {",
  "number of versions of key in the vault",
  1
 ],
 [
  "int failcount = 0;\tc origin = new c(0);\tdynamic d = origin;\tint count = 0;\tdo {\tif (count == 0) {\tcount++;\t}\telse {\tfailcount++;",
  "test failed conversion result is incorrect",
  0
 ],
 [
  "private static bool callsecondinterfaceinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturninterface();\tif ((!(bool)(((dynamic)s.instanceproperty).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "creating pad",
  1
 ],
 [
  "public void ipinfotest_accessallproperties_noerrors() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfaceproperties ipproperties = nic.getipproperties();\tassert.notnull(ipproperties);\tassert.notnull(ipproperties.anycastaddresses);",
  "object o",
  1
 ],
 [
  "if (heapshotfreq > 0) profoptions += $\"heapshot={heapshotfreq}gc,\";\tprofoptions += string.join (\",\", flags);\t} else profoptions += options;\tvar info = new processstartinfo {\tuseshellexecute = false, workingdirectory = path.combine (testdir, bench.testdirectory), filename = monopath, arguments = $\"--debug --profile=log:{profoptions} \" + string.join (\" \", bench.commandline), redirectstandardoutput = true, redirectstandarderror = true, };\tinfo.environmentvariables.clear ();\tinfo.environmentvariables.add (\"mono_path\", classdir);\tif (suspend) info.environmentvariables.add (\"mono_debug\", \"suspend-on-native-crash,suspend-on-unhandled\");\tvar progress = $\"({i + 1}/{benchmarks.length})\";\tconsole.foregroundcolor = consolecolor.blue;",
  "end sub",
  1
 ],
 [
  "protected override void generatemethodreturnstatement(codemethodreturnstatement e) {\tif (e.expression != null) {\toutput.write(\"return \");\tgenerateexpression(e.expression);\toutput.writeline(\"\");\t}\telse {",
  "return",
  0
 ],
 [
  "public void dispose () {",
  "dispose",
  0
 ],
 [
  "w.flush();\tms.position = 0;\tusing (streamreader reader = new streamreader(ms)) {\treader.readtoend();\t}\t}\t}\tassert.true(false);\t}\tcatch (exception e) {",
  "unknownunmanagedfunctionstatisticalhit",
  1
 ],
 [
  "public bool bisect () {\tvar stdout = run (null);\tif (stdout == null) {",
  "failed with",
  1
 ],
 [
  "system.console.writeline(indent + curvar.desc);\ttestmodule.failcount++;\t}\telse {\tsystem.console.writeline(indent + curvar.desc);\ttestmodule.skipcount++;\t}\t}\tcatch (ctestskippedexception tse) {\tsystem.console.writeline(indent + curvar.desc);",
  "succeeded",
  1
 ],
 [
  "public static void clobtest (oracleconnection connection) {\toracletransaction transaction = connection.begintransaction ();",
  "publicipaddress gateway ip",
  1
 ],
 [
  "static void appdomainmethod () {",
  "pgroup",
  1
 ],
 [
  "list<stresstest> tmpweightedlookup = new list<stresstest>();\tforeach (testbase t in alltests) {\tif (t is stresstest) {\t_alltests.add(t as stresstest);\t}\t}\ttry {\t_perfcounters = new perfcounters();\t}\tcatch (exception e) {",
  "warning an error occurred initializing performance counters performance counters can only be initialized when running with administrator privileges error message",
  0
 ],
 [
  "public void testaddbracestousing() {\ttest<addbracesaction>(@\"class testclass {\tvoid test () {\t$using (var a = new a ()) console.writeline (\"\"hello\"\");\t}\t}\", @\"class testclass {\tvoid test () {\tusing (var a = new a ()) {",
  "test failed conversion result is incorrect",
  1
 ],
 [
  "public bool run() {\tbool ok = false;\ttry {\tsilohost.initializeorleanssilo();\tok = silohost.startorleanssilo();\tif (ok) {",
  "readreferencedelements",
  1
 ],
 [
  "public void readchar_rndparityreplace() {",
  "typelib populatefromregistry",
  1
 ],
 [
  "public void ipinfotest_accessallipv6properties_noerrors() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfaceproperties ipproperties = nic.getipproperties();\tipv6interfaceproperties ipv6properties = ipproperties.getipv6properties();\tif (ipv6properties == null) {\tcontinue;\t}",
  "test failed at call result",
  1
 ],
 [
  "private static bool callsecondinterfaceinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturninterface();\tif ((!(bool)(((dynamic)(s + 1)).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "span",
  1
 ],
 [
  "public void consistentringprovider_test1() {\tsiloaddress silo1 = siloaddressutils.newlocalsiloaddress(0);\tconsistentringprovider ring = new consistentringprovider(silo1, nullloggerfactory.instance);\tring.addserver(siloaddressutils.newlocalsiloaddress(1));",
  "range the whole ring is",
  0
 ],
 [
  "boolean bt = (1 == 1);\tm_xsltarg.addextensionobject(\"myarg4\", bt);\tretobj = m_xsltarg.getextensionobject(\"myarg4\");\tif (!bt.equals(retobj)) {\tassert.true(false);\t}\tdouble d = 3.14;\tm_xsltarg.addextensionobject(\"myarg5\", d);\tretobj = m_xsltarg.getextensionobject(\"myarg5\");\tif (!d.equals(retobj)) {",
  "verifying zero readtimeout before open with readbyte",
  1
 ],
 [
  "if (applicationstateinfoservice != null) {\tapplicationstateinfoservice.registerstategetter(activecontentstate, delegate { return sd.workbench.activecontent; });\t}\tworkbenchsingleton.onworkbenchcreated();\tnavigationservice.initializeservice();\tworkbench.activecontentchanged += delegate {\t};\tworkbench.activeviewcontentchanged += delegate {\t};\tworkbench.activeworkbenchwindowchanged += delegate {",
  "price",
  1
 ],
 [
  "public static void threadmethod_a() {\tfor (int i=0;i<10;i++) {\tm[i].waitone();",
  "thread a now using mutex",
  0
 ],
 [
  "public static int main () {\tblah b = new blah ();\tb.connect ();\tb.button1.onclick (2, 3);\tb.disconnect ();\tb.button1.onclick (3, 7);",
  "events test passes",
  0
 ],
 [
  "string[] stringvalues = new string[]\t{\tstring.empty, \"abc\", null }\t;\tforeach (string a2 in stringvalues) {\tforeach (string a3 in stringvalues) {\tbool d1 = true;\tstring d2 = a2;\tdynamic d3 = 100;\tif ((d1 ? \"abc\" : d3) != (d1 ? \"abc\" : a3)) {",
  "foo",
  1
 ],
 [
  "static void concludedragoperation (intptr sender, intptr sel, intptr draginfo) {",
  "concludedragoperation",
  0
 ],
 [
  "static void listpermissionsets () {\tprintglobalinfo ();\tforeach (policylevel pl in levels) {",
  "level",
  0
 ],
 [
  "if (chain.chainstatus.length > 0) {\tforeach (x509chainstatus st in chain.chainstatus) {\tconsole.writeline (\"\\t{0}\", st.status);\t}\t} else {\tconsole.writeline (\"\\t{0}\", x509chainstatusflags.noerror);\t}\tconsole.writeline ();\tint n = 1;\tforeach (x509chainelement ce in chain.chainelements) {",
  "failed to read",
  1
 ],
 [
  "static void async_callback (iasyncresult ar) {\tasyncresult ares = (asyncresult)ar;\tasynccallback ac = new asynccallback (async_callback);",
  "error don t worry about this one",
  1
 ],
 [
  "_typeinfo.getcontainingtypelib(out itypelib, out index);\t_typelib = typelibrary.gettypelib(itypelib);\t}\tcatch (exception ex) {\tif (_typeinfo != null) {\tguid guid = basicinfo.guidfromtypeinfo(_typeinfo);\t}\tthrow new exception(\"cannot get typelib for object.  \" + \"getting the typelib information for \" + \"an object is required as this contains \" + \"the type information used to display \" + \"the object. \", ex);\t}\tif (traceutil.if(this, tracelevel.info)) {",
  "comobjinfo containing typelib index",
  0
 ],
 [
  "xmlschemaattribute attribute = (xmlschemaattribute)derivedtype.attributeuses[attributebase.qualifiedname];\tif (attribute == null) {\tderivedtype.attributeuses.add(attributebase.qualifiedname, attributebase);\t}\telse {\tif (attributebase.use == xmlschemause.prohibited && attribute.use != xmlschemause.prohibited) {\t#if debug string position = string.empty;\tif (derivedtype.sourceuri != null) {\tposition = \" in \" + derivedtype.sourceuri + \"(\" + derivedtype.linenumber + \", \" + derivedtype.lineposition + \")\";\t}",
  "warning",
  1
 ],
 [
  "public static void main (string[] args) {\tif (args.length == 0) {\tconsole.writeline ();\tconsole.writeline ();",
  "ur url update service references from disco or wsdl document",
  0
 ],
 [
  "private static bool parseargumentvalue (string value) {\tif ((value.length == 1)) {\tswitch (value [0]) {\tcase 't': return true;\tcase 'f': return false;\tthrow new applicationexception (\"invalid argument value \" + value);\t}\t} else {",
  "invalid argument value",
  0
 ],
 [
  "invocationexpression invocation = expr as invocationexpression;\tif (invocation != null) {\tmemberreferenceexpression fre = invocation.targetobject as memberreferenceexpression;\tif (fre != null) {\tif (fre.membername == \"getstring\" || fre.membername == \"getobject\" || fre.membername == \"getstream\") {\tif (invocation.arguments.count > 0) {\tprimitiveexpression p = invocation.arguments[0] as primitiveexpression;\tif (p != null) {\tstring key = p.value as string;\tif (key != null) {",
  "verifying setting baudrate after a call to open has been made",
  1
 ],
 [
  "unicodeencoding encoding = new unicodeencoding ();\tbytes = encoding.getbytes (\"mono is fun!\");\tclob.write (bytes, 0, bytes.length);\tclob.close ();\toraclelob blob = reader.getoraclelob (1);\tbytes = new byte[6] { 0x31, 0x32, 0x33, 0x34, 0x35, 0x036 };\tblob.write (bytes, 0, bytes.length);\tblob.close ();\ttrans.commit ();\treadsimpletest(con, \"select * from mono_oracle_test\");",
  "executescalar tests",
  0
 ],
 [
  "public static int main () {\tvar t = new test ();\tif (!t.foreachtest ()) return 1;\tif (!t.foreachtest_2 ()) return 2;\tif (!t.foreachtest_3 ()) return 3;\tif (!t.usingtest ()) return 10;",
  "adstorectx cannotchangepwdtoldapconverter add allow world",
  1
 ],
 [
  "float7 s7;\ts7.f1 = 1;\ts7.f2 = 2;\ts7.f3 = 3;\ts7.f4 = 4;\ts7.f5 = 5;\ts7.f6 = 6;\ts7.f7 = 7;\ts7 = mono_return_float7(s7, 906);\tif (s7.f1 != 1+906) {",
  "got but expected",
  0
 ],
 [
  "public int v15() {\treloadsource(new stringreader(\"<root><b/></root>\"));\tdatareader.read();\tif (isbinaryreader()) datareader.read();\ttry {\tdatareader.readtodescendant(null);\t}\tcatch (argumentnullexception) {",
  "gtk version is incompatible with required version",
  1
 ],
 [
  "public void dump () {",
  "did not throw exception",
  1
 ],
 [
  "m_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(\"myarg1\", szempty, \"test2\");\tm_xsltarg.removeparam(\"myarg1\", szempty);\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);\tif (retobj != null) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg1\", szempty, \"test1\");\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);\tif (retobj.tostring() != \"test1\") {",
  "value of removed object is not as expected",
  0
 ],
 [
  "static void dumpkeyinfoclause (keyinfoclause kic) {\tkeyinfoname kn = kic as keyinfoname;\tif (kn != null) {\treturn;\t}\tkeyinfox509data k509 = kic as keyinfox509data;\tif (k509 != null) {\tconsole.writeline (\"*** keyinfox509data ***\");",
  "subjectnames",
  0
 ],
 [
  "private static void testdelegate() {",
  "usage chktrust options filename",
  1
 ],
 [
  "} catch (memberaccessexception) {\t}\ttry {\tvar a = new wrongcasefriendassembly.internalclass(@internal: 0);\t} catch (memberaccessexception) {\tfailcount += 1;\t}\ttry {\tvar b = new wrongcasefriendassembly.internalclass(@public: 'a');\tb.internalmethod();",
  "access friend internal method ok",
  0
 ],
 [
  "public void ipinfotest_accessallipv6properties_noerrors() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {",
  "hello world",
  1
 ],
 [
  "public static ienumerable<string> yieldreturnwithnestedtryfinally(bool breakinmiddle) {\tyield return \"start of method\";\ttry {\tyield return \"within outer try\";\ttry {\tyield return \"within inner try\";\tif (breakinmiddle) yield break;\tyield return \"end of inner try\";",
  "verifying writetimeout with write byte buffer int offset int count",
  1
 ],
 [
  "} catch (threadabortexception e) {\tcatched_abort = true;\t}\t});\tthread.start ();\tdriver.mre1.waitone ();\tthread.join ();\tif (!catched_abort) environment.exit (8);\ttry {\tisstaticconstructor3viable ();",
  "is viable",
  0
 ],
 [
  "protected void processchildproperties(xmlnode node, object parent) {\ttype t=parent.gettype();\tforeach(xmlnode child in node.childnodes){\tif (child is xmlelement) {\tstring pname=child.localname;\tif (string.equals(pname,\"items\")) {\tpname = \"controls\";\t}\tpropertyinfo pi=t.getproperty(pname);\tif (pi==null) {",
  "unsupported property",
  0
 ],
 [
  "public static void usage (string error) {",
  "bad",
  1
 ],
 [
  "progressdialog progressdialog = new progressdialog();\tprogressdialog.setup(\"loading remembered activex files\", \"please wait while i load the previously \" + \"opened activex files.\", _typelibs.count, progressdialog.has_progress_text, progressdialog.final);\tprogressdialog.showifnotdone();\ttry {\tfor (int i = _typelibs.count - 1; i >= 0; --i) {\tpreviouslyopenedtypelibrary typelib = _typelibs[i];\ttry {\tprogressdialog.updateprogresstext(typelib.filename);\tguid guid = new guid(typelib.guid);\ttypelibrary.restoretypelib(typelib.filename, guid, typelib.version);",
  "loaded assy",
  0
 ],
 [
  "thread main=thread.currentthread;\tmain.name=\"wibble\";\tthread othermain=thread.currentthread;\tthread.sleep(0);\tif(monitor.tryenter(thr, 100)==true) {\tmonitor.exit(thr);\t} else {\t}\tthread.setdata(slot, main);\tthread storedthr=(thread)thread.getdata(slot);",
  "solution file not found",
  1
 ],
 [
  "static void setupinstrumentation () {\tinstrumentationservice.enabled = runtime.preferences.enableinstrumentation;\tif (instrumentationservice.enabled) {\ttry {\tint port = instrumentationservice.publishservice ();\t} catch (exception ex) {",
  "consolelogger",
  1
 ],
 [
  "#if debug if (adapterswitches.dataschema.traceinfo) {\t}\t#endif return columnmappings.items[index];\t}\t}\tif (adp.isempty(sourcecolumn)) {\tthrow adp.invalidsourcecolumn(\"sourcecolumn\");\t}\tswitch (mappingaction) {\tcase missingmappingaction.passthrough: #if debug if (adapterswitches.dataschema.traceinfo) {",
  "samstorectx updategroupmembership removing",
  1
 ],
 [
  "if (!quiet) {\tdouble ratio = ((double) stream.length * 100) / real_size;\t}\t} else {\ttc.writeline (\"static const monobundledassembly assembly_bundle_{0} = {{\\\"{1}\\\", assembly_data_{0}, {2}}};\", encoded, aname, real_size);\t}\tstream.close ();\tc_bundle_names.add (\"assembly_bundle_\" + encoded);\ttry {\tfilestream cf = file.openread (fname + \".config\");",
  "originally added here",
  1
 ],
 [
  "public void writestring_14(xmlwriterutils utils) {\tchar[] invalidxml = { 'a', 'b', '\\uda34' };\tstring invxml = new string(invalidxml);\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writestring(invxml);\t}\tcatch (argumentexception e) {",
  "exception",
  0
 ],
 [
  "public int getextnobject1(object args) {\tobject retobj;\tfor (int i = 1; i <= 100; i++) {\tretobj = xsltarg1.getextensionobject(((object[])args)[1].tostring());",
  "assembly",
  1
 ],
 [
  "}\t}\tif (adp.isempty(sourcecolumn)) {\tthrow adp.invalidsourcecolumn(\"sourcecolumn\");\t}\tswitch (mappingaction) {\tcase missingmappingaction.passthrough: #if debug if (adapterswitches.dataschema.traceinfo) {\t}\t#endif return new datacolumnmapping(sourcecolumn, sourcecolumn);\tcase missingmappingaction.ignore: #if debug if (adapterswitches.dataschema.tracewarning) {",
  "mapping filter of sourcecolumn sourcecolumn",
  0
 ],
 [
  "this.testoutputhelper.writeline(\"\");\ttaskconstraints comptc = mycompletedtask.constraints;\tassert.notnull(comptc);\tif (null == comptc) {\t}\telse {\tthis.testoutputhelper.writeline(\"\");\tassert.true(comptc.maxtaskretrycount.hasvalue);\tassert.equal(99, comptc.maxtaskretrycount.value);\t}",
  "taskexecutioninfo",
  0
 ],
 [
  "public void largeswitch (string s) {\tswitch (s) {\tbreak;\tbreak;",
  "one",
  0
 ],
 [
  "x509.privatekey = privatekey.createfromfile (pvk).rsa;\t} catch (exception e) {\thelp (true);\t}\tstring target_cert = path.combine (path, string.format (\"{0}.cer\", port));\tif (file.exists (target_cert)) {\thelp (true);\t}\tstring target_pvk = path.combine (path, string.format (\"{0}.pvk\", port));\tif (file.exists (target_pvk)) {",
  "error there is already a certificate for that port",
  0
 ],
 [
  "static private void help () {",
  "application config path",
  1
 ],
 [
  "private safeprocesshandle getprocesshandle(int access, bool throwifexited) {\t#if feature_traceswitch debug.writelineif(_processtracing.traceverbose, \"getprocesshandle(access = 0x\" + access.tostring(\"x8\", cultureinfo.invariantculture) + \", throwifexited = \" + throwifexited + \")\");\t#if debug if (_processtracing.traceverbose) {\tstackframe calledfrom = new stacktrace(true).getframe(0);",
  "called from line",
  0
 ],
 [
  "try {\tthread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();\t} finally {\t}\ttry {\tthread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();",
  "error while trying to invoke to generate satellite assembly for culture",
  1
 ],
 [
  "static void printlocation (ilocation loc) {",
  "begin column",
  0
 ],
 [
  "public void addparam14(inputtype inputtype, readertype readertype, transformtype transformtype, doctype doctype) {\tstring expected = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?><result> 1.test1 2.test2 3.no value specified 4.no value specified 5.no value specified 6.no value specified</result>\";\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(\"myarg1\", szempty, \"test1\");\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);",
  "added value retrieved value",
  0
 ],
 [
  "public void getparam1() {\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(\"myarg1\", szempty, \"test1\");\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);",
  "added value retrieved value",
  0
 ],
 [
  "static bool callsecondclassoperator() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturndynamicclass<int>();\tif ( (!(bool)(s.instanceproperty + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public bool onpromptpassword (intptr title, intptr text, intptr chkmsg, ref bool chkstate, out intptr password) {\t#if debug ongeneric (\"onpromptpassword\");",
  "hello",
  1
 ],
 [
  "if (s8.f4 != 4+9) {\treturn 4;\t}\tif (s8.f5 != 5+9) {\treturn 5;\t}\tif (s8.f6 != 6+9) {\treturn 6;\t}\tif (s8.f7 != 7+9) {",
  "bad command line arguments supplied",
  1
 ],
 [
  "dump (writer, df.monthnames, \"monthnames\");\tdump (writer, df.shortestdaynames, \"shortestdaynames\");\tvar ti = c.textinfo;\tvar nf = c.numberformat;\tdump (writer, nf.currencygroupsizes, \"currencygroupsizes\");\tdump (writer, nf.nativedigits, \"nativedigits\");\tdump (writer, nf.numbergroupsizes, \"numbergroupsizes\");\tdump (writer, nf.percentgroupsizes, \"percentgroupsizes\");\tif (!c.isneutralculture) {\tvar ri = new regioninfo (c.lcid);",
  "state",
  1
 ],
 [
  "}\ttaskexecutioninformation tei = mycompletedtask.executioninformation;\tassert.notnull(tei);\tif (null == tei) {\t}\telse {\tthis.testoutputhelper.writeline(\"\");\t}\ttaskstatistics compts = mycompletedtask.statistics;\tif (null == compts) {",
  "null",
  0
 ],
 [
  "private static void invalidvalueinoutparam(string connectionstring) {\tusing (var connection = new sqlconnection(connectionstring)) {\tconnection.open();\tusing (var command = new sqlcommand(\"set @decimal = 1.23\", connection)) {\tvar decimalparam = new sqlparameter(\"decimal\", new decimal(2.34)) { sqldbtype = sqldbtype.decimal, direction = parameterdirection.output, scale = 2, precision = 5 };\tcommand.parameters.add(decimalparam);\tdecimalparam.value = \"not a decimal\";\tcommand.executenonquery();\tif (((decimal)decimalparam.value) != new decimal(1.23)) {",
  "nonunicastpacketssent",
  1
 ],
 [
  "public static mytypefinder create(openedfile file) {\tmytypefinder f = new mytypefinder();\tf.file = file;\tf.importfrom(createwpftypefinder());\tvar compilation = sd.parserservice.getcompilationforfile(file.filename);\tforeach (var referencedassembly in compilation.referencedassemblies) {\ttry {\tvar assembly = f.typeresolutionservice.loadassembly(referencedassembly);\tif (assembly != null) f.registerassembly(assembly);\t} catch (exception ex) {",
  "derived",
  1
 ],
 [
  "try {\textra = p.parse(args);\t}\tcatch(optionexception e) {\treturn 1;\t}\tif (!nologo) {\t}\tif (help) {\tconsole.writeline();",
  "lc c filename t targetassembly i references v o nologo",
  0
 ],
 [
  "public void discardnull_default_readchar() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "verifying default discardnull with readchar",
  0
 ],
 [
  "public void readtimeout_nonzero_resizebuffer() {\tusing (serialport com1 = tcsupport.initfirstserialport()) using (serialport com2 = tcsupport.initsecondserialport(com1)) {\tbyte[] bytexmitbuffer = new byte[1024];\tchar utf32char = 'a';\tbyte[] utf32charbytes = encoding.utf32.getbytes(new[] { utf32char });\tchar[] charxmitbuffer = tcsupport.getrandomchars(16, false);\tchar[] expectedchars = new char[charxmitbuffer.length + 1];",
  "verifying read method with non zero timeout that resizes serialport s buffer",
  0
 ],
 [
  "public void skipusinggoto () {\ttry {\tfile.open (\"foo.txt\", filemode.open);\t}\tcatch (exception exception) {\tretry: if (exception == null) throw new exception (exception.tostring ());",
  "ok",
  1
 ],
 [
  "string btime = null;\tstring line;\ttry {\tusing (streamreader stat_file = new streamreader (\"/proc/stat\", encoding.ascii)) {\twhile ((line = stat_file.readline ()) != null) if (line.startswith (\"btime\")) {\tbtime = line;\tbreak;\t}\t}\t} catch (exception e) {",
  "codeprimitiveexpression null",
  1
 ],
 [
  "private static bool test3() {\tbool[] boolvalues = new bool[]\t{\ttrue, false }\t;\tforeach (bool a1 in boolvalues) {\tforeach (bool a2 in boolvalues) {\tdynamic d1 = a1;\tdynamic d2 = a2;\tif ((d1 | d2) != (a1 | a2)) {",
  "usage secutil options filename",
  1
 ],
 [
  "}\t}\tcatch (exception e) {\tconsole.writeline (e.tostring ());\t}\ttimespan ts = (datetime.now - start);\tif ((show) && (content != null)) {\tconsole.writeline (\"{0}{1}{0}\", environment.newline, content);\t}\tif (time) {",
  "bad",
  1
 ],
 [
  "public static string getxspname (aspnetexecutioncommand cmd) {\tswitch (cmd.clrversion) {\tcase clrversion.net_1_1: return \"xsp1\";\tcase clrversion.net_2_0: return \"xsp2\";\tcase clrversion.net_4_0: return \"xsp4\";\tcase clrversion.net_4_5: return \"xsp4\";",
  "verifying default writetimeout with write char buffer int offset int count",
  1
 ],
 [
  "static void help (string details) {\tswitch (details) {\tbreak;",
  "d container delete the specified key container",
  0
 ],
 [
  "internal type figureoutclass() {\t_interfaces = new arraylist();\tintptr unkptr = marshal.getiunknownforobject(_obj);\tmarshal.addref(unkptr);\tforeach (cominterfaceinfo intinfo in _typelib.interfaces) {\tguid tempguid = intinfo._guid;\tintptr implptr;\tmarshal.queryinterface(unkptr, ref tempguid, out implptr);\tif (implptr != intptr.zero) {\tif (traceutil.if(this, tracelevel.info)) {",
  "comobjectinfo impl iid",
  0
 ],
 [
  "private void writeservicepoint (string label, servicepoint sp) {\tconsole.writeline (\"\\n\" + label);",
  "currentconnections",
  0
 ],
 [
  "private static bool callsecondclassindexer() {\tint failcount = 0;\tdynamic d = new firstclassreturnclass();\tverify.firstcalled = false;\tif ((!(((secondclass)d.instanceproperty)[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "string etag = store.writerow(keys, asdictionary(data.state), null);\toutput.writeline(\"write returned etag={0} after {1} {2}\", etag, sw.elapsed, storageproviderutils.printonewrite(keys, data, etag));\tsw.restart();\tvar storeddata = store.readrow(keys);\tassert.notnull(data);\tsw.restart();\tbool ok = store.deleterow(keys, etag);\tassert.true(ok, $\"row deleted ok after {sw.elapsed}. etag={etag} keys={storageproviderutils.printkeys(keys)}\");\tsw.restart();\tstoreddata = store.readrow(keys);",
  "re read took and returned",
  0
 ],
 [
  "public override void onstop() {\tif (this.orleansazuresilo != null) {\tthis.orleansazuresilo.stop();\t}\troleenvironment.changing -= roleenvironmentchanging;\tbase.onstop();",
  "orleansazuresilos onstop finished information",
  0
 ],
 [
  "const unsigned char *data;\tconst unsigned int size;\t} monobundledassembly;\tvoid          mono_register_bundled_assemblies (const monobundledassembly **assemblies);\tvoid          mono_register_config_for_assembly (const char* assembly_name, const char* config_xml);\t\");\t} else {\tif (in_tree != null) tc.writeline (\"#include <mono/mini/jit.h>\\n\");\t}\tif (compress) {",
  "typedef struct compressed data",
  0
 ],
 [
  "ms.position = 0;\tusing (streamreader reader = new streamreader(ms)) {\toutputxml = reader.readtoend();\t}\t}\t}\tcerror.compare(outputxml, \"<elem>text</elem>\", \"wrong xml\");\tassert.true(false);\t}\tcatch (exception e) {",
  "test",
  1
 ],
 [
  "public async task runasync() {\tawait fullrunasync();",
  "warm run",
  0
 ],
 [
  "readhandle = null;\t}\tif (writehandle != null) {\ttry {\twritehandle.close();\t}\tcatch (ioexception) {\tthrow sharedutils.createsafewin32exception();\t}\twritehandle = null;",
  "there are assemblies listed in the section",
  1
 ],
 [
  "private static void load () {\tusing (filestream file = new filestream (bookmark_file,filemode.open)) {\troot_group = (bookmarkgroup)serializer.deserialize (file);\t}",
  "name lcid",
  1
 ],
 [
  "private static int main() {\tnew test().fibonacci(20, true);\tconsole.writeline();",
  "passed",
  0
 ],
 [
  "public helpservice() {",
  "create helpservice",
  0
 ],
 [
  "public async task bug1360227_addtasksbatchfailure(bool usejoboperations) {\tconst string testname = \"bug1360227_addtasksbatchfailure\";\tint count = 0;\tconst int counttofailat = 102;\tconst int taskcount = 407;\thashset<string> taskidsexpectedtofail = new hashset<string>();\tfunc<addtaskresult, cancellationtoken, addtaskresultstatus> resulthandlerfunc = (result, token) => {",
  "create or replace package mypackage",
  1
 ],
 [
  "public override void print (textwriter tw, ilprinter<apc> printer, func<cfgblock, ienumerable<sequence<edge<cfgblock, edgetag>>>> contextlookup, sequence<edge<cfgblock, edgetag>> context, hashset<pair<subroutine, sequence<edge<cfgblock, edgetag>>>> printed) {\tvar element = new pair<subroutine, sequence<edge<cfgblock, edgetag>>> (this, context);\tif (printed.contains (element)) return;\tprinted.add (element);\tvar subs = new hashset<subroutine> ();\tvar methodinfo = this as imethodinfo;\tstring method = (methodinfo != null) ? string.format (\"({0})\", this.subroutinefacade.metadataprovider.fullname (methodinfo.method)) : null;\ttw.writeline (\"-------------\");\tforeach (blockwithlabels<label> block in this.blocks) {\ttw.write (\"block {0} ({1})\", block.index, block.reversepostorderindex);",
  "join point",
  0
 ],
 [
  "private static bool decimaltypewithnumbericconversionfromuintinassignment() {\tint failcount = 0;\tuint origin = uint.maxvalue;\tdynamic d = origin;\tdecimal result = d;\tif (result != origin) {\tfailcount++;",
  "ok",
  1
 ],
 [
  "configuration.loadeddefaultproviders.add (pname);\tinitializing++;\tontoolboxcontentschanged ();\tsystem.threading.threadpool.queueuserworkitem (delegate {\tif (!runtime.initialized) return;\tlist<itemtoolboxnode> nodes = new list<itemtoolboxnode> ();\ttry {\tienumerable<itemtoolboxnode> newitems = provider.getdefaultitems ();\tif (newitems != null) nodes.addrange (newitems);\t} catch (exception ex) {",
  "third assembly must be sre but it was",
  1
 ],
 [
  "public void start() {\tif (_listener != null) {\tthrow new invalidoperationexception(\"cannot restart server.\");\t}\t_listener = new tcplistener(_options.address, _port);\t_listener.start(_options.listenbacklog);\tvar ipendpoint = (ipendpoint)_listener.localendpoint;\t_port = ipendpoint.port;",
  "server waiting for connections",
  0
 ],
 [
  "static async task runasync(isilohost silo, iclusterclient client, string mapfilename) {\tawait silo.startasync();\tawait client.connect();",
  "error building recent solutions list",
  1
 ],
 [
  "public void baudrate_maxvalue() {",
  "creating rules make",
  1
 ],
 [
  "sw.writeline (@\"        <tr id='el{0}' class='errorlist' style='display: none'>\", assembly);\tsw.writeline (@\"            <td colspan='4'>\");\tsw.writeline (@\"                <table cellpadding='2' cellspacing='0' width='100%'>\");\tint test_num = 0;\tforeach (failedtest ft in failed_tests.values) {\tsw.writeline (\"                    <tr onclick=\\\"toggle('as{0}ed{1}')\\\" onmouseover='highlight(this)' onmouseout='unhighlight(this)'>\", assembly, test_num);\tsw.writeline (@\"                        <td style='width: 17px'><img src='media/bullet.png' /></td>\");\tsw.writeline (@\"                    <tr id='as{0}ed{1}' class='errordetail' style='display: none'>\", assembly, test_num);\ttest_num++;\t}",
  "failed to get git directory status",
  1
 ],
 [
  "public static void initialise () {\tif (schemas != null) return;\tschemas = new dictionary<string, htmlschema> ();\tforeach (doctypeextensionnode node in mono.addins.addinmanager.getextensionnodes (\"/monodevelop/html/doctypes\")) {",
  "htmlschemaservice cannot register duplicate doctype with the name",
  0
 ],
 [
  "public override monodevelop.projects.extensions.migrationtype shouldmigrateproject () {",
  "warning one or more projects in this solution cannot be",
  0
 ],
 [
  "public void encoding_unicodeencoding_beforeopen() {",
  "did not throw exception",
  1
 ],
 [
  "if ((0 <= index) && (index < columns.count)) {\tdatacolumn datacolumn = columns[index];\tdebug.assert(null != datacolumn, \"getdatacolumnbyschemaaction: unexpected null datacolumn\");\tif (!string.isnullorempty(datacolumn.expression)) {\t#if debug if (adapterswitches.dataschema.traceerror) {\t}\t#endif throw adp.columnschemaexpression(sourcecolumn, datasetcolumn);\t}\tif ((null == datatype) || (datatype.isarray == datacolumn.datatype.isarray)) {\t#if debug if (adapterswitches.dataschema.traceinfo) {",
  "bad combination of front back size array length",
  1
 ],
 [
  "s13.f9 = 9;\ts13.f10 = 10;\ts13.f11 = 11;\ts13.f12 = 12;\ts13.f13 = 13;\ts13 = mono_return_sbyte13(s13, 9);\tif (s13.f1 != 1+9) {\treturn 1;\t}\tif (s13.f2 != 2+9) {",
  "passed",
  1
 ],
 [
  "public static void check (texteditordata data, string content) {\tvar checkdocument = create (content);\tif (checkdocument.text != data.text) {",
  "did not throw exception",
  1
 ],
 [
  "if (i != 0) _tw.write(\", \");\t_tw.write(fmt.formatname(owningmethod.instantiation[i]));\t}\t_tw.write(\">\");\t}\t_tw.write(\"(\");\tfor (int i = 0; i < owningmethod.signature.length; i++) {\tif (i != 0) _tw.write(\", \");\t_tw.write(fmt.formatname(owningmethod.signature[i]));\t}",
  "cil managed",
  0
 ],
 [
  "writelineuni (\"}\");\twriteline (\"\");\twritelineind (\"if (typedserializers == null) {\");\twriteline (\"typedserializers = new system.collections.hashtable ();\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twriteline (\"\");\twritelineind (\"{\");",
  "switch type fullname",
  0
 ],
 [
  "if (members.length > 0 && members[0].mapping.isreturnvalue) writer.writeline(\"isreturnvalue = true;\");\tstring checktypehrefsource = (!haswrapperelement && !writeaccessors) ? \"hreflist\" : null;\tif (checktypehrefsource != null) writeinitchecktypehreflist(checktypehrefsource);\twriteparamsread(mappings.length);\tint loopindex = writewhilenotloopstart();\twriter.indent++;\tstring unrecognizedelementsource = checktypehrefsource == null ? \"unknownnode((object)p);\" : \"if (reader.getattribute(\\\"id\\\", null) != null) { readreferencedelement(); } else { unknownnode((object)p); }\";\twritememberelements(members, unrecognizedelementsource, \"unknownnode((object)p);\", null, null, checktypehrefsource);\twritewhileloopend(loopindex);\tif (checktypehrefsource != null) writehandlehreflist(members, checktypehrefsource);",
  "aborting",
  1
 ],
 [
  "private void checkrowversion(datarow dr) {\tconsole.writeline(\"\");",
  "has",
  0
 ],
 [
  "public static sockettestclient sockettestclientfactory( itestoutputhelper log, socketimplementationtype type, endpoint endpoint, int iterations, string message, stopwatch timeprogramstart) {\tswitch (type) {\tcase socketimplementationtype.apm: var socketapm = new sockettestclientapm(log, endpoint, iterations, message, timeprogramstart);",
  "sockettestclientapm",
  0
 ],
 [
  "public ruleresult checktype (typedefinition type) {\tif (!type.hasmethods || type.isenum || type.isdelegate ()) return ruleresult.doesnotapply;\tlog.writeline (this);\tlog.writeline (this, \"----------------------------------\");\tlog.writeline (this, type);\tif (!type.implements (\"system\", \"idisposable\")) {",
  "cancelled",
  1
 ],
 [
  "static x509certificatecollection decodecollection () {\tx509certificatecollection roots = new x509certificatecollection ();\tstringbuilder sb = new stringbuilder ();\tbool processing = false;\tusing (stream s = getfile ()) {\tif (s == null) {",
  "couldn t retrieve the file using the supplied information",
  0
 ],
 [
  "while ((rtf.rtf_class != tokenclass.eof) && (!rtf.checkcm(tokenclass.text, (major)';')) && (!rtf.checkcm(tokenclass.group, major.endgroup)) && (!rtf.checkcm(tokenclass.group, major.begingroup))) {\tsb.append((char)rtf.major);\trtf.gettoken();\t}\tif (rtf.checkcm(tokenclass.group, major.endgroup)) {\trtf.ungettoken();\t}\tfont.name = sb.tostring();\tcontinue;\t#if rtf_debug } else {",
  "visual studio",
  1
 ],
 [
  "public void emitunconditionalbranch(opcode opcode, label lbltarget) {\tif (!opcode.equals(opcodes.br) && !opcode.equals(opcodes.br_s)) {\tdebug.assert(opcode.equals(opcodes.brtrue) || opcode.equals(opcodes.brtrue_s) || opcode.equals(opcodes.brfalse) || opcode.equals(opcodes.brfalse_s));\temit(opcodes.ldc_i4_1);\t}",
  "label",
  0
 ],
 [
  "public static int main () {\tvar r = testgeneral ();\tif (r != 0) return r;\tr = testspecific ();\tif (r != 0) return 10 + r;",
  "ok",
  0
 ],
 [
  "smonolib = string.format (\"{0}/mono/mini/.libs/libmonosgen-2.0.a\", in_tree);\tin_tree_include = string.format (\" -i{0} \", in_tree);\t}\tcmd = string.format(\"{4} -o '{2}' -wall {7} `pkg-config --cflags mono-2` {9} {0} {3} \" + \"`pkg-config --libs-only-l mono-2` {5} {6} {8} \" + \"`pkg-config --libs-only-l mono-2 | sed -e \\\"s temp_c, temp_o, output, zlib, cc, smonolib, string.join (\" \", aot_paths), objc, platform_libs, in_tree_include);\t}\telse {\tcmd = string.format(\"{4} \" + debugging + \" -o '{2}' -wall {5} {0} `pkg-config --cflags --libs mono-2` {3} {1}\", temp_c, temp_o, output, zlib, cc, objc);\t}\texecute (cmd);\t}",
  "is not a strongly named assembly",
  1
 ],
 [
  "}\t}\tassembly assy = assembly.load(aname);\tif (assembly.typelibguid.length > 0) typelibrary.restoreassembly(assy, guid, assembly.typelibversion);\tprogressdialog.updateprogress(1);\t} catch (exception ex) {\t_assemblies.remove(assembly);\tprogressdialog.updateprogress(1);\t}\t}",
  "assembly restore end",
  0
 ],
 [
  "public bool onpromptpassword (intptr title, intptr text, intptr chkmsg, ref bool chkstate, out intptr password) {\t#if debug ongeneric (\"onpromptpassword\");",
  "onpromptpassword",
  0
 ],
 [
  "byte[] buffer = new byte[3];\tint startpos = 0;\tint readsize = 3;\tint currentsize = 0;\tdatareader.read();\twhile (datareader.read()) {\tcurrentsize = datareader.readcontentasbinhex(buffer, startpos, readsize);\tcerror.equals(currentsize, 1, \"size\");\tcerror.equals(buffer[0], (byte)17, \"buffer\");\tif (!(isxpathnavigatorreader() || isxmlnodereader() || isxmlnodereaderdatadoc())) {",
  "lineposition",
  0
 ],
 [
  "static void main (string[] args) {\tvar failcount = 0;",
  "problem loading stylesheet",
  1
 ],
 [
  "static void main(string[] args) {\tpgsqlconnection cnc = new pgsqlconnection ();\tstring connectionstring = \"host=localhost;\" + \"dbname=test;\" + \"user=postgres\";\tcnc.connectionstring =  connectionstring;\tcnc.open();\tdopostgrestest(cnc);",
  "symgraph changed because has fewer keys for than in",
  1
 ],
 [
  "public static int main () {\teventhandlers handlers = new eventhandlers ();\thandlers.handler = handlers.dosomethingeventhandler;\tconsole.writeline (\"is handlers.handler == handlers.dosomethingeventhandler (instance)?\");\tconsole.write (\"actual:   \");\tbool instanceequal = handlers.handler == handlers.dosomethingeventhandler;\tconsole.writeline (instanceequal);\tconsole.writeline ();\thandlers.handler = eventhandlers.donothingeventhandler;\tconsole.writeline (\"is handlers.handler == eventhandlers.donothingeventhandler (static)?\");",
  "expected true",
  0
 ],
 [
  "public void testincompleteparameter() {\tstring code = {\tvoid bar (params system.a) {}\t}\t\";\tvar unit = syntaxtree.parse(code);\tvar type = unit.members.first() as typedeclaration;\tvar method = type.members.first() as methoddeclaration;\tbool passed = method.parameters.count == 1;\tif (!passed) {",
  "was",
  0
 ],
 [
  "methodbuilder main = m.definemethod(\"main\", methodattributes.public | methodattributes.static );\t{\tilgenerator il = main.getilgenerator();\til.emit(opcodes.call, typebuilder.getmethod (gobj, foo));\til.emit(opcodes.ret);\t}\tasmbuild.setentrypoint (main);\tg.createtype();\tm.createtype();\tasmbuild.save(\"instance.exe\");",
  "ulong max",
  1
 ],
 [
  "static void printglobalinfo () {",
  "execution check",
  0
 ],
 [
  "private void conditionequalitybad (object value) {\tif ((value as useisoperatortest) == null) {",
  "setting main thread s priority to abovenormal",
  1
 ],
 [
  "if ( --level == 0) {\ttrace.writeline( \"############################################################################\" );\tif (messages.count == 0) {\t}\telse {\tforeach ( string s in messages ) {\ttrace.writeline(s);\t}\t}\ttrace.writeline( \"############################################################################\" );",
  "publicstaticmethod",
  1
 ],
 [
  "public static void main (string[] args) {\tif (args.length == 0) {\tconsole.writeline ();\tconsole.writeline ();",
  "addnlinkedattrset dispose disposing members enumerable",
  1
 ],
 [
  "public void sendalert(alert alert) {\talertlevel level;\talertdescription description;\tbool close;\tif (alert == null) {\tlevel = alertlevel.fatal;\tdescription = alertdescription.internalerror;\tclose = true;\t} else {",
  "bot",
  1
 ],
 [
  "public static void testnodeadlockoncontinuewith() {\tconst int iterations = 1000;\tvar tasks = new task<int>[iterations];\tfor (int i = 0; i < iterations; i++) {\ttasks[i] = choose(cancellationtoken.none);\t}\ttry { task.waitall(tasks); }\tcatch (aggregateexception ae) { ae.handle(e => e is taskcanceledexception); }",
  "success",
  0
 ],
 [
  "}\telse {\tprintusage();\treturn 1;\t}\t}\tif (options.inputassembly == null) {\treturn 2;\t}\tif (string.isnullorempty(options.outputfilename)) {",
  "error orleans codegen no output filename specified",
  0
 ],
 [
  "private list<long> workwithlocalstate(long i, parallelloopstate state, list<long> threadlocalvalue) {",
  "change aborted",
  1
 ],
 [
  "public static void threadmethod_waiter_2() {\te.waitone();",
  "running fuse command",
  1
 ],
 [
  "c origin = new c(22);\tdynamic d = origin;\ttry {\tc2 result = (c2)d;\tif (result.f1 != origin.f1) {\tfailcount++;\t}\t}\tcatch (exception e) {\tfailcount++;",
  "test failed catch an unknown exception",
  0
 ],
 [
  "assert.equal(expectedfilesize, file.properties.contentlength);\tassert.equal(\"application/octet-stream\", file.properties.contenttype);\tcloudtask boundtask = boundjob.gettask(taskid);\tstring computenodeid = boundtask.computenodeinformation.affinityid.split(':')[1];\tcomputenode computenode = batchcli.pooloperations.getcomputenode(this.poolfixture.poolid, computenodeid);\tlist<nodefile> files = computenode.listnodefiles(recursive: true).tolist();\tforeach (nodefile nodefile in files) {\t}\tstring filepathtoget = string.format(\"workitems/{0}/{1}/{2}/{3}\", jobid, \"job-1\", taskid, stdoutfilename);\tfile = computenode.getnodefile(filepathtoget);",
  "file has content type",
  0
 ],
 [
  "subjectaltnameextension subjectaltname = new subjectaltnameextension (ext);\tforeach (string dns in subjectaltname.dnsnames) {\tif (match (targethost, dns)) return true;\t}\tforeach (string ip in subjectaltname.ipaddresses) {\tif (ip == targethost) return true;\t}\t}\treturn checkdomainname (mcert.subjectname, targethost);\t} catch (exception e) {",
  "commit",
  1
 ],
 [
  "private static bool test6() {\tuint a = 1;\tdynamic b = a;\tb++;\tif (b == 2) return true;",
  "nogetposition left top",
  1
 ],
 [
  "static bool callsecondclassindexer() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturndynamicclass();\tif ( (!(bool)(s.instancemethod()[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "static int main() {\tint ms, ms2, ms3;\tunsafe {\tms = sizeof (mystruct);\tms2 = sizeof (mystruct2);\tms3 = sizeof (mystruct3);\t}",
  "size",
  0
 ],
 [
  "string generateliteralmemberselement(xmlmembersmapping xmlmembersmapping) {\telementaccessor element = xmlmembersmapping.accessor;\tmembermapping[] mappings = ((membersmapping)element.mapping).members;\tbool haswrapperelement = ((membersmapping)element.mapping).haswrapperelement;\tstring methodname = nextmethodname(element.name);\twriter.writeline();\twriter.write(\"public object[] \");\twriter.write(methodname);\twriter.writeline(\"() {\");\twriter.indent++;",
  "reader movetocontent",
  0
 ],
 [
  "protected virtual void setauthprincipalenablestatus(authenticableprincipal ap, bool enable) {\ttry {\tdebug.assert(ap.fakeprincipal == false);\tint uacvalue;\tdirectoryentry de = (directoryentry)ap.underlyingobject;\tif (de.properties[\"useraccountcontrol\"].count > 0) {\tdebug.assert(de.properties[\"useraccountcontrol\"].count == 1);\tuacvalue = (int)de.properties[\"useraccountcontrol\"][0];\t}\telse {",
  "warning",
  1
 ],
 [
  "static void printclassallocationdata (textwriter writer, profilereventhandler data, loadedclass c, ulong totalallocatedbytes) {\tdouble allocatedbytesperclass = (double)c.allocatedbytes;",
  "while loading registry key at",
  1
 ],
 [
  "public static void testmethod() {",
  "wait returned",
  1
 ],
 [
  "ienumerable<resourcefile> resfilesprop = ijm.resourcefiles;\tif (null != resfilesprop) {\tlist<resourcefile> resfiles = new list<resourcefile>();\t}\telse {\t}\ttaskconstraints tc = ijm.constraints;\tif (null == tc) {\t}\telse {",
  "schema is valid",
  1
 ],
 [
  "static void main (string [] args) {\tstring [] files;\tif (args.length < 1) {",
  "usage filepattern out outputdir version version",
  0
 ],
 [
  "}\t#endif _datatable.primarykey = keys;\t}\telse {\tuniqueconstraint unique = new uniqueconstraint(\"\", keys);\tconstraintcollection constraints = _datatable.constraints;\tint constraintcount = constraints.count;\tfor (int i = 0; i < constraintcount; ++i) {\tif (unique.equals(constraints[i])) {\t#if debug if (adapterswitches.dataschema.traceverbose) {",
  "build options build file",
  1
 ],
 [
  "static void run() {\tprocess proc = new process();\tbool ret;\tproc.startinfo.filename=\"wibble-redir\";\tproc.startinfo.arguments=\"arg1    arg2\\targ3 \\\"arg4a arg4b\\\"\";\tproc.startinfo.useshellexecute=false;\tproc.startinfo.redirectstandardinput=true;\tret=proc.start();\tsystem.threading.thread.sleep(1000);",
  "other class not preserved in state",
  1
 ],
 [
  "foreach (cloudtask curtask in boundjob.listtasks()) {\tif (curtask.state != microsoft.azure.batch.common.taskstate.completed) {\trepeat = true;\tthis.testoutputhelper.writeline(\"manual wait task id: \" + curtask.id + \", state = \" + curtask.state);\tforeach (computenode curcomputenode in boundpool.listcomputenodes()) {\t}\t}\t}\t}\t}",
  "virtual network gateway is deployed successfully",
  1
 ],
 [
  "break;\tcase \"llvmonly\": enum_aot_mode = \"mono_aot_mode_llvmonly\";\tbreak;\tcase \"\": enum_aot_mode = \"mono_aot_mode_normal\";\tbreak;\tdefault: throw new exception (\"unsupported aot mode\");\t}\ttc.writeline (\"\\n}\\n\");\ttc.writeline (\"static char *image_name = \\\"{0}\\\";\", prog);\tif (ctor_func != null) {",
  "extern void void",
  0
 ],
 [
  "public void testmethodwithsynchronizedvalue() {\tvar input = @\" using system.runtime.compilerservices;\tclass testclass {\t[methodimpl (value = methodimploptions.synchronized)]\tvoid testmethod () {",
  "asynccompleted socketasynceventargs with manual event error",
  1
 ],
 [
  "md5.initialize();\ttemp = md5.computehash(this.context.randomsc, 0, this.context.randomsc.length);\tthis.context.serverwriteiv = new byte[this.ivsize];\tbuffer.blockcopy(temp, 0, this.context.serverwriteiv, 0, this.ivsize);\t}\telse {\tthis.context.clientwriteiv = ciphersuite.emptyarray;\tthis.context.serverwriteiv = ciphersuite.emptyarray;\t}\t}",
  "serverwriteiv",
  0
 ],
 [
  "try {\txslcompiledtransform xslt = new xslcompiledtransform();\txslt.load(fullfilepath(\"identity.xsl\"));\txslt.transform((ixpathnavigable)null, (xsltargumentlist)null, (stream)null);\t}\tcatch (argumentnullexception) {\treturn;\t}\tcatch (exception e) {\t_output.writeline(e.tostring());",
  "bit detection failed invalid pe signature",
  1
 ],
 [
  "errorclosed.set();\t}\t};\tp.exited += (object sender, eventargs e) => {\texited.set ();\t};\tp.enableraisingevents = true;\tp.start();\tp.beginerrorreadline();\tp.beginoutputreadline();",
  "retrieved",
  1
 ],
 [
  "list<nodefile> filelistfromcomputenodeoperations = batchcli.pooloperations.listnodefiles(this.poolfixture.poolid, computenodeid, recursive: true).tolist();\tforeach (nodefile f in filelistfromcomputenodeoperations) {\t}\tassert.contains(\"shared\", filelistfromcomputenodeoperations.select(f => f.path));\tlist<nodefile> filelistfromcomputenode = computenode.listnodefiles(recursive: true).tolist();\tforeach (nodefile f in filelistfromcomputenodeoperations) {\t}\tassert.contains(\"shared\", filelistfromcomputenode.select(f => f.path));\tstring filepathtoget = filelistfromcomputenode.first(f => !f.isdirectory.value).path;\tnodefile computenodefilefrommanager = batchcli.pooloperations.getnodefile(this.poolfixture.poolid, computenodeid, filepathtoget);",
  "listening for new chirps",
  1
 ],
 [
  "private void registerorremovehelpdocument(object sender, commonregistereventargs e) {\tif (e.register) {\t}\telse {",
  "removehelpdocument",
  0
 ],
 [
  "public void initializeshareddata(datasource source) {",
  "sql command records affected",
  1
 ],
 [
  "public virtual void afteradding () {",
  "div",
  0
 ],
 [
  "public static blah operator - (blah i, blah j) {\tblah b = new blah (i.i - j.i);",
  "error determining target framework for assembly",
  1
 ],
 [
  "public async task<bool> simplebooltaskmethod() {\tawait task.delay(timespan.fromseconds(1.0));",
  "info auto generated encryption keys not saved",
  1
 ],
 [
  "s6.f2 = 2;\ts6.f3 = 3;\ts6.f4 = 4;\ts6.f5 = 5;\ts6.f6 = 6;\ts6 = mono_return_float6(s6, 906);\tif (s6.f1 != 1+906) {\treturn 1;\t}\tif (s6.f2 != 2+906) {",
  "think it",
  1
 ],
 [
  "protected override memberrelationship getrelationship(memberrelationship source) {\tloggingservice.debug(\"memberrelationshipservice: getrelationship called, source=\" + tostring(source));\tvar mrs = base.getrelationship(source);",
  "arm storage account resource id",
  1
 ],
 [
  "public static void readblob (oracleconnection connection) {\tif (file.exists(outfilename) == true) {\treturn;\t}\toraclecommand rcmd = connection.createcommand ();\trcmd.commandtext = \"select blob_column from blobtest\";\toracledatareader reader2 = rcmd.executereader ();\toraclelob lob2 = reader2.getoraclelob (0);",
  "foo",
  1
 ],
 [
  "var references = new list<packagemanagementpackagereference> ();\tforeach (var dependency in dependenciestoadd) {\treferences.add (new packagemanagementpackagereference (dependency.packageid, dependency.packageversion));\t}\tvar task = packagemanagementservices.projectoperations.installpackagesasync (project, references);\tawait task.configureawait (false);\treturn true;\t} catch (invalidoperationexception) {\tthrow;\t} catch (exception ex) {",
  "ok",
  1
 ],
 [
  "public static void execpositivetest<t>(dynamic dobj, type exp_type, t exp_undervalue, string tip, func<dynamic, dynamic> test) where t : struct {\tint flag = 1;\ttry {\tdynamic dr = test(dobj);\tif ((dr.gettype() == exp_type) && (((t)dr).equals(exp_undervalue))) {\tflag = 0;\t}\telse {",
  "test failed at call result",
  1
 ],
 [
  "public void receivedevent_charseof_readallchars() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (serialport com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\treadinreceivedeventhandler rcveventhandler = new readinreceivedeventhandler(com1);\tbyte[] xmitbytes = new byte[3];",
  "endglobal",
  1
 ],
 [
  "foreach (protectedconfigurationprovider pc in protectedconfiguration.providers) {\tconsole.writeline (pc.name);\tif (pc is rsaprotectedconfigurationprovider) {\trsaprotectedconfigurationprovider rsa = (rsaprotectedconfigurationprovider)pc;\tconsole.writeline (\"keycontainername = {0}\", rsa.keycontainername);\tconsole.writeline (\"usemachinecontainer = {0}\", rsa.usemachinecontainer);\t}\t}\t}\tcatch (exception e) {",
  "this tool is not intended to be used directly",
  1
 ],
 [
  "if (_inputfilepaths.count == 0) throw new commandlineexception(\"no input files specified\");\t_verifier = new verifier(this);\t_verifier.setsystemmodulename(_systemmodule);\tforeach (var kvp in _inputfilepaths) {\tvar results = verifyassembly(new assemblyname(kvp.key), out ecmamodule module);\tint numerrors = 0;\tforeach (var result in results) {\tnumerrors++;\tprintresult(result, module, kvp.value);\t}",
  "got but expected",
  1
 ],
 [
  "private void print() {\tif (isnull) {\treturn;\t}\tdebug.writeline(\"\\tlen = \" + m_blen.tostring() + \", prec = \" + m_bprec.tostring() + \", scale = \" + m_bscale.tostring() + \", sign = \" + ispositive.tostring());\t}\t[system.diagnostics.conditional(\"debug\")]\tprivate void print(string s) {\tdebug.writeline(\"*** \" + s + \" ***\");\tif (isnull) {",
  "numeric null",
  0
 ],
 [
  "public void processstart_openfileonosx_usesspecifiedprogram(string programtoopenwith) {\tstring filetoopen = gettestfilepath() + \".txt\";\tfile.writealltext(filetoopen, $\"{nameof(processstart_openfileonosx_usesspecifiedprogram)}\");\tusing (var px = process.start(programtoopenwith, filetoopen)) {",
  "in osx nameof programtoopenwith is programtoopenwith while nameof px processname is px processname",
  0
 ],
 [
  "protected override void dispose(bool disposing) {\tbool leaked = !disposing && !isinvalid;\t#if leaks_identifying if (leaked) {\tleakscontainer.add(gettype().name);\t}\t#endif base.dispose(disposing);\t#if leaks_tracking if (!leaked) {\t}\telse {",
  "unexpected finalization of handle",
  0
 ],
 [
  "public valueserializer getvalueserializerfor (type type) {",
  "ignore handler invoked for signum don t do that",
  1
 ],
 [
  "if (resolvedname != null) {\ts = resourceassembly.getmanifestresourcestream(resolvedname);\t}\t}\tif (s != null) {\tdesigntimelicensecontextserializer.deserialize(s, filename.toupper(cultureinfo.invariantculture), this);\t}\t}\t}\tif (licensefile != null) {",
  "licensefile",
  0
 ],
 [
  "public void initsharpdevelopcore(sharpdevelophost.callbackhelper callback, startupsettings properties) {\tvar container = new sharpdevelopservicecontainer();\tcontainer.addfallbackprovider(servicesingleton.fallbackserviceprovider);\tcontainer.addservice(typeof(imessageservice), new sdmessageservice());\tcontainer.addservice(typeof(iloggingservice), new log4netloggingservice());\tservicesingleton.serviceprovider = container;",
  "initsharpdevelop",
  0
 ],
 [
  "private static int main() {\tbool allpassed = true;\tbool passed;\tconsole.write(\"    spantest: \");\tpassed = spantest.run();",
  "pass fail",
  0
 ],
 [
  "private static bool inwhilestatement() {\tint failcount = 0;\tbool origin = false;\tdynamic d = origin;\twhile (d) {\tfailcount++;",
  "test failed conversion result is incorrect",
  0
 ],
 [
  "public void endelement () {",
  "section endelement interp",
  0
 ],
 [
  "public void clear() {",
  "principalcollection clear",
  0
 ],
 [
  "try {\tchecked {\tuint rez3 = d2 - d;\t}\t}\tcatch (system.overflowexception) {\texception = true;\t}\tfinally {\tif (exception) rez++;",
  "webexception raised in poll for",
  1
 ],
 [
  "static void throwexcthroughmethodswithfinalizers2(string caller) {\tcreatesomegarbage();\tstring s = caller + \" + throwexcthroughmethodswithfinalizers2\";\tcreatesomegarbage();\ttry {\tthrow new exception(\"throwexcthroughmethodswithfinalizers2\");\t}\tfinally {",
  "executing finally in",
  0
 ],
 [
  "public static void printunhandledexception (string caller, object sender, unhandledexceptioneventargs e) {\texception ex = (exception)e.exceptionobject;",
  "failed string null",
  1
 ],
 [
  "string connectionstring = null;\tstring sql = null;\tconnectionstring = \"host=localhost;\" + \"dbname=test;\" + \"user=postgres\";\ttry {\tstring maxstrvalue;\tcon = new sqlconnection(connectionstring);\tcon.open();\tsql = \t\"select count(*) \" + \"from sometable\";\tcmd = new sqlcommand(sql,con);\tint64 rowcount = (int64) cmd.executescalar();",
  "row count",
  0
 ],
 [
  "public static int main () {\tif (ctx == null) return 1;\tbool b = ctx != null;\tif (!b) return 2;\tif (s2 != null) return 3;\ts3 = new s3 ();\tdecimal d = s3.value == null;\tif (d != 1) return 4;",
  "ok",
  0
 ],
 [
  "catch (xsltexception) {\ttry {\tstrmtemp = new filestream(fullfilepath(\"xslt_error.xsl\"), filemode.open, fileaccess.read);\t}\tcatch (exception ex) {\t_output.writeline(ex.message);\tassert.true(false);\t}\treturn;\t}",
  "did not throw compile exception for stylesheet",
  0
 ],
 [
  "generatecomment (new codecomment (\" <autogenerated>\"));\tgeneratecomment (new codecomment (\"     this code was generated by a tool.\"));\tgeneratecomment (new codecomment (\"     mono runtime version: \" + system.environment.version));\tgeneratecomment (new codecomment (\"\"));\tgeneratecomment (new codecomment (\"     changes to this file may cause incorrect behavior and will be lost if \"));\tgeneratecomment (new codecomment (\"     the code is regenerated.\"));\tgeneratecomment (new codecomment (\" </autogenerated>\"));\tgeneratecomment (new codecomment (\"------------------------------------------------------------------------------\"));\toutput.writeline ();\tif (asbool(compileunit.userdata[\"allowlatebound\"])) {",
  "digraph g",
  1
 ],
 [
  "public static void printunhandledexception (string caller, object sender, unhandledexceptioneventargs e) {\texception ex = (exception)e.exceptionobject;",
  "failed to add get a value for of type boolean",
  1
 ],
 [
  "private void loadcertificatecollection(list<byte[]> certificatestoload) {\t_certificates.clear();\tdebug.assert(_certificates.count == 0);\tforeach (byte[] rawcert in certificatestoload) {\ttry {\t_certificates.import(rawcert);\t}\tcatch (system.security.cryptography.cryptographicexception) {",
  "test failed conversion result is incorrect",
  1
 ],
 [
  "public void testincompleteparameter() {\tstring code = {\tvoid bar (params system.a) {}\t}\t\";\tvar unit = syntaxtree.parse(code);\tvar type = unit.members.first() as typedeclaration;\tvar method = type.members.first() as methoddeclaration;\tbool passed = method.parameters.count == 1;\tif (!passed) {",
  "expected",
  0
 ],
 [
  "itemprefix = \"<li>\";\titemsuffix = \"</li>\";\tif (!device.rendersbreaksafterhtmllists) {\tlistsuffix += \"<br>\";\t}\tbreak;\tdefault: if (device.tables) {\tlistsuffix = \"</table>\";\tstyle.wrapping = wrapping.notset;\twriter.enterlayout(style);",
  "table",
  0
 ],
 [
  "public void testaddbracestofor() {\ttest<addbracescoderefactoringprovider>(@\"class testclass {\tvoid test() {",
  "hello",
  0
 ],
 [
  "public void linqtosqlobject02() {\tnorthwind db = createdb();\tvar ds = new dataloadoptions();\tds.loadwith<customer>(p => p.orders);\tdb.loadoptions = ds;\tvar custs = from c in db.customers where c.city == \"marseille\" select c;",
  "you passed in",
  1
 ],
 [
  "openscope(\"internal override void visit(irecordvisitor visitor)\");\tforeach (var member in record.members) {\tif ((member.flags & memberdefflags.recordref) == 0) continue;\twriteline($\"{member.name} = visitor.visit(this, {member.name});\");\t}\tclosescope(\"visit\");\topenscope(\"public override sealed bool equals(object obj)\");\twriteline($\"var other = obj as {record.name};\");\twriteline(\"if (other == null) return false;\");\tif ((record.flags & recorddefflags.reentrantequals) != 0) {",
  "return true",
  0
 ],
 [
  "} catch (memberaccessexception) {\tfailcount += 1;\t}\ttry {\twrongcasefriendassembly.internalclass.internalstaticmethod();\t} catch (memberaccessexception) {\tfailcount += 1;\t}\ttry {\twrongcasefriendassembly.publicclass.internalstaticmethod();",
  "testing activationid",
  1
 ],
 [
  "if (compare (\"add\", mask, ref stateindex, arguments, ref more_states)) {\tcontinue;\t}\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;\tresult = mtp.add (s);\twritelinenonformat (\"result = mtp.add (@\\\"\" + s.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");",
  "succeeded",
  1
 ],
 [
  "static void dopostgrestest (idbconnection cnc) {\tidatareader reader;\tobject odatavalue;\ttry {\tdroptable (cnc);\t}\tcatch (pgsqlexception e) {",
  "error don t worry about this one",
  0
 ],
 [
  "public static void main (string[] args) {\tint low = 2000;\tint high = 2000;\tconsole.writeline ();\tfor (int count = low; count <= high; ++count) {\tfor (int i = 0; i <= count; ++i) console.writeline (\"    int method_\" + i + \" (int a, int b, int c, int d);\");\tconsole.writeline (\"}\");\tfor (int i = 0; i <= count; ++i) console.writeline (\"    public virtual int method_\" + i + \" (int a, int b, int c, int d) { return a - b - c -d + \" + i + \"; }\");\tconsole.writeline (\"}\");\t}",
  "unsupported restriction",
  1
 ],
 [
  "if (size != dict.count) {\tconsole.writeline(\"list.size ({0}) != dict.count ({1})\", size, dict.count);\tretval = false;\t}\tnode n = startsentinel.next, n2;\twhile (n != endsentinel) {\tif (!dict.find(n.item, out n2)) {\tretval = false;\t}\telse if (n != n2) {",
  "exit code is output is",
  1
 ],
 [
  "public void testcase6() {\tanalyze<stringcompareisculturespecificanalyzer>(@\" class test {\tvoid foo () {",
  "test failed conversion result is incorrect",
  1
 ],
 [
  "public void basictest_getipinterfacestatistics_success_linux() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfacestatistics stats = nic.getipstatistics();\tassert.throws<platformnotsupportedexception>(() => stats.incomingunknownprotocolpackets);\tassert.throws<platformnotsupportedexception>(() => stats.nonunicastpacketssent);",
  "unicast addresses",
  1
 ],
 [
  "static void create_user (string username, string email, string password, string pwdquestion, string pwdanswer) {\tmembershipcreatestatus status;\tmembership.createuser (username, password, email, pwdquestion, pwdanswer, true, out status);",
  "poolstatistics resourcestatistics avgmemory",
  1
 ],
 [
  "public static void main () {\tfont fnt = new font (\"arial\", 12);",
  "issystemfontname",
  0
 ],
 [
  "private void thread_func() {\tthread thr=thread.currentthread;\tlock(thr) {\tthread.sleep(2000);",
  "slept for",
  0
 ],
 [
  "public static sockettestclient sockettestclientfactory( itestoutputhelper log, socketimplementationtype type, endpoint endpoint, int iterations, string message, stopwatch timeprogramstart) {\tswitch (type) {\tcase socketimplementationtype.apm: var socketapm = new sockettestclientapm(log, endpoint, iterations, message, timeprogramstart);",
  "exception expected",
  1
 ],
 [
  "total += await grains[i % grains.count].add(total);\tsuccess++;\t}\tcatch {\tfail++;\t}\tif (console.keyavailable) {\tvar key = console.readkey(true);\tif (key.key == consolekey.enter || key.key == consolekey.escape || key.key == consolekey.c && (key.modifiers & consolemodifiers.control) != 0) run = false;\tif (key.key == consolekey.b) grains = null;",
  "successes success failures fail elapsed stopwatch elapsed",
  0
 ],
 [
  "public void testalreadypresentifnotnullcheck5() {",
  "imports system class testclass public sub testmethod str as string if str isnot nothing then console writeline str end sub end class",
  0
 ],
 [
  "progressdialog.showifnotdone();\ttry {\tfor (int i = _typelibs.count - 1; i >= 0; --i) {\tpreviouslyopenedtypelibrary typelib = _typelibs[i];\ttry {\tprogressdialog.updateprogresstext(typelib.filename);\tguid guid = new guid(typelib.guid);\ttypelibrary.restoretypelib(typelib.filename, guid, typelib.version);\tprogressdialog.updateprogress(1);\t} catch (exception ex) {",
  "assemblies deleting bad assemblies entry",
  0
 ],
 [
  "public delegate void databaseconnectioncontextcallback (databaseconnectioncontext context, bool connected, object state);\tpublic static class queryservice {\tpublic static void raiseexception (exception exception) {\tmessageservice.showexception (exception);\t}\tpublic static void raiseexception (string message, exception exception) {\tmessageservice.showexception (exception, message);",
  "database exception",
  0
 ],
 [
  "case \"deploymentid\": deploymentid = split[1];\tbreak;\treturn false;\t}\t}\telse if (argpos == 1) {\tsiloname = a;\targpos++;\t}\telse {",
  "too many command line arguments supplied",
  0
 ],
 [
  "public void unlockaccount() {\tif (!_owningprincipal.unpersisted) {",
  "verifying default readbuffersize after open",
  1
 ],
 [
  "s9.f5 = 5;\ts9.f6 = 6;\ts9.f7 = 7;\ts9.f8 = 8;\ts9.f9 = 9;\ts9 = mono_return_double9(s9, 9);\tif (s9.f1 != 1+9) {\treturn 1;\t}\tif (s9.f2 != 2+9) {",
  "got but expected",
  0
 ],
 [
  "static private void help () {\tconsole.writeline ();",
  "error writing file",
  1
 ],
 [
  "int choice_size = marshal.sizeof(typeof(ppd_choice));\tdefoption = null;\tptr = ppdfindoption (ppd, option_name);\tif (ptr != intptr.zero) {\tppd_option = (ppd_option) marshal.ptrtostructure (ptr, typeof (ppd_option));\t#endif defoption = ppd_option.defchoice;\tptr = ppd_option.choices;\tfor (int c = 0; c < ppd_option.num_choices; c++) {\tchoice = (ppd_choice) marshal.ptrtostructure (ptr, typeof (ppd_choice));\tlist.add(choice.choice, choice.text);",
  "choice text",
  0
 ],
 [
  "private static void printusage() {",
  "assembly loaded",
  1
 ],
 [
  "static bool callsecondinterfaceindexer() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturndynamicinterface();\tif ( (!(bool)(s.instancemethod()[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "verifying baudrate",
  1
 ],
 [
  "public void addparam19(inputtype inputtype, readertype readertype, transformtype transformtype, doctype doctype) {\tstring expected = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?><result> 1.no value specified 2.test1 3.no value specified 4.no value specified 5.no value specified 6.no value specified</result>\";\tm_xsltarg = new xsltargumentlist();\tstring obj = \"test\";\tfor (int i = 0; i < 300; i++) {\tm_xsltarg.addparam(\"myarg\" + i, szempty, obj + \"1\");\tretobj = m_xsltarg.getparam(\"myarg\" + i, szempty);\tif (retobj.tostring() != (\"test\" + \"1\")) {",
  "is viable",
  1
 ],
 [
  "public void writetimeout_default_write_str() {",
  "verify error testname chainstatus status chainstatus statusinformation",
  1
 ],
 [
  "public static xmlnode getnodefromurl (string url, roottree tree) {\tstring [] usplit = parseediturl (url);",
  "call stored procedure sp with parameters",
  1
 ],
 [
  "public void loadgeneric2(xslinputtype xslinputtype, readertype readertype) {\ttry {\tloadxsl_resolver(null, xslinputtype, readertype, new xmlurlresolver());\t}\tcatch (system.argumentnullexception e) {\t_output.writeline(e.tostring());\treturn;\t}",
  "typediscoveryservice returns types",
  1
 ],
 [
  "public object call(string typename, string methodname, object[] args) {\ttype type = this.assembly.gettype (typename);\tif (type == null) {\t}\tvar method = type.getmethod (methodname, bindingflags.public | bindingflags.nonpublic | bindingflags.static);\tif (method == null) {",
  "skipping negotiatestream echoserver ntlm clientwriteread successive sync success",
  1
 ],
 [
  "static private void help () {",
  "sv pkvfile private key file pvk for the subject created if missing",
  0
 ],
 [
  "static x509certificate clientcertificateselection (object sender, string targethost, x509certificatecollection clientcertificates, x509certificate servercertificate, string [] acceptableissuers) {",
  "encountered a callback invoking it",
  1
 ],
 [
  "if (s13.f2 != 2+9) {\treturn 2;\t}\tif (s13.f3 != 3+9) {\treturn 3;\t}\tif (s13.f4 != 4+9) {\treturn 4;\t}\tif (s13.f5 != 5+9) {",
  "warning could not be loaded from assembly",
  1
 ],
 [
  "if (directory.getfiles (link_dir).length == 0) {\ttry {\tdirectory.delete (link_dir);\t} catch {\t}\t}\t}\tuninstalled++;\t}\tif (directory.getdirectories (asmdir).length == 0) {",
  "cleaning assembly dir it is empty",
  0
 ],
 [
  "int pos=req.indexofany(new char[]{' '});\tif(pos>=0) {\treq=req.remove(pos, req.length-pos);\t}\tpos=req.lastindexof('.');\tstring filetype;\tif (pos != -1) filetype = req.substring(pos);\telse filetype = \"\";\tstring mime_type = (string) mime_types [filetype];\tif (mime_type == null) mime_type = \"text/plain\";",
  "invoke",
  1
 ],
 [
  "public void getextobject2() {\tm_xsltarg = new xsltargumentlist();\ttry {\tm_xsltarg.getextensionobject(null);\t}\tcatch (system.argumentnullexception) {\treturn;\t}",
  "argumentnullexception not thrown for null namespace system xml tests",
  0
 ],
 [
  "if (copypixeloperation != copypixeloperation.sourcecopy) throw new notimplementedexception (\"operation not implemented under x11\");\tif (gdiplus.display == intptr.zero) {\tgdiplus.display = gdiplus.xopendisplay (intptr.zero);\t}\twindow = gdiplus.xrootwindow (gdiplus.display, 0);\tdefvisual = gdiplus.xdefaultvisual (gdiplus.display, 0);\txvisualinfo visual = new xvisualinfo ();\tvisual.visualid = gdiplus.xvisualidfromvisual(defvisual);\tvptr = gdiplus.xgetvisualinfo (gdiplus.display, 0x1 /* visualidmask */, ref visual, ref nitems);\tvisual = (xvisualinfo) marshal.ptrtostructure(vptr, typeof (xvisualinfo));",
  "green mask x",
  0
 ],
 [
  "else {\tassertequal(true, result.item2, grainidentity);\tassertequal(1, result.item1, grainidentity);\tassertequal(2, client[1].getconfirmedversion(grainclass, x), grainidentity);\tassertequal(444, client[1].getalocal(grainclass, x), grainidentity);\tassertequal(444, client[0].getaglobal(grainclass, x), grainidentity);\tassertequal(444, client[1].getaglobal(grainclass, x), grainidentity);\t}\t}\t});",
  "running individual short tests",
  0
 ],
 [
  "internalvariables[parm] = ps.tostring ();\t}\tpublic void unsetinternalvariable(string[] parms) {\tif (parms.length != 2) {\treturn;\t}\tstring parm = parms[1];\ttry {\tinternalvariables.remove (parm);\t} catch(exception e) {",
  "error internal variable does not exist",
  0
 ],
 [
  "public static void testpersistsucurityinfo2() {\tconsole.writeline(\"\\ntestpersistsucurityinfo2 - persist security info=true\");\toracleconnection con = new oracleconnection(\"data source=palis;user id=scott;password=tiger;persist security info=true\");",
  "connectionstring before open",
  0
 ],
 [
  "public void basictest_getipv4interfacestatistics_success_linux() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipv4interfacestatistics stats = nic.getipv4statistics();\tassert.throws<platformnotsupportedexception>(() => stats.incomingunknownprotocolpackets);\tassert.throws<platformnotsupportedexception>(() => stats.nonunicastpacketssent);",
  "could write \ud55c\uae00",
  1
 ],
 [
  "trace.indentlevel = 2;\ttrace.write(\"this message should be indented.\");\ttrace.traceerror(\"this error not be indented.\");\ttrace.traceerror(\"{0}\", \"this error is indented\");\ttrace.tracewarning(\"this warning is indented\");\ttrace.tracewarning(\"{0}\", \"this warning is also indented\");\ttrace.traceinformation(\"this information in indented\");\ttrace.traceinformation(\"{0}\", \"this information is also indented\");\ttrace.indentsize = 0;\ttrace.indentlevel = 0;",
  "loading style sheet as xmltextreader",
  1
 ],
 [
  "} else {\tcode = value.tostring ();\t}\tbreak;\tcase typecode.char: code = \"'\" + ((char) value).tostring () + \"'\"; break;\tcase typecode.datetime: code = \"new system.datetime (\" + ((datetime) value).ticks + \")\"; break;\tcase typecode.dbnull: code = \"system.dbnull.value\" ; break;\tcase typecode.object: code = null;\tif (value is exception) {\twriter.writeline (tab + \"\\tobject zxf = {0}.{1};\", showname, name);",
  "assert fail",
  0
 ],
 [
  "numsecretsinvault += results.count();\tforeach (var m in results) console.out.writeline(\"\\t{0}\", m.identifier.name);\t}\twhile (results != null && !string.isnullorwhitespace(results.nextpagelink)) {\tresults = task.run(() => keyvaultclient.getcertificatesnextasync(results.nextpagelink)).configureawait(false).getawaiter().getresult();\tif (results != null && results != null) {\tnumsecretsinvault += results.count();\tforeach (var m in results) console.out.writeline(\"\\t{0}\", m.identifier.name);\t}\t}",
  "number of certificates in the vault",
  0
 ],
 [
  "public void testaddbracestousing() {\ttest<addbracescoderefactoringprovider>(@\"class testclass {\tvoid test() {\t$using (var a = new a ()) console.writeline(\"\"hello\"\");\t}\t}\", @\"class testclass {\tvoid test() {\tusing (var a = new a ()) {",
  "hello",
  0
 ],
 [
  "static void run() {\tprocess proc = new process();\tbool ret;\tproc.startinfo.filename=\"wibble\";\tproc.startinfo.arguments=\"arg1    arg2\\targ3 \\\"arg4a arg4b\\\"\";\tproc.startinfo.useshellexecute=false;\tret=proc.start();\tproc.waitforexit();",
  "if object referenceequals this obj return true",
  1
 ],
 [
  "public void testremovebracesfromelse() {\ttest<removebracescoderefactoringprovider>(@\"class testclass {\tvoid test() {\tif (true) {\t} $else {",
  "world",
  0
 ],
 [
  "foreach (mono.security.x509.x509certificate cert in p12.certificates) {\tcertificates.add(new x509certificate2(args [2], password));\tbreak;\t}\t}\ttcpclient client = new tcpclient ();\tclient.connect (host, 4433);\tsslstream ssl = new sslstream (client.getstream(), false, new remotecertificatevalidationcallback (certificatevalidation), new localcertificateselectioncallback (clientcertificateselection));\tssl.authenticateasclient (host, certificates, protocol, false);\tstreamwriter sw = new streamwriter (ssl, system.text.encoding.ascii);",
  "provider is not set",
  1
 ],
 [
  "public void inbufferfilled_discard_once() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (serialport com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {",
  "getextensionobject thread iteration value returned",
  1
 ],
 [
  "static void run(object state) {",
  "error loading file",
  1
 ],
 [
  "xmlschemaattribute attribute = (xmlschemaattribute)derivedtype.attributeuses[attributebase.qualifiedname];\tif (attribute == null) {\tderivedtype.attributeuses.add(attributebase.qualifiedname, attributebase);\t}\telse {\tif (attributebase.use == xmlschemause.prohibited && attribute.use != xmlschemause.prohibited) {\t#if debug string position = string.empty;\tif (derivedtype.sourceuri != null) {\tposition = \" in \" + derivedtype.sourceuri + \"(\" + derivedtype.linenumber + \", \" + derivedtype.lineposition + \")\";\t}",
  "invalid complextype attributes restriction",
  0
 ],
 [
  "public static void main (string[] args) {\tif (args.length != 3) {\tenvironment.exit (1);\t}\tstring map_assembly_name = args[0];\tstring input_assembly_name = args[1];\tstring output_assembly_name = args[2];",
  "assert areequal out",
  1
 ],
 [
  "public void errorevent_frame() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (serialport com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\terroreventhandler erreventhandler = new erroreventhandler(com1);",
  "verifying frame event",
  0
 ],
 [
  "static void help () {",
  "verifying bytestoread with read char buffer int offset int count",
  1
 ],
 [
  "result.summarymarkup = gettextcatalog.getstring (\"the {0} keyword on a method declaration allows for the implementation of a method to be defined in another part of the partial class.\", highlight (\"partial\", getthemecolor (keywordother)));\t}\t} else result.addcategory (gettextcatalog.getstring (\"form\"), gettextcatalog.getstring (\"[modifiers] {0} type-declaration\\n\\nor\\n\\n{0} method-declaration\", highlight (\"partial\", getthemecolor (keywordother))));\tbreak;\tcase syntaxkind.privatekeyword: result.signaturemarkup = highlight (\"private\", getthemecolor (modifiercolor)) + keywordsign;\tresult.summarymarkup = gettextcatalog.getstring (\"the {0} keyword is a member access modifier. private access is the least permissive access level. private members are accessible only within the body of the class or the struct in which they are declared.\", highlight (\"private\", getthemecolor (modifiercolor)));\tbreak;\tcase syntaxkind.protectedkeyword: result.signaturemarkup = highlight (\"protected\", getthemecolor (modifiercolor)) + keywordsign;\tresult.summarymarkup = gettextcatalog.getstring (\"the {0} keyword is a member access modifier. a protected member is accessible from within the class in which it is declared, and from within any class derived from the class that declared this member.\", highlight (\"protected\", getthemecolor (modifiercolor)));\tbreak;",
  "ok",
  1
 ],
 [
  "static void main (string[] args) {\tif (args.length < 2) {",
  "usage cache pq test generator exe sequence directory data output directory",
  0
 ],
 [
  "try {\tsize = int32.parse (args[i++]);\t}\tcatch {\ti--;\t}\t}\tsn = new strongname (size);\twritetofile (args[i], cryptoconvert.tocapikeyblob (sn.rsa, true));\tbreak;",
  "secutil hex",
  1
 ],
 [
  "mem.declaringtype = map.type;\tmap.extendedmembers.add (mem);\tlastmember = mem;\tcontinue;\t}\telse {\tmembername = att.getattribute (\"member\");\ttype mt;\tobject mi;\tif (!findmember (map, membername, out mi, out mt)) {",
  "serializationmap member not found in type",
  0
 ],
 [
  "public void dispose() {\tisdisposed = true;",
  "telling worker process to exit",
  0
 ],
 [
  "public void receivedevent_chars() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (serialport com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\treceivedeventhandler rcveventhandler = new receivedeventhandler(com1);",
  "if isemptywrapper readendelement",
  1
 ],
 [
  "public static execution_state setthreadexecutionstate (execution_state esflags) {",
  "setthreadexecutionstate called",
  0
 ],
 [
  "for (int i = 0; i < typeset.length; i++) writeline($\"    {member.name}.handletype == handletype.{typeset[i]}\" + ((i == typeset.length - 1) ? \");\" : \" ||\"));\t}\t}\t}\tclosescope(\"save\");\topenscope($\"internal static {record.name}handle ashandle({record.name} record)\");\twriteline(\"if (record == null)\");\twriteline(\"{\");\twriteline(\"}\");\twriteline(\"{\");",
  "the following configuration would make the test pass",
  1
 ],
 [
  "public void frag_7(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter(conformancelevel.fragment)) {\ttry {\tw.writedoctype(\"root\", \"publicid\", \"sysid\", \"<!entity e 'abc'>\");\t}\tcatch (invalidoperationexception e) {\tcerror.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "press any key to continue",
  1
 ],
 [
  "public static void usage (string message) {\tif (message != null) {\tconsole.writeline (\"{0}{1}{0}\", environment.newline, message);\t}",
  "use",
  0
 ],
 [
  "++indent;\tgeneratestatements (property.getstatements);\t--indent;\t}\tif (property.hasset) {\t++indent;\tgeneratestatements (property.setstatements);\t--indent;\t}\t--indent;",
  "exe snapshot user id",
  1
 ],
 [
  "if (typeof(icustomxmlserializer).isassignablefrom (typeof(t))) {\tusing (xmlreader reader = new xmltextreader (new memorystream (system.text.encoding.utf8.getbytes (\"<\" + properties.serializednode + \">\" + xml + \"</\" + properties.serializednode + \">\" ))))\u00a0{\treturn (t)((icustomxmlserializer)typeof(t).assembly.createinstance (typeof(t).fullname)).readfrom (reader);\t}\t}\txmlserializer serializer = new xmlserializer (typeof(t));\tusing (streamreader sr = new streamreader (new memorystream (system.text.encoding.utf8.getbytes (xml))))\u00a0{\treturn (t)serializer.deserialize (sr);\t}\t} catch (exception e) {",
  "caught exception while deserializing",
  0
 ],
 [
  "public void basictest_getipv4interfacestatistics_success() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipv4interfacestatistics stats = nic.getipv4statistics();",
  "incomingpacketsdiscarded",
  0
 ],
 [
  "try {\tunchecked {\td2 -= d;\t}\t}\tcatch (system.overflowexception) {\texception = false;\t}\tfinally {\tif (exception) rez++;",
  "test failed",
  0
 ],
 [
  "var random = new random(seed);\tfor (int iop = 0; iop < operationcount; iop++) {\tswitch ((operation)random.next((int)operation.last)) {\tcase operation.add: int value = random.next();\texpected.add(value);\tactual = actual.add(value);\tverifybalanced(actual);\tbreak;\tcase operation.addrange: int inputlength = random.next(100);\tint[] values = enumerable.range(0, inputlength).select(i => random.next()).toarray();",
  "adding elements to the list",
  0
 ],
 [
  "show_gui = false;\tif (v != null) mergeconfigfile = v;\telse {\terror (\"missing config file for --merge-changes.\");\tr = 1;\t}\t} }, { \"remote-mode\", \"accept crefs from stdin to display in the browser.\\n\" + \"for monodevelop integration.\", v => remote_mode = v != null }, { \"about|version\", \"write version information and exit.\", v => show_version = v != null }, { \"h|?|help\", \"show this message and exit.\", v => show_help = v != null }, };\tlist<string> topics = p.parse (args);\tif (basedir == null) basedir = directory.getparent (system.reflection.assembly.getexecutingassembly ().location).fullname;\tif (show_version) {",
  "no match in actual values",
  1
 ],
 [
  "public string getpfxpath() {\tvar tag = \"-pfxfilepath\";\tvar path = getargumentvalue( tag );\tif ( path == string.empty ) {",
  "is not provided using default value",
  0
 ],
 [
  "static void async_callback (iasyncresult ar) {\tasyncresult ares = (asyncresult)ar;\tasynccallback ac = new asynccallback (async_callback);",
  "backtracking to code position",
  1
 ],
 [
  "public static void testnodeadlockoncontinuewith() {",
  "testnodeadlockoncontinuewith shouldn t deadlock if it passes",
  0
 ],
 [
  "public void save (string file) {\tforeach (dictionaryentry e in lists) {\tstringcollection col = (stringcollection) e.value;\tstring s = \"\";\tforeach (string v in col) s += v.replace (\";\", \"\\\\;\") + \";\";\tif (s.length > 0) entries [e.key] = s;\telse entries.remove (e.key);\t}\tusing (streamwriter sw = new streamwriter (file)) {\tif (!isloadedfile) {",
  "desktop entry",
  0
 ],
 [
  "public void writeattributes_13() {\txdocument doc = new xdocument();\tstring strxml = \"<e a=\\\"&gt;&lt;&quot;&apos;&amp;\\\" />\";\txmlreader xr = createreader(new stringreader(strxml));\txr.read();\txr.movetofirstattribute();\tif (xr.nodetype != xmlnodetype.attribute) {",
  "reader positioned on",
  0
 ],
 [
  "public principalsearchresult<principal> getmembers(bool recursive) {\tcheckdisposedordeleted();\tif (!this.unpersisted) {\tglobaldebug.writelineif(globaldebug.info, \"group\", \"getmembers: persisted, querying for members (recursive={0}\", recursive);\treturn new principalsearchresult<principal>(contextraw.queryctx.getgroupmembership(this, recursive));\t}\telse {",
  "verifying isopen after open and close have been called",
  1
 ],
 [
  "public void validationcallback(object sender, validationeventargs args) {\tif (args.severity == xmlseveritytype.warning) {\tbwarningcallback = true;\twarningcount++;\twarninginnerexceptionset = (args.exception.innerexception != null);\t}\telse if (args.severity == xmlseveritytype.error) {",
  "server client",
  1
 ],
 [
  "addinname = addinname.trim();\tif (addinname.length == 0) continue;\tstring targetdir = path.combine(useraddinpath, addinname);\tif (!uninstalladdin(disabled, addinname, targetdir)) {\tnotremoved.add(addinname);\tallok = false;\t}\t}\t}\tif (notremoved.count == 0) {",
  "deleting remove txt",
  0
 ],
 [
  "if(!this.bequiet) console.writeline(resourceshelper.getstring(\"errornohelp2environment\"));\treturn (this.errorcodes)?3:0;\t}\tif (!applicationhelpers.isthisuserprivileged()) {\treturn (this.errorcodes)?4:0;\t}\tif (this.actionparam != \"/r\" && this.actionparam != \"/u\" && this.actionparam != \"+r\" && this.actionparam != \"-r\" && this.actionparam != \"+p\" && this.actionparam != \"-p\") {\treturn (this.errorcodes)?5:0;\t}\tif (string.isnullorempty(this.xmlfilename) || !file.exists(this.xmlfilename)) {",
  "errorinvalidxmlfile",
  0
 ],
 [
  "private void thread_func() {",
  "in a thread",
  0
 ],
 [
  "bytes = encoding.getbytes (\"mono is fun!\");\tclob.write (bytes, 0, bytes.length);\tclob.close ();\toraclelob blob = reader.getoraclelob (1);\tbytes = new byte[6] { 0x31, 0x32, 0x33, 0x34, 0x35, 0x036 };\tblob.write (bytes, 0, bytes.length);\tblob.close ();\ttrans.commit ();\treadsimpletest(con, \"select * from mono_oracle_test\");\tstring varchar2_value = (string) readscalar (con,\"select max(varchar2_value) from mono_oracle_test\");",
  "timing",
  1
 ],
 [
  "}\tinternal void preparereplay() {\tresetsnapshotstate();\t}\t}\tprivate void dumpbuffer() {\tconsole.writeline(\"_inbytesread = {0}\", _inbytesread);\tconsole.writeline(\"_inbytesused = {0}\", _inbytesused);\tint cc = 0;\tint i;",
  "found extenders",
  1
 ],
 [
  "private static void shutdown() {",
  "shutdown gdi",
  0
 ],
 [
  "public void newline_default() {\tusing (serialport com1 = new serialport()) {\tserialportproperties serportprop = new serialportproperties();",
  "test failed conversion result is incorrect",
  1
 ],
 [
  "public void parityerroronlastbyte() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (serialport com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\trandom rndgen = new random(15);\tbyte[] bytestowrite = new byte[numrndbytespairty];\tchar[] expectedchars = new char[numrndbytespairty];\tchar[] actualchars = new char[numrndbytespairty + 1];",
  "verifying default parityreplace byte with a parity errro on the last byte",
  0
 ],
 [
  "public void methodinvocation() {\tvar rr = resolveatlocation<csharpinvocationresolveresult>(@\"using system;\tclass a { void m() {\tconsole.w$riteline(1);\t}}\");",
  "system console writeline",
  0
 ],
 [
  "public static void createlinenumbertestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<?xml version=\\\"1.0\\\" ?>\");\ttw.writeline(\" <element a0='a0&e1;v' a1='a1value' a2='a2&e1;v'><embedded /></element>\");\ttw.writeline(\"<?pi1?>\");\ttw.writeline(\"<base64>9f6hju++</base64>\");",
  "exe pipeline n file",
  1
 ],
 [
  "public static void threadmethod_b() {",
  "test failed conversion result is incorrect",
  1
 ],
 [
  "static bool tppump () {\tif (tp_pump_count > 10) {",
  "pumped the tp test times and no progress o giving up",
  0
 ],
 [
  "private static bool test4() {\tushort a = 1;\tdynamic b = a;\tb++;\tif (b == 2) return true;",
  "failed ushort",
  0
 ],
 [
  "private static bool callsecondstructinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturndynamicstruct();\tif ((!(bool)(s.instancemethod().instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "end",
  1
 ],
 [
  "static void function () {",
  "delegate method",
  0
 ],
 [
  "public static void main (string[] args) {\tif (args.length == 0) {",
  "other",
  1
 ],
 [
  "++indent;\tif (property.hasget) {\t++indent;\tgeneratestatements (property.getstatements);\t--indent;\t}\tif (property.hasset) {\t++indent;\tgeneratestatements (property.setstatements);\t--indent;",
  "end set",
  0
 ],
 [
  "public void logwarning (string message) {",
  "add a column with the same name as the default columnnames",
  1
 ],
 [
  "entry = console.readline ();\t}\telse {\ttry {\tentry = inputfilestream.readline ();\tif (entry == null) {\toutputline (\"executing sql# commands from file done.\");\t}\t}\tcatch (exception e) {",
  "error reading command from file",
  0
 ],
 [
  "}\t}\tif (!updated) {\tvar textfile = monodevelop.projects.text.textfile.readfile (item.key);\ttextfile.text = item.value;\ttextfile.save ();\t}\twrittencount++;\t} catch (ioexception ex) {\tif (monitor != null) monitor.reporterror (gettextcatalog.getstring (\"failed to write file '{0}'.\", item.key), ex);",
  "foo bar",
  1
 ],
 [
  "dlgmsgservice.dialogsynchronizeinvoke = sd.mainthread.synchronizingobject;\tdlgmsgservice.dialogowner = workbench.mainwin32window;\t}\tvar applicationstateinfoservice = sd.getservice<applicationstateinfoservice>();\tif (applicationstateinfoservice != null) {\tapplicationstateinfoservice.registerstategetter(activecontentstate, delegate { return sd.workbench.activecontent; });\t}\tworkbenchsingleton.onworkbenchcreated();\tnavigationservice.initializeservice();\tworkbench.activecontentchanged += delegate {",
  "added",
  1
 ],
 [
  "public static void assertisbatchexceptionandhascorrectazureerrorcode(exception ex, string correctcode, itestoutputhelper outputhelper) {\texception theoneinner = ex;\tif (ex is aggregateexception) {\taggregateexception ae = (aggregateexception)ex;\tassert.equal<int>(1, ae.innerexceptions.count);\ttheoneinner = ae.innerexceptions[0];\t}\tif (!(theoneinner is microsoft.azure.batch.common.batchexception)) {",
  "assertisbatchexceptionandhascorrectazureerrorcode incorrect exception",
  0
 ],
 [
  "private void openforread(string currentmachinename) {",
  "unhandled exception in highlightingusagesextension",
  1
 ],
 [
  "if (count != 1) return 1;\tcount = 0;\ttry {\trecurse ();\t} catch (exception ex) {\tcount++;\t}\ttry {\trecurse ();\t} catch (exception ex) {",
  "available options",
  1
 ],
 [
  "if (type == nvdlresulttype.unwrap) parent.detachplaceholder ();\t}\tpublic override void startelement () {\tif (type != nvdlresulttype.unwrap) validatestartelement ();\t}\tpublic override void endelement () {\tif (type != nvdlresulttype.unwrap) validateendelement ();\t}\tpublic override void text () {\tif (type != nvdlresulttype.unwrap) validatetext ();",
  "result",
  0
 ],
 [
  "datatable table;\ttable = reader.getschematable();\tfor(int c = 0; c < reader.fieldcount; c++) {\tdatarow row = table.rows[c];\tstring strcolumnname = row[\"columnname\"].tostring();\tstring strbasecolumnname = row[\"basecolumnname\"].tostring();\tstring strcolumnsize = row[\"columnsize\"].tostring();\tstring strnumericscale = row[\"numericscale\"].tostring();\tstring strnumericprecision = row[\"numericprecision\"].tostring();\tstring strdatatype = row[\"datatype\"].tostring();",
  "basecolumnname",
  0
 ],
 [
  "private static void immediatecancelxml() {",
  "actual name",
  1
 ],
 [
  "public void testcase3() {\ttest<stringcompareisculturespecificissue>(@\" class test {\tvoid foo () {\t}\t}\", @\" class test {\tvoid foo () {",
  "got but expected",
  1
 ],
 [
  "public void dump (textwriter tw) {",
  "serverwriteiv",
  1
 ],
 [
  "static bool callsecondstructindexer() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturndynamicstruct();\tif ( (!(bool)(s.instanceproperty[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "error while reading monodoc file",
  1
 ],
 [
  "public void writetimeout_default_writebyte() {",
  "verifying default writetimeout with writebyte",
  0
 ],
 [
  "public override void heapobjectreachable (ho o) {",
  "heapobjectreachable",
  0
 ],
 [
  "static void main(string[] args) {\ttry {\tconfiguration config = configurationmanager.openexeconfiguration (configurationuserlevel.none);\tappsettingssection sect = (appsettingssection)config.getsection(\"appsettings\");\tconsole.writeline (sect.sectioninformation.getrawxml ());\tforeach (string key in sect.settings.allkeys) {\tconsole.writeline (\"settings[{0}] = {1}\", sect.settings[key].key, sect.settings[key].value);\t}\t}\tcatch (exception e) {",
  "exception raised",
  0
 ],
 [
  "}\tschedule sched = curwi.schedule;\tif (null == sched) {\t}\telse {\t}\tjobschedulestatistics stats = curwi.statistics;\tif (null == stats) {\t}\telse {",
  "ok",
  1
 ],
 [
  "public void testaddbracestolock() {\ttest<addbracescoderefactoringprovider>(@\"class testclass {\tvoid test() {\t}\t}\", @\"class testclass {\tvoid test() {\tlock (this) {",
  "got but expected",
  1
 ],
 [
  "private void checkrowversion(datarow dr) {",
  "has",
  0
 ],
 [
  "rsb.appendline ();\t}\twriter.writeline (rsb);\tif (version == \"git\") {\twriter.writeline ();\t}\t}\tvar ruleslist = from rule in rulesindex orderby rule select rule;\tstring assembly_index = string.format (\"{0}{1}{2}{1}{3}({2}).md\", outputdir, path.directoryseparatorchar, version, assembly);\tusing (textwriter writer = file.createtext (assembly_index)) {",
  "rules",
  0
 ],
 [
  "w.writestartelement(\"root\");\tw.writeattributestring(\"xmlns\", \"x\", null, \"foo\");\tw.writeattributestring(\"xmlns\", \"x\", null, \"foo\");\tw.writeendelement();\t}\tcatch (xmlexception) {\ttestlog.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "legartifactscountlist.add(artifacts.count);\tthread.sleep(timespan.fromseconds(1));\t}\t});\tawait synchronizationcontexthelper.runtestasync(async () => {\tstagingstorageaccount storagecredentials = testutilities.getstoragecredentialsfromenvironment();\tusing (batchclient batchcli = await testutilities.openbatchclientfromenvironmentasync()) {\tawait this.addtaskssimpletestasync( batchcli, testname, taskcount, paralleloptions: new batchclientparalleloptions() { maxdegreeofparallelism = 2 }, storagecredentials: storagecredentials, localfilestostage: localfilestostage, filestagingartifacts: artifacts, usejoboperations: usejoboperations).configureawait(false);\tcts.cancel();\tawait t.configureawait(false);",
  "file staging leg count",
  0
 ],
 [
  "class testclass {\t[methodimpl (value = methodimploptions.synchronized)]\tvoid testmethod () {\t}\t}\";\tvar output = @\" using system.runtime.compilerservices;\tclass testclass {\tobject locker = new object ();\tvoid testmethod () {\tlock (locker) {",
  "selector match",
  1
 ],
 [
  "else if (dt == null) console.writeline(\"result is from a sql command not (insert,update,delete).   records affected: \" + rdr.recordsaffected);\telse {\tresults++;\tforeach (datarow schemarow in dt.rows) {\tforeach (datacolumn schemacol in dt.columns) console.writeline(schemacol.columnname + \" = \" + schemarow[schemacol]);\tconsole.writeline();\t}\tint nrows = 0;\tstring output, metadatavalue, datavalue;\twhile(rdr.read()) {",
  "row",
  0
 ],
 [
  "\"usage: git [--version] ... <command> [<args>]\", \"\", \"common options:\", { \"version\", \"show version info\", v => showversion = v != null }, { \"help\", \"show this message and exit\", v => showhelp = v != null }, \"\", \"these are common git commands used in various situations:\", \"\", \"start a working area (see also: git help tutorial)\", new command (\"clone\", \"clone a repository into a new directory\"), new command (\"init\",  \"create an empty git repository or reinitialize an existing one\"), new command (\"thisisaverylongcommandnameinordertoinducewrapping\", \"create an empty git repository or reinitialize an existing one. let's make this really long to cause a line wrap, shall we?\"), };\tvar expectedhelp = new stringwriter ();\texpectedhelp.writeline (\"\");\texpectedhelp.writeline (\"\");\texpectedhelp.writeline (\"\");\tassert.areequal (0, git.run (new [] { \"help\" }));\tassert.areequal (expectedhelp.tostring (), o.tostring ());\tvar expectedhelphelp    = new stringwriter ();\texpectedhelphelp.writeline ();\texpectedhelphelp.writeline ();",
  "thisisaverylongcommandnameinordertoinducewrapping",
  0
 ],
 [
  "mousebtnbox.packstart (new label(\"mouse butons:\"));\tmousebtnbox.packstart (laleft);\tmousebtnbox.packstart (lamiddle);\tmousebtnbox.packstart (laright);\tpackstart (mousebtnbox);\tpackstart (la);\tpackstart (resla);\tla.mouseentered += (sender, e) => {\tinsidelabel = true;\tapplication.timeoutinvoke (100, checkmouseoverlabel);",
  "error getting debugger process info known mono bug with symlinked runtimes",
  1
 ],
 [
  "}\tunboundjob.commit();\t}\tclient.joboperations.addtask(jobid, new cloudtask(\"forcejobprep\", \"cmd /c echo testomjobreleaseschedulingerror\"));\ttaskstatemonitor tsm = client.utilities.createtaskstatemonitor();\ttsm.waitall( client.joboperations.listtasks(jobid), taskstate.completed, timespan.fromminutes(10), additionalbehaviors: new[]\t{\tnew protocol.requestinterceptor((x) => {\tlist<computenode> allcomputenodes = client.pooloperations.listcomputenodes(this.poolfixture.poolid).tolist();\tallcomputenodes.foreach((icn) => {",
  "computenode id state",
  0
 ],
 [
  "static securityelement loadxml (string filename) {\tif (!file.exists (filename)) {",
  "couldn t not find",
  0
 ],
 [
  "private void read(string filename) {\txmlserializer ser=new xmlserializer(typeof(dataset));\tfilestream fs=new filestream(filename, filemode.open);\tdataset ds;\tds=(dataset)ser.deserialize(fs);\tfs.close();\tforeach(datatable t in ds.tables) {\tforeach(datacolumn c in t.columns) {\t}\tforeach(datarow r in t.rows) {",
  "row",
  0
 ],
 [
  "protected override void write (pnumber number) {",
  "integer integer",
  0
 ],
 [
  "case \"sybaseclient\": con = new sybaseconnection();\tbreak;\treturn;\treturn;\t#endif }\tcon.connectionstring = constr;\ttry {\tcon.open();\t}\tcatch(sqlexception se) {",
  "sqlexception caught",
  0
 ],
 [
  "public static void thread() {",
  "thread running",
  0
 ],
 [
  "static void performcomparison () {\tint end = work_items.count;\tfor (int i = 0; i < end; i++) {\tstate state = work_items [i];\tif (interlocked.compareexchange (ref state.alreadycomparing, 1, 0) == 1) continue;",
  "using system",
  1
 ],
 [
  "return 1;\t}\tresourceinfo resinf = new resourceinfo ();\tif (compilemultiple) {\tstring [] pair = args [i].split (',');\tswitch (pair.length) {\tcase 1: resinf.inputfile = path.getfullpath (pair [0]);\tresinf.outputfile = path.changeextension (resinf.inputfile, \"resources\");\tbreak;\tcase 2: if (pair [1].length == 0) {",
  "foo",
  1
 ],
 [
  "this.context.clientwritekey = keyblock.readbytes(this.keymaterialsize);\tthis.context.serverwritekey = keyblock.readbytes(this.keymaterialsize);\tif (this.ivsize != 0) {\tthis.context.clientwriteiv = keyblock.readbytes(this.ivsize);\tthis.context.serverwriteiv = keyblock.readbytes(this.ivsize);\t}\telse {\tthis.context.clientwriteiv = ciphersuite.emptyarray;\tthis.context.serverwriteiv = ciphersuite.emptyarray;\t}",
  "verified that the compute node was removed correctly",
  1
 ],
 [
  "static void committest (oracleconnection connection) {\toracletransaction transaction = connection.begintransaction ();\toraclecommand insert = connection.createcommand ();\tinsert.transaction = transaction;\tinsert.commandtext = \"insert into scott.emp (empno, ename, job) values (8787, 't coleman', 'monoist')\";",
  "inserting record",
  0
 ],
 [
  "public static void startreport (streamwriter sw) {\tsw.writeline (@\"<!doctype html public \"\"- sw.writeline (@\"<html xmlns=\"\"http: sw.writeline (@\"<title>mono: class libraries nunit test results</title>\");\tsw.writeline (@\"<link rel=\"\"stylesheet\"\" type=\"\"text/css\"\" href=\"\"media/style.css\"\" />\");\tsw.writeline (@\"<script type=\"\"text/ecmascript\"\" src=\"\"media/scripts.js\"\"></script></head>\");\tsw.writeline (@\"    <div class='header'>\");\tsw.writeline (@\"        <div class='headerimage'>\");\tsw.writeline (@\"            <img src='media/rupert.png' width='48' height='48' />\");\tsw.writeline (@\"        <div class='headertext'>class libraries nunit test results</div>\");",
  "adstorectx cannotchangepwdtoldapconverter add allow self",
  1
 ],
 [
  "public static void displaypools(itestoutputhelper testoutputhelper, ienumerable<cloudpool> poolsenumerable) {\tlist<cloudpool> pools = new list<cloudpool>(poolsenumerable);\tint numpools = (null != pools) ? pools.count : 0;\ttestoutputhelper.writeline(\"\");\ttestoutputhelper.writeline(\"\");\tforeach (cloudpool curpool in pools) {\ttestoutputhelper.writeline(curpool.id + \":\");\tif (curpool.statistics != null) {",
  "avgcpu avgdisk avgmemory diskreadbytes",
  0
 ],
 [
  "static void externalauthenticationtest () {\tstring user = environment.username;\tif (!environment.userdomainname.equals(string.empty)) user = environment.userdomainname + \"\\\\\" + environment.username;",
  "open connection using external authentication",
  0
 ],
 [
  "public void showmethodref (object sender, methodreferencedeventargs args) {",
  "is in table",
  0
 ],
 [
  "public void ifelsecase() {\ttest<useasandnullcheckaction>(@\" class bar {\tpublic bar baz (object foo) {\tif (foo $is bar) {\tbaz ((bar)foo);\treturn (bar)foo;\t} else {",
  "hello",
  0
 ],
 [
  "public void writeafterfailedopen() {\tusing (serialport com = new serialport(\"bad_port_name\")) {",
  "case writeafterfailedopen verifying write method throws exception with a failed call to open",
  0
 ],
 [
  "}\telse {\tcontinue;\t}\tif (!e1.current.data.equals(e2.current)) {\treturn false;\t}\t}\telse {\tif (!comparer.equals((t2)e1.current.data, e2.current)) {",
  "delegate should not be called",
  1
 ],
 [
  "if (membersiddn == null) throw new principaloperationexception(sr.adstorectxcouldntgetsidforgroupmember);\tgroupde.properties[\"member\"].add(membersiddn);\t}\t}\tif (insertedmembers.count > 0) groupde.commitchanges();\tforeach (principal member in removedmembers) {\tdebug.assert(member.unpersisted == false);\tdebug.assert(member.contexttype == contexttype.domain || member.contexttype == contexttype.applicationdirectory);\tdebug.assert(members.cleared == false);\tif (!member.fakeprincipal && adutils.areprincipalsinsameforest(group, member)) {",
  "calculation updated value",
  1
 ],
 [
  "type type = typeof (brushes);\tpropertyinfo[] properties = type.getproperties ();\tint count = 1;\tforeach (propertyinfo property in properties) {\tconsole.writeline(\"\\n\\t\\t\\tbr = brushes.\" + property.name + \";\");\tconsole.writeline(\"\\t\\t\\tsolid = (solidbrush) br;\");\tif (property.name != \"red\") {\tconsole.writeline(\"\\t\\t\\tsolid.color = color.red;\");\t} else {\tconsole.writeline(\"\\t\\t\\tsolid.color = color.white;\");",
  "assert areequal color white solid color p count",
  0
 ],
 [
  "public void m() {\t#line 40 console.writeline(4);\t#line hidden console.writeline();",
  "c a b x cs",
  0
 ],
 [
  "static memberreference findmember(moduledefinition module, string key, func<typedefinition, ienumerable<memberreference>> memberselector) {",
  "test main thread priority must be run on the main thread",
  1
 ],
 [
  "static void dump_user (string username) {\tmembershipuser user = membership.getuser (username, false);",
  "where",
  1
 ],
 [
  "console.writeline (le);\t}\treturn 1;\t}\tforeach (type t in types){\ttry {\tmaps.add (imp.importtypemapping (t));\tusertypes.add (t);\tif (verbose) console.writeline( \" - \" + t );\t} catch (invalidoperationexception ex) {",
  "warning",
  0
 ],
 [
  "public void ipinfotest_accessallipv4properties_noerrors() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfaceproperties ipproperties = nic.getipproperties();\tif (!nic.supports(networkinterfacecomponent.ipv4)) {\tvar nie = assert.throws<networkinformationexception>(() => ipproperties.getipv4properties());\tassert.equal(socketerror.protocolnotsupported, (socketerror)nie.errorcode);\tcontinue;\t}\tipv4interfaceproperties ipv4properties = ipproperties.getipv4properties();",
  "isforwardingenabled",
  0
 ],
 [
  "public void m() {\t#line 40 console.writeline(4);\t#line hidden console.writeline();",
  "hello world",
  1
 ],
 [
  "public bool check (testresult testresult) {\tif (exitzero && (testresult.exitcode != 0)) {",
  "test failed exit code is expected zero",
  0
 ],
 [
  "xmlschemaattribute attribute = (xmlschemaattribute)derivedtype.attributeuses[attributebase.qualifiedname];\tif (attribute == null) {\tderivedtype.attributeuses.add(attributebase.qualifiedname, attributebase);\t}\telse {\tif (attributebase.use == xmlschemause.prohibited && attribute.use != xmlschemause.prohibited) {\t#if debug string position = string.empty;\tif (derivedtype.sourceuri != null) {\tposition = \" in \" + derivedtype.sourceuri + \"(\" + derivedtype.linenumber + \", \" + derivedtype.lineposition + \")\";\t}",
  "verifying write method throws exception with a failed call to open",
  1
 ],
 [
  "while (nativemethods.thread32next(handleref, thread));\t}\tfor (int i = 0; i < threadinfos.count; i++) {\tthreadinfo threadinfo = (threadinfo)threadinfos[i];\tprocessinfo processinfo = (processinfo)processinfos[threadinfo.processid];\tif (processinfo != null) processinfo.threadinfolist.add(threadinfo);\t}\t}\tfinally {\tif (bufferhandle.isallocated) bufferhandle.free();",
  "process closehandle snapshot handle",
  0
 ],
 [
  "if (!quiet) {\tdouble ratio = ((double) stream.length * 100) / real_size;\t}\t} else {\ttc.writeline (\"static const monobundledassembly assembly_bundle_{0} = {{\\\"{1}\\\", assembly_data_{0}, {2}}};\", encoded, aname, real_size);\t}\tstream.close ();\tc_bundle_names.add (\"assembly_bundle_\" + encoded);\ttry {\tfilestream cf = file.openread (fname + \".config\");",
  "config from config",
  0
 ],
 [
  "protected static void writeheader (streamwriter s, string assembly, bool noconfig) {",
  "this file was automatically generated by create native map from do not modify",
  0
 ],
 [
  "public bool isautoinvoked(bool ignoreexception) {\tif (traceutil.if(this, tracelevel.verbose)) {",
  "isautoinvoked",
  0
 ],
 [
  "public void invalidmethodtest() {\tvar actions = getactions<toabstractvirtualnonvirtualconversioncoderefactoringprovider>( abstract class test {\tpublic virtual string $tostring() {",
  "hello world",
  0
 ],
 [
  "xmlschemaattribute attribute = (xmlschemaattribute)derivedtype.attributeuses[attributebase.qualifiedname];\tif (attribute == null) {\tderivedtype.attributeuses.add(attributebase.qualifiedname, attributebase);\t}\telse {\tif (attributebase.use == xmlschemause.prohibited && attribute.use != xmlschemause.prohibited) {\t#if debug string position = string.empty;\tif (derivedtype.sourceuri != null) {\tposition = \" in \" + derivedtype.sourceuri + \"(\" + derivedtype.linenumber + \", \" + derivedtype.lineposition + \")\";\t}",
  "derived",
  0
 ],
 [
  "static byte [] outparametersresponse (socket socket) {\tstring responsecontent = \"<soap:envelope xmlns:soap=\\\"http: \"  <soap:body>\" + \"    <reqresponse2 xmlns=\\\"urn:foo\\\">\" + \"      <hits>erere</hits>\" + \"    </reqresponse2>\" + \"  </soap:body>\" + \"</soap:envelope>\";\tstringwriter sw = new stringwriter ();",
  "included in the export it can be specified multiple",
  1
 ],
 [
  "protected override void generatesnippetmember(codesnippettypemember e) {",
  "codesnippettypemember",
  0
 ],
 [
  "private static bool callsecondstructinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tdynamic d = new firstclassreturnstruct<int>();\tif ((!(((secondstruct<int>)d.instancemethod()).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public static xmlnode getnodefromurl (string url, roottree tree) {",
  "url is",
  0
 ],
 [
  "public static int main () {\tfoo f = new foo ();\tint j = f.bar (2, 3);",
  "blah foo bar returned",
  0
 ],
 [
  "s5.f1 = 1;\ts5.f2 = 2;\ts5.f3 = 3;\ts5.f4 = 4;\ts5.f5 = 5;\ts5 = mono_return_int5(s5, 906);\tif (s5.f1 != 1+906) {\treturn 1;\t}\tif (s5.f2 != 2+906) {",
  "was",
  1
 ],
 [
  "public static byte[] encode(string format, params object[] value) {\tif (format == null) throw new argumentnullexception(\"format\");\tutf8encoding utf8encoder = new utf8encoding();\tbyte[] encodingresult = null;\tif (value == null) value = array.empty<object>();",
  "ok",
  1
 ],
 [
  "}\tconsole.writeline (\");\");\tif (c [0] != 'v') console.writeline ($\"\\t*({typetosigtype (c [0])}*)margs->retval = res;\");\tconsole.writeline (\"\\n}\\n\");\t}\tconsole.writeline (\"{\");\tfor (int i = 0; i < cookies.length; ++i) {\tvar c = cookies [i];\tconsole.write (\"\\t\");\tif (i > 0) console.write (\"else \");",
  "got but expected",
  1
 ],
 [
  "static comparisonnode makecomparisonnode (string info_file, string dll_file) {\tif (!file.exists (info_file)) {",
  "did not throw argumentnullexception",
  1
 ],
 [
  "nativehashtable typetemplateshashtable = loadhashtable(moduleinfo, reflectionmapblob.typetemplatemap, out externalfixupstable);\tif (typetemplateshashtable.isnull) continue;\tvar enumerator = typetemplateshashtable.lookup(hashcode);\tnativeparser entryparser;\twhile (!(entryparser = enumerator.getnext()).isnull) {\truntimetypehandle candidatetemplatetypehandle = externalfixupstable.getruntimetypehandlefromindex(entryparser.getunsigned());\ttypedesc candidatetemplate = concretetype.context.resolveruntimetypehandle(candidatetemplatetypehandle);\tif (canonform == candidatetemplate.converttocanonform(kind)) {\tnativelayoutinfotoken = (uint)externalfixupstable.getexternalnativelayoutoffset(entryparser.getunsigned());\tif (nativelayoutinfotoken == badtokenfixupvalue) {",
  "error template not fixed up skipping",
  0
 ],
 [
  "public static void publicstaticmethod () {",
  "publicstaticmethod",
  0
 ],
 [
  "static int f (int a) {",
  "access friend internal method ok",
  1
 ],
 [
  "foreach (peer peer in peer_map.peers) {\tdg.addnode (peer);\tif (peer.nearestbase != null) dg.addedge (peer.nearestbase, peer);\tforeach (peerfield field in peer.fields) {\tif (field.peer.isvaluetype) dg.addedge (field.peer, peer);\t}\t}\tforeach (peer peer in dg.topologicalsort ()) {\tif (peer.isopaque) continue;\tif (peer.isenum) {",
  "atsp",
  1
 ],
 [
  "public static void print(xmlmembermapping mm) {",
  "namespace",
  0
 ],
 [
  "public static void test6 () {\tthread thread = new thread (() => {\tnew staticconstructor6 ();\t});\tthread.start ();\tdriver.sema1.wait ();\tthread.abort ();\tthread.join ();\ttry {\tisstaticconstructor6viable ();",
  "is viable",
  0
 ],
 [
  "static int main () {\tsimpledelegate d = new simpledelegate (async_func_throws);\tasynccallback ac = new asynccallback (async_callback);\tstring state1 = \"state1\";\tiasyncresult ar1 = d.begininvoke (1, ac, state1);\twhile (cb_state == 0) thread.sleep (0);\ttry {\td.endinvoke (ar1);",
  "no exception",
  0
 ],
 [
  "static void writehelp () {\tconsole.writeline ();\tconsole.writeline ();\tconsole.writeline ();",
  "outputs",
  0
 ],
 [
  "bool empty = true;\tfor (int i = 0; i < freqs.length; i++) {\tif (freqs[i] != 0) {\tconsole.writeline(\"freqs[\"+i+\"] == \"+freqs[i]);\tempty = false;\t}\t}\tif (!empty) {\tthrow new exception();\t}",
  "checkempty suceeded",
  0
 ],
 [
  "mounteddirname = path.getfullpath(dirs[0]);\tif (dirs.length > 1) mounteddirname = path.getfullpath(dirs[1]);\tif (eval(directory.getdirectories(mounteddirname).length == 0, \"err_492qwl! the sub directory has directories: {0}\", mounteddirname)) {\tforeach (string file in directory.getfiles(mounteddirname)) file.delete(file);\tif (eval(directory.getfiles(mounteddirname).length == 0, \"err_904kij! the mounted directory has files: {0}\", mounteddirname)) {\tfile.appendalltext(debugfilename, string.format(\"mounting on {0}{1}{2}\", directory.getcurrentdirectory().substring(0, 2), mounteddirname, environment.newline));\tmounthelper.mount(directory.getcurrentdirectory().substring(0, 2), mounteddirname);\tdirectory.delete(dirname, true);\ttask.delay(300).wait();\teval(!directory.exists(dirname), \"err_900edl! directory {0} still exist: {1}\", dirname, directory.exists(dirname));",
  "node ns",
  1
 ],
 [
  "public bool isreleaseversion () {\tnugetversion nugetversion = null;\tif (nugetversion.tryparse (version, out nugetversion)) {\treturn !nugetversion.isprerelease;\t}",
  "pmdesignator",
  1
 ],
 [
  "public virtual mystruct add (int a, out int c, int b) {",
  "try get v val",
  1
 ],
 [
  "public stockiconsnodebuilder () {\ttry {\ticonsicon = xwt.drawing.image.fromresource (\"image-x-generic.png\");\t} catch (exception e) {",
  "error while loading pixbuf image x generic png",
  0
 ],
 [
  "public static int main(string[] args) {\ttry {\tcallfrominsidegrandchild();\treturn 100;\t}\tcatch (exception ex) {\tconsole.writeline(ex);",
  "derived",
  1
 ],
 [
  "private static keybundle updatekey(string keyname) {\tvar vaultaddress = inputvalidator.getvaultaddress();\tkeyname = (keyname == string.empty) ? inputvalidator.getkeyid() : keyname;\tvar keyattributes = inputvalidator.getupdatekeyattribute();\tvar updatedkey = task.run(() => keyvaultclient.updatekeyasync(vaultaddress, keyname, attributes: keyattributes)).configureawait(false).getawaiter().getresult();",
  "updated key",
  0
 ],
 [
  "protected virtual void applyconfiguration (string configurationname) {\tif (configurationname == null) return;\t#if mobile || xammac_4_5 try {\tvar cfg = new silverlightclientconfigloader ().load (xmlreader.create (\"servicereferences.clientconfig\"));\tsilverlightclientconfigloader.serviceendpointconfiguration se = null;\tif (configurationname == \"*\") se = cfg.getserviceendpointconfiguration (endpoint.contract.name);\tif (se == null) se = cfg.getserviceendpointconfiguration (configurationname);\tif (se.binding != null && endpoint.binding == null) endpoint.binding = se.binding;\tif (se.address != null && endpoint.address == null) endpoint.address = se.address;",
  "warning configured endpoint address not found in configuration",
  0
 ],
 [
  "for (int i = 0; i < args.length; i++) {\tcmd.commandtext = system.io.file.readalltext(args[i]);\tcnn.open();\tcmd.executenonquery();\tcnn.close();\t}\tcmd.dispose();\tcnn.dispose();\t}\t#else if (args.length != 4) {",
  "debug arguments can be set on project properties in visual studio",
  0
 ],
 [
  "class testclass {\tpublic void testmethod(ienumerable<string> list) {\tif ($list.contains(\"\"bla\"\")) {\t}\t}\t}\", @\" using system;\tusing system.collections.generic;\tclass testclass {\tpublic void testmethod(ienumerable<string> list) {\tif ((list != null) && list.contains(\"\"bla\"\")) {",
  "contains",
  0
 ],
 [
  "static void metodo (exception e) {\tif (e is notimplementedexception){",
  "ok",
  0
 ],
 [
  "private static bool callsecondinterfaceinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tif ((!(bool)(((dynamic)firstclassreturninterface.staticmethod()).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "good got exception required",
  1
 ],
 [
  "using (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writestring(invxml);\t}\tcatch (argumentexception e) {\tutils.checkerrorstate(w.writestate);\treturn;\t}\t}",
  "did not throw argumentnullexception",
  1
 ],
 [
  "static void expectedexception<t>(action action) where t: exception {\ttry {\taction();",
  "expected exception",
  0
 ],
 [
  "gateway = await client.gateway.getasync(resourcegroup, gatewayone, gatewayexpandoption.status);\tassert.notnull(gateway);\tassert.notnull(gateway.latestpublishedmsiversion);\tassert.notnull(gateway.activemessagecount);\twriteline(gateway.tojson());\tvar gateways = await client.gateway.listasync();\tassert.notnull(gateways);\tvar found = false;\tforeach (var g in gateways) {\tfound = true;",
  "error while extracting method",
  1
 ],
 [
  "var all = cultureinfo.getcultures (culturetypes.specificcultures | culturetypes.neutralcultures).orderby (l => l.lcid);\tconsole.outputencoding = encoding.utf8;\tvar writer = console.out;\tforeach (var c in all) {\tif (c.lcid == cultureinfo.invariantculture.lcid) continue;\tvar df = c.datetimeformat;\tdump (writer, df.abbreviateddaynames, \"abbreviateddaynames\");\tdump (writer, df.abbreviatedmonthgenitivenames, \"abbreviatedmonthgenitivenames\");\tdump (writer, df.abbreviatedmonthnames, \"abbreviatedmonthnames\");\tdump (writer, df.daynames, \"daynames\");",
  "xmldriver error",
  1
 ],
 [
  "static filepath getfirefoxprofilepath (string profilename) {\tfilepath profiledir = environment.getfolderpath (environment.specialfolder.personal);\tprofiledir = profiledir.combine (\".mozilla\", \"firefox\");\tfilepath inifile = profiledir.combine (\"profiles.ini\");\tif (!file.exists (inifile)) {",
  "firefox profile list does not exist",
  0
 ],
 [
  "icount++;\t}\ttry {\tcalltransform(xslt, \"\\\\\\\\\", _stroutfile);\t}\tcatch (system.exception) {\ticount++;\t}\t}\tif (icount.equals(3)) return;",
  "exception not generated for invalid input sources",
  0
 ],
 [
  "servicemanager.services.initializeservices();\ttry {\tconsoleui consoleui = new consoleui();\treturn consoleui.execute( options );\t}\tcatch( filenotfoundexception ex ) {\tconsole.writeline( ex.message );\treturn consoleui.file_not_found;\t}\tcatch( exception ex ) {",
  "unhandled exception",
  0
 ],
 [
  "catch (xmlexception ex) {\tmonitor.reporterror (ex.message, ex);\taddtask (filename, ex.message, ex.lineposition, ex.linenumber, taskseverity.error, workspaceobject);\terror = true;\t}\tfinally {\tif (stringreader != null) stringreader.dispose ();\tsettings.validationeventhandler -= validationhandler;\t}\tif (error) {",
  "validation failed",
  0
 ],
 [
  "if (!queueassembly (files, a.codebase)) return false;\t}\t} catch (exception) {\tif (!skip_scan) throw;\t}\treturn true;\t}\tstatic assembly loadassemblyfile (string assembly) {\tassembly a = null;\ttry {",
  "class system xml serialization xmlserializerimplementation",
  1
 ],
 [
  "private static bool testmethod (out int test) {\ttry {\tcalldelegate (delegate {\treturn;\t});\t} catch (exception) {",
  "unhandled",
  1
 ],
 [
  "thread thread = new thread (() => {\tnew staticconstructor6 ();\t});\tthread.start ();\tdriver.sema1.wait ();\tthread.abort ();\tthread.join ();\ttry {\tisstaticconstructor6viable ();\t} catch (typeinitializationexception e) {",
  "locals init",
  1
 ],
 [
  "static void onload (object s, addineventargs args) {",
  "reader readstartelement",
  1
 ],
 [
  "public void outbufferfilled_flush_once() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tasyncwriterndbytearray asyncwriterndbytearray = new asyncwriterndbytearray(com1, default_buffer_size);\tvar t = new task(asyncwriterndbytearray.writerndbytearray);",
  "verifying flush method after output buffer has been filled",
  0
 ],
 [
  "static void outparmtest2 (oracleconnection con) {",
  "comment",
  1
 ],
 [
  "system.console.writeline(indent + curvar.desc);\ttestmodule.failcount++;\t}\telse {\tsystem.console.writeline(indent + curvar.desc);\ttestmodule.skipcount++;\t}\t}\tcatch (ctestskippedexception tse) {\tsystem.console.writeline(indent + curvar.desc);",
  "skipped msg",
  0
 ],
 [
  "private static bool test1() {\tdynamic d1 = true;\tishit = false;\tif (d1 || boolvalue) {\tif (ishit) {",
  "failed int int",
  1
 ],
 [
  "public void testbug() {\tanalyze<stringlastindexofisculturespecificanalyzer>(@\" class program {\tpublic int foobar { get; }\tstatic void main(string [] args, string foobar) {\t}\t}\t\", @\" class program {\tpublic int foobar { get; }\tstatic void main(string [] args, string foobar) {",
  "aeia system stringcomparison ordinal",
  0
 ],
 [
  "foreach (ilist<char> w in views) console.write(overlap(u, w) ? '+' : '-');\tconsole.writeline();\t}\tforeach (ilist<char> u in views) {\tforeach (ilist<char> w in views) {\tint len = overlaplength(u, w);\tconsole.write(len >= 0 ? string.format(\"{0}\", len) : \" \");\t}\tconsole.writeline();\t}",
  "select autoinvoke exception",
  1
 ],
 [
  "public void taskfinishedhandler (taskfinishedeventargs args) {\tindent--;\tif (isverbositygreaterorequal (loggerverbosity.detailed) || (!args.succeeded && isverbositygreaterorequal (loggerverbosity.normal))) {\tsetcolor (eventcolor);",
  "test failed at call result",
  1
 ],
 [
  "return null;\t}\tnrefactoryresolver resolver = resourceresolverservice.createresolver(filename) as nrefactoryresolver;\tif (resolver == null) {\tresolver = new nrefactoryresolver(languageproperties.csharp);\t}\tif (compilationunit == null) {\tcompilationunit = getfullast(resolver.language, filename, filecontent);\t}\tif (compilationunit == null) {",
  "resourcetoolkit nrefactoryastcacheservice resolvelowlevel failed due to the compilation unit being unavailable",
  0
 ],
 [
  "if (!datareader.canreadbinarycontent) {\ttry {\tint nbytes = 0;\tswitch ((int)new random().next(4)) {\tnbytes = datareader.readcontentasbinhex(buffer, 0, 1);\tbreak;\tnbytes = datareader.readelementcontentasbinhex(buffer, 0, 1);\tbreak;\tnbytes = datareader.readcontentasbase64(buffer, 0, 1);\tbreak;",
  "selecting",
  0
 ],
 [
  "public static void main( ) {\tlistfonts();\tcheckfontproperties();\tfloat width = 800.0f;\tfloat height = 650.0f;\tstring str = \"\";\tfont f1 = new font(\"arial\",12);\tfont f2 = new font(\"verdana\", 12, fontstyle.bold);\tfont f3 = new font(\"courier new\", 12, fontstyle.italic);\tfont f4  = new font(fontfamily.genericsansserif, 19, fontstyle.regular, graphicsunit.millimeter);",
  "length",
  1
 ],
 [
  "public static void main() {\tappdomain domain = appdomain.currentdomain;\tdomain.unhandledexception += new unhandledexceptioneventhandler(myhandler);\ttry {\ttry {\tthrow new exception();\t} finally {",
  "inner exception",
  1
 ],
 [
  "public static async task test () {\tusing (var device_resource = new c ()) {\ttry {",
  "aa",
  0
 ],
 [
  "public void m() {\t#line 40 console.writeline(4);\t#line hidden console.writeline();",
  "took ms",
  1
 ],
 [
  "public static void resumelogging() {",
  "use default for persist security info which is false",
  1
 ],
 [
  "private static bool callsecondclassindexer() {\tint failcount = 0;\tverify.firstcalled = false;\tdynamic d = new firstclassreturnclass<int>();\tif ((!(((secondclass<int>)d.instancemethod())[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "secutil s assembly",
  1
 ],
 [
  "public int run(string[] args) {\tthis.parsecommandline(args);\tif (this.showlogo) {\tassembly me = assembly.getexecutingassembly();",
  "comobjinfo typeinfo not found",
  1
 ],
 [
  "static gdip() {\tdebug.assert(s_inittoken == intptr.zero, \"gdiplusinitialization: initialize should not be called more than once in the same domain!\");",
  "initialize gdi",
  0
 ],
 [
  "public static void main (string [] args) {\tif (args.length > 0 && args [0] == \"--skip-error\") skip_error = true;",
  "started yyyy mm dd hh mm ss fff",
  0
 ],
 [
  "public void printusage() {\tusing (stringwriter usagestr = new stringwriter()) {",
  "where",
  0
 ],
 [
  "if (t != null) {\tmessage = string.format (\"{0} is included in the {1} assembly.\", t.fullname, t.assembly.getname ().name);\tgoto found;\t}\t}\t} catch (exception e){\t}\t}\t}\tnotfound: if (t == null) {",
  "could not find",
  0
 ],
 [
  "static int main (string[] args) {\tint result = addabunchofints ( __arglist ( 2, 3, 4 ));",
  "answer",
  0
 ],
 [
  "public void bytestowritesuccessive() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tasyncwriterndstr asyncwriterndstr = new asyncwriterndstr(com, s_string_size_bytes_to_write);\tvar t1 = new task(asyncwriterndstr.writerndstr);\tvar t2 = new task(asyncwriterndstr.writerndstr);\tint numnewlinebytes;",
  "verifying default readtimeout with read byte buffer int offset int count",
  1
 ],
 [
  "static bool callsecondinterfaceindexer() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturndynamicinterface();\tif ( (!(bool)(s[1][2])) || (!verify.firstcalled)) {\tfailcount++;",
  "host name",
  1
 ],
 [
  "private static void testdynamicinvokestubs() {",
  "failed to load version information",
  1
 ],
 [
  "static bool certificatevalidation (object sender, x509certificate certificate, x509chain chain, sslpolicyerrors certificateerrors) {",
  "certificatevalidation",
  0
 ],
 [
  "cloudtask directorycreationtask2 = new cloudtask(directorycreationtaskid2, string.format(\"cmd /c mkdir {0} && echo test > {0}/testfile.txt\", directorynametwo));\tboundjob.addtask(mytask);\tboundjob.addtask(directorycreationtask1);\tboundjob.addtask(directorycreationtask2);\tutilities utilities = batchcli.utilities;\ttaskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();\ttaskstatemonitor.waitall( boundjob.listtasks(), microsoft.azure.batch.common.taskstate.completed, timespan.fromminutes(3));\tcloudtask boundtask = boundjob.gettask(taskid);\tstring computenodeid = boundtask.computenodeinformation.affinityid.split(':')[1];\tcomputenode computenode = batchcli.pooloperations.getcomputenode(this.poolfixture.poolid, computenodeid);",
  "exceptiontests reported call stack",
  1
 ],
 [
  "bool redirecterror = options.err != null && options.err != string.empty;\tif ( redirecterror ) {\tstreamwriter errorstreamwriter = new streamwriter( options.err );\terrorstreamwriter.autoflush = true;\terrorwriter = errorstreamwriter;\t}\ttestrunner testrunner = makerunnerfromcommandline( options );\ttry {\tif (testrunner.test == null) {\ttestrunner.unload();",
  "edge at distance",
  1
 ],
 [
  "public static ienumerable<string> yieldreturnwithnestedtryfinally(bool breakinmiddle) {\tyield return \"start of method\";\ttry {\tyield return \"within outer try\";\ttry {\tyield return \"within inner try\";\tif (breakinmiddle) yield break;\tyield return \"end of inner try\";\t} finally {",
  "unable to unload appdomain",
  1
 ],
 [
  "public void dump () {\tif (quiet) return;\tforeach (var floc in locations.keys){",
  "floc at locations floc x",
  0
 ],
 [
  "public int run() {\tif (silohost == null) {\treturn 1;\t}\ttry {\tsilohost.initializeorleanssilo();\tif (silohost.startorleanssilo()) {",
  "successfully started orleans silo silohost name as a silohost type node",
  0
 ],
 [
  "cmd2.commandtext = \"insert into mono_test_table3 (col1, col2) values ('3', null)\";\tcmd2.executenonquery ();\tcmd2.commandtext = \"insert into mono_test_table3 (col1, col2) values ('3','few')\";\tcmd2.executenonquery ();\tcmd2.commandtext = \"select col1, count(col2) as max_col1 from mono_test_table3 group by col1\";\toracledatareader reader = cmd2.executereader ();\twhile (reader.read ()) {\tobject obj0 = reader.getvalue (0);\tobject obj1 = reader.getvalue (1);\t}",
  "no more records",
  0
 ],
 [
  "static void testpfs() {\tigraph<string, double, double> g = new hashgraph<string, double, double>(new doubleweight(), wheel(false, 10));\tg.print(console.out);\tconsole.writeline(\"========= pfs non-accumulated weights (-> mst) =========\");\tconsole.writeline(\"========= pfs accumulated weights (-> shortst paths from start) =========\");",
  "try block",
  1
 ],
 [
  "return null;\t}\t}\t}\tvar assembly = domain.loadassembly (module);\tif (assembly != null) loaded_names.add (tuple.create (an, filename, assembly));\treturn assembly;\t}\t}\t} catch (exception e) {",
  "exception during loading",
  0
 ],
 [
  "public wpfpreview(reportdesignerloader loader,iviewcontent content):base(content) {",
  "should have exited in the unhandledexception event handler",
  1
 ],
 [
  "public override void finishedlaunching (nsobject notification) {\tvar args = environment.getcommandlineargs ();\tnserror error;\tvar searchargidx = array.indexof<string> (args, \"--search\");\tif (searchargidx != -1 && args.length > searchargidx + 1 && !string.isnullorempty (args [searchargidx + 1])) {\tvar document = controller.openuntitleddocument (true, out error);\tif (document != null) ((mydocument)document).loadwithsearch (args[searchargidx + 1]);\t}\tvar indexmanager = indexupdatemanager;\tindexmanager.checkindexisfresh ().continuewith (t => {",
  "error while checking indexes",
  0
 ],
 [
  "if (oad.method != miobj) {\tif (oad.method == mistr) console.writeline (\"object method is string\");\treturn 1;\t}\tif (sad.method != mistr) {\tif (sad.method == miobj) console.writeline (\"string method is object\");\telse return 1;\t} else {\t}\tif (sad2.method != mistr) {",
  "did not throw exception",
  1
 ],
 [
  "public void parity_neg1() {",
  "verifying parity",
  0
 ],
 [
  "static void printurls (rooturlscollection col) {\tfor (int i = 0; i < col.count; i++) {\tconfigurationelement e = col [i];\turlconfigelement ue = e as urlconfigelement;\tif (ue != null) {",
  "port",
  0
 ],
 [
  "void createcontrol () {\ttry {\tf = new form ();\tf.showintaskbar = false;\tc = new control ();\tf.controls.add (c);\tconsole.writeline (\"f.handle = {0}\", f.handle);\tconsole.writeline (\"c.handle = {0}\", c.handle);\tcontrol_context = new applicationcontext (f);\tmonitor.enter (m);",
  "pulsing",
  0
 ],
 [
  "public void loadxmlreader6() {\txslt = new xslcompiledtransform();\txmltextreader xrtemp = null;\ttry {\txslt.load(xrtemp);\t}\tcatch (system.argumentnullexception) {\treturn;\t}",
  "failed to throw system argumentnullexception for null reader input",
  0
 ],
 [
  "catch (invalidoperationexception) {\tflag = false;\t}\tif (flag) {\tthrow new testexception(testresult.failed, \"\");\t}\ttry {\tdatareader.read();\t}\tcatch (xmlexception) {",
  "passing osversioninfo as struct",
  1
 ],
 [
  "public static void main (string[] args) {",
  "hello world",
  0
 ],
 [
  "var pendinglinefragmenterror = new stringbuilder ();\tvar environmentoverride = getandlogenvironmentvariables ();\ttry {\tprocesswrapper pw = processservice.startprocess (pinfo, (_, msg) => processline (pendinglinefragmentoutput, msg, standardoutputloggingimportance), (_, msg) => processline (pendinglinefragmenterror, msg, standarderrorloggingimportance), null, environmentoverride);\tpw.waitforoutput (timeout == int32.maxvalue ? int32.maxvalue : timeout);\tprocessline (pendinglinefragmentoutput, standardoutputloggingimportance, true);\tprocessline (pendinglinefragmenterror, standarderrorloggingimportance, true);\texitcode = pw.exitcode;\tpw.dispose ();\t} catch (system.componentmodel.win32exception e) {",
  "error executing tool",
  0
 ],
 [
  "public unittestresult [] getresultstodate (datetime enddate, int count) {\ttry {\tif (store != null) return store.getresultstodate (test.activeconfiguration, test, enddate, count);\t} catch (exception ex) {",
  "test store query failed test history data may be corrupt",
  0
 ],
 [
  "public static ienumerable<string> yieldreturnwithnestedtryfinally(bool breakinmiddle) {\tyield return \"start of method\";\ttry {\tyield return \"within outer try\";\ttry {",
  "test failed at call result",
  1
 ],
 [
  "public void invalidifnotypecast() {\ttestwrongcontext<canbereplacedwithtrycastandcheckfornullissue>(@\" class bar {\tpublic bar baz (object foo) {\tif (foo is bar) {",
  "hello",
  0
 ],
 [
  "[obsolete(\"this method has been deprecated.  please use system.diagnostics.eventlog.createeventsource(eventsourcecreationdata sourcedata) instead.  http: public static void createeventsource(string source, string logname, string machinename) {\tcreateeventsource(new eventsourcecreationdata(source, logname, machinename));\t}\t[resourceexposure(resourcescope.none)]\t[resourceconsumption(resourcescope.machine, resourcescope.machine)]\tpublic static void createeventsource(eventsourcecreationdata sourcedata) {\tif (sourcedata == null) throw new argumentnullexception(\"sourcedata\");\tstring logname = sourcedata.logname;\tstring source = sourcedata.source;\tstring machinename = sourcedata.machinename;",
  "orleans silo shutdown",
  1
 ],
 [
  "private void emitopaquehandle() {\topenscope(\"public partial struct handle\");\tforeach (var record in schemadef.recordschema) {\tstring handlename = $\"{record.name}handle\";\topenscope($\"public {handlename} to{handlename}(metadatareader reader)\");",
  "return new handlename this",
  0
 ],
 [
  "connectionstring = \"host=localhost;\" + \"dbname=test;\" + \"user=postgres\";\ttry {\tstring maxstrvalue;\tcon = new sqlconnection(connectionstring);\tcon.open();\tsql = \t\"select count(*) \" + \"from sometable\";\tcmd = new sqlcommand(sql,con);\tint64 rowcount = (int64) cmd.executescalar();\tsql = \t\"select max(tdesc) \" + \"from sometable\";\tcmd = new sqlcommand(sql,con);",
  "other subthread is",
  1
 ],
 [
  "public void items () {\thttpcontext c = cook (10);",
  "ttttttttttt",
  0
 ],
 [
  "public void open_basestreamclose_close() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "verifying properites after calling open basestream close then close",
  0
 ],
 [
  "assert.true(false);\t}\tm_xsltarg.addparam(\"myarg5\", szempty, d5);\tretobj = m_xsltarg.getparam(\"myarg5\", szempty);\tif (!d5.equals(retobj)) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg6\", szempty, d6);\tretobj = m_xsltarg.getparam(\"myarg6\", szempty);\tif (!d6.equals(retobj)) {",
  "sqlexception dropping objects",
  1
 ],
 [
  "task join = null;\ttask wrapper = new task(() => {\ttask1 = task<int>.factory.startnew(() => {\tassert.equal(scheduler, taskscheduler.current);\tpause1.waitone();\treturn 1;\t});\ttask2 = task<int>.factory.startnew(() => {\tassert.equal(scheduler, taskscheduler.current);\tpause2.waitone();",
  "task done",
  0
 ],
 [
  "}\tlclicensecontext ctx = new lclicensecontext();\tctx.licxfilename = complist;\tctx.outputfilename = path.combine(targetdir ??\".\", target)+\".licenses\";\tappdomain.currentdomain.assemblyresolve += new resolveeventhandler(currentdomain_assemblyresolve);\tprivatepaths.add(\".\");\tdictionary<string, assembly> loaded = new dictionary<string, assembly>();\tforeach (string reference in references) {\tstring path = path.getdirectoryname(reference);\tif (!privatepaths.contains(path)) {",
  "adding to private paths",
  0
 ],
 [
  "ssl.servercertvalidationdelegate += new certificatevalidationcallback (certificatevalidation);\tstreamwriter sw = new streamwriter (ssl);\tsw.flush ();\tstreamreader sr = new streamreader (ssl, encoding.utf8);\tcontent = sr.readtoend ();\t}\tcatch (exception e) {\tpropertyinfo pi = e.gettype ().getproperty (\"hresult\", bindingflags.nonpublic | bindingflags.getproperty | bindingflags.instance);\tconsole.writeline (e.tostring ());\tif (ns != null) {",
  "max write",
  0
 ],
 [
  "public void parity_even_odd() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "verifying parity even and then odd",
  0
 ],
 [
  "public void trackprocesstask (task<int> task) {\ttask.continuewith (t => {\tvar faulted = t.isfaulted;",
  "merger exception",
  0
 ],
 [
  "public void openclosenewinstanceopen() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "calling close after calling open then create a new instance of serialport and call open again",
  0
 ],
 [
  "return new resourcesetreference(resourcename, filename);\t}\tif (resourcepart.contains(\".\")) {\tresourcepart = resourcepart.substring(resourcepart.indexof('.')+1);\t} else {\tbreak;\t}\t}\t}\t}",
  "resourcetoolkit nrefactoryresourceresolver getresourcesetreference is unable to find a suitable resource file for",
  0
 ],
 [
  "break;\tcase \"\\\\usesimplereader\": setusesimplereader (parms);\tbreak;\tbreak;\t}\t}\tpublic void listproviders() {\tdatatable table = dbproviderfactories.getfactoryclasses();\tfor (int r = 0; r < table.rows.count; r++) {\tconsole.writeline(\"---------------------\");",
  "xmoveresizewindow",
  1
 ],
 [
  "public async task getasync_maxautomaticredirectionsnserverhops_throwsiftoomany(int maxhops, int hops) {\tif (iswinhttphandler && !platformdetection.iswindows10version1703orgreater) {\treturn;\t}\telse if (platformdetection.isfullframework) {",
  "begin transaction",
  1
 ],
 [
  "public void readtimeout_infinite_readbyte() {",
  "answer",
  1
 ],
 [
  "static int main () {\tsimpledelegate d = new simpledelegate (async_func_throws);\tasynccallback ac = new asynccallback (async_callback);\tstring state1 = \"state1\";\tiasyncresult ar1 = d.begininvoke (1, ac, state1);\twhile (cb_state == 0) thread.sleep (0);\ttry {\td.endinvoke (ar1);",
  "passwordinfo setpassword sending request",
  1
 ],
 [
  "static void main (string [] args) {\tif (!file.exists (\"genproj.cs\")) {\tenvironment.exit (1);\t}\tif (args.length == 1 && args [0].tolower ().contains (\"-h\")) {",
  "contenttype",
  1
 ],
 [
  "public void getpublicqueues () {\tstring qname1 = @\".\\admin-queue-3\";\tstring qname2 = @\".\\admin-queue-4\";\tmqutil.getqueue (qname1);\tmqutil.getqueue (qname2);\tmessagequeue[] mq = messagequeue.getpublicqueues ();",
  "concatenating strings from interface calls failed",
  1
 ],
 [
  "public override string tostring () {\tstringwriter sw = new stringwriter ();",
  "done building target in project failed",
  1
 ],
 [
  "public static int main () {",
  "from to",
  0
 ],
 [
  "public void testrequiredthistoavoidcs0135withforeach () {\ttestwithsubissue<redundantthisqualifierissue>(@\"class foo {\tint a;\tvoid bar () {\tthis.a = 2;",
  "abc system console writeline a",
  0
 ],
 [
  "public static void createxmllangtestfile(string strfilename) {\tstream s = new memorystream();\ttextwriter tw = new streamwriter(s);",
  "secutil cmode",
  1
 ],
 [
  "borderwidth = 6;\tsetlabel (gettextcatalog.getstring (\"loading...\"));\tnew system.threading.thread (() => {\ttry {\tvar info = systeminformation.getdescription ().toarray ();\tgtk.application.invoke ((o, args) => {\tif (destroyed) return;\tsettext (info);\t});\t} catch (exception ex) {",
  "failed to load version information",
  0
 ],
 [
  "assert.notnull(results[0]);\tassert.true((bool)results[0].baseobject);\tassert.notnull(results[1]);\tassert.true((bool)results[1].baseobject);\tassert.notnull(results[2]);\tassert.true(results[2].baseobject is imanagementgrain);\tvar statuses = results[3].baseobject as dictionary<siloaddress, silostatus>;\tassert.notnull(statuses);\tassert.true(statuses.count > 0);\tforeach (var pair in statuses) {",
  "silo status",
  0
 ],
 [
  "public virtual void dispose() {\tif (!_disposed) {",
  "onclientmousedown",
  1
 ],
 [
  "static bool callsecondstructoperator() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturnstruct();\tif ( (!(bool)(((dynamic)s.instanceproperty) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "appsettings count",
  1
 ],
 [
  "protected override string renderbeforecontent () {",
  "added assembly reference to project",
  1
 ],
 [
  "for (int j = 0; j < useless.length; j++) {\tif (useless[j] == 'u') console.writeline (\"i have detected an u char\");\t}\ttry {\tforeach (string environmentvariable in environment.getenvironmentvariables ().keys) console.writeline (environmentvariable);\t}\tcatch (system.security.securityexception exception) {\tconsole.writeline (exception.message);\tconsole.writeline (exception);\t}",
  "i will add more useless code",
  0
 ],
 [
  "static void help () {",
  "in b",
  1
 ],
 [
  "private static void teststruct() {",
  "test failed at conversion result",
  1
 ],
 [
  "public static void dumpcodeinfo (imagecodecinfo codec) {",
  "version",
  0
 ],
 [
  "public override string tostring () {\tstringwriter sw = new stringwriter ();",
  "less",
  1
 ],
 [
  "public static void main (string[] args) {\tif (args.length == 0) {\tconsole.writeline ();",
  "adding task",
  1
 ],
 [
  "}\t} else if (char.isletter (c)) {\trollback = string.empty;\tif (!directive.isnamed) {\treturn namestate;\t} else {\treturn attributestate;\t}\t} else if (char.iswhitespace (c)) return null;\trollback = string.empty;",
  "calling",
  1
 ],
 [
  "public void testremovebracesfromlock() {\ttest<removebracescoderefactoringprovider>(@\"class testclass {\tvoid test() {\t$lock (this) {\t}\t}\t}\", @\"class testclass {\tvoid test() {",
  "got but expected",
  1
 ],
 [
  "throw new exception ();\t}\t} catch {}\tif (!copy_c.disposed) return 3;\tusing (mydispose d = null){\t}\tmydispose bb = new mydispose ();\tusing (bb){\t}\tif (bb.disposed == false) return 6;",
  "all tests pass",
  0
 ],
 [
  "case \"array\": return new parray (new list<pobject> (f.elements ().select (convert)));\tcase \"object\": var val = new pdictionary ();\tforeach (var subelement in f.elements ()) {\tvar name = subelement.name.localname;\tif (string.isnullorempty (name)) continue;\tif (name == \"item\") name = subelement.attribute (\"item\").value;\tif (!val.containskey (name)) {\tvar converted = convert (subelement);\tif (converted != null) val.add (name, converted);\t} else {",
  "warning while converting json highlighting to textmate key is duplicated in",
  0
 ],
 [
  "public override string tostring () {\tstringwriter sw = new stringwriter ();",
  "missingtotal",
  0
 ],
 [
  "public static long? staticmethodtobeclosedovernull (object o, long? bar) {",
  "return null",
  1
 ],
 [
  "console.writeline(sql);\tcmd = new pgsqlcommand(sql, con);\tcmd.commandtype = cmdtype;\trdr = cmd.executereader(behavior);\tif(rdr == null) {\t}\telse {\tdo {\tdatatable dt = rdr.getschematable();\tif(rdr.recordsaffected != -1) {",
  "true false",
  1
 ],
 [
  "ipendpoint serverendpoint = (ipendpoint)server.localendpoint;\ttask clientconnect = clientconnection.connectasync(serverendpoint.address, serverendpoint.port);\ttask<tcpclient> serveraccept = server.accepttcpclientasync();\tawait task.whenall(new task[] { clientconnect, serveraccept }).timeoutafter( testconfiguration.passingtesttimeoutmilliseconds);\tusing (tcpclient serverconnection = await serveraccept) using (sslstream sslclientstream = new sslstream(clientconnection.getstream())) using (sslstream sslserverstream = new sslstream( serverconnection.getstream(), false, allowanyservercertificate)) {\tstring servername = _servercertificate.getnameinfo(x509nametype.simplename, false);\ttask clientauthentication = sslclientstream.authenticateasclientasync( servername, null, clientsslprotocols, false);\ttask serverauthentication = sslserverstream.authenticateasserverasync( _servercertificate, true, serversslprotocols, false);\ttry {\tawait clientauthentication.timeoutafter(timeout);",
  "serverasyncauthenticatetest clientauthentication complete",
  0
 ],
 [
  "oracleconnection[] connections = null;\tint maxcon = max_connections;\tint i = 0;\tconnections = new oracleconnection[maxcon];\tfor (i = 0; i < maxcon; i++) {\tconnections[i] = new oracleconnection(constr);\tconnections[i].open ();\t}\tt = new thread(new threadstart(anotherthreadproc));\tt.start ();",
  "sleep",
  0
 ],
 [
  "fileinfo fi = new fileinfo (di.fullname + \"/i.rng\");\tif (fi.exists) {\txtr = new xmltextreader (fi.fullname);\ttry {\trelaxngpattern.read (xtr).compile ();\t} catch (relaxngexception ex) {\t} catch (xmlexception ex) {\t} catch (argumentnullexception ex) {\t} catch (uriformatexception ex) {\t} catch (exception ex) {",
  "unexpected error type",
  0
 ],
 [
  "public void basictest_getipv4interfacestatistics_success_linux() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipv4interfacestatistics stats = nic.getipv4statistics();\tassert.throws<platformnotsupportedexception>(() => stats.incomingunknownprotocolpackets);",
  "nonunicastpacketsreceived",
  0
 ],
 [
  "else {\tassertequal(true, result.item2, grainidentity);\tassertequal(1, result.item1, grainidentity);\tassertequal(2, client[1].getconfirmedversion(grainclass, x), grainidentity);\tassertequal(444, client[1].getalocal(grainclass, x), grainidentity);\tassertequal(444, client[0].getaglobal(grainclass, x), grainidentity);\tassertequal(444, client[1].getaglobal(grainclass, x), grainidentity);\t}\t}\t});",
  "warning visited default visit for",
  1
 ],
 [
  "processwrapper processwrapper;\tif (tool.useoutputpad) processwrapper = runtime.processservice.startprocess (commandtool, argumentstool, initialdirectorytool, progressmonitor.log, progressmonitor.log, null);\telse processwrapper = runtime.processservice.startprocess (commandtool, argumentstool, initialdirectorytool, null);\tstring processname = system.io.path.getfilename (commandtool);\ttry {\tprocessname = processwrapper.processname;\t} catch (systemexception) {\t}\tprocesswrapper.waitforoutput ();\tif (processwrapper.exitcode == 0) {",
  "has",
  1
 ],
 [
  "public void fixvbcasingandaddmethodcallparenthesis3() {",
  "closehandle called",
  1
 ],
 [
  "[obsolete(\"this method has been deprecated.  please use system.diagnostics.eventlog.createeventsource(eventsourcecreationdata sourcedata) instead.  http: public static void createeventsource(string source, string logname, string machinename) {\tcreateeventsource(new eventsourcecreationdata(source, logname, machinename));\t}\t[resourceexposure(resourcescope.none)]\t[resourceconsumption(resourcescope.machine, resourcescope.machine)]\tpublic static void createeventsource(eventsourcecreationdata sourcedata) {\tif (sourcedata == null) throw new argumentnullexception(\"sourcedata\");\tstring logname = sourcedata.logname;\tstring source = sourcedata.source;\tstring machinename = sourcedata.machinename;",
  "createeventsource checking arguments",
  0
 ],
 [
  "public void var5() {\ttry {\tnew xslcompiledtransform().load((ixpathnavigable)null, xsltsettings.trustedxslt, (xmlresolver)null);\t}\tcatch (argumentnullexception) {\treturn;\t}\tcatch (exception e) {\t_output.writeline(e.tostring());",
  "foo bar",
  1
 ],
 [
  "static string geticon (string filename) {\ttry {\ticon = ideapp.services.projectservice.fileformats.getfileformats (filename, typeof(solution)).length > 0 ? \"md-solution\" : \"md-workspace\"; */ return system.io.path.getextension (filename) != \".mdw\" ? \"md-solution\" : \"md-workspace\";\t} catch (system.io.ioexception ex) {",
  "error building recent solutions list",
  0
 ],
 [
  "case agentstatus.stdout: string stdout = ns.getstring ();\tconsole.writeline (stdout);\tbreak;\tcase agentstatus.result_not_set: return null;\tcase agentstatus.result_set: string res = ns.getstring ();\tconsole.writeline (res);\treturn null;\t}\t}\t} catch (exception e){",
  "found guid in existing udc database",
  1
 ],
 [
  "if (parent._objtype.isvaluetype) {\tif (setmember) {\tstructaccessor.setvalue(objectnode, fieldpropvalue);\t}\tsetobject(structaccessor.getvalue(objectnode));\t} else {\tif (setmember) f.setvalue(parent._obj, fieldpropvalue);\tsetobject(f.getvalue(parent._obj));\t}\tif (traceutil.if(this, tracelevel.verbose)) {",
  "field of value",
  0
 ],
 [
  "writer.write(\"<td>\");\twriter.beginstylecontext();\twriter.enterstyle(labelstyle);\twriter.writetext(control.allfields[fieldindices[field]].title, true);\twriter.exitstyle(labelstyle);\twriter.endstylecontext();\twriter.write(\"</td>\");\t}\tif (itemrequiresmorebutton) {\t}",
  "tr",
  0
 ],
 [
  "j++;\tcontinue;\t}\tif (text [i] != expected [j]) {\tbreak;\t}\ti++;j++;\t}\tbool passed = i == text.length && j == expected.length;\tif (!passed) {",
  "gettagkey",
  1
 ],
 [
  "object[] objectattrs = executingassembly.getcustomattributes(typeof(assemblycopyrightattribute), false);\tif ( objectattrs.length > 0 ) copyrighttext = ((assemblycopyrightattribute)objectattrs[0]).copyright;\tobjectattrs = executingassembly.getcustomattributes(typeof(assemblyconfigurationattribute), false);\tif (objectattrs.length > 0) {\tstring configtext = ((assemblyconfigurationattribute)objectattrs[0]).configuration;\tif (configtext != \"\") versiontext += string.format(\" ({0})\", configtext);\t}\tconsole.writeline(copyrighttext);\tconsole.writeline();\truntimeframework framework = runtimeframework.currentframework;",
  "clr version",
  0
 ],
 [
  "if (module.hasexportedtypes) {\tforeach (exportedtype exportedtype in module.exportedtypes) {\toutput.write(\".class extern \");\tif (exportedtype.isforwarder) output.write(\"forwarder \");\toutput.write(exportedtype.declaringtype != null ? exportedtype.name : exportedtype.fullname);\topenblock(false);\tif (exportedtype.declaringtype != null) output.writeline(\".class extern {0}\", disassemblerhelpers.escape(exportedtype.declaringtype.fullname));\tcloseblock();\t}\t}",
  "module",
  0
 ],
 [
  "assert.areequal (maintoolkit, toolkit.currentengine);\tnoxwtcallback = true;\treturn false;\t}, timespan.frommilliseconds (50));\tvar t = sectoolkit.invoke (async delegate {\tassert.aresame (sectoolkit, toolkit.currentengine);\tassert.isfalse (noxwtcallback);\tawait task.delay (200);\tassert.istrue (noxwtcallback);\tassert.aresame (sectoolkit, toolkit.currentengine);",
  "done",
  0
 ],
 [
  "}\tif (totalexecutionclicks > 0) {\tprintseparator (writer);\tforeach (loadedmethod m in methods) {\tif (m.clicks > 0) {\tloadedmethod.callspercallermethod[] callspercallermethodarray = m.callers;\tif (callspercallermethodarray.length > 0) {\tarray.sort (callspercallermethodarray, loadedmethod.callspercallermethod.comparebycalls);\tarray.reverse (callspercallermethodarray);\tforeach (loadedmethod.callspercallermethod callspercallermethod in callspercallermethodarray) {",
  "calls from",
  0
 ],
 [
  "private void writeprojectreference (streamwriter sln, string prefixguid, string library, string relativepath, string projectguid, string[] dependencyguids) {\tlibrary = library.replace(\"-net_4_x\", \"\");\tsln.writeline (project_start, prefixguid, library, relativepath, projectguid);\tif (dependencyguids != null && dependencyguids.length > 0) {\tsln.writeline (\"\\tprojectsection(projectdependencies) = postproject\");\tforeach (var guid in dependencyguids) sln.writeline (\"\\t\\t{0} = {0}\", guid);",
  "endprojectsection",
  0
 ],
 [
  "public static void dumpcodeinfo (imagecodecinfo codec) {",
  "extension",
  0
 ],
 [
  "}\ttry {\tcreatetable (cnc);\tinsertdata (cnc);\tupdatedata (cnc);\tinsertdata (cnc);\tselectaggregate (cnc, \"count(*)\");\tselectaggregate (cnc, \"min(text_value)\");\tselectaggregate (cnc, \"max(int4_value)\");\tselectaggregate (cnc, \"sum(int4_value)\");",
  "select values from the database",
  0
 ],
 [
  "public override bool check() {\tbool retval = true;\tif (size > array.length) {",
  "bad size array length",
  0
 ],
 [
  "public static int main () {\tint[] int_array = new int [] { 0, 1, 2, 3, 4 };\tvar e = from i in int_array group i by i;\tint c = 0;\tforeach (var ig in e) {\tconsole.writeline (ig.key);\tif (ig.key != c++) return c;\t}",
  "must be in mono msvc scripts profile command exe",
  1
 ],
 [
  "xtr.close ();\t}\tcontinue;\t}\txtr = new xmltextreader (di.fullname + \"/c.rng\");\trelaxngpattern p = null;\ttry {\tp = relaxngpattern.read (xtr);\tp.compile ();\t} catch (exception ex) {",
  "constraints",
  1
 ],
 [
  "idatareader reader;\tobject odatavalue;\ttry {\tdroptable (cnc);\t}\tcatch (sqlexception e) {\t}\ttry {\tcreatetable (cnc);\tinsertdata (cnc);",
  "update values",
  0
 ],
 [
  "public void generateserializers (textwriter writer) {\t_writer = writer;\t_results = new generationresult [_xmlmaps.length];",
  "writeline",
  0
 ],
 [
  "public reflectpropertydescriptor(type componentclass, string name, type type, attribute[] attributes) : base(name, attributes) {",
  "creating reflectpropertydescriptor for",
  0
 ],
 [
  "_output.writeline(e2.message);\tif (xslinputtype == xslinputtype.uri) return;\telse {\tassert.true(false);\t}\t}\tcatch (xmlexception e3) {\t_output.writeline(e3.message);\tif (xslinputtype == xslinputtype.uri) return;\telse {",
  "xmlexception is not supposed to be thrown for the input type",
  0
 ],
 [
  "public static int main () {\tint x = 4;\ttry {\tthrow null;\t} catch (nullreferenceexception) when (x > 0) {",
  "test failed at call result",
  1
 ],
 [
  "public static void usage (string message) {\tif (message != null) {\tconsole.writeline (\"{0}{1}{0}\", environment.newline, message);\t}",
  "tls use",
  0
 ],
 [
  "protected override void test() {",
  "testing",
  0
 ],
 [
  "public void basictest_getipinterfacestatistics_success_osx() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfacestatistics stats = nic.getipstatistics();",
  "m number certificate validity period in months",
  1
 ],
 [
  "} else if (args [i] == \"--repeat\") {\tif (i + 1 >= args.length) {\treturn 1;\t}\trepeat = int32.parse (args [i + 1]);\tif (repeat <= 1) {\treturn 1;\t}\ti += 2;\t} else {",
  "unknown command line option",
  0
 ],
 [
  "static bool askconfirmation (string action, x509certificate certificate) {\tconsole.writeline ();",
  "thumbprint",
  0
 ],
 [
  "using (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {\tstring jobid = microsoft.azure.batch.constants.defaultconvenienceprefix + testutilities.getmyname() + \"-testboundjobcommit\";\ttry {\tcloudjob cloudjob = batchcli.joboperations.createjob(jobid, new poolinformation());\tcloudjob.poolinformation = new poolinformation() {\tpoolid = this.poolfixture.poolid };\tcloudjob.commit();\tcloudjob refreshablejob = batchcli.joboperations.getjob(jobid);\tconst int newjobpriority = 5;\tonalltaskscomplete newonalltaskscomplete = onalltaskscomplete.noaction;",
  "whoops",
  1
 ],
 [
  "}\telse {\treturn;\t}\t}\ttry {\tif (attributes != null) desktopservice.setfileattributes (filename, attributes);\t} catch (exception e) {\t}\t} catch (unauthorizedaccessexception e) {",
  "error while saving file",
  0
 ],
 [
  "if (compiler.length != 0) {\tprogram = new toolchainprogram (\"cc\", compiler);\t} else {\tprogram = visualstudiosdktoolchainhelper.getinstance ().getvccompiler ();\tif (program == null || program.path.length == 0) {\tprogram = new toolchainprogram (\"cl.exe\", \"cl.exe\");\t}\t}\tstring monolibrarypath = getmonolibrarypath (program, staticlinkmono, staticlinkcruntime);\tif (!file.exists (monolibrarypath) && program.isvstoolchain) {",
  "adstorectx extensioncachetoldapconverter adding",
  1
 ],
 [
  "private static void anotherthreadproc () {\toracleconnection[] connections = null;\tint maxcon = max_connections;\tint i = 0;\tconnections = new oracleconnection[maxcon];\tfor (i = 0; i < maxcon; i++) {",
  "end",
  1
 ],
 [
  "public delegate void mydel(int x);\tprivate class myclass {\tpublic void do(int x) {\ttest.s_status = true;",
  "writer writeline",
  1
 ],
 [
  "public override ienumerable<fileprovider> getfiles (progressmonitor monitor, filteroptions filteroptions) {\tforeach (document document in ideapp.workbench.documents) {",
  "error while saving changes",
  1
 ],
 [
  "public static void displaypools(itestoutputhelper testoutputhelper, ienumerable<cloudpool> poolsenumerable) {\tlist<cloudpool> pools = new list<cloudpool>(poolsenumerable);\tint numpools = (null != pools) ? pools.count : 0;\ttestoutputhelper.writeline(\"\");",
  "pool count",
  0
 ],
 [
  "public static void save (textwriter writer, editortheme theme) {\twriter.writeline (\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\");\twriter.writeline (\"<!doctype plist public \\\"- writer.writeline (\"<plist version=\\\"1.0\\\">\");",
  "dict",
  0
 ],
 [
  "public override string getsavedlicensekey(type type, assembly resourceassembly) {\tif (savedlicensekeys == null || savedlicensekeys[type.assemblyqualifiedname] == null) {\tif (savedlicensekeys == null) {\tsavedlicensekeys = new hashtable();\t}\tif (resourceassembly == null) {\tresourceassembly = assembly.getentryassembly();\t}\tif (resourceassembly == null) {",
  "setting new origin",
  1
 ],
 [
  "protected override void generateproperty(codememberproperty e, codetypedeclaration c) {",
  "no abort",
  1
 ],
 [
  "if (_objtype == null) base.settype();\t}\tprotected cominterfaceinfo pickbestinterface() {\tcominterfaceinfo bestif = null;\tforeach (cominterfaceinfo ifinfo in _interfaces) {\tif (bestif == null || ifinfo.parentcount > bestif.parentcount) bestif = ifinfo;\t}\treturn bestif;\t}\tprotected void assigntype(type newtype) {",
  "typelib convert warning",
  1
 ],
 [
  "public int transform(string szxmlfile, bool errorcase, transformtype transformtype, doctype doctype) {\tlock (s_outfilememorylock) {\tszxmlfile = fullfilepath(szxmlfile);\tixpathnavigable xd = loadxml(szxmlfile, doctype);",
  "initializing relational databases",
  1
 ],
 [
  "if (! resign (filename, rsa, quiet)) return 1;\tbreak;\tcase \"-t\": sn = new strongname (readfromfile (args [i]));\tbreak;\tcase \"-tp\": sn = new strongname (readfromfile (args [i]));\tbreak;\tcase \"-t\": an = assemblyname.getassemblyname (args [i++]);\tbyte [] pkt = an.getpublickeytoken ();\tif (pkt == null) {\t} else {",
  "public key token",
  0
 ],
 [
  "}\t}\t}\tforeach (string sourcedir in directory.getdirectories(addininstalltemp)) {\tstring addinname = path.getfilename(sourcedir);\tstring targetdir = path.combine(useraddinpath, addinname);\tif (notremoved.contains(addinname)) {\tcontinue;\t}\tif (uninstalladdin(disabled, addinname, targetdir)) {",
  "installing",
  0
 ],
 [
  "try {\tclient = result.result;\t}\tcatch {\t}\tif (client != null) {\tonclientaccepted(client);\tclientstate state;\tif (_usessl) {\tstate = new clientstate(client, _sslencryptionpolicy);",
  "start",
  1
 ],
 [
  "public static void createxmlspacetestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<xmlspace1 xml:space=\\'default\\'>&lt; &gt;</xmlspace1>\");\ttw.write(\"<xmlspace2 xml:space=\\'preserve\\'>&lt; &gt;<a><b><c>space test</c><persona>dromio of syracuse</persona></b></a></xmlspace2>\");\ttw.writeline(\"<empty_xmlspace attr0=\\\"0\\\" xml:space=\\'default\\' />\");\ttw.writeline(\"<xmlspace2a xml:space=\\'default\\'>&lt; <xmlspace3 xml:space=\\'preserve\\'>  &lt; &gt; <xmlspace4 xml:space=\\'default\\'>  &lt; &gt;  </xmlspace4> test </xmlspace3> &gt;</xmlspace2a>\");",
  "loaded assy",
  1
 ],
 [
  "static void test2 () {",
  "failed didn t get runtimebinderexception",
  1
 ],
 [
  "static void parsecommandlineargs(string[] args) {\tvar needsargs = string.isnullorwhitespace(compilationdatabasepath);\tif (!needsargs) return;\tif (args.length >= 1) compilationdatabasepath = path.getfullpath(args[0]);\telse compilationdatabasepath = \"compile_commands.json\";\tif (!file.exists(compilationdatabasepath)) {",
  "introduction of the interfaces inscopying and inscoding on types",
  1
 ],
 [
  "}\tbreak;\tcase anchorstyle.top: case anchorstyle.bottom: {\tdouble newtop = _initialstartpoint.y + e.verticalchange;\tnewtop = math.max(newtop, 0.0);\tnewtop = math.min(newtop, maxheight);\tcanvas.settop(_resizerghost, newtop);\t}\tbreak;\t}",
  "out",
  1
 ],
 [
  "public static void main() {",
  "exception is proxy",
  1
 ],
 [
  "static void help (string details) {\tswitch (details) {\tbreak;\tbreak;\tbreak;",
  "rc assembly container resign the assembly with the specified csp container",
  0
 ],
 [
  "return 1;\t}\tmanaged_linker_path = args [++i];\tbreak;\tcase \"--cil-strip\": if (i+1 == top) {\treturn 1;\t}\tcil_strip_path = args [++i];\tbreak;\tcase \"--aot-runtime\": if (i+1 == top) {",
  "adstorectx extensioncachetoldapconverter value implements icollection",
  1
 ],
 [
  "public override bool shouldenablefor (project proj, string projectpath) {\tif (proj.getprojectcapabilities ().contains (\"aspnetcore\")) {\tif (minversion == null) return true;\tvar dpn = (dotnetproject)proj;\tif (version.tryparse (dpn.targetframework.id.version, out var version)) return version >= minversion;\telse {",
  "failed to parse framework version dpn targetframework id version of project",
  0
 ],
 [
  "bundle_id = \"\";\tbundle_dir = \"\";\tlogfile_name = \"\";\tvar p = new optionset () {\t{ \"start-sim\", s => action = \"start-sim\" }, { \"run-sim\", s => action = \"run-sim\" }, { \"run-dev\", s => action = \"run-dev\" }, { \"bundle-id=\", s => bundle_id = s }, { \"bundle-dir=\", s => bundle_dir = s }, { \"logfile=\", s => logfile_name = s }, };\tnew_args = p.parse (args).toarray ();\tif (action == \"start-sim\") {\tstartsim ();\t} else if (action == \"run-sim\") {\tif (bundle_id == \"\" || bundle_dir == \"\") {",
  "the bundle id and bundle dir arguments are mandatory",
  0
 ],
 [
  "private static bool callsecondstructinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturnstruct();\tif ((!(bool)(((dynamic)(s + 1)).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "verifying calling endwrite with different asyncresults out of order returned from beginread",
  1
 ],
 [
  "foreach (object value in list) {\tconsole.write (value);\tconsole.write (environment.newline);\t}\tint x = 0;\tfor (int i = 0; i < 100; i++) x++;\tconsole.writeline (x);\tstring useless = \"useless string\";\tif (useless.equals (\"other useless\")) {\tuseless = string.empty;",
  "other useless string",
  0
 ],
 [
  "m_xsltarg.addparam(\"myarg2\", szempty, (int16)i);\tm_xsltarg.removeparam(\"myarg2\", szempty);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (retobj != null) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg2\", szempty, (uint16)i);\tm_xsltarg.removeparam(\"myarg2\", szempty);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (retobj != null) {",
  "failed to remove",
  0
 ],
 [
  "private void completioncallback(object context)  {\tif (boolflags[flag_disposed]) {\treturn;\t}\tlock (instancelockobject) {\tif (boolflags[flag_notifying]) {",
  "eventlog completionstatuschanged aborting because we re already notifying",
  0
 ],
 [
  "using (xmlwriter w = createwriter(doc)) {\ttry {\tw.writestartelement(\"root\");\tw.writeraw(null, 0, 0);\t}\tcatch (argumentnullexception) {\ttestlog.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "foreach (object value in list) {\tconsole.write (value);\tconsole.write (environment.newline);\t}\tint x = 0;\tfor (int i = 0; i < 100; i++) x++;\tconsole.writeline (x);\tstring useless = \"useless string\";\tif (useless.equals (\"other useless\")) {\tuseless = string.empty;",
  "other useless string",
  0
 ],
 [
  "private object findnativebysididentref(type principaltype, byte[] sid) {\tstring samurnvalue;\tstring name;\tstring domainname;\tint accountusage;\tint err = utils.lookupsid(this.machineusersuppliedname, _credentials, sid, out name, out domainname, out accountusage);\tif (err != 0) {\tglobaldebug.writelineif(globaldebug.error, \"samstorectx\", \"findnativebysididentref:lookupsid on {0} failed, err={1}\", this.machineusersuppliedname, err);\treturn null;\t}",
  "samstorectx findnativebysididentref mapped to",
  0
 ],
 [
  "public void bug78468 () {\tstring assemblyfilenamea = path.combine (tempfolder, \"bug78468a.dll\");\tstring resourcefilename = path.combine (tempfolder, \"readme.txt\");\tusing (streamwriter sw = file.createtext (resourcefilename)) {",
  "t status",
  1
 ],
 [
  "public override void modified (xelement source, xelement target, apichanges diff) {\tvar output = output;\tstate.output = new stringwriter ();\tvar sb = source.getattribute (\"base\");\tvar tb = target.getattribute (\"base\");\tvar rm = $\"{state.namespace}.{state.type}: modified base type: '{sb}' to '{tb}'\";\tstate.logdebugmessage ($\"possible -r value: {rm}\");\tif (sb != tb && !state.ignoreremoved.any (re => re.ismatch (rm)) && !(state.ignorenonbreaking && isbasechangecompatible (sb, tb))) {\toutput.write (\"modified base type: \");",
  "state namespace state type",
  0
 ],
 [
  "public static void createlinenumbertestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<?xml version=\\\"1.0\\\" ?>\");\ttw.writeline(\" <element a0='a0&e1;v' a1='a1value' a2='a2&e1;v'><embedded /></element>\");",
  "eventlog removelistenercomponent",
  1
 ],
 [
  "if (!eval(!directory.exists(mounteddirname), \"err_462xtc! directory {0} still exist: {1}\", mounteddirname, directory.exists(mounteddirname))) {\tmounthelper.unmount(mounteddirname);\tdeletedir(mounteddirname, true);\t}\t}\tfile.appendalltext(debugfilename, string.format(\"completed scenario {0}\", environment.newline));\t}\t}\tcatch (exception ex) {\ts_pass = false;",
  "did not throw exception",
  1
 ],
 [
  "public override void applicationdomainloaded (ulong threadid, uint id, ulong startcounter, ulong endcounter, string name, bool success) {",
  "applicationdomainloaded",
  0
 ],
 [
  "public void openreceivedata() {\tusing (cancellationtokensource cts = new cancellationtokensource()) {\tvar workertask = new task(() => openreceivedata_workerthread(cts.token));\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {",
  "bytes freed",
  1
 ],
 [
  "static void displaycrl (x509crl crl, bool machine, bool verbose) {",
  "this update",
  0
 ],
 [
  "}\t}\ttry {\ttask t3 = task.factory.startnew(delegate { }, cancellationtoken.none, taskcreationoptions.none, bts);\tassert.true(false, string.format(\"    > failed.  no exception thrown.\"));\t}\tcatch (taskschedulerexception) { }\tcatch (exception e) {\tassert.true(false, string.format(\"    > failed. wrong exception thrown (expected taskschedulerexception): {0}\", e));\t}",
  "ok",
  1
 ],
 [
  "public nvdlsection (nvdldispatcher dispatcher, nvdlsection parentstate) {\tthis.dispatcher = dispatcher;\tthis.ns = dispatcher.reader.namespaceuri;\tif (parentstate == null) {\tforeach (simpleaction a in findelementrule ( dispatcher.rules.startmode, dispatcher.reader).actions) ilist.add (getinterp (a, dispatcher));\t} else {\tforeach (nvdlinterpretation pi in parentstate.ilist) {\tpopulateinterp (dispatcher, pi, parentstate);\t}\t}",
  "total elapsed time",
  1
 ],
 [
  "try {\tw.writestartelement(\"root\");\tw.writeattributestring(\"xmlns\", \"xmlns\", null, \"test\");\t}\tcatch (argumentexception e) {\tcerror.writelineignore(e.tostring());\tcerror.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "activex restore start",
  1
 ],
 [
  "public void testaddbracestowhile() {\ttest<addbracescoderefactoringprovider>(@\"class testclass {\tvoid test() {",
  "error wrong number of parameters",
  1
 ],
 [
  "tw.writeline(\"<entity4 att1='xxx&lt;xxx&#65;xxx&#x43;xxxe1fooxxx'>xxx&gt;xxx&#66;xxx&#x44;xxxe1fooxxx</entity4>\");\ttw.writeline(\"<entity5>e1foo e3bzee </entity5>\");\ttw.writeline(\"<attribute1 />\");\ttw.writeline(\"<attribute2 a1='a1value' />\");\ttw.writeline(\"<attribute3 a1='a1value' a2='a2value' a3='a3value' />\");\ttw.writeline(\"<attribute4 a1='' />\");\ttw.writeline(string.format(\"<attribute5 crlf='x{0}x' cr='x{0}x' lf='x\\nx' ms='x     x' tab='x\\tx' />\", environment.newline));\ttw.writeline(\"<skip1 /><afterskip1 />\");\ttw.writeline(\"<skip2></skip2><afterskip2 />\");\ttw.writeline(\"<chars1>0123456789</chars1>\");",
  "chars xxx pi yyy zzz chars",
  0
 ],
 [
  "int i = 8;\tm_xsltarg.addparam(\"myarg2\", szempty, i);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (!i.equals(retobj)) {\tassert.true(false);\t}\tif (i.gettype() != j.gettype()) assert.true(false);\tboolean bf = (1 == 0);\tm_xsltarg.addparam(\"myarg3\", szempty, bf);\tretobj = m_xsltarg.getparam(\"myarg3\", szempty);",
  "got but expected",
  1
 ],
 [
  "private void dispose(bool disposing) {\t#if debug && finalization_watch if (!disposing && _nativegraphics != intptr.zero) {",
  "system drawing graphics",
  0
 ],
 [
  "public void getparam9() {\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(\"myarg1\", szempty, \"test9\");\tretobj = m_xsltarg.getparam(\"myarg1\", \"http: if (retobj != null) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg2\", \"http: retobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (retobj != null) {",
  "client connecting to",
  1
 ],
 [
  "public void linqtosqlconversion04() {\tnorthwind db = createdb();\tvar q = from p in db.products where p.unitsinstock <= p.reorderlevel && !convert.toboolean(p.discontinued) select p;\tvar qdictionary = q.todictionary(p => p.productid);\tassert.isfalse(qdictionary == null);\tif (qdictionary.count == 0) assert.ignore(\"please check this test validity\");\tforeach (var key in qdictionary.keys) {",
  "key",
  0
 ],
 [
  "itestgrain grain;\tvar ismultiplesilospresent = testcluster.secondarysilos != null && testcluster.secondarysilos.count > 0;\tif (!ismultiplesilospresent && forcecreationinsecondary) {\tthrow new invalidoperationexception( \"if 'forcecreationinsecondary' is true multiple silos must be present, check the test!\");\t}\tvar grainsiloaddress = string.empty;\tvar primarysiloaddress = testcluster.primary.siloaddress.tostring();\tvar secondarysiloaddress = ismultiplesilospresent ? testcluster.secondarysilos[0].siloaddress.tostring() : string.empty;\tif (ismultiplesilospresent && forcecreationinsecondary) {\twhile (true) {",
  "development snapshot",
  1
 ],
 [
  "static public void paintonbitmap (string filename, string newname, imageformat imgfmt) {\tbitmap\tbmp = new bitmap (filename);\tconsole.writeline (\"bitmap read ok {0}\", bmp != null);\tif (bmp != null) {",
  "bitmap pixelformat",
  0
 ],
 [
  "public void basictest_getipv4interfacestatistics_success() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipv4interfacestatistics stats = nic.getipv4statistics();",
  "resourcetoolkit nrefactoryastcacheservice resolvelowlevel failed projectcontent is null for project",
  1
 ],
 [
  "_log.writeline(\"-- \" + gateway.address.tostring());\t}\tassert.notnull(ipproperties.multicastaddresses);\tforeach (ipaddressinformation multi in ipproperties.multicastaddresses) {\t_log.writeline(\"-- \" + multi.address.tostring());\t}\tassert.notnull(ipproperties.unicastaddresses);\tforeach (unicastipaddressinformation uni in ipproperties.unicastaddresses) {\t_log.writeline(\"-- \" + uni.address.tostring());\tassert.notnull(uni.ipv4mask);",
  "mask",
  0
 ],
 [
  "param = cmd.parameters.add(tvpname, sqldbtype.structured);\tparam.typename = gettypename(tvpperm);\ttry {\tcreateserverobjects(tvpperm);\t}\tcatch (sqlexception se) {\tdropserverobjects(tvpperm);\titer++;\tcontinue;\t}",
  "i have detected an useless char",
  1
 ],
 [
  "private static bool parseargumentvalue (string value) {\tif ((value.length == 1)) {\tswitch (value [0]) {\tcase 't': return true;\tcase 'f': return false;\tthrow new applicationexception (\"invalid argument value \" + value);\t}\t} else {",
  "invalid argument value",
  0
 ],
 [
  "public static void readclob (oracleconnection connection) {\toraclecommand rcmd = connection.createcommand ();\trcmd.commandtext = \"select clob_column from clobtest\";\toracledatareader reader2 = rcmd.executereader ();\toraclelob lob2 = reader2.getoraclelob (0);",
  "chunk size",
  0
 ],
 [
  "public override bool execute() {\tusing (filestream fs = new filestream(this.outputfile, filemode.create, fileaccess.write, fileshare.none)) using (streamwriter sw = new streamwriter(fs, encoding.utf8)) {\tsw.writeline();",
  "publicipaddress gateway ip",
  1
 ],
 [
  "}\tassert.throws<platformnotsupportedexception>(() => ipproperties.isdnsenabled);\tassert.throws<platformnotsupportedexception>(() => ipproperties.isdynamicdnsenabled);\tassert.notnull(ipproperties.multicastaddresses);\tforeach (ipaddressinformation multi in ipproperties.multicastaddresses) {\t_log.writeline(\"-- \" + multi.address.tostring());\tassert.throws<platformnotsupportedexception>(() => multi.isdnseligible);\tassert.throws<platformnotsupportedexception>(() => multi.istransient);\t}\tassert.notnull(ipproperties.unicastaddresses);",
  "failed float",
  1
 ],
 [
  "public void ipinfotest_accessallproperties_noerrors() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {",
  "supports",
  0
 ],
 [
  "}\tsqldecimalvalue = sqldecimal.maxvalue;\tint[] data = sqldecimalvalue.data;\tuint32[] udata = { (uint32)data[0], (uint32)data[1], (uint32)data[2], (uint32)data[3]};\tbool carry = true;\tfor (int i = 0; i < 4; i++){\tif (carry){\tcarry = (++udata[i] == 0);\t}\t}",
  "console writeline",
  0
 ],
 [
  "public void prettyprintshutdownreport() {\tif (shutdownreport.count == 0) {\t} else {",
  "test passes",
  1
 ],
 [
  "test.abortstring ();\treturn 2;\t} catch (threadabortexception e) {\tobject state;\tstate = e.exceptionstate;\tthread.resetabort ();\tif (state == null) {\treturn 3;\t} else {\tif (remotingservices.istransparentproxy (state)) {",
  "principalcollectionenumerator movenext none mode skipping existing values",
  1
 ],
 [
  "static void ssl (string host, bool machine, bool verbose) {\tif (verbose) {",
  "failed guid",
  1
 ],
 [
  "public void addparam1(inputtype inputtype, readertype readertype, transformtype transformtype, doctype doctype) {\tstring expected = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?><result> 1.test1 2.no value specified 3.no value specified 4.no value specified 5.no value specified 6.no value specified</result>\";\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(\"myarg1\", szempty, \"test1\");\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);",
  "entity",
  1
 ],
 [
  "public void testremovebracesfromfor() {\ttest<removebracesaction>(@\"class testclass {\tvoid test () {\t$for (;;) {",
  "hello",
  0
 ],
 [
  "public override assemblynode visitassembly (assemblynode node) {\tif (node == null) return null;",
  "threeletterwindowslanguagename",
  1
 ],
 [
  "isequenced<int> inner = new treeset<int>();\tinner.add(i); inner.add(i+1);\touter.add(inner);\t}\tipersistentsorted<int> inner1 = new treeset<int>(), inner2 = new treeset<int>(), inner3 = new treeset<int>();\tinner1.addall<int>(new int[] { 2, 3, 5, 7, 11 });\tinner2.addall(inner1); inner2.add(13);\tinner3.addall(inner1);\touter.add(inner1.snapshot());\tinner1.add(13);",
  "xmlschemamanager is ignoring schema with no namespace from file",
  1
 ],
 [
  "case \"deploymentid\": deploymentid = split[1];\tbreak;\treturn false;\t}\t}\telse if (argpos == 1) {\tsiloname = a;\targpos++;\t}\telse {",
  "too many command line arguments supplied",
  0
 ],
 [
  "sw.writeline (\"-------------------------\");\tsw.writeline (uristring);\tif (uristring == null || uristring.length == 0) break;\ttry {\turi uri = baseuri == null ? new uri (uristring) : new uri (baseuri, uristring);\tsw.writeline (uri.absoluteuri);\tsw.writeline (uri.scheme);\tsw.writeline (uri.host);\tsw.writeline (uri.localpath);\tsw.writeline (uri.query);",
  "port",
  0
 ],
 [
  "static int main () {\tbool failed = false;\tvar  = 10;\tthread thr = new thread (new threadstart (thread));\tthr.start ();\tif (var != 10) failed = true;\tvar = 20;",
  "failed stacktrace is null for unhandled exception",
  1
 ],
 [
  "public override void foo () {",
  "hello world",
  0
 ],
 [
  "public void loadurl5(readertype readertype) {\ttry {\tloadxsl(\"     \", inputtype.uri, readertype);\t}\tcatch (system.argumentexception) {\treturn;\t}",
  "exception not generated for non existent file parameter name",
  0
 ],
 [
  "public static void createxmllangtestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));",
  "within inner try",
  1
 ],
 [
  "static void dopostgrestest (idbconnection cnc) {\tidatareader reader;\tobject odatavalue;\ttry {\tdroptable (cnc);\t}\tcatch (pgsqlexception e) {\t}\ttry {\tcreatetable (cnc);",
  "return new",
  1
 ],
 [
  "static void help (string details) {\tswitch (details) {\tbreak;",
  "mono path",
  1
 ],
 [
  "blocktype = (blocktype)input.getbits(2);\tif (blocktype == blocktype.dynamic) {\tstate = inflaterstate.readingnumlitcodes;\t}\telse if (blocktype == blocktype.static) {\tliterallengthtree = huffmantree.staticliterallengthtree;\tdistancetree = huffmantree.staticdistancetree;\tstate = inflaterstate.decodetop;\t}\telse if (blocktype == blocktype.uncompressed) {",
  "decoding uncompressed block compression",
  0
 ],
 [
  "public void dumpmessages () {",
  "bar cctor",
  1
 ],
 [
  "public void basictest_getipv4interfacestatistics_success() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipv4interfacestatistics stats = nic.getipv4statistics();",
  "stats for",
  0
 ],
 [
  "public symvalue addjointedge (symvalue v1target, symvalue v2target, tfunc function, symvalue resultarg) {\tsymvalue result = lookupmapping (v1target, v2target);\tbool newedge = false;\tif (result == null) {\tif (ismappingalreadyadded (v1target, v2target)) {",
  "actual",
  1
 ],
 [
  "static void metodo (exception e) {\tif (e is notimplementedexception){\t} else {",
  "verifying minvalue handshake",
  1
 ],
 [
  "w.writestartelement(\"root\");\tw.writeendelement();\tw.writedoctype(\"doc1\", null, null, \"test1\");\t}\tcatch (invalidoperationexception e) {\tcerror.writelineignore(e.tostring());\tcerror.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "got but expected",
  1
 ],
 [
  "static void help (string details) {\tswitch (details) {",
  "got but expected",
  1
 ],
 [
  "public void whitespace_5(xmlwriterutils utils, string param) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writewhitespace(param);\t}\tcatch (argumentexception e) {",
  "exception",
  0
 ],
 [
  "static bool? yy () {\tif (xx == 1) ++yy;",
  "yy",
  0
 ],
 [
  "public void addresource (string name, string value) {\tif (!headerwritten) {\theaderwritten = true;\twriteheader ();\t}",
  "msgstr",
  0
 ],
 [
  "public static void threadmethod_blocker() {",
  "ok",
  1
 ],
 [
  "private static bool dynamicobjectinfirstoperandandfirstisnull() {\tint failcount = 0;\tdynamic d = null;\tlong? second = 2;\tif ((long)(d ?? second) != 2) {\tfailcount++;",
  "rangeretriever getnextchunk no more results",
  1
 ],
 [
  "private void thread_func() {\tlocaldatastoreslot namedslot=thread.getnameddataslot(\"data-slot\");\tthread thr=thread.currentthread;",
  "found thread",
  0
 ],
 [
  "public override void print (textwriter tw, ilprinter<apc> printer, func<cfgblock, ienumerable<sequence<edge<cfgblock, edgetag>>>> contextlookup, sequence<edge<cfgblock, edgetag>> context, hashset<pair<subroutine, sequence<edge<cfgblock, edgetag>>>> printed) {\tvar element = new pair<subroutine, sequence<edge<cfgblock, edgetag>>> (this, context);\tif (printed.contains (element)) return;\tprinted.add (element);\tvar subs = new hashset<subroutine> ();\tvar methodinfo = this as imethodinfo;\tstring method = (methodinfo != null) ? string.format (\"({0})\", this.subroutinefacade.metadataprovider.fullname (methodinfo.method)) : null;",
  "element field filling value",
  1
 ],
 [
  "public static void createnamespacetestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));",
  "docnamespace",
  0
 ],
 [
  "public static int test_0_base () {\tassembly ass = typeof (tests).assembly;\ttype a_type = ass.gettype (\"a\");\tmethodinfo a_method = a_type.getmethod (\"tostring\");\ttype d_type = ass.gettype (\"d\");\tmethodinfo d_method = d_type.getmethod (\"test\");",
  "press enter to continue",
  1
 ],
 [
  "private static void testunichar() {",
  "testing unichar",
  0
 ],
 [
  "private static bool inifstatement0() {\tint failcount = 0;\tc origin = new c(0);\tdynamic d = origin;\tif (!d) {\tfailcount++;",
  "test failed conversion result is incorrect",
  0
 ],
 [
  "public static ienumerable<calltreenode> withquerylog(this ienumerable<calltreenode> items, textwriter logoutput) {\tif (items == null) throw new argumentnullexception(\"items\");\tif (logoutput == null) throw new argumentnullexception(\"logoutput\");\tiqueryable<calltreenode> query = items as iqueryable<calltreenode>;\tif (query != null) return query.withquerylog(logoutput);",
  "test failed conversion result is incorrect",
  1
 ],
 [
  "uri uriobj;\tif (!uri.trycreate (url, urikind.absolute, out uriobj)) {\treturn false;\t}\tbool usesha256 = false;\tstring sha = taskitem.getmetadata (\"sha1\");\tif (string.isnullorempty (sha)) {\tsha = taskitem.getmetadata (\"sha2\");\tusesha256 = true;\tif (string.isnullorempty (sha)) {",
  "item has no sha metadata",
  0
 ],
 [
  "public void m() {\t#line 40 console.writeline(4);\t#line hidden console.writeline();",
  "quiet limit console output to errors and confirmations messages",
  1
 ],
 [
  "list<cloudtask> tasks = boundjob.listtasks().tolist();\tcloudtask mycompletedtask = tasks.single();\tforeach (cloudtask curtask in tasks) {\t}\tboundpool.refresh();\tstring stdout = mycompletedtask.getnodefile(constants.standardoutfilename).readasstring();\tstring stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();\tthis.testoutputhelper.writeline(stdout);\tthis.testoutputhelper.writeline(stderr);\tforeach (nodefile curfile in mycompletedtask.listnodefiles(recursive: true)) {",
  "got but expected",
  1
 ],
 [
  "protected void asynccompleted(object sender, socketasynceventargs e) {\teventwaithandle handle = (eventwaithandle)e.usertoken;",
  "found non public this call at",
  1
 ],
 [
  "public void x () {\tthis [\"abc\"] = delegate () {\t++counter;",
  "a",
  0
 ],
 [
  "private static bool callsecondinterfaceinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturndynamicinterface<int>();\tif ((!(bool)((s + 1).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "p.parse (args);\tvar asm = typeof(asynctests.httpclienttests.simple).assembly;\tif (server) {\tserver.start (asm, prefix).wait ();\tthread.sleep (timeout.infinite);\treturn;\t}\ttry {\trun (asm).wait ();\t} catch (exception ex) {",
  "converting implicitly from blah int",
  1
 ],
 [
  "public void initialize () {\ttry {\tinitializedefaultcredentialprovider ();\t} catch (exception ex) {",
  "test failed conversion result is incorrect",
  1
 ],
 [
  "public async task<int> run (string[] arguments) {\tforeach (string s in arguments) readargument (s);\tif (help) {\tconsole.writeline ();",
  "build the project the default target",
  0
 ],
 [
  "public bool stop() {\tbool ok = false;\ttry {\tsilohost.stoporleanssilo();",
  "orleans silo shutdown",
  0
 ],
 [
  "public static int main () {\tobject o = (((simpleattribute)typeof(blah2).getcustomattributes (typeof (simpleattribute), false)[0]).d);\tif (o.tostring () != \"system.double[]\") return 1;\tif (((double[])o)[0].gettype () != typeof (double)) return 2;\to = (((simpleattribute)typeof(blah3).getcustomattributes (typeof (simpleattribute), false)[0]).d);\tif (o.tostring () != \"system.double[]\") return 3;",
  "no assemblies were specified to be analyzed",
  1
 ],
 [
  "public static void main (string[] args) {",
  "verifying position property throws exception after open then basestream close",
  1
 ],
 [
  "public static httpexception createfromlasterror (string message) {",
  "createfromlasterror",
  0
 ],
 [
  "da = t.getmember (\"iface\")[0].getcustomattributes (ca, false)[0] as dynamicattribute;\tif (da == null) return 46;\tif (!da.transformflags.sequenceequal (new bool[] { false, false, true })) return 47;\tda = t.getmember (\"d2\")[0].getcustomattributes (ca, false)[0] as dynamicattribute;\tif (da == null) return 48;\tif (!da.transformflags.sequenceequal (new bool[] { false, false, false, false, true })) return 49;\tt = typeof (del);\tif (t.getmember (\"invoke\")[0].getcustomattributes (ca, false).length != 0) return 100;\tif (t.getmethod (\"invoke\").getparameters ()[0].getcustomattributes (ca, false).length != 1) return 101;\tif (t.getmethod (\"invoke\").returnparameter.getcustomattributes (ca, false).length != 1) return 102;",
  "ok",
  0
 ],
 [
  "m_xsltarg.addparam(\"myarg2\", szempty, (int16)i);\tm_xsltarg.removeparam(\"myarg2\", szempty);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (retobj != null) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg2\", szempty, (uint16)i);\tm_xsltarg.removeparam(\"myarg2\", szempty);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (retobj != null) {",
  "expected got",
  1
 ],
 [
  "static bool askconfirmation (string action, x509certificate certificate) {\tconsole.writeline ();",
  "typename",
  1
 ],
 [
  "if (startsentinel == null) {\treturn retval;\t}\tint count = 0;\tnode node = startsentinel.next, prev = startsentinel;\t#if hashindex int taggroupsize = 0, oldtaggroupsize = losize + 1, seentaggroups = 0;\ttaggroup oldtg = null;\tif (underlying == null) {\ttaggroup tg = startsentinel.taggroup;\tif (tg.count != 0 || tg.first != null || tg.last != null || tg.tag != int.minvalue) {",
  "nonvirtualdelegate onevent",
  1
 ],
 [
  "outputline (@\"                  oracle,postgresql,sqlite,sybase,tds)\");\toutputline (@\"       \\open to open the connection\");\toutputline (@\"       \\close to close the connection\");\toutputline (@\"       \\e to execute sql query (select)\");\toutputline (@\"       \\h to show help (all commands).\");\toutputline (@\"       \\defaults to show default variables.\");\toutputline (\"\");\t}\tpublic void showhelp () {\tconsole.writeline (\"\");",
  "renderbegintag",
  1
 ],
 [
  "public override void writeto(itextoutput output) {\toutput.write(\"if (\");\tcondition.writeto(output);\toutput.writeline(\") {\");\toutput.indent();\ttrueblock.writeto(output);\toutput.unindent();\toutput.write(\"}\");\tif (falseblock != null) {",
  "have state",
  1
 ],
 [
  "string srcdir = @\"..\\..\\..\\..\\\";\tdebug.writeline(path.getfullpath(srcdir));\tlist<xmlelement> doozers = new list<xmlelement>();\tlist<xmlelement> conditions = new list<xmlelement>();\tif (!readxmldocu(srcdir + \"main\\\\base\\\\project\\\\icsharpcode.sharpdevelop.csproj\", doozers, conditions)) return;\tprocessstartinfo info = new processstartinfo(\"cmd\", \"/c debugbuild.bat\");\tinfo.workingdirectory = path.getfullpath(path.combine(srcdir, \"..\"));\tdebug.writeline(info.workingdirectory + \">\" + info.filename + \" \" + info.arguments);\tprocess p = process.start(info);\tif (!p.waitforexit(60000)) {",
  "test failed conversion result is incorrect",
  1
 ],
 [
  "public static int main (string[] args) {\ttry {\tif (args.length != 1) {",
  "failed didn t get runtimebinderexception",
  1
 ],
 [
  "f.position = 0x3c;\tint peheaderstart = r.readint32();\tf.position = peheaderstart;\tif (r.readint32() != 0x00004550) {\treturn false;\t}\tint optionalheaderstart = peheaderstart + 4 + 20;\tf.position = optionalheaderstart;\tswitch (r.readint16()) {\tcase 0x10b: break;",
  "detected bit image using magic number",
  0
 ],
 [
  "public override void onstop() {",
  "orleansazureweb onstop",
  0
 ],
 [
  "public static int main () {\tbar bar = new bar ();\tif (bar.message != \"bar\") return 1;\tfoo foo = new foo ();\tif (foo.message != \"foo\") return 2;\tc c = new c ();\tc.get_value ();\tc.add_arg (false);",
  "existing state",
  1
 ],
 [
  "public int transformresolver(string szxmlfile, xmlresolver xr, bool errorcase, transformtype transformtype, doctype doctype) {\tlock (s_outfilememorylock) {\tszxmlfile = fullfilepath(szxmlfile);\tixpathnavigable xd = loadxml(szxmlfile, doctype);",
  "lessequal fails due to bottom field difference",
  1
 ],
 [
  "public static void createbigelementtestfile(string strfilename) {\tmemorystream ms = new memorystream();\ttextwriter tw = new streamwriter(ms);\tstring str = new string('z', (1 << 20) - 1);\ttw.write(\"<\");\ttw.write(str);\ttw.flush();\ttw.write(\"<\");\ttw.write(str);",
  "y",
  0
 ],
 [
  "public static void init () {",
  "got but expected",
  1
 ],
 [
  "public static bool purgecomm (intptr hfile, uint dwflags) {",
  "purgecomm called",
  0
 ],
 [
  "public void methodpreprocesscontrolmessage () {\tbool testing_callstack = false;\tmycontrol c = new mycontrol ();\tmessage m = new message ();\tm.hwnd = c.handle;\tm.msg = wm_keydown;\tm.wparam = (intptr)keys.down;\tm.lparam = intptr.zero;",
  "main task sleeping",
  1
 ],
 [
  "ig.emit (opcodes.callvirt, foo_mb);\tig.emit (opcodes.ret);\tiface.createtype ();\tparent.createtype ();\tchild.createtype ();\ttype t = main.createtype ();\tmethodinfo method = t.getmethod (\"main\");\tmethod.invoke (null, null);\ttype oi = gtd.makegenerictype (gtd.getgenericarguments ());\tif (oi != gtd) {",
  "fully open instantiation of static type not the same of the generic type definition",
  0
 ],
 [
  "private void emitreadprimitivecollection(string typename) {\tstring collectiontypename = $\"{typename}collection\";\topenscope($\"public static unsafe uint read(this nativereader reader, uint offset, out {collectiontypename} values)\");\twriteline($\"values = new {collectiontypename}(reader, offset);\");\twriteline(\"offset = reader.decodeunsigned(offset, out count);\");\twriteline($\"offset = checked(offset + count * sizeof({typename}));\");",
  "copyright c by remobjects software",
  1
 ],
 [
  "public void performsearchindexcreation () {\tfiresearchindexcreationevent (true);\ttry {\troottree.makesearchindex ();\t} catch (exception e) {",
  "error making search index",
  0
 ],
 [
  "return;\t} else if (result == certificatecheckresult.error) {\treturn;\t}\tif (confirmtrustcertificate (result)) {\tawait dotnetcoredevcertstool.trustcertificate (monitor.cancellationtoken);\t}\t} catch (operationcanceledexception) {\tthrow;\t} catch (exception ex) {",
  "need this to make it pass",
  1
 ],
 [
  "private static void _defaulthandler (int signum) {",
  "the p option can t be used when exporting a single project",
  1
 ],
 [
  "private void debug (timespan ts) {",
  "stderr",
  1
 ],
 [
  "object [] arguments;\targuments = new object [] { str, i, j, int32_out, maskedtextresulthint_out };\tif (compare (\"replace\", mask, ref stateindex, arguments, ref more_states)) {\tcontinue;\t}\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;",
  "assert areequal maskedtextresulthint out",
  0
 ],
 [
  "trace.indent ();\t} else {\t}\tlong pos = w.basestream.position;\t#endif if (o == null) {\tw.write ((byte) 0);\treturn;\t}\ttype t = o.gettype ();\t#endif objectformatter fmt = writemap [t] as objectformatter;",
  "did not throw expected exception",
  1
 ],
 [
  "public override void run() {\ttry {\tbase.run();\t}\tcatch (exception exc) {",
  "test failed conversion result is incorrect",
  1
 ],
 [
  "public virtual void addservice(type servicetype, object serviceinstance, bool promote) {\tif (promote) {\tiservicecontainer container = container;\tif (container != null) {\tdebug.indent();",
  "promoting to container",
  0
 ],
 [
  "public override void heapobjectunreachable (lc c, uint size) {",
  "exception caught while generating uplevelhelper code",
  1
 ],
 [
  "if (s9.f6 != 6+9) {\treturn 6;\t}\tif (s9.f7 != 7+9) {\treturn 7;\t}\tif (s9.f8 != 8+9) {\treturn 8;\t}\tif (s9.f9 != 9+9) {",
  "authzset sidlist processing sids",
  1
 ],
 [
  "private void dochecktimeout() {\tif (--_timeoutcheckstoskip != 0) return;\t_timeoutcheckstoskip = timeoutcheckfrequency;\tint currentmillis = environment.tickcount;\tif (currentmillis < _timeoutoccursat) return;\tif (0 > _timeoutoccursat && 0 < currentmillis) return;\t#if debug if (runregex.debug) {\tdebug.writeline(\"\");",
  "timeout check frequency",
  0
 ],
 [
  "private void processfile (string file_path) {\tif (!file.exists (file_path)) {",
  "failed string string",
  1
 ],
 [
  "foreach (createcollectioninfo c in _createmethods.values) {\twritecreatecollectionmethod(c);\t}\twriter.writeline();\tforeach (string idname in _idnames.values) {\twriter.write(\"string \");\twriter.write(idname);\twriter.writeline(\";\");\t}\twriter.writeline();",
  "failed to load stylesheet showparam xsl on the attempt",
  1
 ],
 [
  "public void basictest_accessinstanceproperties_noexceptions_osx() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tstring description = nic.description;\tassert.false(string.isnullorempty(description), \"networkinterface.description should not be null or empty.\");\tstring id = nic.id;\tassert.false(string.isnullorempty(id), \"networkinterface.id should not be null or empty.\");\tassert.throws<platformnotsupportedexception>(() => nic.isreceiveonly);\tassert.inrange(nic.speed, 0, long.maxvalue);",
  "getphysicaladdress",
  0
 ],
 [
  "public bool movenext() {\tcheckdisposed();\tcheckchanged();\tif (_endreached) {",
  "error building recent solutions list",
  1
 ],
 [
  "private void dumpsqlparam(sqlparameter param) {",
  "foo bar",
  1
 ],
 [
  "return expandforeigngroupsearcher();\t}\t}\telse {\treturn false;\t}\t}\tif (foreignprincipal is groupprincipal) {\tif (!foreignprincipal.fakeprincipal) {\tstring groupdn = (string)((directoryentry)foreignprincipal.underlyingobject).properties[\"distinguishedname\"].value;",
  "addnlinkedattrset movenextforeign foreign member is a group",
  1
 ],
 [
  "public static void thread() {\tthread.sleep(500);\tthread.sleep(500);",
  "test failed conversion result is incorrect",
  1
 ],
 [
  "public static int operator % (blah i, blah j) {",
  "overloaded binary operator",
  0
 ],
 [
  "public void writeformatheader(solutionformatversion version) {\twriter.writeline();\tswitch (version) {\tbreak;\tbreak;\tbreak;",
  "reader positioned on",
  1
 ],
 [
  "output.write (evaluator.getusing ());\toutput.flush ();\t}\tstatic public timespan time (action a) {\tdatetime start = datetime.now;\ta ();\treturn datetime.now - start;\t}\tstatic public void loadpackage (string pkg) {\tif (pkg == null){",
  "invalid package specified",
  0
 ],
 [
  "public static void main() {\tdictionary<string, int> values = new dictionary<string, int>();\tvalues[\"one\"] = 1; values[\"two\"] = 2;\tforeach (string key in values.keys) {",
  "il",
  1
 ],
 [
  "public static void main( ) {",
  "mybase new",
  1
 ],
 [
  "protected void onclosed(eventargs e) {\tforeach (var fv in dock.layouts) if (fv.endswith (fullviewmodetag)) dock.deletelayout (fv);\ttry {\tdock.savelayouts (configfile);\t} catch (exception ex) {",
  "error while saving layout",
  0
 ],
 [
  "public void writetimeout_1_write_str_beforeopen() {",
  "verifying writetimeout before open with write string",
  0
 ],
 [
  "var monoproject = ((monodevelopworkspace)workspace).getmonoproject (documentid.projectid);\tif (!packageservices.ispackageinstalled (monoproject, packagename)) {\tif (versionopt == null) {\tpackageservices.installlatestpackage ( source, monoproject, packagename, includeprerelease, ignoredependencies: false);\t} else {\tpackageservices.installpackage ( source, monoproject, packagename, versionopt, ignoredependencies: false);\t}\treturn true;\t}\t} catch (exception e) {",
  "error while installing nuget package",
  0
 ],
 [
  "assert.true(false);\t}\ti++;\t}\ti = 1;\tforeach (string str in szwhitespace) {\tm_xsltarg.addparam(\"myarg\" + i, szempty, \"test\");\tm_xsltarg.removeparam(\"myarg\" + str, szempty);\tretobj = m_xsltarg.getparam(\"myarg\" + str, szempty);\tif (retobj != null) {",
  "compiled unless they are migrated to a newer format please",
  1
 ],
 [
  "public static int main () {\ti.gettextfn _ = i.gettext;",
  "value",
  0
 ],
 [
  "private static void shutdown() {\tdebug.indent();\tif (initialized) {\tclearthreaddata();",
  "running garbage collector",
  0
 ],
 [
  "static byte [] faultresponse_unqualified (socket socket) {\tstring responsecontent = \"<soap:envelope xmlns:soap=\\\"http: \"  <soap:body>\" + \"    <soap:fault>\" + \"      <faultcode>soap:server</faultcode>\" + \"      <faultstring>failure processing request.</faultstring>\" + \"      <faultactor>mono web service</faultactor>\" + \"      <detail>\" + \"        <se:systemerror xmlns:se=\\\"http: \"          <se:code>5000</se:code>\" + \"          <se:description>invalid credentials.</se:description>\" + \"        </se:systemerror>\" + \"      </detail>\" + \"    </soap:fault>\" + \"  </soap:body>\" + \"</soap:envelope>\";\tstringwriter sw = new stringwriter ();",
  "msgstr i",
  1
 ],
 [
  "public void complexeventsequence1 () {\tstring result = @\"setting table... ---- onlistchanged propertydescriptorchanged,0,0 ----- updateindex : true ---- onlistchanged reset,-1,-1 table was set. ---- onlistchanged propertydescriptoradded,0,0 col1 added. ---- onlistchanged propertydescriptoradded,0,0 col2 added. ---- onlistchanged propertydescriptoradded,0,0 col3 added. uniq added. ----- updateindex : true ---- onlistchanged reset,-1,-1 sort changed. ---- onlistchanged propertydescriptordeleted,0,0 col3 removed. ----- updateindex : true ---- onlistchanged reset,-1,-1 rowfilter changed. ----- updateindex : true ---- onlistchanged reset,-1,-1 rowstatefilter changed. ----- updateindex : true ---- onlistchanged reset,-1,-1 rowstatefilter changed. ---- onlistchanged itemadded,0,-1 added row to rows. ---- onlistchanged itemadded,0,-1 added row to rows. ---- onlistchanged itemadded,0,-1 added row to rows. ---- onlistchanged itemadded,3,-1 addnew() invoked. 4 ---- onlistchanged itemdeleted,3,-1 ---- onlistchanged itemmoved,-2147483648,3 endedit() invoked. 3 ---- onlistchanged itemmoved,0,-2147483648 value changed to appear. 4 ---- onlistchanged itemmoved,3,0 value moved. 4 ---- onlistchanged itemmoved,1,3 value moved again. 4 ---- onlistchanged propertydescriptorchanged,0,0 ----- updateindex : true ---- onlistchanged reset,-1,-1 table changed. \";\teventwriter = new stringwriter ();\tdatatable dt = new datatable (\"table\");\tcomplexeventsequence1view dv = new complexeventsequence1view (dt, eventwriter);\tdt.columns.add (\"col1\");",
  "aaa",
  1
 ],
 [
  "arguments = new object [] { i, j, int32_out, maskedtextresulthint_out };\tif (compare (\"removeat\", mask, ref stateindex, arguments, ref more_states)) {\tcontinue;\t}\tdont_write = false;\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;",
  "assert areequal maskedtextresulthint out",
  0
 ],
 [
  "static void help () {",
  "added gac reference to project",
  1
 ],
 [
  "if (s7.f4 != 4+9) {\treturn 4;\t}\tif (s7.f5 != 5+9) {\treturn 5;\t}\tif (s7.f6 != 6+9) {\treturn 6;\t}\tif (s7.f7 != 7+9) {",
  "got but expected",
  0
 ],
 [
  "public void setargnullity(int index, nullity n) {\tif (runner.verbositylevel > 1) {",
  "value",
  1
 ],
 [
  "protected override string renderbeforetag () {",
  "renderbeforetag",
  0
 ],
 [
  "aliases.append (environment.newline);\taliases.appendformat (\"      <aliases>{0}</aliases>\", e.name);\taliases.append (environment.newline);\taliases.appendformat (\"      <hintpath>..\\\\..\\\\{0}</hintpath>\", path.getfilename (e.referencefile));\taliases.append (environment.newline);\taliases.appendline (\"    </reference>\");\t}\tfile.writeline ();\tfile.writeline ();\tforeach (var e in entries) {",
  "endif writer writeline endif writer writeline endif",
  1
 ],
 [
  "myrow = ds.tables[\"mono_adapter_test\"].newrow();\tbyte[] bytes = new byte[] { 0x45,0x46,0x47,0x48,0x49,0x50 };\tmyrow[\"varchar2_value\"] = \"oracleclient\";\tmyrow[\"number_whole_value\"] = 22;\tmyrow[\"number_scaled_value\"] = 12.34;\tmyrow[\"number_integer_value\"] = 456;\tmyrow[\"float_value\"] = 98.76;\tmyrow[\"date_value\"] = new datetime(2001,07,09);\tmyrow[\"clob_value\"] = \"clobtest\";\tmyrow[\"blob_value\"] = bytes;",
  "server starting ssl authentication",
  1
 ],
 [
  "private void setupxim () {\txim = intptr.zero;\tif (!xsupportslocale ()) {",
  "x does not support your locale",
  0
 ],
 [
  "public void pasteverbatimstringbug1() {\tvar texteditoroptions = createinvariantoptions ();\ttexteditoroptions.eolmarker = \"\\r\\n\";\tvar indent = createengine(\"\\r\\nclass foo\\r\\n{\\r\\n\\tvoid bar ()\\r\\n\\t{\\r\\n\\t\\t$\\r\\n\\t}\\r\\n}\", formattingoptionsfactory.createmono(), texteditoroptions);\titextpastehandler handler = new textpasteindentengine(indent, texteditoroptions, formattingoptionsfactory.createmono());\tvar text = handler.formatplaintext(indent.offset, \"console.writeline (@\\\"hello world!\\\");\\n\", null);",
  "init caught exception",
  1
 ],
 [
  "status = teststatus.loading;\tvar discoveredtests = await vstestdiscoveryadapter.instance.discovertestsasync (project);\tvar tests = discoveredtests.buildtestinfo (this);\tstatus = teststatus.ready;\ttests.clear ();\tforeach (unittest test in tests) {\ttests.add (test);\t}\tontestchanged ();\t} catch (exception e) {",
  "failed to discover unit tests",
  0
 ],
 [
  "private void comparemessages() {\tif (ignoremultipledots && _expectedmessage.endswith(\".\")) _expectedmessage = _expectedmessage.trimend(new char[] { '.' }) + \".\";\t_expectedmessage = regex.escape(_expectedmessage);\t_expectedmessage = _expectedmessage.replace(escape_any, \".*\");\t_expectedmessage = _expectedmessage.replace(escape_number, @\"\\d*\");\t_expectedmessage = _expectedmessage.tolowerinvariant();\t_actualmessage = _actualmessage.tolowerinvariant();\tif (!platformdetection.isnetnative) {\tif (regex.match(_actualmessage, _expectedmessage, regexoptions.singleline).tostring() != _actualmessage) {\t_expectedmessage = regex.unescape(_expectedmessage);",
  "mismatch in error message",
  0
 ],
 [
  "public async task taskmethodwithoutawait() {",
  "is set at",
  1
 ],
 [
  "static void help (string details) {\tswitch (details) {\tbreak;\tbreak;",
  "convert convertion options",
  0
 ],
 [
  "public void emitsource() {",
  "writer writeunsigned uint value",
  1
 ],
 [
  "tw.writeline(\"<entity4 att1='xxx&lt;xxx&#65;xxx&#x43;xxxe1fooxxx'>xxx&gt;xxx&#66;xxx&#x44;xxxe1fooxxx</entity4>\");\ttw.writeline(\"<entity5>e1foo e3bzee </entity5>\");\ttw.writeline(\"<attribute1 />\");\ttw.writeline(\"<attribute2 a1='a1value' />\");\ttw.writeline(\"<attribute3 a1='a1value' a2='a2value' a3='a3value' />\");\ttw.writeline(\"<attribute4 a1='' />\");\ttw.writeline(string.format(\"<attribute5 crlf='x{0}x' cr='x{0}x' lf='x\\nx' ms='x     x' tab='x\\tx' />\", environment.newline));\ttw.writeline(\"<skip1 /><afterskip1 />\");\ttw.writeline(\"<skip2></skip2><afterskip2 />\");\ttw.writeline(\"<chars1>0123456789</chars1>\");",
  "extratotal",
  1
 ],
 [
  "public void writedot(string filename) {\ttextwriter wr = new streamwriter(new filestream(filename, filemode.create, fileaccess.write));",
  "wr writeline digraph nfa",
  0
 ],
 [
  "using (xmlwriter w = utils.createwriter()) {\tusing (xmlreader xr = createreader(\"xmlreader.xml\")) {\twhile (xr.read()) {\tif (xr.localname == \"attributesgeneric\") {\tdo { xr.read(); } while (xr.localname != \"node\");\txr.movetoattribute(1);\tbreak;\t}\t}\tif (xr.nodetype != xmlnodetype.attribute) {",
  "xmldoc is redirecting to",
  1
 ],
 [
  "private static bool testandopwithsametypebutwrongreturntype2() {\tclearflags();\tdynamic d1 = new myopclasswitherrorreturntype2();\tdynamic d2 = new myopclasswitherrorreturntype2();\tdynamic dr = d1 && d2;\tif (dr.gettype() != typeof(myopclasswitherrorreturntype2)) {",
  "failed got wrong return type",
  0
 ],
 [
  "public void basictest_getipinterfacestatistics_success_osx() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfacestatistics stats = nic.getipstatistics();\tassert.throws<platformnotsupportedexception>(() => stats.outgoingpacketsdiscarded);",
  "type to log all to log all overrides and events for all types in system windows forms dll",
  1
 ],
 [
  "is_safe.add (safe);\t}\tif (body.hasexceptionhandlers) {\tforeach (exceptionhandler eh in body.exceptionhandlers) {\tif (eh.handlertype != exceptionhandlertype.catch) continue;\tif (eh.filterstart != null) continue;\ttypereference ctype = eh.catchtype;\tif (!(ctype == null || ctype.isnamed (\"system\", \"object\") || ctype.isnamed (\"system\", \"exception\"))) continue;\tint start_index = instructions.indexof (eh.trystart);\tint end_index = instructions.indexof (eh.tryend);",
  "catch all block found marking instruction at index to index included as safe",
  0
 ],
 [
  "public static void main () {",
  "argumentnullexception is not supposed to be thrown for the input type",
  1
 ],
 [
  "public void testnestedcase2() {",
  "class test public shared sub main args as system collections generic idictionary of integer integer dim val as integer if args trygetvalue val then console writeline val end if end sub end class",
  0
 ],
 [
  "p.value = \"somestring\";\tconsole.writeline();\toracleparameter p2 = con.createcommand().createparameter();\tp2.value = new byte[] { 0x01, 0x02, 0x03, 0x04 };\tp2.oracletype = oracletype.blob;\tconsole.writeline();\toracleparameter p3 = new oracleparameter(\"test\", oracletype.clob);\tp3.value = \"blah\";\tconsole.writeline();\toracleparameter p4 = new oracleparameter(\"test\", \"blah\");",
  "oracletype varchar",
  0
 ],
 [
  "int failcount = 0;\tbool origin = false;\tdynamic d = origin;\tint count = 0;\tdo {\tif (count == 0) {\tcount++;\t}\telse {\tfailcount++;",
  "performancecounter counters start",
  1
 ],
 [
  "try {\tw.writestartelement(\"root\");\tw.writeattributestring(\"xmlns\", null, \"test\");\tw.writeendelement();\t}\tcatch (xmlexception) {\ttestlog.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "static processinfo[] getprocessinfos(performancecounterlib library, int processindex, int threadindex, byte[] data) {",
  "getprocessinfos",
  0
 ],
 [
  "}\twriteline (\"}\");\twritelineuni (\"}\");\twriteline (\"\");\tforeach (generationresult res in generatedmaps) {\tif (res.mapping is xmltypemapping) writeline (\"if (type == typeof(\" + (res.mapping as xmltypemapping).typedata.csharpfullname +  \")) return true;\");\t}\twritelineuni (\"}\");\twritelineuni (\"}\");\twriteline (\"\");",
  "endif",
  0
 ],
 [
  "private static bool test3() {\tbool[] boolvalues = new bool[]\t{\ttrue, false }\t;\tforeach (bool a1 in boolvalues) {\tforeach (bool a2 in boolvalues) {\tdynamic d1 = a1;\tdynamic d2 = a2;\tif ((d1 && d2) != (a1 && a2)) {",
  "failed bool bool",
  0
 ],
 [
  "static void usage () {",
  "usage assembly",
  0
 ],
 [
  "static void dataadaptertest (oracleconnection connection) {\toraclecommand command = connection.createcommand ();\tcommand.commandtext = \"select * from scott.emp\";",
  "got but expected",
  1
 ],
 [
  "int tests_passed = populatefailuretable (file, failed_tests, ignored_tests);\tfail_total += failed_tests.count;\tpass_total += tests_passed;\trun_total += failed_tests.count + tests_passed;\tif (failed_tests.count > 0) {\tsw.writeline (\"        <tr class='errorrow' onclick=\\\"toggle('el{0}')\\\" onmouseover='highlight(this)' onmouseout='unhighlight(this)'>\", assembly);\tsw.writeline (@\"            <td><img src='media/fail.png' /></td>\");\t} else {\tsw.writeline (@\"            <td><img src='media/pass.png' /></td>\");\t}",
  "td td",
  0
 ],
 [
  "public void noargument() {\ttest<extractmethodaction>(@\"class testclass {\tvoid testmethod () {\tint i = 5;",
  "hello world",
  0
 ],
 [
  "public static void createlinenumbertestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<?xml version=\\\"1.0\\\" ?>\");\ttw.writeline(\" <element a0='a0&e1;v' a1='a1value' a2='a2&e1;v'><embedded /></element>\");\ttw.writeline(\"<?pi1?>\");\ttw.writeline(\"<base64>9f6hju++</base64>\");",
  "nested got but expected",
  1
 ],
 [
  "private void verifydefaulttimeout(writemethoddelegate writemethod) {\tusing (serialport com1 = tcsupport.initfirstserialport()) {",
  "typedef struct",
  1
 ],
 [
  "private void keymustthrowargumentexception( string paramname, jsonwebkey key ) {\tvar serialized = key.tostring();\ttry {\tvar deserialized = jsonconvert.deserializeobject<jsonwebkey>( serialized );\tassert.equal( key, deserialized );\t}\tcatch ( targetinvocationexception ex ) {",
  "updated key",
  1
 ],
 [
  "public memorystream stringatbufferboundary() {",
  "catched exception in cctor",
  1
 ],
 [
  "}\tschedule sched = curwi.schedule;\tif (null == sched) {\t}\telse {\t}\tjobschedulestatistics stats = curwi.statistics;\tif (null == stats) {\t}\telse {",
  "numfailedtasks",
  0
 ],
 [
  "}\ttry {\ttry {\tg.myfield++;\t}\tfinally {\tcounter++;\t}\t}\tcatch (nullreferenceexception) {",
  "exception raised",
  1
 ],
 [
  "public static int main (string[] args) {\tshort1 s1;\ts1.f1 = 1;\ts1 = mono_return_short1(s1, 90);\tif (s1.f1 != 1+90) {",
  "test failed at conversion result",
  1
 ],
 [
  "public override void methodjitend (lm m, ulong counter, bool success) {",
  "methodjitend",
  0
 ],
 [
  "public static int main () {\teventhandlers handlers = new eventhandlers ();\thandlers.handler = handlers.dosomethingeventhandler;\tconsole.writeline (\"is handlers.handler == handlers.dosomethingeventhandler (instance)?\");",
  "bad command line arguments supplied",
  1
 ],
 [
  "public void removeparam7() {\tm_xsltarg = new xsltargumentlist();\tretobj = m_xsltarg.removeparam(\"myarg1\", null);\tif (retobj != null) {",
  "decoders",
  1
 ],
 [
  "com.write(new char[8], 0, 8);\t}\tcatch (invalidoperationexception) {\t}\ttry {\tcom.write(\"a\");\t}\tcatch (invalidoperationexception) {\t}\ttry {",
  "aborted",
  1
 ],
 [
  "dumpstat();\treturn test_fail;\t}\twhile (datareader.read()) ;\tdatareader.close();\treturn test_pass;\tcase \"dns\": datareader.readtodescendant(\"elem\", \"elem\");\tdatareader.readtonextsibling(\"elem\", \"elem\");\tif (datareader.hasattributes) {\tif (datareader.getattribute(\"att\") == null) {",
  "positioned on wrong element not on dns",
  0
 ],
 [
  "action a = delegate {\tobject x = d;\td.invoke (dispatcherpriority.normal, new action (mine));\t};\td.begininvoke (dispatcherpriority.normal, (action) delegate {\t});\td.begininvoke (dispatcherpriority.normal, (action) delegate {\td.invokeshutdown ();\t});\td.begininvoke (dispatcherpriority.send, (action) delegate {",
  "error while visiting command targets",
  1
 ],
 [
  "public override void applicationdomainloaded (ulong threadid, uint id, ulong startcounter, ulong endcounter, string name, bool success) {",
  "rtf parsing failure",
  1
 ],
 [
  "public static void printnumberofunhandledopcodes() {\t#if debug foreach (var pair in unhandledopcodes) {",
  "assert areequal maskedtextresulthint out",
  1
 ],
 [
  "public void canseek_open_basestreamclose() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tcom.open();\tstream serialstream = com.basestream;\tcom.basestream.close();",
  "verifying canseek property throws exception after open then basestream close",
  0
 ],
 [
  "public void testremovebracesfromusing() {\ttest<removebracescoderefactoringprovider>(@\"class testclass {\tvoid test() {\t$using (var a = new a()) {",
  "hello",
  0
 ],
 [
  "private static bool userdefinedgenericstructwithidentityconversioninassignment() {\tint failcount = 0;\tgs<int> origin = new gs<int>(10);\tdynamic d = origin;\tgs<int> result = d;\tif (result.f != origin.f) {\tfailcount++;",
  "test failed at conversion result",
  0
 ],
 [
  "private void dumpmethodinfo(methodinfo mi) {",
  "method with the params found",
  0
 ],
 [
  "public void validationcallback(object sender, validationeventargs args) {\tif (args.severity == xmlseveritytype.warning) {\tbwarningcallback = true;\t}\telse if (args.severity == xmlseveritytype.error) {",
  "no converter for",
  1
 ],
 [
  "public task<string> c2method() {",
  "failed datetime",
  1
 ],
 [
  "}\tfor (int i = 0; i < deskatrs.length; i++) {\tif (deskatrs[i].isnamespacedeclaration != coreclratrs[i].isnamespacedeclaration) {\treturn false;\t}\tif (deskatrs[i].isnamespacedeclaration) {\tif (0 != string.compare(deskatrs[i].name.namespacename, coreclratrs[i].name.namespacename)) {\treturn false;\t}\tif (0 != string.compare(deskatrs[i].value, coreclratrs[i].value)) {",
  "attribute values are different expected attribute values doesn t match with actual attribute value",
  0
 ],
 [
  "new float[] \t{1,\t0,\t0, \t0, \t0}, new float[] \t{0,\t1,\t1, \t0, \t0}, new float[] \t{0,\t0,\t0, \t0, \t0}, new float[] \t{0,\t0,\t0, \t1, \t0}, new float[] \t{0,\t0,\t0, \t0, \t0}, });\tclr_src = color.fromargb (255, 100, 100, 25);\tclr_rslt = processcolormatrix (clr_src, colormatrix);\t}\t{\tcolormatrix colormatrix = new colormatrix (new float[][] {\tnew float[] \t{1,\t0,\t0, \t0, \t0}, new float[] \t{0,\t0,\t0, \t0, \t0}, new float[] \t{0,\t0,\t1, \t0, \t0}, new float[] \t{0,\t0.5f,\t0, \t1, \t0}, new float[] \t{0,\t0f,\t0, \t0, \t0}, });\tclr_src = color.fromargb (255, 100, 20, 50);\tclr_rslt = processcolormatrix (clr_src, colormatrix);\t}",
  "all",
  0
 ],
 [
  "public clientwrapperbase(string name, int gatewayport, string clusterid, action<clientconfiguration> configcustomizer, action<iclientbuilder> clientconfigurator) {\tthis.name = name;",
  "initializing client",
  0
 ],
 [
  "com1.parity = parity.none;\tcom2.basestream.write(new byte[] { 26 }, 0, 1);\tthread.sleep(trigering_events_wait_time);\tcom2.breakstate = true;\tthread.sleep(trigering_events_wait_time);\tbool threadfound = true;\tstopwatch sw = stopwatch.startnew();\twhile (threadfound && sw.elapsedmilliseconds < max_time_wait) {\tthreadfound = false;\tfor (int i = 0; i < max_time_wait / iterationwaittime; ++i) {",
  "lastupdatetime null",
  1
 ],
 [
  "ts.writeline ();\t}\tif (machine_config_file != null){\tfilestream conf;\ttry {\tconf = file.openread (machine_config_file);\t} catch {\terror (\"failure to open {0}\", machine_config_file);\treturn;\t}",
  "machine config from",
  0
 ],
 [
  "if (!isresgenrequired (fname, outputfile)) {\tfname = file.exists (outputfile) ? (string)outputfile : path.changeextension (fname, \".resources\");\treturn null;\t}\tif (resgen == null) {\tstring msg = gettextcatalog.getstring (\"unable to find 'resgen' tool.\");\tmonitor.reporterror (msg, null);\treturn new compilererror (fname, 0, 0, string.empty, msg);\t}\tusing (stringwriter sw = new stringwriter ()) {",
  "compiling resources compile",
  0
 ],
 [
  "public void basictest_getipinterfacestatistics_success_osx() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfacestatistics stats = nic.getipstatistics();\tassert.throws<platformnotsupportedexception>(() => stats.outgoingpacketsdiscarded);",
  "unicastpacketsreceived",
  0
 ],
 [
  "while (pendingpollcount < 11) {\tvar pendingcertificateresponse = task.run(() => keyvaultclient.getcertificateoperationasync(vaultaddress, pendingcertificate.certificateoperationidentifier.name)) .configureawait(false).getawaiter().getresult();\tprintoutcertificateoperation(pendingcertificateresponse);\tif (0 == string.compare(pendingcertificateresponse.status, \"inprogress\", true)) {\tthread.sleep(timespan.fromseconds(5));\tpendingpollcount++;\tcontinue;\t}\tif (0 == string.compare(pendingcertificateresponse.status, \"completed\", true)) {\tvar certbundle = task.run(() => keyvaultclient.getcertificateasync(pendingcertificateresponse.target)).configureawait(false).getawaiter().getresult();",
  "created certificate",
  0
 ],
 [
  "public int movetonextattribute9() {\treloadsource(path.combine(testdata, \"common\", \"bug424573.xml\"));\tdatareader.read();\tif (datareader.hasattributes) {\tfor (int i = 0; i < datareader.attributecount; i++) {\tdatareader.movetonextattribute();\tif (datareader.nodetype == xmlnodetype.attribute && datareader.depth != 1) {",
  "unexpected attribute depth",
  0
 ],
 [
  "public static void help () {",
  "npdbtest options iterations",
  0
 ],
 [
  "foreach (var v in db.orders) objectdumper.write(v);\tconsole.readline();\t#if !sqlite console.clear();\tconsole.writeline(\"db.orders.add(new order { productid = 7, customerid = 1, orderdate = datetime.now });\");\tdb.orders.add(new order { employeeid = 1, customerid = \"alfki\", orderdate = datetime.now });\tdb.submitchanges();\tconsole.writeline(\"db.orders.add(new order { productid = 2, customerid = 2, orderdate = datetime.now });\");\tdb.orders.add(new order { employeeid = 1, customerid = \"alfki\", orderdate = datetime.now });\tdb.submitchanges();\tforeach (var v in db.orders) objectdumper.write(v);",
  "error getting typelib for ex",
  1
 ],
 [
  "private void emitwrite(string typename) {\topenscope($\"public static void write(this nativewriter writer, {typename} record)\");\twriteline(\"if (record != null)\");",
  "did not throw exception",
  1
 ],
 [
  "const string jobmanagercommandline = \"ping 127.0.0.1 -n 500\";\tilist<metadataitem> metadata = new list<metadataitem> { new metadataitem(\"key1\", \"test1\"), new metadataitem(\"key2\", \"test2\") };\tcloudjobschedule jobschedule = batchcli.jobscheduleoperations.createjobschedule(jobscheduleid, null, null);\ttimespan firstrecurrenceinterval = timespan.fromminutes(2);\tjobschedule.schedule = new schedule() { recurrenceinterval = firstrecurrenceinterval };\tpoolinformation poolinfo = new poolinformation() {\tpoolid = this.poolfixture.poolid };\tjobschedule.jobspecification = new jobspecification(poolinfo) {\tpriority = jobschedulepriority, jobmanagertask = new jobmanagertask(jobmanagerid, jobmanagercommandline) };\tjobschedule.metadata = metadata;",
  "inner text",
  1
 ],
 [
  "#region private helpers private void testgetprepreleasestatuscalls(batchclient batchcli, cloudjobschedule boundjobschedule, string sharedpool, ienumerable<resourcefile> correctresfiles) {\tstring jobid = boundjobschedule.executioninformation.recentjob.id;\tpooloperations poolops = batchcli.pooloperations;\tjobscheduleoperations jobscheduleoperations = batchcli.jobscheduleoperations;\t{\tdatetime beforejobprepruns = datetime.utcnow;\tcloudtask sillytask = new cloudtask(\"forcejobprep\", \"cmd /c hostname\");\tbatchcli.joboperations.addtask(jobid, sillytask);\tbool keeplooking = true;\twhile (keeplooking) {",
  "waiting for task to be scheduled",
  0
 ],
 [
  "public static int main(string[] args) {\ttry {\tcallfrominsidegrandchild();",
  "timesincludemillisecondpart got a file time of time tostring o on driveformat",
  1
 ],
 [
  "public void basictest_getipv4interfacestatistics_success_osx() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipv4interfacestatistics stats = nic.getipv4statistics();",
  "location http sw writeline",
  1
 ],
 [
  "boundjobschedule.schedule = new schedule() {\trecurrenceinterval = recurrenceinterval };\tboundjobschedule.commit();\tassertjobschedulecorrectness(batchcli.jobscheduleoperations, boundjobschedule, this.poolfixture.poolid, jobschedulepriority, jobmanagerid, jobmanagercommandline, recurrenceinterval, metadata);\tconst int newjobschedulepriority = 1;\tboundjobschedule.jobspecification.priority = newjobschedulepriority;\tboundjobschedule.commit();\tassertjobschedulecorrectness(batchcli.jobscheduleoperations, boundjobschedule, this.poolfixture.poolid, newjobschedulepriority, jobmanagerid, jobmanagercommandline, recurrenceinterval, metadata);\tconst string newjobmanagercommandline = \"ping 127.0.0.1 -n 150\";\tboundjobschedule.jobspecification.jobmanagertask.commandline = newjobmanagercommandline;",
  "verifying cantimeout property returns false after open then close",
  1
 ],
 [
  "public static int main () {\tx x = new x();\tx.m ();\te ();\tconsole.writeline (\"j should be 101= {0}\", j);\tif (j != 101) return 3;",
  "ok",
  0
 ],
 [
  "static int main(string [] args) {\tvar path = path.getdirectoryname(assembly.getexecutingassembly().location);\tstring mapfilename = path.combine (path, \"adventuremap.json\");\tswitch (args.length) {",
  "error while getting parameter documentation",
  1
 ],
 [
  "assert.true(false);\t}\tm_xsltarg.addparam(\"myarg6\", szempty, d6);\tretobj = m_xsltarg.getparam(\"myarg6\", szempty);\tif (!d6.equals(retobj)) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg7\", szempty, d7);\tretobj = m_xsltarg.getparam(\"myarg7\", szempty);\tif (!d7.equals(retobj)) {",
  "in implicit conversion to fraction",
  1
 ],
 [
  "break;\tcase \"rawchars\": w.writeraw(invalidxml, 6, 2);\tbreak;\tcase \"writevalue\": w.writevalue(invalidxml[3].tostring());\tbreak;\tdefault: cerror.compare(false, \"invalid param value\");\tbreak;\t}\t}\tcatch (xmlexception e1) {",
  "exception",
  0
 ],
 [
  "int x = 0;\tfor (int i = 0; i < 100; i++) x++;\tconsole.writeline (x);\tstring useless = \"useless string\";\tif (useless.equals (\"other useless\")) {\tuseless = string.empty;\t}\tuseless = string.concat (useless,\" 1\");\tfor (int j = 0; j < useless.length; j++) {\tif (useless[j] == 'u') console.writeline (\"i have detected an u char\");",
  "got but expected",
  1
 ],
 [
  "static int help () {",
  "no check certificate don t validate the server ssl tls certificate",
  0
 ],
 [
  "if (s17.f8 != 8+9) {\treturn 8;\t}\tif (s17.f9 != 9+9) {\treturn 9;\t}\tif (s17.f10 != 10+9) {\treturn 10;\t}\tif (s17.f11 != 11+9) {",
  "got but expected",
  0
 ],
 [
  "public void parityerroronlastbyte() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (serialport com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\trandom rndgen = new random(15);\tbyte[] bytestowrite = new byte[numrndbytespairty];\tchar[] expectedchars = new char[numrndbytespairty];",
  "verifying default parityreplace byte with a parity errro on the last byte",
  0
 ],
 [
  "private static bool longtypewithnumbericconversionfromshortinassignment() {\tint failcount = 0;\tshort origin = short.maxvalue;\tdynamic d = origin;\tlong result = d;\tif (result != origin) {\tfailcount++;",
  "got but expected",
  1
 ],
 [
  "string filename = args [0];\tfileinfo file = new fileinfo (filename);\tif (!file.exists) {\treturn;\t}\tfilestream fs = file.openread ();\tbyte [] raw = new byte [file.length];\tint count = fs.read (raw, 0, (int)file.length);\tfs.close ();\tif (count != file.length) {",
  "couldn t read file",
  0
 ],
 [
  "public void writeafterfailedopen() {\tusing (serialport com = new serialport(\"bad_port_name\")) {",
  "creating database tables",
  1
 ],
 [
  "protected override void performwork() {\tresult.setresult(resultstate.success);\tperformonetimesetup();\tif (result.resultstate.status == teststatus.passed && _suite.haschildren) {\tforeach (test test in _suite.tests) if (_childfilter.pass(test)) _children.enqueue(createworkitem(test, this.context, _childfilter));\tif (_children.count > 0) {\trunchildren();\treturn;\t}\telse {",
  "frameerror triggered",
  1
 ],
 [
  "cmd = null;\toraclecommand command = new oraclecommand(\"testtablepkg.getdata\", connection);\tcommand.commandtype = commandtype.storedprocedure;\toracleparameter parameter = new oracleparameter(\"tablecursor\", oracletype.cursor);\tparameter.direction = parameterdirection.output;\tcommand.parameters.add(parameter);\tcommand.executenonquery();\toracledatareader reader = (oracledatareader) parameter.value;\tint r = 0;\twhile (reader.read()) {",
  "none of the following programs were installed on this machine string join s allowedprogramstorun",
  1
 ],
 [
  "stringwriter expected = new stringwriter ();\texpected.writeline (\"\");\texpected.writeline (\"  -p, --indicator-style=value\");\texpected.writeline (\"      --color[=value]        controls color info\");\texpected.writeline (\"      --color2[=color]       set color\");\texpected.writeline (\"      --rk=value1:value2     required key/value option\");\texpected.writeline (\"      --rk2=key:value        required {foo} key/value option\");\texpected.writeline (\"      --rk3=value            required {foo}\");\texpected.writeline (\"      --rk4=val              required {foo} val\");\texpected.writeline (\"      --ok[=value1:value2]   optional key/value option\");",
  "test failed at call result",
  1
 ],
 [
  "public void expirepasswordnow() {\tif (_owningprincipal.unpersisted) {\t_expirepasswordimmediately = true;\t}\telse {",
  "passwordinfo expirepasswordnow sending request",
  0
 ],
 [
  "if (e.innerexception != ex) return 1;\t}\tif (counter != 3) return 2;\tvar ex2 = new notsupportedexception ();\ttry {\ttestrethrow (ex2).wait ();\t} catch (aggregateexception e) {\tif (e.innerexception != ex2) return 3;\t}\tif (counter != 9) return 4;",
  "ok",
  0
 ],
 [
  "public void reportwarning (string message) {",
  "default site removal from virtual network gateway is successful",
  1
 ],
 [
  "public bool test () {\tif (t.var != 0) return true;\tt.var = 100;",
  "end value",
  0
 ],
 [
  "string namespaceuri = context.namespace;\tfor (int ci = this.validationstack.length - 1; ci >= this.startidconstraint; ci --) {\tif (((validationstate)(this.validationstack[ci])).constr == null) {\tcontinue;\t}\tconstraintstruct[] constraints = ((validationstate)this.validationstack[ci]).constr;\tfor (int i = 0; i < constraints.length; ++i) {\tfor (int j = 0; j < constraints[i].axisfields.count; ++j) {\tlocatedactiveaxis laxis = (locatedactiveaxis)constraints[i].axisfields[j];\tif (laxis.ismatched) {",
  "class myauto does not have auto bit set",
  1
 ],
 [
  "public void methodinvocation() {\tvar rr = resolveatlocation<csharpinvocationresolveresult>(@\"using system;\tclass a { void m() {\tconsole.w$riteline(1);\t}}\");",
  "assembly is not strong named",
  1
 ],
 [
  "public static void creategenerictestfile(string strfilename) {\tfilepathutil.addstream(strfilename, new memorystream());\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"no\\\"?>\");\ttw.writeline(\"<!-- comment1 -->\");",
  "enabledjob state",
  1
 ],
 [
  "private static bool test1() {\tsbyte a = 10;\tdynamic b = a;\t++b;\tif (b == 11) return true;",
  "failed sbyte",
  0
 ],
 [
  "static void main(string[] args) {\ttry {\tnamevaluecollection appsettings = configurationmanager.appsettings;\tconfiguration config = configurationmanager.openexeconfiguration (configurationuserlevel.none);\tappsettingssection appsettings = config.appsettings;",
  "count",
  0
 ],
 [
  "public override void visitspan(span span) {",
  "span kind",
  0
 ],
 [
  "static void change_password (string username, string oldpwd, string newpwd) {",
  "failure",
  0
 ],
 [
  "parentdirectory.copyfilehere(other, effect == dragdropeffects.move);\tother = parentdirectory.allnodes.oftype<filenode>().singleordefault(n => fileutility.isequalfilename(path.getfilename(n.filename), otherfilename));\t}\tif (other != null) {\tother.remove();\t((fileprojectitem)other.projectitem).dependentupon = path.getfilename(this.filename);\tother.filenodestatus = filenodestatus.behindfile;\tother.insertsorted(this);\tprojectservice.savesolution();\t} else {",
  "could not find the copied or moved file node in the new parent directory",
  0
 ],
 [
  "foreach (symvalue target in multiedgemap [sv, edge].asenumerable ()) {\tif (!updatetrigger (target, edge, ref triggers)) continue;\tsymgraphterm<tfunc> term = equalmultitermsmap [target];\tif (term.args != null) {\ttw.writeline (\"{0}({1}) = {2}\", term.function, term.args.tostring (\", \"), target);\tworklist.add (target);\t}\t}\t}\t}",
  "abstract value map",
  0
 ],
 [
  "public void testmethodwithsynchronizedvalue () {\tvar input = @\" using system.runtime.compilerservices;\tclass testclass {\t[methodimpl (value = methodimploptions.synchronized)]\tvoid testmethod () {",
  "foo",
  0
 ],
 [
  "static void dosqltest (idbconnection cnc) {\tidatareader reader;\tobject odatavalue;",
  "sql provider specific tests",
  0
 ],
 [
  "try {\tcommunicationmanager.sendmessage (messagetype.canceltestrun);\t} catch (exception ex) {\t}\ttry {\tif (debugoperation != null) {\tif (!debugoperation.iscompleted) debugoperation.cancel ();\tdebugoperation = null;\t}\t} catch (exception ex) {",
  "canceltestrun error",
  0
 ],
 [
  "public void test(t param) {",
  "more",
  0
 ],
 [
  "public void testcurrencymanagerbindings () {\tdataset data_source = createrelateddatasetlarge ();\tbindingcontext bc = new bindingcontext ();\tcurrencymanager cm = bc [data_source] as currencymanager;\tforeach (propertydescriptor pd in cm.getitemproperties ()) debugwriteline (\" + {0}\", pd.name);\tdebugwriteline ();",
  "failed to remove",
  1
 ],
 [
  "char fmt = format[formatcount];\tif (fmt == '{' || fmt == '}' || fmt == '[' || fmt == ']' || fmt == 'n') {\terror = wldap32.ber_printf_emptyarg(berelement, new string(fmt, 1));\t}\telse if (fmt == 't' || fmt == 'i' || fmt == 'e') {\tif (valuecount >= value.length) {\tdebug.writeline(\"value argument is not valid, valuecount >= value.length\\n\");\tthrow new argumentexception(string.format(cultureinfo.currentculture, sr.berconverternotmatch));\t}\tif (!(value[valuecount] is int)) {",
  "type should be int",
  0
 ],
 [
  "public async task taskmethodwithoutawaitbutwithexceptionhandling() {\ttry {\tusing (new stringwriter()) {",
  "no await",
  0
 ],
 [
  "public void attribute_13(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writeattributestring(\"xml\", \"space\", \"http: }\tcatch (argumentexception e) {",
  "exception",
  0
 ],
 [
  "} else {\t}\t}\t}\tallocationsummary [] allocationsummaries = data.allocationsummaries;\tif (allocationsummaries.length > 0) {\tprintseparator (writer);\tforeach (allocationsummary allocationsummary in allocationsummaries) {\tallocationclassdata<loadedclass>[] classdata = allocationsummary.data;\tforeach (allocationclassdata<loadedclass> cdata in classdata) {",
  "class bytes in instances freed bytes in instances",
  0
 ],
 [
  "public override bool check() {\tbool retval = true;\tif (size > array.length) {\treturn false;\t}\tfor (int i = 0; i < size; i++) {\tif ((object)(array[i]) == null) {\treturn false;\t}\tif (i > 0 && comparer.compare(array[i], array[i - 1]) <= 0) {",
  "inversion at index",
  0
 ],
 [
  "public void registerforpreparation(typedesc type) {",
  "unable to load assembly needed to retrieve an exception template resource exception has been thrown",
  1
 ],
 [
  "string failure_msg = \"failure adding assembly {0} to the cache: \";\tarraylist resources;\tif (!file.exists (name)) {\treturn false;\t}\tassembly assembly = null;\tassemblyname an = null;\ttry {\tassembly = reflectiononlyloadfrom (name);\t} catch {",
  "currencynativename",
  1
 ],
 [
  "public void addparam5() {\tm_xsltarg = new xsltargumentlist();\ttry {\tm_xsltarg.addparam(szinvalid, szempty, \"test1\");\t}\tcatch (system.xml.xmlexception) {\treturn;\t}",
  "displays this help",
  1
 ],
 [
  "if (datareader.hasattributes) {\ttestlog.writeignore(datareader.readinnerxml() + \"\\n\");\tthrow new testexception(testresult.failed, \"\");\t}\twhile (datareader.read()) ;\tdatareader.dispose();\treturn;\tcase \"dns\": datareader.readtodescendant(\"elem\", \"elem\");\tif (datareader.hasattributes) {\tif (datareader.getattribute(\"xmlns\") == null) {",
  "positioned on wrong element not on dns",
  0
 ],
 [
  "static void help () {\tconsole.writeline ();\tconsole.writeline ();\tconsole.writeline ();",
  "error task in unknown state",
  1
 ],
 [
  "mounthelper.unmount(mounteddirname);\tdeletedir(mounteddirname, true);\t}\t}\telse {\t}\t}\tcatch (exception ex) {\ts_pass = false;\t}",
  "error loading client configuration file",
  1
 ],
 [
  "int binhexlen = 10;\tbyte[] binhex = new byte[binhexlen];\treloadsource(ereader_type.binhex_test);\tdatareader.positiononelement(st_elem_name4);\tdatareader.read();\tif (checkcanreadbinarycontent()) return test_pass;\tstring stractbinhex = \"\";\tfor (int i = 0; i < binhexlen; i = i + 2) {\tdatareader.readcontentasbinhex(binhex, i, 2);\tstractbinhex = (system.bitconverter.tochar(binhex, i)).tostring();",
  "actual exp",
  0
 ],
 [
  "public override void renderbegintag (htmltextwritertag tagkey) {",
  "renderbegintag",
  0
 ],
 [
  "static void help (string details) {",
  "usage sn q quiet options parameters",
  0
 ],
 [
  "public void groupbyonecolumnandfill () {\tvar dataitemscollection = createdataitems();\tvar reportsettings = new reportsettings();\treportsettings.groupcolumnscollection.add( new groupcolumn(\"groupitem\",1,listsortdirection.ascending));\tvar collectionsource = new collectiondatasource (list,reportsettings);\tcollectionsource.bind();\tint i = 0;\tforeach (var element in collectionsource.groupedlist) {",
  "key",
  0
 ],
 [
  "}\t}\tif (import) {\tx509stores stores = (machine ? x509storemanager.localmachine : x509storemanager.currentuser);\tx509certificatecollection trusted = stores.trustedroot.certificates;\tint additions = 0;\tforeach (x509certificate root in roots) {\tif (!trusted.contains (root)) {\tif (!confirmaddition || askconfirmation (\"add\", root)) {\tstores.trustedroot.import (root);",
  "certificate added",
  0
 ],
 [
  "}\tif (unknownarg != null) {\tconsole.writeline ();\treturn 1;\t}\tif (help) {\tconsole.writeline ();\treturn 0;\t}\tif (assembly == null) {",
  "testing marshalling boolean",
  1
 ],
 [
  "case \"-cy\": switch (args [i++].tolower ()) {\tcase \"authority\": if (bce == null) bce = new basicconstraintsextension ();\tbce.certificateauthority = true;\tbreak;\tcase \"end\": bce = null;\tbreak;\treturn -1;\treturn -1;\t}\tbreak;",
  "d unsupported option",
  0
 ],
 [
  "public void printbannerwithoutparameters () {",
  "welcome to the foo program",
  0
 ],
 [
  "public override void visit (membercore member) {",
  "void bar system console writeline",
  1
 ],
 [
  "private void dochecktimeout() {\tint currentmillis = environment.tickcount;\tif (currentmillis < timeoutoccursat) return;\tif (0 > timeoutoccursat && 0 < currentmillis) return;\t#if dbg if (runregex.debug) {\tdebug.writeline(\"\");",
  "timeout check frequency",
  0
 ],
 [
  "public static void main () {\tstring s = \"\";\tif (s.gettype ().isnullable ()) {",
  "aaa",
  0
 ],
 [
  "public void transformgeneric3(inputtype inputtype, readertype readertype, transformtype transformtype, doctype doctype) {\tstring expected = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?><result> 1.no value specified 2.no value specified 3.no value specified 4.no value specified 5.no value specified 6.no value specified</result>\";\tif (loadxsl(\"showparam.xsl\", inputtype, readertype) == 1) {\tfor (int i = 0; i < 100; i++) {\tif (transform(\"fruits.xml\", transformtype, doctype) != 1) {",
  "test failed to transform after iterations",
  0
 ],
 [
  "static staticconstructor4 () {\ttry {\tconsole.writeline (\"staticconstructor4.staticconstructor4 (1)\");\tdriver.mre1.set ();\tvar sw = stopwatch.startnew ();\tthread.sleep (1000);\tsw.stop ();\ttypeof (string).getmethods ();\tif (sw.elapsedmilliseconds < 900) throw new exception (\"bad abort broke our sleep\");",
  "waited",
  0
 ],
 [
  "if (node == null) throw new argumentnullexception (\"node\");\tname = node.attributes [\"name\"].value;\tversion = node.attributes  [\"version\"].value;\txmlnode atts = node.firstchild;\tattributes = new xmlattributes ();\tif (atts.name == \"attributes\") {\tattributes.loaddata (atts);\tatts = atts.nextsibling;\t}\tif (atts == null || atts.name != \"namespaces\") {",
  "error use either or pvk and cert",
  1
 ],
 [
  "continue;\t}\tdirectory.setcurrentdirectory (path.getdirectoryname (filename));\toutputs = new hashtable ();\ttry {\tstring tv = toolsversion;\tif (string.isnullorempty (tv)) tv = project.getmetadata (\"toolsversion\");\tif (!string.isnullorempty (tv) && engine.globalengine.toolsets [tv] == null) throw new unknowntoolsversionexception (tv);\tresult = buildengine2.buildprojectfile (filename, targets, global_properties, outputs, tv);\t} catch (invalidprojectfileexception e) {",
  "error reading resource file filename",
  1
 ],
 [
  "public void ipinfotest_accessallproperties_noerrors() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {",
  "nic",
  0
 ],
 [
  "boolean bf = (1 == 0);\tm_xsltarg.addextensionobject(\"myarg3\", bf);\tretobj = m_xsltarg.getextensionobject(\"myarg3\");\tif (!bf.equals(retobj)) {\tassert.true(false);\t}\tboolean bt = (1 == 1);\tm_xsltarg.addextensionobject(\"myarg4\", bt);\tretobj = m_xsltarg.getextensionobject(\"myarg4\");\tif (!bt.equals(retobj)) {",
  "end sub",
  1
 ],
 [
  "public static void dumpfeed(syndicationfeed f, string label) {\tstring path = path.combine(\"test\", label);\tf.lastupdatedtime = feedlib.fixedchangeddate;\tusing (xmltextwriter writer = new xmltextwriter(path + \".atom.xml\", null)) {",
  "unhandledexception caught",
  1
 ],
 [
  "int failcount = 0;\tsbyte origin = 10;\tdynamic d = origin;\tbyte origin2 = 20;\tdynamic d2 = origin2;\tvar c = new c() {\tf1 = d, p1 = d2 }\t;\tif ((c.f1 != origin) || (c.p1 != origin2)) {\tfailcount++;",
  "test failed conversion result is incorrect",
  0
 ],
 [
  "public void printbannerwithoutparameters () {",
  "orleans silo shutdown",
  1
 ],
 [
  "public workerrole() {",
  "verifying default parityreplace byte with a parity errro on the last byte",
  1
 ],
 [
  "cmd2.transaction = transaction;\tcmd2.commandtext = \"drop table blobtest\";\tcmd2.executenonquery ();\t}\tcatch (oracleexception) {\t}\toraclecommand create = connection.createcommand ();\tcreate.transaction = transaction;\tcreate.commandtext = \"create table blobtest (blob_column blob)\";\tcreate.executenonquery ();",
  "probably not setup for external authentication this is fine",
  1
 ],
 [
  "public void basictest_getipinterfacestatistics_success_osx() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfacestatistics stats = nic.getipstatistics();",
  "retrieved",
  1
 ],
 [
  "public static int main() {\ttype t = typeof (system.console);\ttype[] p= {typeof(string)};\tmethodinfo m = t.getmethod (\"writeline\", p);\tif (typeof(void) != m.returntype) {",
  "ignoring exception from stoptimer",
  1
 ],
 [
  "public void run_help () {\tvar o = new stringwriter ();\tvar e = new stringwriter ();\tvar showversion = false;\tvar showhelp    = false;\tvar git = new commandset (\"git\", output: o, error: e) {\t\"usage: git [--version] ... <command> [<args>]\", \"\", \"common options:\", { \"version\", \"show version info\", v => showversion = v != null }, { \"help\", \"show this message and exit\", v => showhelp = v != null }, \"\", \"these are common git commands used in various situations:\", \"\", \"start a working area (see also: git help tutorial)\", new command (\"clone\", \"clone a repository into a new directory\"), new command (\"init\",  \"create an empty git repository or reinitialize an existing one\"), new command (\"thisisaverylongcommandnameinordertoinducewrapping\", \"create an empty git repository or reinitialize an existing one. let's make this really long to cause a line wrap, shall we?\"), };\tvar expectedhelp = new stringwriter ();\texpectedhelp.writeline (\"\");",
  "version show version info",
  0
 ],
 [
  "public static void main() {",
  "hello world",
  0
 ],
 [
  "private void read(string filename) {\txmlserializer ser=new xmlserializer(typeof(xmlnode));\tfilestream fs=new filestream(filename, filemode.open);\txmlnode node;\tnode=(xmlnode)ser.deserialize(fs);\tfs.close();",
  "all test results",
  1
 ],
 [
  "static bool callsecondclassoperator() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturndynamicclass();\tif ( (!(bool)((s + 1) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "root",
  1
 ],
 [
  "using (var tcpclient = new tcpclient ()) {\ttry {\ttcpclient.connect (launchuri.host, launchuri.port);\tawait task.delay (timespan.fromseconds (1));\tbreak;\t} catch {\t}\t}\t}\tif (processtask.iscompleted) {",
  "failed to launch browser because process exited before server started listening",
  0
 ],
 [
  "return 0;\t}\telse if (args[2] == \"delete\") {\ttestserviceinstaller.removeservice();\treturn 0;\t}\telse {\treturn 2;\t}\t}",
  "usage servicename displayname create delete",
  0
 ],
 [
  "static void test2(x x) {",
  "drop table mono test",
  1
 ],
 [
  "static void help (string details) {\tswitch (details) {\tbreak;\tbreak;\tbreak;\tbreak;",
  "table locale",
  1
 ],
 [
  "static void main(string[] args) {\ttry {\tconfiguration config = configurationmanager.openexeconfiguration (configurationuserlevel.none);\tappsettingssection sect = (appsettingssection)config.getsection(\"appsettings\");\tconsole.writeline (sect.sectioninformation.getrawxml ());\tforeach (string key in sect.settings.allkeys) {\tconsole.writeline (\"settings[{0}] = {1}\", sect.settings[key].key, sect.settings[key].value);\t}\t}\tcatch (exception e) {",
  "handlertype trystart tryend handlerstart handlerend filterstart catchtype",
  1
 ],
 [
  "static asymmetricalgorithm privatekeyselection (x509certificate certificate, string targethost) {",
  "privatekeyselection",
  0
 ],
 [
  "needtorepeat = true;\tcontinue;\t}\telse {\tneedtorepeat = false;\t_current = principal;\treturn true;\t}\t}\telse {",
  "principalcollectionenumerator movenext resultset mode moving to insvaluescomp mode",
  0
 ],
 [
  "} else action = backgroundqueue.dequeue ();\t}\tif (wait) {\tbackgroundthreadwait.waitone ();\tcontinue;\t}\tif (action != null) {\ttry {\taction ();\t} catch (exception ex) {",
  "set",
  1
 ],
 [
  "protected override void onendload(bool successful, icollection errors) {\tthis.loading = false;\ttry {\tbase.onendload(successful, errors);\t} catch(exceptioncollection e) {\tforeach(exception ine in e.exceptions) {\t}\tthrow;\t} catch(exception e) {",
  "designerloader onendload error",
  0
 ],
 [
  "static void help () {\tconsole.writeline ();\tconsole.writeline ();\tconsole.writeline ();\tconsole.writeline ();",
  "error",
  1
 ],
 [
  "public bool run() {\tbool ok = false;\ttry {\tsilohost.initializeorleanssilo();\tok = silohost.startorleanssilo();\tif (ok) {",
  "successfully started orleans silo as a node",
  0
 ],
 [
  "#if debug if (adapterswitches.dataschema.tracewarning) {\t}\t#endif return tablemappings._items[index];\t}\t}\tif (string.isnullorempty(sourcetable)) {\tthrow adp.invalidsourcetable(nameof(sourcetable));\t}\tswitch (mappingaction) {\tcase missingmappingaction.passthrough: #if debug if (adapterswitches.dataschema.traceinfo) {",
  "toolboxservice gettoolboxitems category host",
  1
 ],
 [
  "if (platformid.unix == environment.osversion.platform) info.environmentvariables [\"mono_iomap\"] = \"drive\";\tpw = runtime.processservice.startprocess (info, sw, sw, null);\t} catch (system.componentmodel.win32exception ex) {\treturn new compilererror (fname, 0, 0, string.empty, ex.message);\t}\tpw.waitforoutput ();\tif (pw.exitcode == 0) {\tfname = path.changeextension (fname, \".resources\");\t} else {\tstring output = sw.tostring ();",
  "principal dispose disposing underlying object",
  1
 ],
 [
  "public test () : this (add8(4), 6) {\tstring hostname = system.net.dns.gethostname ();",
  "bad view hash offset size wrong underlying this",
  1
 ],
 [
  "resettooltipinformation ();\tif (ext == null) {\tlastparam = -2;\treturn;\t}\tvar ct = new cancellationtokensource ();\ttry {\tcancellationtokensource = ct;\tcurrenttooltipinformation = await parameterhintingdata.createtooltipinformation (ext.editor, ext.documentcontext, currentparam, false, ct.token);\t} catch (exception ex) {",
  "pragma warning restore",
  1
 ],
 [
  "public resolveresult resolve(filename filename, textlocation location, itextsource filecontent, icompilation compilation, cancellationtoken cancellationtoken) {\tvar entry = getfileentry(filename, true);\tif (entry.parser == null || location.isempty) return errorresolveresult.unknownerror;\tiproject project = compilation != null ? compilation.getproject() : null;\tvar parseinfo = entry.parse(filecontent, project, cancellationtoken);\tif (parseinfo == null) return errorresolveresult.unknownerror;\tif (compilation == null) compilation = getcompilationforfile(filename);\tresolveresult rr = entry.parser.resolve(parseinfo, location, compilation, cancellationtoken);",
  "result o s",
  1
 ],
 [
  "private delegate char[] readmethoddelegate(serialport com);\t#region test cases [fact]\tpublic void parityreplace_default_beforeopen() {\tusing (serialport com1 = new serialport()) {\tserialportproperties serportprop = new serialportproperties();",
  "verifying default parityreplace before open",
  0
 ],
 [
  "\");\t#if false foreach (functiondecl decl in functiondata) {\tstring returntype = decl.returntype.managedtypename;\ttr.write(\"        \" + returntype + \" \" + decl.functionname + \"(\");\ttr.write(\"intptr thishandle\");\tforeach (parameter param in decl.parameters) {\ttr.write(\", \");\ttr.write(param.type.managedtypename + \" \" + param.name);\t}\ttr.writeline(\")\");",
  "frompage",
  1
 ],
 [
  "static void main (string [] args) {\tif (!file.exists (\"genproj.cs\")) {\tenvironment.exit (1);\t}\tif (args.length == 1 && args [0].tolower ().contains (\"-h\")) {",
  "c compiler defect report created",
  1
 ],
 [
  "if (datareader.nodetype != xmlnodetype.element) {\tstring nodetype = datareader.nodetype.tostring();\tbool flag = true;\ttry {\tdatareader.readsubtree();\t}\tcatch (invalidoperationexception) {\tflag = false;\t}\tif (flag) {",
  "principalcollection remove urn urn no match",
  1
 ],
 [
  "static void dumpkeyinfoclause (keyinfoclause kic) {\tkeyinfoname kn = kic as keyinfoname;\tif (kn != null) {\treturn;\t}\tkeyinfox509data k509 = kic as keyinfox509data;\tif (k509 != null) {\tconsole.writeline (\"*** keyinfox509data ***\");",
  "did not return null for non existent parameter name",
  1
 ],
 [
  "public override void writeentry (string [] replacementstrings, eventlogentrytype type, uint instanceid, short category, byte [] rawdata) {\tlock (lockobject) {\tstring logdir = findlogstore (coreeventlog.log);\tint index = getlatestindex () + 1;\tstring logpath = path.combine (logdir, index.tostring (cultureinfo.invariantculture) + \".log\");\ttry {\tusing (textwriter w = file.createtext (logpath)) {",
  "got but expected",
  1
 ],
 [
  "private static void printoutstorageaccount(storagebundle storagebundle) {",
  "storage account auto regeneration enabled",
  0
 ],
 [
  "thread.sleep (timestampdelay);\t}\t}\tif (!ts) {\treturn 1;\t}\t} else {\thelp ();\treturn 1;\t}",
  "region",
  1
 ],
 [
  "xslcompiledtransform xslt = new xslcompiledtransform();\txslt.load(fullfilepath(\"identity.xsl\"));\tstringwriter sw = new stringwriter();\txslt.transform((ixpathnavigable)null, (xsltargumentlist)null, sw);\t}\tcatch (argumentnullexception) {\treturn;\t}\tcatch (exception e) {\t_output.writeline(e.tostring());",
  "test failed at conversion result",
  1
 ],
 [
  "public htmlwriter (textwriter writer, string tabstring) : base (writer, tabstring) {\tfull_trace = (environment.getenvironmentvariable (\"htmlwriter_fulltrace\") == \"yes\");\tstring file = environment.getenvironmentvariable (\"htmlwriter_file\");\tconsole.writeline (\"file: '{0}' (null? {1})\", file, file == null);\tif (file != null && file != \"\") {\toutput = new streamwriter (new filestream (file, filemode.openorcreate | filemode.append));",
  "sending log to",
  0
 ],
 [
  "sb = new stringbuilder ();\tsr = new streamreader (ms, encoding.utf8);\tline = sr.readline ();\twhile (line != null) {\tsb.append (line);\tsb.append (\"\\r\\n\");\tline = sr.readline ();\t}\t}\tsw = new stringwriter ();",
  "error loading certificate",
  1
 ],
 [
  "private static bool testandopwithsametypebutwrongreturntype2() {\tclearflags();\tdynamic d1 = new myopclasswitherrorreturntype2();\tdynamic d2 = new myopclasswitherrorreturntype2();\tdynamic dr = d1 && d2;\tif (dr.gettype() != typeof(myopclasswitherrorreturntype2)) {\treturn false;\t}\tif (dr != d1) {",
  "failed got wrong result",
  0
 ],
 [
  "if (string.isnullorempty(productcode)) { throw new argumentnullexception(\"productcode\"); }\tif (string.isnullorempty(productversion)) { throw new argumentnullexception(\"productversion\"); }\tif (string.isnullorempty(locale)) { throw new argumentnullexception(\"locale\"); }\tif (string.isnullorempty(sourcemedia)) { throw new argumentnullexception(\"sourcemedia\"); }\tif (!file.exists(sourcemedia)) { throw new filenotfoundexception(); }\tif (!regex.ismatch(productversion, @\"^\\d{3}$\", regexoptions.cultureinvariant | regexoptions.ignorecase)) { throw new argumentoutofrangeexception(\"productversion\"); }\tif (!regex.ismatch(locale, @\"^\\w{2}-\\w{2}\", regexoptions.cultureinvariant | regexoptions.ignorecase)) { throw new argumentoutofrangeexception(\"locale\"); }\tstring initls = (!help3environment.islocalstoreinitialized) ? string.format(\"/content \\\"{0}\\\"\", help3environment.buildlocalstorefolder):\"\";\tstring brandingswitch = (!string.isnullorempty(brandingpackage)) ? string.format(\"/brandingpackage \\\"{0}\\\"\", brandingpackage):\"\";\tstring arguments = string.format(\"/product {0} /version {1} /locale {2} /sourcemedia \\\"{3}\\\" {4} {5}\", productcode, productversion, locale, sourcemedia, initls, brandingswitch);",
  "helpviewer installing local help documents with",
  0
 ],
 [
  "public ienumerable foo (int a) {\ttry {\ttry {\tyield return a;\t} finally {\t}\ttry {\tyield return a * a;\t} finally {",
  "detected errors in the server certificate",
  1
 ],
 [
  "public void m() {\t#line 40 console.writeline(4);\t#line hidden console.writeline();",
  "c cs",
  0
 ],
 [
  "public int getextnobject2(object args) {\tobject retobj;\tfor (int i = 1; i <= 100; i++) {\tretobj = xsltarg1.getextensionobject(((object[])args)[1].tostring());",
  "test failed at call result",
  1
 ],
 [
  "if (myparameter3.value == dbnull.value) sinoutvalue = \"dbnull.value\";\telse {\tinoutvalue = (datetime)myparameter3.value;\tsinoutvalue = inoutvalue.tostring(\"yyyy-mm-dd hh:mm:ss\");\t}\tif (myparameter4.value == dbnull.value) sreturnvalue = \"dbnull.value\";\telse {\treturnvalue = (datetime)myparameter4.value;\tsreturnvalue = returnvalue.tostring(\"yyyy-mm-dd hh:mm:ss\");\t}",
  "value should be dbnull value",
  0
 ],
 [
  "public baseitem () {",
  "id",
  1
 ],
 [
  "}\tstring parm = parms[1];\ttry {\tinternalvariables.remove (parm);\t} catch(exception e) {\t}\t}\tpublic void showinternalvariable(string[] parms) {\tstring internalvariablevalue = \"\";\tif (parms.length != 2) {",
  "error wrong number of parameters",
  0
 ],
 [
  "if (htmlexception == null) filldefaulterrorvalues (true, true, ex, values);\telse {\tpagetype = exceptionpagetemplatetype.htmlized;\tfillhtmlizederrorvalues (values, htmlexception, ref pagetype);\t}\t}\treturn template.render (values, pagetype);\t} catch (exception ex) {\tconsole.error.writeline (ex);\tconsole.error.writeline ();",
  "eventlog completionstatuschanged aborting because we re already notifying",
  1
 ],
 [
  "}\tdbconnectionstringbuilder sb = factory.createconnectionstringbuilder ();\tif (!connectionstring.equals(string.empty)) sb.connectionstring = connectionstring;\tbool found = false;\tforeach (string key in sb.keys) {\tif (key.toupper().equals(\"password\") || key.toupper().equals(\"pwd\")) {\tstring pwd = getpasswordfromconsole ();\ttry {\tsb[key] = pwd;\t} catch(exception e) {",
  "usage genxs configfilename destinationpath",
  1
 ],
 [
  "public static void main () {",
  "trying to assign i to this x outside a method property or ctr",
  0
 ],
 [
  "public void getassemblyname_assemblyfile_badimage () {\tstring file = path.combine (tempdir, \"badimage.dll\");\tusing (streamwriter sw = file.createtext (file)) {",
  "somegarbage",
  0
 ],
 [
  "public override void endblock (ulong endcounter, datetime endtime, ulong threadid) {",
  "startblock endcounter endtime threadid",
  0
 ],
 [
  "protected override void onmousemove(system.windows.input.mouseeventargs e) {\tbase.onmousemove(e);\tvar point = e.getposition(this);",
  "webconfigurationmanager s lrucache size overriden to via",
  1
 ],
 [
  "public void testindexeraccess() {",
  "map file name is",
  1
 ],
 [
  "cerror.writelineignore(e.tostring());\tcerror.compare(w.writestate, (utils.writertype == writertype.charcheckingwriter) ? writestate.element : writestate.error, \"writestate should be error\");\treturn;\t}\tcatch (nullreferenceexception e) {\tcerror.writelineignore(e.tostring());\tcerror.compare(w.writestate, (utils.writertype == writertype.charcheckingwriter) ? writestate.element : writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "inputfile = args [i + 1];\ti += 2;\t} else if (args [i] == \"--mono-path\") {\tif (i + 1 >= args.length) {\treturn 1;\t}\tmono_path = args [i + 1].substring(0, args [i + 1].length);\ti += 2;\t} else if (args [i] == \"--mono-gac-prefix\") {\tif (i + 1 >= args.length) {",
  "creating pgsqlconnectioin",
  1
 ],
 [
  "private void emptystring() {\tusing (serialport com1 = tcsupport.initfirstserialport()) using (serialport com2 = tcsupport.initsecondserialport(com1)) {",
  "onclientactivate",
  1
 ],
 [
  "public void writenode_xmlreader28(xmlwriterutils utils) {\tstring strxml = \"<?xml version=\\\"1.0\\\" standalone=\\\"yes\\\"?><root />\";\txmlreader xr = createreader(new stringreader(strxml));\txr.read();\tif (xr.nodetype != xmlnodetype.xmldeclaration) {",
  "defect",
  1
 ],
 [
  "public static void main (string[] args) {\tprintersettings.stringcollection col = system.drawing.printing.printersettings.installedprinters;\tfor (int i = 0; i < col.count; i++) {\tconsole.writeline (\"--- {0}\", col[i]);\tprintersettings ps = new printersettings ();\tps.printername = col[i];",
  "resourcetoolkit looking in localized resource file",
  1
 ],
 [
  "static void listdescriptions () {\tprintglobalinfo ();\tforeach (policylevel pl in levels) {",
  "found basesection",
  1
 ],
 [
  "public async task closeasync_serverinitiatedclose_success(uri server) {\tconst string closewebsocketmetacommand = \".close\";\tusing (clientwebsocket cws = await websockethelper.getconnectedwebsocket(server, timeoutmilliseconds, _output)) {\tvar cts = new cancellationtokensource(timeoutmilliseconds);\tawait cws.sendasync( websocketdata.getbufferfromtext(closewebsocketmetacommand), websocketmessagetype.text, true, cts.token);\tvar recvbuffer = new byte[256];\twebsocketreceiveresult recvresult = await cws.receiveasync(new arraysegment<byte>(recvbuffer), cts.token);",
  "receiveasync done",
  0
 ],
 [
  "appcontext.setswitch(\"switch.system.xml.allowdefaultresolver\", true);\tstring expected = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?><result>123</result>\";\tstring filename = gettype().name + \"_\" + path.getrandomfilename();\tstring testfile = path.combine(path.gettemppath(), filename);\tstring xmlfile = fullfilepath(filename);\ttry {\tfile.copy(xmlfile, testfile, true);\t}\tcatch (exception e) {\t_output.writeline(e.tostring());",
  "available options",
  1
 ],
 [
  "try {\texecutioncommand executioncommand = createexecutioncommand (configuration, conf);\tif (!context.executionhandler.canexecute (executioncommand)) {\tmonitor.reporterror (gettextcatalog.getstring (\"can not execute \\\"{0}\\\". the selected execution mode is not supported for .net projects.\", filename), null);\treturn;\t}\tprocessasyncoperation asyncop = context.executionhandler.execute (executioncommand, console);\tvar stopper = monitor.cancellationtoken.register (asyncop.cancel);\tawait asyncop.task;\tstopper.dispose ();",
  "the application exited with code",
  0
 ],
 [
  "public void var6() {\t{\t#pragma warning disable 0618 new xsltransform().load((xmlreader)null, (xmlresolver)null, (evidence)null);\t#pragma warning restore 0618 }\tcatch (argumentnullexception) {\treturn;\t}\tcatch (exception e) {\t_output.writeline(e.tostring());",
  "output write",
  1
 ],
 [
  "dump (writer, df.monthnames, \"monthnames\");\tdump (writer, df.shortestdaynames, \"shortestdaynames\");\tvar ti = c.textinfo;\tvar nf = c.numberformat;\tdump (writer, nf.currencygroupsizes, \"currencygroupsizes\");\tdump (writer, nf.nativedigits, \"nativedigits\");\tdump (writer, nf.numbergroupsizes, \"numbergroupsizes\");\tdump (writer, nf.percentgroupsizes, \"percentgroupsizes\");\tif (!c.isneutralculture) {\tvar ri = new regioninfo (c.lcid);",
  "actions",
  1
 ],
 [
  "public void canwrite_open_basestreamclose() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tcom.open();\tstream serialstream = com.basestream;\tcom.basestream.close();",
  "q lists available tools",
  1
 ],
 [
  "private void checkrowversion(datarow dr) {\tconsole.writeline(\"\");",
  "serial number",
  1
 ],
 [
  "public static void testmethod() {\tthread.sleep(6000);",
  "with priority",
  0
 ],
 [
  "public override void added (xelement target, bool wasparentadded) {\tstring name = target.attribute (\"name\").value;\tvar namespacedescription  = $\"{name}: added namespace\";\tstate.logdebugmessage ($\"possible -n value: {namespacedescription}\");\tif (state.ignorenew.any (re => re.ismatch (namespacedescription))) return;\toutput.writeline ();\tforeach (var addedtype in target.element (\"classes\").elements (\"class\")) comparer.added (addedtype, true);",
  "div end namespace",
  0
 ],
 [
  "string received = sr.readtoend ();\tif (data.length != received.length) {\t} else {\tbool ok = true;\tfor (int i = 0; i < received.length; i++) {\tif (received[i] != 'a') {\tok = false;\tbreak;\t}\t}",
  "echo result ok length",
  0
 ],
 [
  "public void bug1771070_1771072_jobandpoollifetimestats() {\taction test = () => {\tusing (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {\tjobstatistics jobstatistics = batchcli.joboperations.getalllifetimestatistics();\tpoolstatistics poolstatistics = batchcli.pooloperations.getalllifetimestatistics();\tassert.notnull(jobstatistics);\tassert.notnull(poolstatistics);",
  "error loading install directory",
  1
 ],
 [
  "public void ipinfotest_accessallproperties_noerrors() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfaceproperties ipproperties = nic.getipproperties();\tassert.notnull(ipproperties);\tassert.notnull(ipproperties.anycastaddresses);\tforeach (ipaddressinformation anyaddr in ipproperties.anycastaddresses) {\t_log.writeline(\"-- \" + anyaddr.address.tostring());",
  "dns eligible",
  0
 ],
 [
  "if (!parseoptions (args)) {\theader ();\thelp ();\treturn 1;\t}\tif (!quiet) {\theader ();\t}\treturn process ();\t} catch (exception e) {",
  "error",
  0
 ],
 [
  "var unixprojfile = proj.csprojfilename.replace (\"\\\\\", \"/\");\tvar fullprojpath = path.getfullpath (unixprojfile).replace (\"\\\\\", \"/\");\tvar relativepath = msbuildgenerator.getrelativepath (slnfullpath, fullprojpath);\tvar dependencyguids = new string[0];\tif (proj.prebuildevent.contains (\"jay\")) dependencyguids = new [] { jay_vcxproj_guid };\tforeach (var fd in msbuildgenerator.fixed_dependencies) {\tif (fullprojpath.endswith (fd.item1)) {\tdependencyguids = dependencyguids.concat (fd.item2).toarray ();\t}\t}",
  "tests failed",
  1
 ],
 [
  "public static void main () {\tvar all = cultureinfo.getcultures (culturetypes.specificcultures | culturetypes.neutralcultures).orderby (l => l.lcid);\tconsole.outputencoding = encoding.utf8;\tvar writer = console.out;\tforeach (var c in all) {\tif (c.lcid == cultureinfo.invariantculture.lcid) continue;",
  "name lcid",
  0
 ],
 [
  "public static int main() {\tsystem.reflection.assembly asm = system.reflection.assembly.loadfrom(\"module-cctor.exe\");\ttype type = asm.gettype(\"ns.testclass\", true);\tsystem.reflection.fieldinfo field = type.getfield(\"testfield\");",
  "got but expected",
  1
 ],
 [
  "public void ipinfotest_accessallipv4properties_noerrors() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfaceproperties ipproperties = nic.getipproperties();",
  "load",
  1
 ],
 [
  "public void addmap (runtimeaddin addin, string xmlmap, string fileid) {\txmldocument doc = new xmldocument ();\tdoc.loadxml (xmlmap);\tforeach (xmlelement elem in doc.documentelement.selectnodes (\"dataitem\")) {\tstring tname = elem.getattribute (\"class\");\ttype type = addin.gettype (tname);\tif (type == null) {",
  "got but expected",
  1
 ],
 [
  "public static void main (string [] args) {\tif (args.length == 0 || args.length > 3) {\treturn;\t}\tstring filename = args [0];\tfileinfo file = new fileinfo (filename);\tif (!file.exists) {",
  "couldn t find file",
  0
 ],
 [
  "private void dumpmaparray (int [] array, int count, bool getcp) {\tif (array.length < count) throw new argumentoutofrangeexception (\"count\");\tfor (int i = 0; i < count; i++) {\tint value = array [i];\tif (value < 10) csout.write (\"{0}, \", value);\telse csout.write (\"0x{0:x}, \", value);\tcout.write (\"{0},\", value);\tif (i % 16 == 15) {\tint l = getcp ? nutil.mapcp (i) : i;",
  "xsltexception xpath scientificnotation was expected",
  1
 ],
 [
  "static partitionentrycountrequest() {\ttry {\tldapextendedresponse.register(replicationconstants.naming_context_count_res, system.type.gettype(\"novell.directory.ldap.extensions.partitionentrycountresponse\"));\t}\tcatch (system.exception e) {",
  "verifying calling open close methods after calling open and basestream close",
  1
 ],
 [
  "basepath.append(uri.segments[uri.segments.length - 1]);\tbasepath.replace(\"%20\", \" \");\tbasepath.replace(\"%00\", \"\");\turi seconduri = new uri(basepath.tostring());\tif (!file.exists(seconduri.localpath)) {\terrordialog.show(\"unable to open help file \" + uri.localpath + \" (also tried \" + seconduri.localpath + \")\", \"unable to open help file\", messageboxicon.error);\treturn;\t}\turi = seconduri;\t}",
  "click on failure row for more details br br",
  1
 ],
 [
  "public override void dodragdrop(idataobject dataobject, dragdropeffects effect) {\tif (dataobject.getdatapresent(typeof(filenode))) {\tfilenode other = (filenode)dataobject.getdata(typeof(filenode));\tif (!fileutility.isequalfilename(path.getdirectoryname(this.filename), path.getdirectoryname(other.filename))) {",
  "exception not generated for non existent file parameter name",
  1
 ],
 [
  "await grain.deactivateself();\tawait task.delay(3000);\tvar thrownexception = await record.exceptionasync(() => grain.getage());\tif (forwardcount != 0) {\tassert.null(thrownexception);\t}\telse {\tassert.notnull(thrownexception);\tassert.istype<orleansmessagerejectionexception>(thrownexception);\tassert.contains(\"non-existent activation\", thrownexception.message);",
  "the call after deactivateself has thrown non existent activation exception as expected since forwardcount is",
  0
 ],
 [
  "break;\treturn;\treturn;\t#endif }\tcon.connectionstring = constr;\ttry {\tcon.open();\t}\tcatch(sqlexception se) {\tforeach(sqlerror error in se.errors) {",
  "checking for updated profiles",
  1
 ],
 [
  "private void read(string filename) {\txmlserializer ser=new xmlserializer(typeof(dataset));\tfilestream fs=new filestream(filename, filemode.open);\tdataset ds;\tds=(dataset)ser.deserialize(fs);\tfs.close();\tforeach(datatable t in ds.tables) {",
  "table locale",
  0
 ],
 [
  "public static void parametertest2 (oracleconnection connection) {",
  "setting nls date format",
  0
 ],
 [
  "}\t}\ttry {\tcancellationtoken token = new cancellationtoken();\tif (_tasktype == tasktype.task) _task = task.factory.startnew(work, token, taskcreationoptions.none, tm);\telse if (_tasktype == tasktype.futuret) _task = task<double>.factory.startnew(futurework, token, taskcreationoptions.none, tm);\telse if (_tasktype == tasktype.future) _task = task.factory.startnew<double>(futurework, token, taskcreationoptions.none, tm);\tassert.true(false, string.format(\"able to pass {0} taskmanager to startnew() on {1}, when expecting exception\", tminvalidmessage, _tasktype));\t}\tcatch (argumentnullexception) {",
  "submitting task",
  1
 ],
 [
  "if ((console == null || externalconsole != null) && externalconsolehandler != null) {\tvar dict = new dictionary<string,string> ();\tif (environmentvariables != null) foreach (var kvp in environmentvariables) dict[kvp.key] = kvp.value;\tif (environmentvariableoverrides != null) foreach (var kvp in environmentvariableoverrides) dict[kvp.key] = kvp.value;\tvar p = externalconsolehandler (command, arguments, workingdirectory, dict, externalconsole?.title ?? gettextcatalog.getstring (\"{0} external console\", brandingservice.applicationname), externalconsole != null ? !externalconsole.closeondispose : false);\tif (p != null) {\tif (exited != null) p.task.continuewith (t => exited (p, eventargs.empty), runtime.maintaskscheduler);\tcounters.processesstarted++;\treturn p;\t} else {",
  "could not create external console for command",
  0
 ],
 [
  "} catch (optionexception e) {\tshowhelp = true;\t}\tif (extra.count > 0 && extra[0] == \"store-symbols\") cmd = new command (storesymbolsaction, 2);\tif (cmd != null) {\textra.removeat (0);\t} else {\tcmd = new command (symbolicateaction, 2, 2);\t}\tif (showhelp || extra == null || extra.count < cmd.minargcount || extra.count > cmd.maxargcount) {",
  "symbolicate options store symbols msym dir dir",
  0
 ],
 [
  "static void help () {",
  "list ignore the file listing ignored defects entries for your project",
  0
 ],
 [
  "public void pinchangedevent_multiple() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (serialport com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\tpinchangedeventhandler eventhandler = new pinchangedeventhandler(com1);\teventhandler.eventfilter = eventtype => eventtype != serialpinchange.cdchanged;\tserialpinchangedeventhandler pinchangedeventhandler = eventhandler.handleevent;",
  "verifying multiple pinchangedevents",
  0
 ],
 [
  "public static void main (string[] args) {\tint total = 0;\tbatchcompiler bc = newbatchcompiler ();\tforeach (string src in directory.getfiles (\".\", \"*.il\")) {\tif (bc.compile (src)) ++total;\tbc = newbatchcompiler ();\t}",
  "hello world",
  1
 ],
 [
  "public void basictest_accessinstanceproperties_noexceptions() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {",
  "assembly loaded",
  1
 ],
 [
  "static void main(string[] args) {\ttry {\tsystem.configuration.configuration config = configurationmanager.openexeconfiguration (configurationuserlevel.none);\tconfigurationsection connstrings = config.connectionstrings;\tconsole.writeline (\"connstrings[localsqlserver] = {0}\", ((connectionstringssection)connstrings).connectionstrings[\"localsqlserver\"]);\tconnstrings.sectioninformation.unprotectsection ();\tconnstrings.sectioninformation.forcesave = true;\tconfig.saveas (\"t27.exe.config\", configurationsavemode.full);\tif (connstrings.sectioninformation.isprotected == true) console.writeline (\"section {0} is now protected by {1}\", connstrings.sectioninformation.name, connstrings.sectioninformation.protectionprovider.name);",
  "section is not protected",
  0
 ],
 [
  "private void ontimer(object state) {",
  "did not throw exception",
  1
 ],
 [
  "static ienumerator getit (int [] args) {\tforeach (int arg in args) {",
  "out",
  0
 ],
 [
  "public void stopthread() {",
  "wde debugcontrollerthread stopthread",
  0
 ],
 [
  "appdomaininitializer = initsilo, appdomaininitializerarguments = args, });\tvar config = clientconfiguration.localhostsilo();\tgrainclient.initialize(config);\tvar grain = grainclient.grainfactory.getgrain<iperson>(0);\tvar name = grain.getfirstname().result;\tif ( name != null) {\t}\telse {\tgrain.setpersonalattributes(new personalattributes { firstname = \"john\", lastname = \"doe\", gender = gendertype.male }).wait();\t}",
  "orleans silo is running press enter to terminate",
  0
 ],
 [
  "var referencedproject = pr as monodevelop.projects.dotnetproject;\tif (referencedproject == null) continue;\tif (typesystemservice.isoutputtrackedproject (referencedproject)) {\tvar filename = referencedproject.getoutputfilename (configurationselector);\tif (!hashset.add (filename)) continue;\tvar metadatareference = metadatareferencecache.loadreference (projectid, filename);\tif (metadatareference != null) result.add (metadatareference);\t}\t}\t} catch (exception e) {",
  "error while getting referenced projects",
  0
 ],
 [
  "try {\tw.writedoctype(\"doc1\", null, null, \"<!entity e 'abc'>\");\tw.writedoctype(\"doc2\", null, null, \"<!entity f 'abc'>\");\t}\tcatch (invalidoperationexception e) {\tcerror.writelineignore(e.tostring());\tcerror.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "class foo sub bar a as boolean b as boolean console writeline not a and b end sub end class class foo sub bar a as boolean b as boolean console writeline not a or not b end sub end class",
  1
 ],
 [
  "private void emithandle(recorddef record) {\tstring handlename = $\"{record.name}handle\";\topenscope($\"public partial struct {handlename}\");\topenscope(\"public override bool equals(object obj)\");\twriteline($\"    return _value == (({handlename})obj)._value;\");\twriteline(\"    return _value == ((handle)obj)._value;\");",
  "return false",
  0
 ],
 [
  "var si = source.element (\"classes\");\tif (si != null) {\tvar ti = target.element (\"classes\");\tkcomparer = new nestedclasscomparer ();\tkcomparer.compare (si.elements (\"class\"), ti == null ? null : ti.elements (\"class\"));\t}\tvar s = (output as stringwriter).tostring ();\tstate.output = output;\tif (s.length > 0) {\tvar tn = gettypename (target);",
  "type changed",
  0
 ],
 [
  "string[] items = line.split(s_whitespacechars, stringsplitoptions.removeemptyentries);\tif (items.length == 0) {\treturn null;\t}\tif (items.length != 2) {\treturn null;\t}\tstring name = items[1];\tipaddress address;\tif (!ipaddress.tryparse(items[0], out address)) {",
  "wrong entry in the hosts file cannot parse the ip address line",
  0
 ],
 [
  "public void conditionaldebug () {",
  "debug",
  0
 ],
 [
  "public static void creategenerictestfile(string strfilename) {\tfilepathutil.addstream(strfilename, new memorystream());\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"no\\\"?>\");\ttw.writeline(\"<!-- comment1 -->\");\ttw.writeline(\"<?pi1a?>\");\ttw.writeline(\"<?pi1b?>\");\ttw.writeline(\"<?pi1c?>\");",
  "element catmixed pcdata",
  0
 ],
 [
  "public void xmllang_2() {\txdocument doc = new xdocument();\txmlwriter w = createwriter(doc);\tw.writestartelement(\"root\");\tif (w.xmllang != null) {\tw.dispose();",
  "default value if no xml lang attributes are currently on the stack should be null",
  0
 ],
 [
  "public static int main (string[] args) {\tlocation.inemacs = environment.getenvironmentvariable (\"emacs\") == \"t\";\tcommandlineparser cmd = new commandlineparser (console.out);\tvar settings = cmd.parsearguments (args);\tif (settings == null) return 1;\tif (cmd.hasbeenstopped) return 0;\tdriver d = new driver (new compilercontext (settings, new consolereportprinter ()));\tif (d.compile () && d.report.errors == 0) {\tif (d.report.warnings > 0) {",
  "compilation succeeded warning s",
  0
 ],
 [
  "static void change_question_answer (string username, string pwd, string question, string answer) {",
  "success",
  0
 ],
 [
  "public static void createutf8encodedtestfile(string strfilename, encoding encode) {\tstream strm = new memorystream();\ttextwriter tw = new streamwriter(strm, encode);\ttw.write(\"\\u00a9\");",
  "root",
  0
 ],
 [
  "private async task<bool> processhttp(func<string, task<string>> httpconversation) {\twhile (true) {\tvar requestbuffer = new byte[2048];\tint bytesread = await stream.readasync(requestbuffer, 0, requestbuffer.length).configureawait(false);\tstring requeststring = encoding.utf8.getstring(requestbuffer, 0, bytesread);",
  "threw the following exception",
  1
 ],
 [
  "help ();\treturn 1;\t}\tconfig_file = args [++i];\tbreak;\tcase \"--machine-config\": if (i+1 == top) {\thelp ();\treturn 1;\t}\tmachine_config_file = args [++i];",
  "warning check that the machine config file you are bundling doesn t contain sensitive information specific to this machine",
  0
 ],
 [
  "public int testresolveentitynodetype_endentity() {\tif (isxsltreader() || isxmltextreader() || isxmlnodereaderdatadoc() || iscorereader() || isxpathnavigatorreader()) return test_skipped;\treloadsource();\tif (findnodetype(xmlnodetype.endentity) == test_pass) {\ttry {\tcerror.writeline(datareader.nodetype);\tdatareader.resolveentity();",
  "principalvaluecollection removeat removing original",
  1
 ],
 [
  "static void runapplication() {\t#if debug try {\tconsole.outputencoding = system.text.encoding.default;\t} catch (ioexception) {\t}",
  "starting sharpdevelop",
  0
 ],
 [
  "static void usage () {",
  "run sim",
  0
 ],
 [
  "public static void threadmethod_waiter_2() {",
  "thread b i m before wait for event",
  0
 ],
 [
  "break;\t}\t}\ti--;\terr = 0;\t}\tcatch (exception e) {\terr = i;\t}\tfinally {",
  "connection established and closed ssl",
  0
 ],
 [
  "static bool askconfirmation (string action, x509certificate certificate) {\tconsole.writeline ();",
  "timer fired at mm ss ffffff",
  1
 ],
 [
  "}\tbreak;\tcase \"-b\": notbefore = datetime.parse (args [i++] + \" 23:59:59\", cultureinfo.invariantculture);\tbreak;\tcase \"-cy\": switch (args [i++].tolower ()) {\tcase \"authority\": if (bce == null) bce = new basicconstraintsextension ();\tbce.certificateauthority = true;\tbreak;\tcase \"end\": bce = null;\tbreak;",
  "both error no more supported in x",
  0
 ],
 [
  "public void logfatalbuilderror (msbuildcontext buildeventcontext, exception e, string projectfile) {",
  "error",
  1
 ],
 [
  "static bool confirm () {\tif (policychangesconfirmation) {\tstring answer = console.readline ();\tswitch (answer.toupper ()) {\tcase \"yes\": case \"y\": return true;",
  "change aborted",
  0
 ],
 [
  "var q6 = from o in db.orders where o.customer.city == \"london\" select new { c = o.customer, o };\tforeach (var v in q4) objectdumper.write(v);\tconsole.readline();\tconsole.clear();\tforeach (var v in db.orders) objectdumper.write(v);\tconsole.readline();\tconsole.clear();\tdb.orders.deleteonsubmit(db.orders.first());\tdb.submitchanges();\tforeach (var v in db.orders) objectdumper.write(v);",
  "press enter to continue",
  0
 ],
 [
  "public static flowcontrolcapabilities measureflowcontrolcapabilities(string portname) {\tfor (int probebase = 1; probebase <= 65536; probebase *= 2) {\tint probelength;\tprobelength = probebase + 1;\tint buffersize = measuretransmitbuffersize(portname, probelength);\tif (buffersize < probelength) {",
  "found blocking packet of length hardware buffer",
  0
 ],
 [
  "private static void dumpdatarow(datarow datarow, datatable datatable) {\tconsole.writeline(\" \");",
  "input",
  1
 ],
 [
  "static void help (string details) {\tswitch (details) {\tbreak;\tbreak;\tbreak;",
  "using system collections generic",
  1
 ],
 [
  "cmd = null;\toraclecommand command = new oraclecommand(\"testtablepkg.getdata\", connection);\tcommand.commandtype = commandtype.storedprocedure;\toracleparameter parameter = new oracleparameter(\"tablecursor\", oracletype.cursor);\tparameter.direction = parameterdirection.output;\tcommand.parameters.add(parameter);\tcommand.executenonquery();\toracledatareader reader = (oracledatareader) parameter.value;\tint r = 0;\twhile (reader.read()) {",
  "row",
  0
 ],
 [
  "public idisposable subscribe(iobserver<searchedfile> observer) {",
  "parallel findall starting",
  0
 ],
 [
  "private static bool inforstatement1() {\tint failcount = 0;\tc origin = new c(1);\tdynamic d = origin;\tfor (; d;) {\tfailcount++;",
  "test failed conversion result is incorrect",
  0
 ],
 [
  "public async task simplevoidtaskmethod() {",
  "before",
  0
 ],
 [
  "public static int main() {\ttestclass ts = new testclass ();\tts.conditionalmethod ();",
  "succeeded",
  0
 ],
 [
  "public void breakstate_true() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "verifying true breakstate",
  0
 ],
 [
  "static void help () {",
  "usage gendarme config file set ruleset log xml html file assemblies",
  0
 ],
 [
  "task<double> promise = task.run( () => testonestream(streamid, streamprovidername, numproducers, numconsumers, nummessages, usefanout));\tpromises.add(promise);\tif (!usefanout) {\tawait promise;\t}\t}\tif (usefanout) {\t}\tdouble rps = (await task.whenall(promises)).sum();\tpromises.clear();",
  "error expected canonicalization of to be but it was",
  1
 ],
 [
  "}\tstrxml = \"<root><![cdata[test]]></root>\";\tbreak;\tcase \"text\": strxml = \"<root>test</root>\";\tbreak;\tcase \"processinginstruction\": strxml = \"<root><?pi test?></root>\";\tbreak;\tcase \"comment\": strxml = \"<root><!-- comment --></root>\";\tbreak;\tcase \"entityreference\": if (!readersupportsentityref()) {",
  "got but expected",
  1
 ],
 [
  "public void id_issystem() {\tgrainid testgrain = orleans.runtime.constants.directoryserviceid;\tassert.true(testgrain.issystemtarget);\tgrainid sgrain = (grainid)this.environment.serializationmanager.deepcopy(testgrain);\tassert.true(sgrain.issystemtarget);\tassert.equal(testgrain, sgrain);\tassert.same(testgrain, sgrain);\tactivationid testactivation = activationid.getsystemactivation(testgrain, siloaddress.new(new ipendpoint(ipaddress.loopback, 2456), 0));",
  "testing activationid",
  0
 ],
 [
  "static private void help () {\tconsole.writeline ();",
  "credentials",
  1
 ],
 [
  "static bool callsecondclassoperator() {\tint failcount = 0; verify.firstcalled = false;\tif ( (!(bool)(((dynamic)firstclassreturnclass.staticmethod()) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public static void dataadaptertest2_insert (oracleconnection con) {\tconsole.writeline(\"================================\");\tconsole.writeline(\"=== adapter insert =============\");\tconsole.writeline(\"================================\");\toracletransaction transaction = con.begintransaction ();\toracledataadapter da = new oracledataadapter(\"select * from mono_adapter_test\", con);\tda.selectcommand.transaction = transaction;\toraclecommandbuilder mycb = new oraclecommandbuilder(da);\tdataset ds = new dataset();\tda.fill(ds, \"mono_adapter_test\");",
  "added value retrieved value",
  1
 ],
 [
  "break;\tcase \"file_extensions\": foreach (var nn in entry.value.allnodes.oftype<yamlscalarnode> ()) {\textensions.add (\".\" + nn.value);\t}\tbreak;\tcase \"scope\": scope = ((yamlscalarnode)entry.value).value;\tbreak;\tcase \"hidden\": try {\thidden = bool.parse (((yamlscalarnode)entry.value).value);\t} catch (exception e) {",
  "error while parsing hidden flag of",
  0
 ],
 [
  "xdocument doc = new xdocument();\tusing (xmlwriter w = createwriter(doc)) {\ttry {\tw.writefullendelement();\t}\tcatch (invalidoperationexception) {\ttestlog.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "stack bit",
  1
 ],
 [
  "public void displaydatasimple (idatareader reader) {\tint row = 0;\twhile (reader.read ()){\trow++;\tfor (int col = 0; col < reader.fieldcount; col++) {\tint co = col + 1;\tstring dname = (string) reader.getname (col);\tif (dname == null) dname = \"?column?\";\tif (dname.equals (string.empty)) dname = \"?column?\";",
  "completed ok",
  1
 ],
 [
  "using (mockcontext context = mockcontext.start(this.gettype().fullname)) {\tvar resourcesclient = resourcesmanagementtestutilities.getresourcemanagementclientwithhandler(context, handler1);\tvar networkmanagementclient = networkmanagementtestutilities.getnetworkmanagementclientwithhandler(context, handler2);\tvar location = networkmanagementtestutilities.getresourcelocation(resourcesclient, \"microsoft.network/virtualnetworkgateways\");\tstring resourcegroupname = testutilities.generatename(\"csmrg\");\tresourcesclient.resourcegroups.createorupdate(resourcegroupname, new resourcegroup {\tlocation = location });\tstring publicipname1 = testutilities.generatename();\tstring domainnamelabel1 = testutilities.generatename();\tvar nic1publicip1 = testhelper.createdefaultpublicipaddress(publicipname1, resourcegroupname, domainnamelabel1, location, networkmanagementclient);",
  "publicipaddress gateway ip",
  0
 ],
 [
  "public static void main () {\tfieldinfo fi = typeof (dec).getfield (\"minvalue\");\tdecimal d = (decimal) fi.getvalue (fi);",
  "xmlschemadataobject did not find element in the schema",
  1
 ],
 [
  "public void validationcallback(object sender, validationeventargs args) {\tif (args.severity == xmlseveritytype.warning) {",
  "thread running",
  1
 ],
 [
  "public static void main () {\ty y = new y ();\tint result = y.hello ();\tif (result == 2) console.writeline (\"ok\");",
  "byte",
  1
 ],
 [
  "static byte [] faultresponse_qualified (socket socket) {\tstring responsecontent = \"<soap:envelope xmlns:soap=\\\"http: \"  <soap:body>\" + \"    <soap:fault>\" + \"      <soap:faultcode>soap:server</soap:faultcode>\" + \"      <soap:faultstring>failure processing request.</soap:faultstring>\" + \"      <soap:faultactor>mono web service</soap:faultactor>\" + \"      <soap:detail>\" + \"        <se:systemerror xmlns:se=\\\"http: \"          <se:code>5000</se:code>\" + \"          <se:description>invalid credentials.</se:description>\" + \"        </se:systemerror>\" + \"      </soap:detail>\" + \"    </soap:fault>\" + \"  </soap:body>\" + \"</soap:envelope>\";\tstringwriter sw = new stringwriter ();",
  "entity e system",
  1
 ],
 [
  "public void addextobject13() {\tmyobject obj = new myobject(13, _output);\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addextensionobject(szdefaultns, obj);\ttry {\tm_xsltarg.addextensionobject(szdefaultns, obj);\t}\tcatch (system.argumentexception) {\treturn;\t}",
  "did not exception for adding an extension object that already exists",
  0
 ],
 [
  "public void inbufferfilled_flush_cycle() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (serialport com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\tbyte[] xmitbytes = new byte[default_buffer_size];",
  "execute returns",
  1
 ],
 [
  "public int instancetest () {\tdouble index = 5;",
  "instance test",
  0
 ],
 [
  "public delegate void eventhandler (int i, int j);\tpublic class button {\tprivate eventhandler click;\tpublic event eventhandler click {\tadd    { click += value; }\tremove { click -= value; }\t}\tpublic void onclick (int i, int j) {\tif (click == null) {",
  "failed long long",
  1
 ],
 [
  "public virtual bool check() {\tbool retval = true;\tif (size > array.length) {",
  "bad size array length",
  0
 ],
 [
  "private void tmexceptiontesthelper(taskscheduler tm, string tminvalidmessage) {\tif (_tasktype != tasktype.promise) {\tif (_tasktype != tasktype.future) {\ttry {\t_task = createtaskhelper();\t_task.start(tm);\tassert.true(false, string.format(\"able to pass {0} taskmanager to start() on {1}, when expecting exception\", tminvalidmessage, _tasktype));\t}\tcatch (argumentnullexception) {",
  "closing tag does not match any currently open tag",
  1
 ],
 [
  "public static void thread() {\tthread.sleep(500);\tthread.sleep(500);\tthread.currentthread.isbackground = true;",
  "thread running",
  0
 ],
 [
  "test<removebracescoderefactoringprovider>(@\"class testclass {\tvoid test() {\tif (true) {\t} $else {\t}\t}\t}\", @\"class testclass {\tvoid test() {\tif (true) {\t}",
  "test failed at call result",
  1
 ],
 [
  "assert.true(comptc.maxtaskretrycount.hasvalue);\tassert.equal(99, comptc.maxtaskretrycount.value);\t}\ttaskexecutioninformation tei = mycompletedtask.executioninformation;\tassert.notnull(tei);\tif (null == tei) {\t}\telse {\tthis.testoutputhelper.writeline(\"\");\t}",
  "stats",
  0
 ],
 [
  "private void generategetserializer(hashtable serializers, xmlmapping[] xmlmappings) {\t_writer.write(\"public override \");\t_writer.write(typeof(system.xml.serialization.xmlserializer).fullname);\t_writer.write(\" getserializer(\");\t_writer.write(typeof(type).fullname);",
  "type",
  0
 ],
 [
  "public delegate int delegateb (int i);\tstatic delegatea dt;\tstatic delegateb dt2;\tpublic static int main () {\tbool b = delegatemethod == dt;\tif (b) return 1;\tb = delegatemethod != dt;\tif (!b) return 2;\tb = dt2 == delegatemethod;\tif (b) return 3;",
  "ok",
  0
 ],
 [
  "public nantpadcontent() {",
  "nantpadcontent ctor",
  0
 ],
 [
  "int origbaudrate = com1.baudrate;\tcom2.baudrate = 115200;\tcom1.baudrate = 115200;\tfor (int j = 0; j < 1; j++) {\tcom2.write(xmitbytes, 0, xmitbytes.length);\tcom2.write(xmitbytes, xmitbytes.length / 2, xmitbytes.length / 2);\ttcsupport.waitforreadbuffertoload(com1, newbytestoread);\tthread.sleep(250);\tserportprop.setproperty(\"bytestoread\", newbytestoread);\tserportprop.setproperty(\"baudrate\", 115200);",
  "trackedcollection clear",
  1
 ],
 [
  "string [] list = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\" };\tint top = 0;\tforeach (string s in tester){\tif (s != list [top]){\treturn 1;\t}\ttop++;\t}\tif (top != list.length){\t}",
  "success",
  0
 ],
 [
  "throw new argumentexception(sr.format(sr.invalidparameter, nameof(machinename), machinename));\t}\tif (logname == null || logname.length == 0) logname = \"application\";\tif (!validlogname(logname, false)) throw new argumentexception(sr.badlogname);\tif (source == null || source.length == 0) throw new argumentexception(sr.format(sr.missingparameter, nameof(source)));\tif (source.length + eventlogkey.length > 254) throw new argumentexception(sr.format(sr.parametertoolong, nameof(source), 254 - eventlogkey.length));\tmutex mutex = null;\truntimehelpers.prepareconstrainedregions();\ttry {\tsharedutils.entermutex(eventlogmutexname, ref mutex);",
  "createeventsource calling sourceexists",
  0
 ],
 [
  "public void showhelp () {",
  "missingtotal",
  1
 ],
 [
  "private static bool test1() {\tlong[] longvalues = new long[]\t{\tlong.minvalue, long.minvalue, 0 }\t;\tforeach (long a1 in longvalues) {\tdynamic d1 = a1;\tif ((d1 < 10) != (a1 < 10)) {",
  "failed long long",
  0
 ],
 [
  "public void trycatchmultiplehandlers() {\ttry {",
  "bytesreceived",
  1
 ],
 [
  "public static int main() {\ttry {\ttry {\ttrivialmain();\t}\tfinally {\t}\t}\tcatch(exception) {",
  "err verifying call discard method several times after input buffer has been filled failed",
  1
 ],
 [
  "return false;\t}\tif (offset + size > underlyingsize) {\treturn false;\t}\tif (offset < 0) {\treturn false;\t}\tfor (int i = 0; i < underlyingsize; i++) {\tif ((object)(array[i]) == null) {",
  "executing transform",
  1
 ],
 [
  "static void help () {",
  "assert areequal mtp verifyescapechar",
  1
 ],
 [
  "public override void run() {",
  "orleansazureweb run",
  0
 ],
 [
  "private void workwithnolocalstate(long i, parallelloopstate state) {",
  "a b",
  1
 ],
 [
  "if(monitor.tryenter(thr, 100)==true) {\tmonitor.exit(thr);\t} else {\t}\tthread.setdata(slot, main);\tthread storedthr=(thread)thread.getdata(slot);\tthread.setdata(namedslot, main);\tstoredthr=(thread)thread.getdata(namedslot);\tif(thr.join(5000)) {\t} else {",
  "didn t join thread",
  0
 ],
 [
  "public void testremovebracesfromelse() {\ttest<removebracesaction>(@\"class testclass {\tvoid test () {\tif (true) {\t} $else {",
  "world",
  0
 ],
 [
  "private static bool callsecondclassinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturndynamicclass<int>();\tif ((!(bool)(s.instancemethod().instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public bool onclientmouseclick (mouseinfo mouseinfo, modifierkeys modifiers, nsidomnode target) {\t#if debug ongeneric (\"onclientmouseclick\");",
  "orleansazureweb onstop",
  1
 ],
 [
  "private static int main(string[] args) {\tfor (int i = 0; i < num_iterations; i++) {",
  "invalidating",
  1
 ],
 [
  "if (!method.hasbody) return ruleresult.doesnotapply;\tif (!mask.intersect (opcodeengine.getbitmask (method))) return ruleresult.doesnotapply;\tlog.writeline (this);\tlog.writeline (this, \"---------------------------------------\");\tlog.writeline (this, method);\tforeach (instruction ins in method.body.instructions) {\tswitch (ins.opcode.code) {\tcase code.call: case code.callvirt: methodreference target = ins.operand as methodreference;\tstring define = avoidmethodswithsideeffectsinconditionalcoderule.conditionalon (target);\tif (define != null) {",
  "call to method at",
  0
 ],
 [
  "public static void main (string[] argv) {\tforeach (string arg in argv) {",
  "error while updating razor completion",
  1
 ],
 [
  "static int main () {\ttest t1 = new test ();\tobjref myref = remotingservices.marshal (t1, \"/test\");\tstring url = \"simple: string uri;\tsimplechannel chnl = new simplechannel (8000);\tchannelservices.registerchannel (chnl);",
  "channel priority",
  0
 ],
 [
  "oraclelob lob = reader.getoraclelob (0);\tif (file.exists(infilename) == false) {\treturn;\t}\tfilestream fs = new filestream(infilename, filemode.open, fileaccess.read);\tbinaryreader r = new binaryreader(fs);\tbyte[] bytes = null;\tint bufferlen = 8192;\tbytes = r.readbytes (bufferlen);\twhile(bytes.length > 0) {",
  "byte count",
  0
 ],
 [
  "int i = 8;\tm_xsltarg.addextensionobject(\"myarg2\", i);\tretobj = m_xsltarg.getextensionobject(\"myarg2\");\tif (!i.equals(retobj)) {\tassert.true(false);\t}\tif (i != (int)retobj) assert.true(false);\tboolean bf = (1 == 0);\tm_xsltarg.addextensionobject(\"myarg3\", bf);\tretobj = m_xsltarg.getextensionobject(\"myarg3\");",
  "verifying bytestoread with readline",
  1
 ],
 [
  "public static ienumerable<string> yieldreturnwithtwononnestedfinallyblocks(ienumerable<string> input) {\tforeach (string line in input) {\ttry {\tyield return line;\t} finally {",
  "catch",
  1
 ],
 [
  "private static bool callsecondinterfaceinstanceproperty() {\tint failcount = 0;\tdynamic d = new firstclassreturninterface();\tverify.firstcalled = false;\tif ((!(((d + 1)).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public static int main() {\twaitsubsystemtests.doublesetoneventwithtimedoutwaitershouldnotstayinwaiterslist();",
  "verifying default discardnull with readline",
  1
 ],
 [
  "protected override void renderendtag (htmltextwriter w) {",
  "over",
  1
 ],
 [
  "public void writeafterclose() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {",
  "verifying write method throws exception after a call to cloes",
  0
 ],
 [
  "public override void exception (lc c, ulong counter) {",
  "exception",
  0
 ],
 [
  "#if debug if (adapterswitches.dataschema.traceinfo) {\t}\t#endif return columnmappings._items[index].getdatacolumnbyschemaaction(datatable, datatype, schemaaction);\t}\t}\tif (string.isnullorempty(sourcecolumn)) {\tthrow adp.invalidsourcecolumn(nameof(sourcecolumn));\t}\tswitch (mappingaction) {\tcase missingmappingaction.passthrough: #if debug if (adapterswitches.dataschema.traceinfo) {",
  "client authenticated to server with encryption cipher bit strength",
  1
 ],
 [
  "public override void writefullbegintag (string tagname) {",
  "hello",
  1
 ],
 [
  "public void test () {\tint a = 1;\tfor (int i = a; i < 10; i++){\tint j = i;\tt = delegate {",
  "before",
  0
 ],
 [
  "private static bool callsecondinterfaceindexer() {\tint failcount = 0;\tdynamic d = new firstclassreturninterface();\tverify.firstcalled = false;\tif ((!(((secondinterface)d.instancemethod())[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "private void displayprettyprintedcontent(isignature sigtorender) {\tdebug.assert(sigtorender.prettyprintedcontent != null, \"we shouldn't try to display null prettyprintedcontent.\");\t_signaturetextbuffer.properties[signaturehelpparameterboldingclassfier.useprettyprintedcontentkey] = true;\t_signaturetextbuffer.replace(new span(0, _signaturetextbuffer.currentsnapshot.length), sigtorender.prettyprintedcontent);\tvar classifierspans = platformcatalog.instance.classifieraggregatorservice.getclassifier(_signaturetextbuffer)?.getclassificationspans(new snapshotspan(_signaturetextbuffer.currentsnapshot, 0, _signaturetextbuffer.currentsnapshot.length));\tif (classifierspans != null && classifierspans.count > 0) _signaturewpftextview.markup = mdutils.classificationstomarkup(_signaturetextbuffer.currentsnapshot, classifierspans, sigtorender.currentparameter);\telse {\t_signaturewpftextview.markup = monodevelop.ide.typesystem.ambience.escapetext(_signaturetextbuffer.currentsnapshot.gettext());",
  "no classification spans found for signature helper",
  0
 ],
 [
  "static int method2 (type t, type [] types) {",
  "ok",
  1
 ],
 [
  "if ((null != _dataset) && null == _datatable.dataset) {\tadditemtoallowrollback(ref addeditems, _datatable);\t_dataset.tables.add(_datatable);\t}\tif (addprimarykeys && (null != keys)) {\tif (keycount < keys.length) {\tkeys = resizecolumnarray(keys, keycount);\t}\tif (isprimary) {\t#if debug if (adapterswitches.dataschema.traceverbose) {",
  "setupschema set primarykey",
  0
 ],
 [
  "public override bool onstart() {",
  "orleansazuresilos onstart called information",
  0
 ],
 [
  "private static bool testandopwithsametypebutwrongreturntype() {\tclearflags();\tdynamic d1 = new myopclasswitherrorreturntype();\tdynamic d2 = new myopclasswitherrorreturntype();\ttry {\tdynamic dr = d1 && d2;",
  "ok",
  1
 ],
 [
  "} else {\t}\tif (sad2.method != mistr) {\tif (sad2.method == miobj) console.writeline (\"string2 method is object\");\treturn 1;\t}\tif (oad (go, 3).gettype () != typeof (object [])) {\treturn 1;\t}\tif (sad (gs, 3).gettype () != typeof (string [])) {",
  "not string array",
  0
 ],
 [
  "arguments = new object [] { };\tif (compare (\"remove\", mask, ref stateindex, arguments, ref more_states)) {\tcontinue;\t}\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;\tfor (int i = -1; i < mask.length + 2; i++) {",
  "assert areequal mtp remove",
  0
 ],
 [
  "public void generatecontract (arraylist generatedmaps) {\tif (generatedmaps.count == 0) return;\tgenerationresult main = (generationresult) generatedmaps[0];\tstring baseserializername = main.baseserializerclassname;\tstring access_mod = (_config == null || !_config.generateasinternal) ? \"public\" : \"internal\";\twriteline (\"\");\twritelineind (\"{\");\twritelineuni (\"}\");\twriteline (\"\");",
  "protected override system xml serialization xmlserializationwriter createwriter",
  0
 ],
 [
  "if ((record.flags & recorddefflags.reentrantequals) != 0) {\twriteline(\"}\");\twriteline(\"{\");\twriteline(\"    var popped = _equalsreentrancyguard.value.pop();\");\twriteline(\"}\");\t}\tclosescope(\"equals\");\tif ((record.flags & recorddefflags.reentrantequals) != 0) writeline(\"private threadlocal<reentrancyguardstack> _equalsreentrancyguard;\");\topenscope(\"public override sealed int gethashcode()\");\twriteline(\"if (_hash != 0)\");",
  "decl",
  1
 ],
 [
  "public static async task<certificatecheckresult> checkcertificate (cancellationtoken cancellationtoken) {\tint exitcode = await rundotnetcommand ( \"dev-certs https --trust --check\", cancellationtoken );\tvar result = (certificatecheckresult)exitcode;\tif (enum.isdefined (typeof (certificatecheckresult), result)) {\treturn result;\t}",
  "unknown exit code returned from dotnet dev certs https trust check exitcode",
  0
 ],
 [
  "if (s8.f2 != 2+9) {\treturn 2;\t}\tif (s8.f3 != 3+9) {\treturn 3;\t}\tif (s8.f4 != 4+9) {\treturn 4;\t}\tif (s8.f5 != 5+9) {",
  "got but expected",
  0
 ],
 [
  "public void printusage() {\tusing (stringwriter usagestr = new stringwriter()) {",
  "content type text xml",
  1
 ],
 [
  "private static bool nullablefloattypewithnumbericconversionfromlonginassignment() {\tint failcount = 0;\tlong? origin = long.maxvalue;\tdynamic d = origin;\tfloat? result = d;\tif (result != origin) {\tfailcount++;",
  "hello world",
  1
 ],
 [
  "if (s16.f7 != 7+9) {\treturn 7;\t}\tif (s16.f8 != 8+9) {\treturn 8;\t}\tif (s16.f9 != 9+9) {\treturn 9;\t}\tif (s16.f10 != 10+9) {",
  "assert areequal color solid color p count",
  1
 ],
 [
  "static private void help () {",
  "short",
  1
 ],
 [
  "public void readtimeout_0_readbyte_beforeopen() {",
  "verifying zero readtimeout before open with readbyte",
  0
 ],
 [
  "return;\t}\t}\t}\tfound = true;\t}\tif (!found) {\treturn;\t}\tconnectionstring = sb.connectionstring;",
  "hello",
  1
 ],
 [
  "public dummy break (label pc, textwriter data) {",
  "operation failed",
  1
 ],
 [
  "public void methodwiththreadresumecall () {\tthread thread = new thread (delegate () {",
  "useless code",
  0
 ],
 [
  "datareader.close();\treturn test_pass;\tcase \"ns\": datareader.readtodescendant(\"e:elem\");\tdatareader.readtonextsibling(\"e:elem\");\tif (datareader.hasattributes) {\tif (datareader.getattribute(\"xmlns:e\") == null) {\treturn test_fail;\t}\t}\telse {",
  "condition",
  1
 ],
 [
  "uri = seconduri;\t}\tint helpwindow;\tif (item._helpcontext != 0) {\thelpwindow = windows.htmlhelp(objectbrowserform.instance.handle, uri.localpath, windows.hh_help_context , item._helpcontext);\tthis seems to be broken, workaround is above help.showhelp(objectbrowser.objbrowser, uri.localpath, helpnavigator.topic, item._helpcontext);\t}\telse {\thelpwindow = windows.htmlhelp(objectbrowserform.instance.handle, uri.localpath, windows.hh_display_topic, 0);\t}",
  "trackedcollectionenumerator movenext current is inserted",
  1
 ],
 [
  "public void fullendelement_2(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writefullendelement();\t}\tcatch (invalidoperationexception e) {",
  "press",
  1
 ],
 [
  "private void reflectgetcustomattributes(type classtoreflect, type metadatatype) {\tattributecollection baseattributes = null;\thashtable           attrhash = new hashtable();\t#if debug if (compdescrswitch.traceverbose) {",
  "provider and connectionstring",
  1
 ],
 [
  "protected virtual void applyconfiguration (string configurationname) {\tif (configurationname == null) return;\t#if mobile || xammac_4_5 try {\tvar cfg = new silverlightclientconfigloader ().load (xmlreader.create (\"servicereferences.clientconfig\"));\tsilverlightclientconfigloader.serviceendpointconfiguration se = null;\tif (configurationname == \"*\") se = cfg.getserviceendpointconfiguration (endpoint.contract.name);\tif (se == null) se = cfg.getserviceendpointconfiguration (configurationname);\tif (se.binding != null && endpoint.binding == null) endpoint.binding = se.binding;",
  "test failed caught an unexpected exception",
  1
 ],
 [
  "copy (name_pdb, path.changeextension (asmb_path, \".pdb\"), true);\t}\tforeach (string ext in siblings) {\tstring sibling = string.concat (name, ext);\tif (file.exists (sibling)) copy (sibling, string.concat (asmb_path, ext), true);\t}\tforeach (manifestresourceinfo resource_info in resources) {\ttry {\tcopy (resource_info.filename, path.combine (full_path, path.getfilename (resource_info.filename)), true);\t} catch {",
  "error could not install resource file",
  0
 ],
 [
  "x509crl crl = force ? null : findcrl (cert, store);\tif ((crl == null) || !crl.iscurrent) {\tx509extension ext = cert.extensions [\"2.5.29.31\"];\tif (ext == null) {\tcontinue;\t}\tcrldistributionpointsextension crldp = new crldistributionpointsextension (ext);\tforeach (var dp in crldp.distributionpoints) {\tstring name = dp.name.trim ();\tif (name.startswith (\"url=\")) download (name.substring (4), store);",
  "warning unsupported distribution point",
  0
 ],
 [
  "public void onload () {\t#if debug ongeneric (\"onload\");",
  "main waiting for mon",
  1
 ],
 [
  "public static bool closehandle (intptr hobject) {",
  "failed",
  1
 ],
 [
  "console.writeline (\"b is null {0}\", b == null);\tif (a == null || b == null) return 1;\ta.link.clear ();\tb.__test = toggleref.strong;\ta = b = null;\tgc.collect ();\tgc.waitforpendingfinalizers ();\tconsole.writeline (\"a is null {0}\", a == null);\tconsole.writeline (\"b is null {0}\", b == null);\tif (a == null || b == null) return 2;",
  "hello world",
  1
 ],
 [
  "public printtimes(string text): base(text + \" - end\") {",
  "is leaking programmer is missing a call to dispose",
  1
 ],
 [
  "public static void main (string [] args) {",
  "time",
  1
 ],
 [
  "public override void onstop() {",
  "external auth using persist security info",
  1
 ],
 [
  "public csharpfile(csharpproject project, string filename) {\tthis.project = project;\tthis.filename = filename;\tcsharpparser p = new csharpparser(project.compilersettings);\tthis.originaltext = file.readalltext(filename);\tthis.syntaxtree = p.parse(this.originaltext, filename);\tthis.syntaxtree.freeze();\tif (p.haserrors) {",
  "entry not found in table creating",
  1
 ],
 [
  "public void getextobject10(xslinputtype xslinputtype, readertype readertype, outputtype outputtype, navtype navtype) {\tmyobject obj = new myobject(10, _output);\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addextensionobject(szdefaultns, obj);\tm_xsltarg.removeextensionobject(szdefaultns);\tretobj = m_xsltarg.getextensionobject(szdefaultns);\tif (retobj != null) {",
  "did not retrieve a null value for a non existent object returned",
  0
 ],
 [
  "assert.areequal (test, uri.tostring (), \"tostring/\" + test);\t}\t}\t[test]\tpublic void unixlocalpath_wtf () {\tstring path = \"file: uri fileuri = new uri( path );\tassert.areequal (\"/tmp/foo/bar\", fileuri.absolutepath, path);\tstring path2 = \"file: fileuri = new uri (path2);\tassert.areequal (\"file: }\tpublic static void print (uri uri) {",
  "exception",
  1
 ],
 [
  "foreach (string dir in libdirs) link_paths.add (dir);\treturn true;\t}\tcase \"/about\": about ();\treturn true;\tcase \"/nostdlib\": case \"/nostdlib+\": stdlib = false;\treturn true;\tcase \"/nostdlib-\": stdlib = true;\treturn true;\tcase \"/target\": if (value.length == 0) {",
  "error loading install directory",
  1
 ],
 [
  "public void testonlyredundantcatches() {\tvar input = baseinput + @\" try {\tf ();",
  "copy bytes from to return block",
  1
 ],
 [
  "public void readline_rndparityreplace() {",
  "verifying random parityreplace with readline",
  0
 ],
 [
  "public async static task run (monodevelop.ide.gui.document doc) {\tvar ad = doc.analysisdocument;\tif (ad == null) return;\ttry {\tvar service = ad.getlanguageservice<iremoveunnecessaryimportsservice> ();\tvar newdocument = await service.removeunnecessaryimportsasync (ad, default (cancellationtoken));\tad.project.solution.workspace.applydocumentchanges (newdocument, cancellationtoken.none);\t} catch (exception e) {",
  "error message is wrong",
  1
 ],
 [
  "public static void testpersistsucurityinfo2() {\tconsole.writeline(\"\\ntestpersistsucurityinfo2 - persist security info=true\");\toracleconnection con = new oracleconnection(\"data source=palis;user id=scott;password=tiger;persist security info=true\");",
  "helpviewer",
  1
 ],
 [
  "private void verifycallinstruction (instruction ins) {\tmethoddefinition called_method;\tilist<parameterdefinition> parameters;\tcalled_method = (ins.operand as methodreference).resolve ();\tif (called_method != null && called_method.ispinvokeimpl && called_method.hasparameters) {\tparameters = called_method.parameters;\tfor (int i = 0; i < parameters.count; i++) {\tif (stack [i] == null) continue;\tif (!parameters [i].parametertype.isdelegate ()) continue;",
  "parameter takes a delegate stack expression",
  0
 ],
 [
  "public void discardnull_true_readchar_after() {",
  "verifying true discardnull with readchar after open",
  0
 ],
 [
  "public void parity_int32maxvalue() {",
  "verifying maxvalue parity",
  0
 ],
 [
  "public static int main () {\tmydispose copy_a, copy_b, copy_c;\tusing (mydispose a = new mydispose (), b = new mydispose ()){\tcopy_a = a;\tcopy_b = b;\t}\tif (!copy_a.disposed) return 1;\tif (!copy_b.disposed) return 2;",
  "assembly loaded successfully",
  1
 ],
 [
  "console.writeline(\"db.orders.add(new order { productid = 2, customerid = 2, orderdate = datetime.now });\");\tdb.orders.insertonsubmit(new order { employeeid = 1, customerid = \"alfki\", orderdate = datetime.now });\tdb.submitchanges();\tforeach (var v in db.orders) objectdumper.write(v);\tconsole.readkey();\tconsole.clear();\tvar order = db.orders.first();\tdb.orders.deleteonsubmit(order);\tdb.submitchanges();\tforeach (var v in db.orders) objectdumper.write(v);",
  "delete operation successful",
  1
 ],
 [
  "public static void thread() {",
  "sammembersset movenextforeign ran out of members using next foreignresultset",
  1
 ],
 [
  "static void usage () {",
  "usage is mono service d directory l lockfile n name m logname service exe",
  0
 ],
 [
  "protected override void write(codecompileunit unit) {",
  "retrieved storage sas definition",
  1
 ],
 [
  "if (members.length > 0 && members[0].mapping.isreturnvalue) writer.writeline(\"isreturnvalue = true;\");\twriteparamsread(mappings.length);\tif (attributememberslist.count > 0) {\tmember[] attributemembers = (member[])attributememberslist.toarray(typeof(member));\twritememberbegin(attributemembers);\twriteattributes(attributemembers, anyattribute, \"unknownnode\", \"(object)p\");\twritememberend(attributemembers);\t}\twritememberbegin(textorarraymembers);\tif (haswrapperelement) {",
  "use git help command for help on a specific command",
  1
 ],
 [
  "}\tstring link_gacdir = gacdir;\tstring link_libdir = libdir;\tif (root != null) {\tlibdir = path.combine (root, \"mono\");\tgacdir = path.combine (libdir, \"gac\");\t}\tloadconfig (silent);\tswitch (command) {\tcase command.install: if (name == null) {",
  "option takes argument",
  0
 ],
 [
  "session = new usagedatasessionwriter(dbfilename, finduserid);\t} catch (incompatibledatabaseexception ex) {\tif (ex.actualversion < ex.expectedversion) {\tguid? olduserid = usagedatasessionwriter.retrieveuserid(dbfilename);\ttrydeletedatabase();\ttry {\tsession = new usagedatasessionwriter(dbfilename, () => (olduserid ?? finduserid()));\t} catch (incompatibledatabaseexception ex2) {\t}\t} else {",
  "analyticsmonitor",
  0
 ],
 [
  "public void run (object cmdtarget, commandarrayinfo info) {\tif (customarrayhandlerchain != null) {\tinfo.updatehandlerdata = method;\tvar sw = stopwatch.startnew ();\tcustomarrayhandlerchain.commandupdate (cmdtarget, info);\tsw.stop ();",
  "on delegate",
  1
 ],
 [
  "public static int main(string[] args) {\tif (args.length == 0 || args [0] == \"--help\" || args [0] == \"help\") {\tconsole.writeline ();",
  "cachepath cp specify add in cache path for the application",
  0
 ],
 [
  "public static extern bool lockwindowupdate(intptr hwndlock);\t#endregion private intptr hookhandler( intptr hwnd, int msg, intptr wparam, intptr lparam, ref bool handled ) {\thandled = false;\tswitch (msg) {\tcase sc_move: case wm_windowposchanging: safefireevent<eventargs>(windowposchanging, eventargs.empty);\tbreak;\tcase wm_mouseactivate: {\tcanceleventargs args = new canceleventargs();\tsafefireevent<canceleventargs>(windowactivating, args);\tif (args.cancel) {",
  "pinchange triggered",
  1
 ],
 [
  "dump (writer, df.monthnames, \"monthnames\");\tdump (writer, df.shortestdaynames, \"shortestdaynames\");\tvar ti = c.textinfo;\tvar nf = c.numberformat;\tdump (writer, nf.currencygroupsizes, \"currencygroupsizes\");\tdump (writer, nf.nativedigits, \"nativedigits\");\tdump (writer, nf.numbergroupsizes, \"numbergroupsizes\");\tdump (writer, nf.percentgroupsizes, \"percentgroupsizes\");\tif (!c.isneutralculture) {\tvar ri = new regioninfo (c.lcid);",
  "clone oracleconnection",
  1
 ],
 [
  "icount++;\t}\ttry {\txslt.transform(szfullfilename, \".\");\t}\tcatch (system.exception) {\ticount++;\t}\t}\tif (icount.equals(2)) return;",
  "net resource assembler version",
  1
 ],
 [
  "break;\tdefault: testlog.compare(false, \"unexpected method name \" + methodname);\tbreak;\t}\t}\tcatch (exception e) {\tif (exceptiontype.equals(e.gettype())) {\treturn;\t}\telse {",
  "did not throw exception of type",
  0
 ],
 [
  "public void basictest_getipinterfacestatistics_success() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfacestatistics stats = nic.getipstatistics();",
  "outputqueuelength",
  0
 ],
 [
  "public static void creategenerictestfile(string strfilename) {\tfilepathutil.addstream(strfilename, new memorystream());\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"no\\\"?>\");\ttw.writeline(\"<!-- comment1 -->\");\ttw.writeline(\"<?pi1a?>\");\ttw.writeline(\"<?pi1b?>\");\ttw.writeline(\"<?pi1c?>\");",
  "element isdefault any",
  0
 ],
 [
  "using (var reader = xmlreader.create (datapath)) {\twhile (reader.read ()) {\tif (reader.nodetype == xmlnodetype.element && reader.localname == \"file\") {\tinfo.version = reader.getattribute (\"version\");\tinfo.filename = reader.getattribute (\"name\");\t}\t}\t}\tcachedirectorycache [candidate] = info;\t} catch (exception e) {",
  "category",
  1
 ],
 [
  "filepath migrateprefspath = migratableprofile.configdir.combine (filename);\ttry {\tvar parentdir = prefspath.parentdirectory;\tif (!directory.exists (parentdir)) directory.createdirectory (parentdir);\tfile.copy (migrateprefspath, prefspath);\t} catch (ioexception ex) {\tstring message = string.format (\"failed to migrate core properties from {0}\", migrateprefspath);\tloggingservice.logerror (message, ex);\t}\t} else {",
  "sub",
  1
 ],
 [
  "public override void finishedlaunching (nsobject notification) {\tvar args = environment.getcommandlineargs ();\tnserror error;\tvar searchargidx = array.indexof<string> (args, \"--search\");\tif (searchargidx != -1 && args.length > searchargidx + 1 && !string.isnullorempty (args [searchargidx + 1])) {\tvar document = controller.openuntitleddocument (true, out error);\tif (document != null) ((mydocument)document).loadwithsearch (args[searchargidx + 1]);\t}\tvar indexmanager = indexupdatemanager;\tindexmanager.checkindexisfresh ().continuewith (t => {",
  "loading style sheet as xmlnodereader",
  1
 ],
 [
  "public localgraininitbootstrapper() {",
  "constructor",
  0
 ],
 [
  "#if profile clock.stop ();\tlock (runlist) {\trunlist.add (tuple.create (clock.elapsedmilliseconds, parentprovider.title));\t}\t#endif } catch (operationcanceledexception) {\t} catch (exception e) {\t}\t});\t#if profile runlist.sort ();\tforeach (var item in runlist) {",
  "authenticableprincipal hascertificatecollectionchanged original count current count",
  1
 ],
 [
  "}\tassert.throws<platformnotsupportedexception>(() => ipproperties.isdnsenabled);\tassert.throws<platformnotsupportedexception>(() => ipproperties.isdynamicdnsenabled);\tassert.notnull(ipproperties.multicastaddresses);\tforeach (ipaddressinformation multi in ipproperties.multicastaddresses) {\t_log.writeline(\"-- \" + multi.address.tostring());\tassert.throws<platformnotsupportedexception>(() => multi.isdnseligible);\tassert.throws<platformnotsupportedexception>(() => multi.istransient);\t}\tassert.notnull(ipproperties.unicastaddresses);",
  "unicast addresses",
  0
 ],
 [
  "if (isbinaryreader()) datareader.read();\ttry {\tdatareader.readtofollowing(null);\t}\tcatch (argumentnullexception) {\t}\ttry {\tdatareader.readtofollowing(\"b\", null);\t}\tcatch (argumentnullexception) {",
  "caught for single param",
  0
 ],
 [
  "if (uninstalladdin(disabled, addinname, targetdir)) {\tdirectory.move(sourcedir, targetdir);\t} else {\tallok = false;\t}\t}\tif (allok) {\ttry {\tdirectory.delete(addininstalltemp, false);\t} catch (exception ex) {",
  "error removing install temp",
  0
 ],
 [
  "reader = new streamreader (resp.getresponsestream ());\twriter = new streamwriter (file.openwrite (tmppath));\tstring str;\twhile ((str = reader.readline ()) != null) {\twriter.writeline (str);\t}\twriter.close ();\twriter = null;\treader.close ();\treader = null;",
  "removing old",
  0
 ],
 [
  "public static void assert ( bool b, [callerfilepath] string sourcefile = null, [callerlinenumber] int linenumber = 0 ) {\tassertcount++;\tif (!b) {",
  "assert failed at sourcefile linenumber",
  0
 ],
 [
  "if (var != null) {\tconst string indent = \"\\t\";\ttry {\tcurvariation = var;\ttestresult ret = var.execute();\tif (testresult.passed == ret) {\tmodule.passcount++;\t}\telse if (testresult.failed == ret) {\tsystem.console.writeline(indent + var.desc);",
  "failed",
  0
 ],
 [
  "static void main(string[] args) {",
  "program",
  0
 ],
 [
  "public void listnodeagentskus() {\taction test = () => {\tusing (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {\tvar nas = batchcli.pooloperations.listnodeagentskus().tolist();\tassert.true(nas.count > 0);\tforeach (nodeagentsku curnas in nas) {",
  "attempting to create obj for",
  1
 ],
 [
  "foreach (string value in list) console.writeline(value);\t}\t}\t}\tfinally {\tmounthelper.unmount(mounteddirname);\tdeletedir(mounteddirname, true);\t}\t}\telse {",
  "skipping since drive is not ntfs and there is no other drive on the machine",
  0
 ],
 [
  "console.write (\"do you want to update your file now? (yes/no) \");\tr = console.readline ();\tif (r == null) r = \"no\";\telse r = r.toupper ();\tif (r == \"no\") return 0;\t}\t}\ttry {\tupdater.update ();\t} catch (exception e) {",
  "build options build file",
  1
 ],
 [
  "}\tassert.notnull(ipproperties.dhcpserveraddresses);\tforeach (ipaddress dhcp in ipproperties.dhcpserveraddresses) {\t_log.writeline(\"-- \" + dhcp.tostring());\t}\tassert.notnull(ipproperties.dnsaddresses);\tforeach (ipaddress dns in ipproperties.dnsaddresses) {\t_log.writeline(\"-- \" + dns.tostring());\t}\tassert.notnull(ipproperties.dnssuffix);",
  "running func for time",
  1
 ],
 [
  "public static int test_0_abort_other_indirect () {\ttest test = (test) domain.createinstanceandunwrap (typeof (test).assembly.fullname, typeof (test).fullname);\ttest testhere = new test ();\tif (!remotingservices.istransparentproxy (test)) {",
  "test is no proxy",
  0
 ],
 [
  "private void attachtimercallback(object state) {",
  "test failed conversion result is incorrect",
  1
 ],
 [
  "break;\treturn;\treturn;\t#endif }\tcon.connectionstring = constr;\ttry {\tcon.open();\t}\tcatch(sqlexception se) {\tforeach(sqlerror error in se.errors) {",
  "usage",
  1
 ],
 [
  "public void ipinfotest_accessallipv4properties_noerrors() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {",
  "output write",
  1
 ],
 [
  "} catch (exception ex) {\tconsole.error.writeline (ex);\t}\t}\tforeach (string backend in driver.engines) {\tif (backend != engine) {\trenderer = loadrenderer (system.io.path.combine (appdomain.currentdomain.basedirectory, backend + \"htmlrender.dll\"), browser);\tif (renderer != null) {\ttry {\tif (renderer.initialize ()) {",
  "using",
  0
 ],
 [
  "public void testremovebracesfromwhile() {\ttest<removebracesaction>(@\"class testclass {\tvoid test () {\t$while (true) {\t}\t}\t}\", @\"class testclass {\tvoid test () {",
  "breadth first",
  1
 ],
 [
  "public static void displaypools(itestoutputhelper testoutputhelper, ienumerable<cloudpool> poolsenumerable) {\tlist<cloudpool> pools = new list<cloudpool>(poolsenumerable);\tint numpools = (null != pools) ? pools.count : 0;\ttestoutputhelper.writeline(\"\");\ttestoutputhelper.writeline(\"\");\tforeach (cloudpool curpool in pools) {\ttestoutputhelper.writeline(curpool.id + \":\");\tif (curpool.statistics != null) {",
  "foo bar",
  1
 ],
 [
  "}\tint status;\tif (syscall.wait (out status) == -1) {\tthrow new invalidoperationexception (\"failed to start child process.\");\t}\tif (!syscall.wifexited (status)) {\tthrow new invalidoperationexception (\"child process terminated abnormally.\");\t}\tint exitcode = syscall.wexitstatus (status);\tif (exitcode != 0) {",
  "added value retrieved value",
  1
 ],
 [
  "}\telse {\t}\t}\tcatch (exception ex) {\ts_pass = false;\t}\t}\tcatch (exception ex) {\ts_pass = false;",
  "err uncaught exception in runtest",
  0
 ],
 [
  "if (s17.f10 != 10+9) {\treturn 10;\t}\tif (s17.f11 != 11+9) {\treturn 11;\t}\tif (s17.f12 != 12+9) {\treturn 12;\t}\tif (s17.f13 != 13+9) {",
  "create table",
  1
 ],
 [
  "public void onshowcontextmenu (uint32 contextflags, [marshalas (unmanagedtype.interface)] nsidomevent eve, [marshalas (unmanagedtype.interface)] nsidomnode node) {\t#if debug ongeneric (\"onshowcontextmenu\");",
  "td",
  1
 ],
 [
  "break;\tcase \"-p12\": if (p12file != null) {\thelp (true);\t}\tif (pvkfile != null || certfile != null) {\thelp (true);\t}\tp12file = args [++i];\tbreak;\tcase \"-pvk\": if (pvkfile != null) {",
  "error more than one pvk file specified",
  0
 ],
 [
  "public classb () {\tconsole.writeline (typeof (classb).assemblyqualifiedname);\tvar t = type.gettype (\"b.classb, reflection-load-with-context-lib, version=0.0.0.0, culture=neutral, publickeytoken=null\");\tconsole.writeline (t);\tt = type.gettype (\"a.classa, reflection-load-with-context-second-lib, version=0.0.0.0, culture=neutral, publickeytoken=null\");",
  "class a",
  0
 ],
 [
  "outputline (@\"       \\open to open the connection\");\toutputline (@\"       \\close to close the connection\");\toutputline (@\"       \\e to execute sql query (select)\");\toutputline (@\"       \\h to show help (all commands).\");\toutputline (@\"       \\defaults to show default variables.\");\toutputline (\"\");\t}\tpublic void showhelp () {\tconsole.writeline (\"\");\tif (!waitforenterkey ()) return;",
  "save filename to save sql commands from sql buffer to file",
  0
 ],
 [
  "_log.writeline(\"-- \" + gateway.address.tostring());\t}\tassert.notnull(ipproperties.multicastaddresses);\tforeach (ipaddressinformation multi in ipproperties.multicastaddresses) {\t_log.writeline(\"-- \" + multi.address.tostring());\t}\tassert.notnull(ipproperties.unicastaddresses);\tforeach (unicastipaddressinformation uni in ipproperties.unicastaddresses) {\t_log.writeline(\"-- \" + uni.address.tostring());\tassert.notnull(uni.ipv4mask);",
  "suffix origin",
  0
 ],
 [
  "expected.writeline (\"      --color2[=color]       set color\");\texpected.writeline (\"      --rk=value1:value2     required key/value option\");\texpected.writeline (\"      --rk2=key:value        required {foo} key/value option\");\texpected.writeline (\"      --rk3=value            required {foo}\");\texpected.writeline (\"      --rk4=val              required {foo} val\");\texpected.writeline (\"      --ok[=value1:value2]   optional key/value option\");\texpected.writeline (\"\");\texpected.writeline (\"==this is a really long category name which will involve line wrapping, just\");\texpected.writeline (\"because...==\");\texpected.writeline (\"  -o, --out=directory        the directory to place the generated files and\");",
  "directories",
  0
 ],
 [
  "static void writehelp () {\tconsole.writeline ();",
  "types assembly serviceendpoint assembly",
  0
 ],
 [
  "public task<string> c3method() {",
  "calling",
  0
 ],
 [
  "static int main (string [] args) {\tstring path = getfilepath ();\tif (path == null) return 1;\tupdater updater = new updater (path);\tif (file.exists (path)) {\tbool uptodate;\tconsole.writeline (updater.getlocalmessage (out uptodate));\tif (uptodate) return 0;",
  "warning your site may be blocked from updating if you abuse",
  0
 ],
 [
  "public void pi_8(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writeprocessinginstruction(\"pi\", \"text\");\tw.writestartdocument(true);\t}\tcatch (invalidoperationexception e) {",
  "exception",
  0
 ],
 [
  "if (s15.f1 != 1+9) {\treturn 1;\t}\tif (s15.f2 != 2+9) {\treturn 2;\t}\tif (s15.f3 != 3+9) {\treturn 3;\t}\tif (s15.f4 != 4+9) {",
  "got but expected",
  0
 ],
 [
  "public void testbug4059() {\tstring code = @\" class stub {\ttest a () {\treturn new test () }\t}\";\tvar unit = syntaxtree.parse(code);\tvar type = unit.members.first() as typedeclaration;\tvar method = type.members.first() as methoddeclaration;\tbool passed = method.body.statements.firstordefault() is returnstatement;\tif (!passed) {",
  "expected",
  0
 ],
 [
  "compatibleframework = tf;\tif (tr.isinstalled (tf)) return tf.id;\t}\t}\tif (compatibleframework != null) return compatibleframework.id;\tbreak;\t}\t}\t}\t} catch (exception ex) {",
  "error determining target framework for assembly",
  0
 ],
 [
  "public static void savemetadatatofile (string filename, metadataset metadata) {\tif (file.exists (filename)) return;\tusing (var file = new streamwriter (filename, false)) {\tvar writer = new xmltextwriter (file);\twriter.formatting = formatting.indented;\tmetadata.writeto (writer);\t}",
  "exported",
  0
 ],
 [
  "assert.areequal (test, uri.tostring (), \"tostring/\" + test);\t}\t}\t[test]\tpublic void unixlocalpath_wtf () {\tstring path = \"file: uri fileuri = new uri( path );\tassert.areequal (\"/tmp/foo/bar\", fileuri.absolutepath, path);\tstring path2 = \"file: fileuri = new uri (path2);\tassert.areequal (\"file: }\tpublic static void print (uri uri) {",
  "failed bool decimal decimal",
  1
 ],
 [
  "public void os10(object param0, object param1) {\tinit(param0.tostring(), param1.tostring());\t_xsl.load(_xslfile);\txmlwritersettings os = _xsl.outputsettings;\tassert.equal(os.omitxmldeclaration, true);\tassert.equal(os.indent, true);\tassert.equal(os.outputmethod, xmloutputmethod.xml);",
  "encoding",
  0
 ],
 [
  "string arg = args[i];\tif (arg.startswith(\"-\") || arg.startswith(\"/\")) {\tswitch (arg.tolowerinvariant()) {\tcase \"/?\": case \"/help\": case \"-?\": case \"-help\": return null;\treturn null;\t}\t}\telse if (arg.contains(\"=\")) {\tstring[] parameters = arg.split('=');\tif (string.isnullorempty(parameters[1])) {",
  "bad command line arguments supplied arg",
  0
 ],
 [
  "try {\tthread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();\t} finally {\t}\ttry {\tthread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();",
  "abort reset",
  0
 ],
 [
  "public static int main () {\tint result = vararg.addabunchofints (__arglist ( 2, 3, 4 ));\tif (result != 9) return 1;\tresult = vararg.addasecondbunchofints (16, __arglist ( 2, 3, 4 ));\tif (result != 9) return 2;\tvararg s = new vararg ();\tresult = s.instaddabunchofints (__arglist ( 2, 3, 4, 5 ));",
  "answer",
  0
 ],
 [
  "public void calculationupdated(double value) {",
  "waiting on the long running operation to complete creating the certificate",
  1
 ],
 [
  "public static void createutf8encodedtestfile(string strfilename, encoding encode) {\tfilepathutil.addstream(strfilename, new memorystream());\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename), encode);",
  "root",
  0
 ],
 [
  "static void dumpjitoffsets(textwriter writer, astcontext ctx) {\tvar types = new[]\t{\t\"monolmf\", \"monomethodruntimegenericcontext\", \"monojittlsdata\", \"monogsharedvtmethodruntimeinfo\", \"monocontinuation\", \"monocontext\", \"monodelegatetrampinfo\", };\tdumpclasses(writer, ctx, types);\tvar optionaltypes = new[]\t{\t\"gsharedvtcallinfo\", \"seqpointinfo\", \"dyncallargs\", \"monolmftramp\", \"callcontext\" };\tdumpclasses(writer, ctx, optionaltypes, optional: true);",
  "endif",
  0
 ],
 [
  "public static void finishreport (streamwriter sw) {",
  "body",
  0
 ],
 [
  "public a (int value) : base (1) {",
  "int",
  0
 ],
 [
  "s6.f5 = 5;\ts6.f6 = 6;\ts6 = mono_return_float6(s6, 906);\tif (s6.f1 != 1+906) {\treturn 1;\t}\tif (s6.f2 != 2+906) {\treturn 2;\t}\tif (s6.f3 != 3+906) {",
  "got but expected",
  0
 ],
 [
  "public iviewcontent createcontentforfile(openedfile file) {\tvar viewcmd = new createdesignercommand(file);\tviewcmd.run();",
  "time time",
  1
 ],
 [
  "static void printusage () {",
  "flags",
  0
 ],
 [
  "public static void buildclient (servicedata sd) {\tstring file = getclientfile (sd);\tif (file.exists (file)) return;\tcreatefolderforfile (file);\tstreamwriter sw = new streamwriter (file);\tsw.writeline ();\tsw.writeline (\"{\");",
  "public class webservicetest",
  0
 ],
 [
  "foreach (string value in list) console.writeline(value);\t}\t}\t}\tfinally {\tmounthelper.unmount(mounteddirname);\tdeletedir(mounteddirname, true);\t}\t}\telse {",
  "drive is not ntfs skipping scenario",
  0
 ],
 [
  "private void finishruntimetype(typedesc type) {",
  "finishing type",
  0
 ],
 [
  "public void dumpreader (xmlreader xr, bool attvalue) {",
  "name",
  0
 ],
 [
  "public static void thread() {\tthread.sleep(500);\tthread.sleep(500);\tthread.currentthread.isbackground = true;\tthread.sleep(500);",
  "pid is",
  1
 ],
 [
  "if (d1.ms.myproperty2 != 9) ispass &= false;\telse ispass &= true;\t}\ttry {\td1.ms['a'] = 0;\tispass &= false;\t}\tcatch (microsoft.csharp.runtimebinder.runtimebinderexception ex) {\tret = errorverifier.verify(errormessageid.inaccessiblesetter, ex.message, \"mystruct.this[char]\");\tif (!ret) {",
  "idatareader has a null reference",
  1
 ],
 [
  "public void readwithoutopen() {\tusing (serialport com = new serialport()) {",
  "assembly loaded",
  1
 ],
 [
  "foreach (xmlschemaattribute attribute in derivedtype.attributeuses.values) {\txmlschemaattribute attributebase = (xmlschemaattribute)basetype.attributeuses[attribute.qualifiedname];\tif (attributebase != null) {\tcontinue;\t}\tif (baseattributewildcard == null || !baseattributewildcard.allows(attribute.qualifiedname)) {\t#if debug string position = string.empty;\tif (derivedtype.sourceuri != null) {\tposition = \" in \" + derivedtype.sourceuri + \"(\" + derivedtype.linenumber + \", \" + derivedtype.lineposition + \")\";\t}",
  "derived",
  0
 ],
 [
  "w.writestartelement(\"root\");\tw.writeattributestring(\"xml\", \"space\", null, \"preserve\");\tw.writeattributestring(\"xml\", \"space\", null, \"default\");\t}\tcatch (xmlexception e) {\tcerror.writelineignore(e.tostring());\tcerror.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "monodoc documentation tree could not be loaded because monodoc xml was not found",
  1
 ],
 [
  "_userctx = storectx;\t_groupctx = storectx;\t_computerctx = storectx;\t_connectedserver = adutils.getservername(de);\tde = null;\t}\tcatch (system.runtime.interopservices.comexception e) {\tthrow exceptionhelper.getexceptionfromcomexception(e);\t}\tcatch (exception e) {",
  "trackedcollectionenumerator movenext nothing more to enumerate",
  1
 ],
 [
  "public void validationcallback(object sender, validationeventargs args) {\tif (args.severity == xmlseveritytype.warning) {",
  "warning",
  0
 ],
 [
  "public int foo () {",
  "aa",
  0
 ],
 [
  "public void clear() {",
  "resourcetoolkit nrefactoryastcacheservice cache enabled",
  1
 ],
 [
  "public void setthread () {",
  "setting thread",
  0
 ],
 [
  "public override int invoke (ienumerable<string> arguments) {\tvar extra   = new list<string> (arguments ?? new string [0]);\tvar _       = commandset.options.messagelocalizer;\tif (extra.count == 0) {\tcommandset.options.writeoptiondescriptions (commandset.out);\treturn 0;\t}\tvar command = commandset.contains (extra [0]) ? commandset [extra [0]]\t: null;\tif (command == this || extra [0] == \"--help\") {",
  "usage commandset suite command options",
  0
 ],
 [
  "if (s5.f2 != 2+906) {\treturn 2;\t}\tif (s5.f3 != 3+906) {\treturn 3;\t}\tif (s5.f4 != 4+906) {\treturn 4;\t}\tif (s5.f5 != 5+906) {",
  "reader not initialized",
  1
 ],
 [
  "public void emitsource() {",
  "using system collections generic",
  0
 ],
 [
  "}\telse {\tforeach (string a in args) {\tstring ext = path.getextension (a);\tif (!(ext == \".dll\" || ext == \".exe\") || !file.exists (a)) continue;\tcomparewindow mw = new comparewindow ();\tmw.setassemblypath (a);\tmw.showall();\t}\t}",
  "true false",
  1
 ],
 [
  "foreach (instruction ins in method.body.instructions) {\tswitch (ins.opcode.code) {\tcase code.call: case code.callvirt: methodreference target = (methodreference) ins.operand;\tif (!call_using_this) {\tmethoddefinition callee = target.resolve ();\tif (callee != null) {\tif (!callee.ispublic && !callee.isstatic) {\tif (callee.declaringtype.isnamed (nspace, name)) {\tinstruction instance = ins.traceback (method);\tif (instance != null && instance.opcode.code == code.ldarg_0) {",
  "null",
  1
 ],
 [
  "public static int main () {\tint[] int_array = new int [] { 0, 1 };\tvar e = from i in int_array where i > 0 select i into x select x + 99;\tvar l = e.tolist ();\tif (l.count != 1) return 1;\tif (l [0] != 100) return 2;\te = from int i in int_array select i + 3 into x where x == 3 select x + 5;\tl = e.tolist ();\tif (l.count != 1) return 1;\tif (l [0] != 8) return 2;",
  "certificate subject",
  1
 ],
 [
  "static bool callsecondstructoperator() {\tint failcount = 0; verify.firstcalled = false;\tif ( (!(bool)(((dynamic)firstclassreturnstruct<int>.staticproperty) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "datatable table;\ttable = reader.getschematable();\tfor(int c = 0; c < reader.fieldcount; c++) {\tdatarow row = table.rows[c];\tstring strcolumnname = row[\"columnname\"].tostring();\tstring strbasecolumnname = row[\"basecolumnname\"].tostring();\tstring strcolumnsize = row[\"columnsize\"].tostring();\tstring strnumericscale = row[\"numericscale\"].tostring();\tstring strnumericprecision = row[\"numericprecision\"].tostring();\tstring strdatatype = row[\"datatype\"].tostring();",
  "datatype",
  0
 ],
 [
  "public override void replay (mergeinfo<tfunc, tabstractdomain> merge) {\tif (!merge.iscommon (this.from)) return;\tsymvalue sv1 = merge.graph1.lookupwithoutmanifesting (this.from, this.function);\tsymvalue sv2 = merge.graph2.lookupwithoutmanifesting (this.from, this.function);\tif (debugoptions.debug) {",
  "error missing argument",
  1
 ],
 [
  "public delegate void func<[doc] targ, [doc (\"ret!\")] tret> ();\tclass test {\tpublic static int main () {\ttype[] targs = typeof (func<,>).getgenericarguments ();\tif (targs[0].getcustomattributes (false).length != 1) return 1;\tif (targs[1].getcustomattributes (false).length != 1) return 2;",
  "ok",
  0
 ],
 [
  "public void initialize(icorprofilerinfo picorprofilerinfounk) {",
  "profiling initialized",
  0
 ],
 [
  "}\telse {\txslt.transform(nav, arglist, xw);\t}\tif (eventraised) {\tverifyresult(baseline, outfile);\treturn;\t}\telse {\tif (eventhandlerexists == \"yes\") {",
  "onmessageevent not raised",
  0
 ],
 [
  "stream responsestream = httpwebresponse.getresponsestream ();\tstreamreader responsestreamreader = new streamreader (responsestream);\tstring response = responsestreamreader.readline ();\tresponsestreamreader.close ();\tresponsestream.close ();\thttpwebresponse.close ();\t}\tcatch (webexception e) {\t}\tcatch (exception e) {",
  "exception raised in poll for",
  0
 ],
 [
  "public void testsimplecase() {\ttest<stringcomparetoisculturespecificissue>(@\" public class test {\tvoid foo (string b) {\t}\t}\t\", @\" public class test {\tvoid foo (string b) {",
  "a module name should specify path to the assembly containing the tests",
  1
 ],
 [
  "expectedexitcode = int32.parse (args [i + 1]);\ti += 2;\t} else if (args [i] == \"--testsuite-name\") {\tif (i + 1 >= args.length) {\treturn 1;\t}\ttestsuitename = args [i + 1];\ti += 2;\t} else if (args [i] == \"--input-file\") {\tif (i + 1 >= args.length) {",
  "missing argument to input file command line option",
  0
 ],
 [
  "protected override icollection getchildren() {\tlock (_allclasses) {\tif (_allclasses.count > 0) return _allclasses.values;\ttry {\tintptr comobj;\tint result = nogoop.win32.activex.cocreateinstance (ref nogoop.win32.activex.categoriesmgrclsid, (intptr)0, nogoop.win32.activex.clsctx_inproc_server, ref nogoop.win32.activex.iunknowniid, out comobj);",
  "ctor registering x on",
  1
 ],
 [
  "public void writeformatheader(solutionformatversion version) {\twriter.writeline();\tswitch (version) {\tbreak;\tbreak;",
  "visual studio",
  0
 ],
 [
  "for(c = 0; c < rdr.fieldcount; c++) {\tdatarow dr = dt.rows[c];\tmetadatavalue = \"    col \" + c + \": \" + dr[\"columnname\"];\tif(rdr.isdbnull(c) == true) datavalue = \" is null\";\telse datavalue = \": \" + rdr.getvalue(c);\toutput = metadatavalue + datavalue;\tconsole.writeline(output);\t}\tnrows++;\t}",
  "available",
  1
 ],
 [
  "}\tvar regex = new regex (\"converting[^\\n]* method ([^\\n]+)\\n\");\tvar matches = regex.matches (stdout);\tvar methods = new list<string> ();\tforeach (match match in matches) {\tvar method = match.groups [1].value;\tmethods.add (method);\t}\tvar success = runwithmethods (methods);\tif (success) {",
  "output writeline maxstack",
  1
 ],
 [
  "}\tif (target == null || complist == null){\treturn 1;\t}\ttry {\tif (!file.exists(complist)) {\treturn 1;\t}\tlclicensecontext ctx = new lclicensecontext();\tctx.licxfilename = complist;",
  "input file",
  0
 ],
 [
  "public void transformgeneric5(inputtype inputtype, readertype readertype, transformtype transformtype, doctype doctype) {\tfilestream s2;\tif ((loadxsl(\"showparam.xsl\", inputtype, readertype) == 1) && (transform(\"fruits.xml\", transformtype, doctype) == 1)) {\ts2 = new filestream(fullfilepath(\"showparam.xsl\"), filemode.open, fileaccess.read);\ts2.dispose();\ts2 = new filestream(fullfilepath(\"fruits.xml\"), filemode.open, fileaccess.read);\ts2.dispose();\treturn;\t}",
  "encountered errors performing transform and could not verify if files were closed",
  0
 ],
 [
  "_restrictionerrormsg = null;\tif (basetype != null && basetype != xmlschemacomplextype.anytype && complextype.derivedby == xmlschemaderivationmethod.restriction) {\txmlschemaparticle derivedparticle = cannonicalizepointlessroot(complextype.contenttypeparticle);\txmlschemaparticle baseparticle = cannonicalizepointlessroot(basetype.contenttypeparticle);\tif (!isvalidrestriction(derivedparticle, baseparticle)) {\t#if debug if (complextype.contenttypeparticle != null && basetype.contenttypeparticle != null) {\tstring position = string.empty;\tif (complextype.sourceuri != null) {\tposition = \" in \" + complextype.sourceuri + \"(\" + complextype.linenumber + \", \" + complextype.lineposition + \")\";\t}",
  "base",
  0
 ],
 [
  "static void unloadhook (object obj, eventargs args) {\tmanualresetevent evt = new manualresetevent (false);",
  "label",
  1
 ],
 [
  "public static void generatebitmasks () {\topcodebitmask bitmask;\tbitmask = new opcodebitmask ();\tbitmask.set (code.stfld);\tbitmask.set (code.stsfld);\tbitmask.set (code.call);\tbitmask.set (code.callvirt);\tapplicable_method_bitmask = bitmask;",
  "assert areequal mtp set out out out maskedtextresulthint out",
  1
 ],
 [
  "events.loaddata (child);\tchild = child.nextsibling;\t}\tif (child != null && child.name == \"methods\") {\tmethods = new xmlmethods ();\tmethods.loaddata (child);\tchild = child.nextsibling;\t}\tif (child == null) return;\tif (child.name != \"classes\") {",
  "hello",
  1
 ],
 [
  "static void unloadhook (object obj, eventargs args) {\tmanualresetevent evt = new manualresetevent (false);\tif (environment.hasshutdownstarted) throw new exception (\"environment.hasshutdownstarted must not be true\");\taction<int> f = (int x) => {\tevt.waitone (1000);\tevt.set ();\t};\tf.begininvoke (1, null, null);\tevt.waitone ();",
  "hook done",
  0
 ],
 [
  "protected override string encodeattributevalue (htmltextwriterattribute attrkey, string value) {",
  "x",
  1
 ],
 [
  "public void generatereader (string readerclassname, arraylist maps) {\tif (_config == null || !_config.generateasinternal) writeline (\"public class \" + readerclassname + \" : xmlserializationreader\");\twritelineind (\"{\");\twriteline (\"static readonly system.reflection.methodinfo frombinhexstringmethod = typeof (xmlconvert).getmethod (\\\"frombinhexstring\\\", system.reflection.bindingflags.static | system.reflection.bindingflags.nonpublic, null, new type [] {typeof (string)}, null);\");",
  "first",
  1
 ],
 [
  "public static void main(string[] args) {\tint count = int.parse(args[0]);\t{\tconsole.write(\"good hash function: \");\ttimer t = new timer();\thashset<int> good = makerandom(count, new goodintegerequalitycomparer());",
  "press any key to exit",
  1
 ],
 [
  "console.writeline(\"from c in db.customers from o in c.orders where c.city == \\\"london\\\" select new { c, o };\");\tvar q5 = from c in db.customers from o in c.orders where c.city == \"london\" select new { c, o };\tforeach (var v in q4) objectdumper.write(v);\tconsole.readkey();\tconsole.clear();\tconsole.writeline(\"from o in db.orders where o.customer.city == \\\"london\\\" select new { c = o.customer, o };\");\tvar q6 = from o in db.orders where o.customer.city == \"london\" select new { c = o.customer, o };\tforeach (var v in q4) objectdumper.write(v);\tconsole.readkey();\tconsole.clear();",
  "db orders",
  0
 ],
 [
  "static void setupinstrumentation () {\tinstrumentationservice.enabled = runtime.preferences.enableinstrumentation;\tif (instrumentationservice.enabled) {",
  "expected but got",
  1
 ],
 [
  "public void testremovebracesfromlock() {\ttest<removebracesaction>(@\"class testclass {\tvoid test () {\t$lock (this) {\t}\t}\t}\", @\"class testclass {\tvoid test () {",
  "hello",
  0
 ],
 [
  "int [] a = new int [10];\tint [] b = new int [2];\tfor (int i = 0; i < 10; i++) a [i] = 10 + i;\tfor (int j = 0; j < 2; j++) b [j] = 50 + j;\tif (test_single (a) != 145) return 1;\tif (test_single (b) != 101) return 2;\tif (test_continue (a) != 131){\treturn 3;\t}\tif (test_break (a) != 46){",
  "expecting got",
  0
 ],
 [
  "case \"textwriter\": streamwriter tw = new streamwriter(writerstream, wsettings.encoding);\tw = writerhelper.create(tw, wsettings, overrideasync: true, async: utils.async);\tbreak;\t}\tbool bresult = false;\ttry {\tw.writestartdocument();\tw.writestartdocument();\t}\tcatch (exception e) {",
  "process ps warning",
  1
 ],
 [
  "public void valueinproperty() {",
  "string p set system console writeline value string p set console writeline value",
  0
 ],
 [
  "public override imessage invoke (imessage request) {\timethodcallmessage call = (imethodcallmessage)request;",
  "test inconclusive the operating system preferred a non cbc or null cipher",
  1
 ],
 [
  "public static int test_0_main_thread_priority () {\tif (thread.currentthread.managedthreadid != mainthreadid) {\treturn 1;\t}\tvar before = thread.currentthread.priority;",
  "oracletype clob",
  1
 ],
 [
  "if (s == null) {\ts = caseinsensitivemanifestresourcestreamlookup(asm, filename + \".licenses\");\t}\tif (s != null) {\tdesigntimelicensecontextserializer.deserialize(s, filename.toupper(cultureinfo.invariantculture), this);\tbreak;\t}\t}\t}\telse if(!resourceassembly.isdynamic) {",
  "usage makecert options certificate",
  1
 ],
 [
  "}\tconsole.writeline(\"\\\";\");\tconsole.writeline();\tstring filename = ( args.length == 0 ) ? \"xmlchartype.bin\" : args[0];\tconsole.write( \"writing xmlchartype character properties to {0}...\", filename );\tfilestream fs = new filestream( filename, filemode.create );\tfor ( int i = 0; i < charpropertiessize; i += 4096 ) {\tfs.write( s_charproperties, i, 4096 );\t}\tfs.close();",
  "done",
  0
 ],
 [
  "s7.f3 = 3;\ts7.f4 = 4;\ts7.f5 = 5;\ts7.f6 = 6;\ts7.f7 = 7;\ts7 = mono_return_sbyte7(s7, 9);\tif (s7.f1 != 1+9) {\treturn 1;\t}\tif (s7.f2 != 2+9) {",
  "got but expected",
  0
 ],
 [
  "public void printtree (streamwriter msw) {\tfor (int i = 0; i < faxisarray.count; ++i) {\tforwardaxis axis = (forwardaxis)faxisarray[i];\tmsw.writeline(\"<tree isdss=\\\"{0}\\\" isattribute=\\\"{1}\\\">\", axis.isdss, axis.isattribute);\tdoublelinkaxis printaxis = axis.topnode;\twhile ( printaxis != null ) {",
  "name name",
  0
 ],
 [
  "sn16.f12 = 12;\tsn16.f13 = 13;\tsn16.f14 = 14;\tsn16.f15 = 15;\tsn16.nested2.f16 = 16;\tsn16 = mono_return_sbyte16_nested(sn16, 9);\tif (sn16.nested1.f1 != 1+9) {\treturn 1;\t}\tif (sn16.f2 != 2+9) {",
  "create table",
  1
 ],
 [
  "public static int main () {\tenum e = foo.bar;\ticonvertible convertible = (iconvertible) e;\ticomparable comparable = (icomparable) e;\tiformattable formattable = (iformattable) e;",
  "pass",
  0
 ],
 [
  "writelineuni (\"}\");\twritelineuni (\"}\");\twriteline (\"\");\twritelineind (\"{\");\tforeach (generationresult res in generatedmaps) {\tif (res.mapping is xmltypemapping) {\twritelineuni (\"\");\t}\t}\twriteline (\"}\");",
  "return base getserializer type",
  0
 ],
 [
  "public static bool testmove (byte dest, byte src, int len) {\tbyte[] array = new byte [totallength];\tfor (byte i = 0; i < totallength; ++i) array [i] = i;\tbuffer.blockcopy (array, src, array, dest, len);\tfor (byte i = 0; i < totallength; ++i) {\tif (array [i] != expected (dest, src, len, i)) {\tfor (byte j = 0; j < totallength; ++j) console.write (\"\" + expected (dest, src, len, j) + \" \");\tconsole.writeline ();",
  "o input output txt convert the input file to a csv file using decimal",
  1
 ],
 [
  "public static void ahoj () {",
  "did not throw exception",
  1
 ],
 [
  "public static async task removepackagedependencies (this dotnetproject project, ilist<ipackagedependency> dependencies) {\tif (project == null) throw new argumentnullexception (nameof (project));\tforeach (var dependency in dependencies) {\tif (dependency.status == status.notadded || !project.packageadded (dependency)) {",
  "slot contains",
  1
 ],
 [
  "break;\tcase \"whitespace\": strxml = \"<root>\t\t\t </root>\";\tbreak;\t}\txmlreader xr;\txr = createreader(new stringreader(strxml));\tdo { xr.read(); }\twhile ((xr.nodetype.tostring() != variation.param.tostring()) && (xr.readstate != readstate.endoffile));\tif (xr.readstate == readstate.endoffile || xr.nodetype.tostring() != variation.param.tostring()) {\txr.dispose();",
  "writer write member name",
  1
 ],
 [
  "static void main (string [] args) {\tstring bdir = args.length == 0 ? \"../../../mcs\" : args [0];\tif (!directory.exists (path.combine(bdir, \"class\"))){\tenvironment.exit (1);\t}\tswitch (args [1]){\tcase \"core\": filter (bdir + \"/build/common/consts.cs.in\", bdir + \"/build/common/consts.cs\", (i, o) => o.write (i.readtoend ().replace (\"@mono_version@\", \"2.5.0\")));\tgeneratesystemdata (bdir);\tbreak;",
  "unknonw option to prepare exe",
  0
 ],
 [
  "static void help () {",
  "in binary",
  0
 ],
 [
  "private static void onprocessexit(object sender, eventargs e) {",
  "test failed at call result",
  1
 ],
 [
  "throw new invalidoperationexception(sr.storectxneedvaluesecurityidentityclaimtoquery);\t}\treturn @\"<sid=\" + utils.securityidentifiertoldaphexbindingstring(sid) + \">\";\t}\telse {\tdirectoryentry de = (directoryentry)p.underlyingobject;\tdebug.assert(de != null);\tif (!de.properties.contains(\"objectsid\")) de.refreshcache(new string[] { \"objectsid\" });\tbyte[] sid = (byte[])de.properties[\"objectsid\"].value;\tif (sid == null) {",
  "adstorectx getsidadspathfromprincipal no sid",
  0
 ],
 [
  "static void main(string[] args) {\tif (args.length >= 1) {\twritestuffmode(args[0]);\treturn;\t}\trunstuffmode();",
  "address",
  1
 ],
 [
  "public override void run() {\ttry {\tbase.run();\t}\tcatch (exception exc) {",
  "run failed with",
  0
 ],
 [
  "static void dumpsignedxml (signedxml s) {",
  "signedxml",
  0
 ],
 [
  "static private void help () {",
  "got but expected",
  1
 ],
 [
  "const int expectedfilesize = 13;\tconst string stdoutfilename = \"stdout.txt\";\tnodefile file = batchcli.joboperations.getnodefile(jobid, taskid, stdoutfilename);\tassert.equal(expectedfilesize, file.properties.contentlength);\tassert.equal(\"application/octet-stream\", file.properties.contenttype);\tcloudtask boundtask = boundjob.gettask(taskid);\tstring computenodeid = boundtask.computenodeinformation.affinityid.split(':')[1];\tcomputenode computenode = batchcli.pooloperations.getcomputenode(this.poolfixture.poolid, computenodeid);\tlist<nodefile> files = computenode.listnodefiles(recursive: true).tolist();\tforeach (nodefile nodefile in files) {",
  "creating file with size",
  1
 ],
 [
  "if (diff != null) {\tstring diffhtml = string.empty;\tusing (var writer = new stringwriter ()) {\tstate.output = writer;\tac.compare ();\tdiffhtml = state.output.tostring ();\t}\tif (diffhtml.length > 0) {\tusing (var file = new streamwriter (diff)) {\tif (state.colorize) {",
  "added breaking inline text decoration underline",
  0
 ],
 [
  "static void readrevisionfromfile() {\ttry {\txdocument doc = xdocument.load(\"revision\");\trevisionnumber = (string)doc.root.element(\"revision\");\tgitcommithash = (string)doc.root.element(\"commithash\");\tgitbranchname = (string)doc.root.element(\"branchname\");\t} catch (exception e) {\tconsole.writeline(e.message);\tconsole.writeline();",
  "the revision number of the sharpdevelop version being compiled could not be retrieved",
  0
 ],
 [
  "}\ttry {\twrongcasefriendassembly.internalclass.privatestaticmethod();\t} catch (memberaccessexception) {\tfailcount += 1;\t}\ttry {\twrongcasefriendassembly.internalclass.internalstaticmethod();\t} catch (memberaccessexception) {\tfailcount += 1;",
  "done with the re enable",
  1
 ],
 [
  "if (!_issam) {\tint flags = unchecked((int)(0x40000000 | 0x00000010 | 0x00000100));\tunsafenativemethods.domaincontrollerinfo info = utils.getdcname(null, contextname, null, flags);\tcontextname = info.domainname;\t}\tmanualresetevent contextreadyevent = null;\twhile (true) {\thashtable credtable = null;\tprincipalcontext ctx = null;\tif (contextreadyevent != null) {",
  "delegate should not be called",
  1
 ],
 [
  "private void trace(string format, params object[] args) {\tif (trace == null) {\tvar path = string.format(\"d:\\\\trace-{0}.{1}.{2}.txt\", datetime.utcnow.hour, datetime.utcnow.minute, datetime.utcnow.ticks);",
  "frompage",
  1
 ],
 [
  "public void loadgeneric4(xslinputtype xslinputtype, readertype readertype) {\ttry {\tloadxsl_resolver(\"xmlresolver_main.xsl\", xslinputtype, readertype, null);",
  "no exception was thrown when a null resolver is passed",
  0
 ],
 [
  "private static void showhelp (bool detailed) {",
  "commands",
  0
 ],
 [
  "try {\tthread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();\t} finally {\t}\ttry {\tthread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();",
  "extra command line argument",
  1
 ],
 [
  "protected override void generategotostatement(codegotostatement e) {",
  "codegotostatement",
  0
 ],
 [
  "if (copypixeloperation != copypixeloperation.sourcecopy) throw new notimplementedexception (\"operation not implemented under x11\");\tif (gdiplus.display == intptr.zero) {\tgdiplus.display = gdiplus.xopendisplay (intptr.zero);\t}\twindow = gdiplus.xrootwindow (gdiplus.display, 0);\tdefvisual = gdiplus.xdefaultvisual (gdiplus.display, 0);\txvisualinfo visual = new xvisualinfo ();\tvisual.visualid = gdiplus.xvisualidfromvisual(defvisual);\tvptr = gdiplus.xgetvisualinfo (gdiplus.display, 0x1 /* visualidmask */, ref visual, ref nitems);\tvisual = (xvisualinfo) marshal.ptrtostructure(vptr, typeof (xvisualinfo));",
  "mapping match on sourcecolumn",
  1
 ],
 [
  "public void writelog (string message) {",
  "did not throw error for duplicate attrs",
  1
 ],
 [
  "for (int j = 0; j < useless.length; j++) {\tif (useless[j] == 'u') console.writeline (\"i have detected an u char\");\t}\ttry {\tforeach (string environmentvariable in environment.getenvironmentvariables ().keys) console.writeline (environmentvariable);\t}\tcatch (system.security.securityexception exception) {\tconsole.writeline (exception.message);\tconsole.writeline (exception);\t}",
  "netmodule output not supported will produce a class library",
  1
 ],
 [
  "static int parsetestname (string name) {\tfor (int i = 0; i < available_tests.length; ++i) {\tif (available_tests[i].item2 == name) return i;\t}",
  "test failed at",
  1
 ],
 [
  "protected override void generatelinepragmaend(codelinepragma e) {\toutput.writeline(\"\");",
  "contract applyclientbehavior",
  1
 ],
 [
  "public override size getpreferredsize (size proposedsize) {",
  "card",
  1
 ],
 [
  "public static int main () {\tif (attribute.getcustomattributes (typeof (class1)).length != 1) return 1;\tif (attribute.getcustomattributes (typeof (class2)).length != 0) return 1;\tif (attribute.getcustomattributes (typeof (class3)).length != 1) return 1;",
  "ok",
  0
 ],
 [
  "protected override void generateconditionstatement (codeconditionstatement statement) {\ttextwriter output = output;\toutput.write (\"if \");\tgenerateexpression (statement.condition);\t++indent;\tgeneratestatements (statement.truestatements);\t--indent;\tcodestatementcollection falses = statement.falsestatements;\tif (falses.count > 0) {",
  "failed",
  1
 ],
 [
  "static void throwexcthroughmethodswithfinalizers2(string caller) {\tcreatesomegarbage();\tstring s = caller + \" + throwexcthroughmethodswithfinalizers2\";\tcreatesomegarbage();\ttry {\tthrow new exception(\"throwexcthroughmethodswithfinalizers2\");\t}\tfinally {",
  "result set",
  1
 ],
 [
  "onstatechanged (true);\tonoperationstartedevent (this);\tonmessageevent (\"loading {0}\", uri);\tvar result = await run (uri, cts.token);\tif (result != null) onmessageevent (result);\telse onmessageevent (\"loaded {0}.\", uri);\t} catch (taskcanceledexception) {\tonmessageevent (\"cancelled!\");\t} catch (exception ex) {\tonmessageevent (\"error: {0}\", ex.message);",
  "error",
  0
 ],
 [
  "static void outparmtest4(oracleconnection con) {\toraclecommand cmd2 = con.createcommand();\tcmd2.commandtext = \"create or replace function sp_outputparmtest4(parm1 in long, parm2 out long, parm3 in out long) return long \" + \"is \" + \"    returnvalue long := 'a very, very, very long value in a far away memory space.'; \" + \"begin \" + \"   if parm1 is null then \" + \"        parm2 := 'parm1 is null'; \" + \"        returnvalue := 'another one bytes the dust.'; \" + \"   else \" + \"\t     parm2 := 'one' || parm1 || 'three'; \" + \"   end if; \" + \"   if parm3 is not null then \" + \"       parm3 := parm2 || parm3 || 'five'; \" + \"   else \" + \"       parm3 := 'parm3 in was null'; \" + \"   end if; \" + \"   if parm1 is not null then \" + \"       if parm1 = '999' then \" + \"          parm2 := null; \" + \"          parm3 := null; \" + \"          returnvalue := null; \" + \"       end if; \" + \"   end if; \" + \"   return returnvalue; \" + \"end;\";\tcmd2.executenonquery();",
  "commit",
  0
 ],
 [
  "static bool callsecondstructindexer() {\tint failcount = 0; verify.firstcalled = false;\tif ( (!(bool)(((dynamic)firstclassreturnstruct<int>.staticmethod())[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "hello",
  1
 ],
 [
  "private void read(string filename) {\txmlserializer ser=new xmlserializer(typeof(xmlelement));\tfilestream fs=new filestream(filename, filemode.open);\txmlelement elem;\telem=(xmlelement)ser.deserialize(fs);\tfs.close();",
  "node name",
  0
 ],
 [
  "static void doothergenericstuff () {",
  "top",
  1
 ],
 [
  "m_xsltarg.addparam(\"myarg1\", szempty, obj);\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);\tif (retobj.tostring() != \"0.00\") {\tassert.true(false);\t}\tint j = 8;\tint i = 8;\tm_xsltarg.addparam(\"myarg2\", szempty, i);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (!i.equals(retobj)) {",
  "foo",
  1
 ],
 [
  "foreach (string name in other) {\ttry {\tassembly a = loadassembly (name);\tif (a == null) {\terror = \"failed to load \" + name;\tcontinue;\t}\tassemblies.add (a.codebase);\t} catch (exception) {\tif (skip_scan) {",
  "file will not be scanned",
  0
 ],
 [
  "public fraction(int wholenumber) {",
  "in fraction constructor int",
  0
 ],
 [
  "task join = null;\ttask wrapper = new task(() => {\ttask1 = task.run(() => {\tassert.notequal(scheduler, taskscheduler.current);\tpause1.waitone();\treturn 1;\t});\ttask2 = task.run(() => {\tassert.notequal(scheduler, taskscheduler.current);\tpause2.waitone();",
  "equals",
  1
 ],
 [
  "public int transform(object args) {\tfor (int i = 1; i <= 100; i++) {\tstringwriter sw = new stringwriter();\txsltsameinstance.transform(_xrdata, null, sw);",
  "unicastpacketssent",
  1
 ],
 [
  "public void methodwiththreadresumecall () {\tthread thread = new thread (delegate () {",
  "ideapp workspace is not available when creating packagemanagementprojectservice",
  1
 ],
 [
  "if (s4.f1 != 1+90) {\treturn 1;\t}\tif (s4.f2 != 2+90) {\treturn 2;\t}\tif (s4.f3 != 3+90) {\treturn 3;\t}\tif (s4.f4 != 4+90) {",
  "foo bar",
  1
 ],
 [
  "static bool callsecondstructoperator() {\tint failcount = 0; verify.firstcalled = false;\tif ( (!(bool)(((dynamic)firstclassreturnstruct.staticproperty) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "localvariableset",
  1
 ],
 [
  "public void listnodeagentskus() {\taction test = () => {\tusing (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {\tvar nas = batchcli.pooloperations.listnodeagentskus().tolist();\tassert.true(nas.count > 0);\tforeach (nodeagentsku curnas in nas) {",
  "got but expected",
  1
 ],
 [
  "private void printversion () {",
  "calling",
  1
 ],
 [
  "public static void main (string[] args) {\tusing (var w = new streamwriter (console.openstandardoutput ())) {\tw.writeline ();\tw.writeline (\"public struct foostruct { public int i, j; public static bool operator == (foostruct f1, foostruct f2) { return f1.i == f2.i && f1.j == f2.j; } public static bool operator != (foostruct f1, foostruct f2) { return f1.i != f2.i || f1.j != f2.j; } public override bool equals (object obj) { return this == (foostruct)obj; } public override int gethashcode () { return 0; } }\");\tw.writeline (\"public struct foostruct2 { public long i; public static bool operator == (foostruct2 f1, foostruct2 f2) { return f1.i == f2.i; } public static bool operator != (foostruct2 f1, foostruct2 f2) { return f1.i != f2.i; } public override bool equals (object obj) { return this == (foostruct2)obj; } public override int gethashcode () { return 0; } }\");\tw.writeline (\"public struct foostruct3 { public bool i, j; public static bool operator == (foostruct3 f1, foostruct3 f2) { return f1.i == f2.i && f1.j == f2.j; } public static bool operator != (foostruct3 f1, foostruct3 f2) { return f1.i != f2.i || f1.j != f2.j; } public override bool equals (object obj) { return this == (foostruct3)obj; } public override int gethashcode () { return 0; } }\");",
  "return testdriver runtests typeof tests args",
  0
 ],
 [
  "static void run() {\tprocess proc = new process();\tbool ret;\tproc.startinfo.filename=\"wibble\";\tproc.startinfo.arguments=\"arg1    arg2\\targ3 \\\"arg4a arg4b\\\"\";\tproc.startinfo.useshellexecute=false;\tret=proc.start();\tproc.waitforexit();",
  "wait returned",
  0
 ],
 [
  "}\tif (failed_tests.count == 0) continue;\tsw.writeline (@\"        <tr id='el{0}' class='errorlist' style='display: none'>\", assembly);\tsw.writeline (@\"            <td colspan='4'>\");\tsw.writeline (@\"                <table cellpadding='2' cellspacing='0' width='100%'>\");\tint test_num = 0;\tforeach (failedtest ft in failed_tests.values) {\tsw.writeline (\"                    <tr onclick=\\\"toggle('as{0}ed{1}')\\\" onmouseover='highlight(this)' onmouseout='unhighlight(this)'>\", assembly, test_num);\tsw.writeline (@\"                        <td style='width: 17px'><img src='media/bullet.png' /></td>\");\tsw.writeline (@\"                    <tr id='as{0}ed{1}' class='errordetail' style='display: none'>\", assembly, test_num);",
  "td td",
  0
 ],
 [
  "this.testoutputhelper.writeline(\"\");\tthis.testoutputhelper.writeline(stdout);\tthis.testoutputhelper.writeline(\"\");\tthis.testoutputhelper.writeline(stderr);\tthis.testoutputhelper.writeline(\"\");\tienumerable<environmentsetting> boundsettings = mycompletedtask.environmentsettings;\tassert.notnull(boundsettings);\tlist<environmentsetting> compenvsettings = new list<environmentsetting>(boundsettings);\tassert.equal(numenvsettings, compenvsettings.count);\tforeach (environmentsetting curenvsetting in boundsettings) {",
  "missing argument to expected exit code command line option",
  1
 ],
 [
  "if (isactivecontent && !iskeyboardfocused) {\t#region focus on winforms content if (this.content is windowsformshost) {\t}\t#endregion dispatcher.begininvoke(dispatcherpriority.input, new threadstart(delegate {\tif (isactivecontent && !iskeyboardfocused) {\tif (defaultelement != null) {\tiinputelement kbfocused = keyboard.focus(defaultelement);\tif (kbfocused != null) debug.writeline(\"focused element \" + kbfocused);\t}\telse if (content is uielement && content is dependencyobject) {",
  "got but expected",
  1
 ],
 [
  "do {\tf = getnextsearchresult();\tneedtoretry = false;\tif (f) {\tsearchresult currentsr = (searchresult)_membersearchresultsenumerator.current;\tstring memberdn = (string)currentsr.properties[\"distinguishedname\"][0];\tif ((!adutils.isofobjectclass(currentsr, \"group\")) && (!adutils.isofobjectclass(currentsr, \"user\")) && (!adutils.isofobjectclass(currentsr, \"foreignsecurityprincipal\"))) {\tneedtoretry = true;\t}\telse if (_recursive && adutils.isofobjectclass(currentsr, \"group\")) {",
  "d dest path directory where the project will be exported",
  1
 ],
 [
  "public void pushstack (nullity n) {\tif(stackdepth == stack.length) {\tthrow new exception(\"nullity stack overflow\");\t}",
  "push",
  0
 ],
 [
  "public void basictest_accessinstanceproperties_noexceptions_linux() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {",
  "name",
  0
 ],
 [
  "t2.runsynchronously(bts);\tassert.true(false, string.format(\"    > failed.  no exception thrown.\"));\t}\tcatch (taskschedulerexception) { }\tcatch (exception e) {\tassert.true(false, string.format(\"    > failed. wrong exception thrown (expected taskschedulerexception): {0}\", e));\t}\tif (t2.status != taskstatus.faulted) {\tassert.true(false, string.format(\"    > failed. task ended up in wrong status (expected faulted): {0}\", t1.status));\t}",
  "waiting on faulted task there s a problem if we deadlock",
  0
 ],
 [
  "private void writenotrunreport(testresult result) {\treportindex = 0;",
  "unknown argument",
  1
 ],
 [
  "wrongcasefriendassembly.internalclass.internalstaticmethod();\t} catch (memberaccessexception) {\tfailcount += 1;\t}\ttry {\twrongcasefriendassembly.publicclass.internalstaticmethod();\t} catch (memberaccessexception) {\tfailcount += 1;\t}\tif (system.diagnostics.debugger.isattached) console.readline();",
  "wallclocktime",
  1
 ],
 [
  "public static int main(string[] args) {\tif (args.length == 0 || args [0] == \"--help\" || args [0] == \"help\") {",
  "usage mautil options command arguments",
  0
 ],
 [
  "public static void displaypools(itestoutputhelper testoutputhelper, ienumerable<cloudpool> poolsenumerable) {\tlist<cloudpool> pools = new list<cloudpool>(poolsenumerable);\tint numpools = (null != pools) ? pools.count : 0;\ttestoutputhelper.writeline(\"\");",
  "added value retrieved value",
  1
 ],
 [
  "public ienumerable foo (int a) {\ttry {\ttry {\tyield return a;\t} finally {\t}",
  "next block",
  0
 ],
 [
  "md5.initialize();\ttemp = md5.computehash(this.context.randomsc, 0, this.context.randomsc.length);\tthis.context.serverwriteiv = new byte[this.ivsize];\tbuffer.blockcopy(temp, 0, this.context.serverwriteiv, 0, this.ivsize);\t}\telse {\tthis.context.clientwriteiv = ciphersuite.emptyarray;\tthis.context.serverwriteiv = ciphersuite.emptyarray;\t}\t}",
  "test failed at conversion result",
  1
 ],
 [
  "static void test4() {\tigraph<string, int, int> g = new hashgraph<string, int, int>(new intweight(), snake(5));\tconsole.writeline(\"========= pfs =========\");\tconsole.writeline(\"========= mst =========\");\tstring root;\tigraph<string, int, int> mst = g.minimumspanningtree(out root);\tmst.print(console.out);\tmst.traversevertices(false, root, delegate(edge<string, int> e) { console.writeline(e); });",
  "result matched",
  1
 ],
 [
  "dumpstat();\treturn test_fail;\t}\twhile (datareader.read()) ;\tdatareader.close();\treturn test_pass;\tcase \"dns\": datareader.readtodescendant(\"elem\", \"elem\");\tdatareader.readtonextsibling(\"elem\", \"elem\");\tif (datareader.hasattributes) {\tif (datareader.getattribute(\"att\") == null) {",
  "open connection",
  1
 ],
 [
  "public void getparam16() {\tm_xsltarg = new xsltargumentlist();\tint i = 0;\tm_xsltarg.addparam(\"myarg1\", szempty, \"test16\");\tfor (i = 0; i < 200; i++) {\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);\tif (retobj.tostring() != \"test16\") {\tassert.true(false);\t}\t}",
  "warning test thrown exception",
  1
 ],
 [
  "public void autoincrement () {",
  "running thread",
  1
 ],
 [
  "public void cantimeout_open_close_open() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tcom.open();\tcom.close();\tcom.open();\tstream serialstream = com.basestream;",
  "verifying cantimeout property returns false after open then close",
  0
 ],
 [
  "public void testremovebracesfromfor() {\ttest<removebracescoderefactoringprovider>(@\"class testclass {\tvoid test() {\t$for (; ; ) {\t}\t}\t}\", @\"class testclass {\tvoid test() {",
  "compilation failed error s warnings",
  1
 ],
 [
  "static void header () {\tassembly a = assembly.getexecutingassembly ();\tversion v = a.getname ().version;\tif (v.tostring () != \"0.0.0.0\") {",
  "v",
  0
 ],
 [
  "continue;\tcase \"-gacdir\": case \"/gacdir\": gacdir = args [++i];\tcontinue;\tcase \"/nologo\": case \"-nologo\": continue;\t}\t}\tif (name == null) name = args [i];\telse name += args [i];\t}\tif (command == command.unknown && isswitch (args [0])) {",
  "unknown command",
  0
 ],
 [
  "static private void extendedhelp () {",
  "cy authority end basic constraints select authority or end entity certificate",
  0
 ],
 [
  "thread.sleep(0);\tif(monitor.tryenter(thr, 100)==true) {\tmonitor.exit(thr);\t} else {\t}\tthread.setdata(slot, main);\tthread storedthr=(thread)thread.getdata(slot);\tthread.setdata(namedslot, main);\tstoredthr=(thread)thread.getdata(namedslot);\tif(thr.join(5000)) {",
  "unhandled token",
  1
 ],
 [
  "finally {\tmounthelper.unmount(mounteddirname);\tdeletedir(mounteddirname, true);\t}\t}\telse {\t}\t}\tcatch (exception ex) {\ts_pass = false;",
  "err exception caught in scenario",
  0
 ],
 [
  "clob.close ();\toraclelob blob = reader.getoraclelob (1);\tbytes = new byte[6] { 0x31, 0x32, 0x33, 0x34, 0x35, 0x036 };\tblob.write (bytes, 0, bytes.length);\tblob.close ();\ttrans.commit ();\treadsimpletest(con, \"select * from mono_oracle_test\");\tstring varchar2_value = (string) readscalar (con,\"select max(varchar2_value) from mono_oracle_test\");\tdecimal number_whole_value = (decimal) readscalar (con,\"select max(number_whole_value) from mono_oracle_test\");\tdecimal number_scaled_value = (decimal) readscalar (con,\"select number_scaled_value from mono_oracle_test\");",
  "valid",
  1
 ],
 [
  "public static void main (string [] args) {\tif (args.length == 0) {",
  "error creating directory for file",
  1
 ],
 [
  "static void loadruntimes () {\tif (!file.exists (configfile)) return;\ttry {\txmldataserializer ser = new xmldataserializer (new datacontext ());\tusing (streamreader sr = new streamreader (configfile)) {\tcustomruntimes = (runtimecollection) ser.deserialize (sr, typeof(runtimecollection));\t}\t} catch (exception ex) {",
  "failed long",
  1
 ],
 [
  "boolean bt = (1 == 1);\tm_xsltarg.addparam(\"myarg4\", szempty, bt);\tretobj = m_xsltarg.getparam(\"myarg4\", szempty);\tif (!bt.equals(retobj)) {\tassert.true(false);\t}\txpathdocument xd = new xpathdocument(fullfilepath(\"fish.xml\"));\tm_xsltarg.addparam(\"myarg5\", szempty, ((ixpathnavigable)xd).createnavigator());\tretobj = m_xsltarg.getparam(\"myarg5\", szempty);\tif (retobj == null) {",
  "test failed at call result",
  1
 ],
 [
  "public void onchanged (object o, xmlnodechangedeventargs e) {",
  "changed",
  0
 ],
 [
  "output.writeline();\toutput.unindent();\t}\toutput.writeline(\"{\");\toutput.indent();\tbool oldisintype = isintype;\tisintype = true;\twriteattributes(type.customattributes);\twritesecuritydeclarations(type);\tif (type.haslayoutinfo) {",
  "pack",
  0
 ],
 [
  "private void onhandleremove(string handlename, intptr handle, int handlecount) {\thandletype type = (handletype)s_handletypes[handlename];\tbool removed = false;\tif (type != null) {\tremoved = type.remove(handle);\t}\tif (!removed) {\tif (compmodswitches.handleleak.level >= tracelevel.error) {\tdebug.writeline(\"*************************************************\");",
  "handle type",
  0
 ],
 [
  "public static void createwhitespacehandlingtestfile(string strfilename) {\tstream s = new memorystream();\ttextwriter tw = new streamwriter(s);\ttw.writeline(\"]>\");",
  "elem",
  0
 ],
 [
  "if (sn4.nested1.f1 != 1+906) {\treturn 1;\t}\tif (sn4.f2 != 2+906) {\treturn 2;\t}\tif (sn4.f3 != 3+906) {\treturn 3;\t}\tif (sn4.nested2.f4 != 4+906) {",
  "begin message received by host",
  1
 ],
 [
  "if (!environment.userdomainname.equals(string.empty)) user = environment.userdomainname + \"\\\\\" + environment.username;\toracleconnection con = new oracleconnection(\"data source=palis;integrated security=true\");\ttry {\tcon.open();\toraclecommand cmd = con.createcommand();\tcmd.commandtext = \"select user from dual\";\toracledatareader reader = cmd.executereader();\tcon.close();\t}\tcatch (exception e) {",
  "exception caught",
  0
 ],
 [
  "public static bool log(object actual, object expected, string source, string message, string details, tagerrorlevel eerrorlevel) {\ttagerrorlevel rsavedlevel = errorlevel;\terrorlevel = eerrorlevel;\ttry {\tif (testconsole != null) {\ttestconsole.log(common.format(actual), common.format(expected), source, message, details, tagconsoleflags.console_text, \"fake_filename\", 999 );\t}\telse if (error != null) {",
  "help show this message and exit",
  1
 ],
 [
  "public void checkleaks() {\tlock (this) {\tbool reportedfirstleak = false;\tif (_handlecount > 0) {\tfor (int i = 0; i < numberofbuckets; i++) {\thandleentry e = _buckets[i];\twhile (e != null) {\tif (!e.ignorableasleak) {\tif (!reportedfirstleak) {",
  "user getauthorizationgroupshelper unpersisted using emptyset",
  1
 ],
 [
  "private static bool callsecondclassinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturndynamicclass();\tif ((!(bool)((s + 1).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public override idisposable writepropertyget() {",
  "get",
  0
 ],
 [
  "protected override void generatetypeend(codetypedeclaration e) {",
  "dispbar dispose",
  1
 ],
 [
  "public void validationcallback(object sender, validationeventargs args) {\tswitch (args.severity) {\tbwarningcallback = true;\twarningcount++;\tbreak;",
  "createeventsource calling sourceexists",
  1
 ],
 [
  "public async task awaitwithstack(task<int> task) {",
  "a",
  0
 ],
 [
  "var r1 = d.foo (3);\tif (r1 != 7) return 1;\td.foo (2);\td.foo = (action) (() => console.writeline (\"action\"));\td.foo ();\td.foo = (d) ((ref int l) => { l = 9; return 4; });\tint ref_value = 3;\tvar r2 = d.foo (ref ref_value);\tif (r2 != 4) return 2;\tif (ref_value != 9) return 3;",
  "ok",
  0
 ],
 [
  "private static bool callsecondstructindexer() {\tint failcount = 0;\tverify.firstcalled = false;\tdynamic d = new firstclassreturnstruct<int>();\tif ((!(((d + 1))[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "symgraph changed due to join of abstract values of prev new join",
  1
 ],
 [
  "m_xsltarg.addparam(\"myarg3\", szempty, d3);\tm_xsltarg.removeparam(\"myarg3\", szempty);\tretobj = m_xsltarg.getparam(\"myarg3\", szempty);\tif (retobj != null) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg4\", szempty, d4);\tm_xsltarg.removeparam(\"myarg4\", szempty);\tretobj = m_xsltarg.getparam(\"myarg4\", szempty);\tif (retobj != null) {",
  "failed to remove",
  0
 ],
 [
  "static void m (object sender, eventargs args) {",
  "hook invoked",
  0
 ],
 [
  "public static void bug720327_deregisterfromwithinacallbackissafe_synccontexttest() {",
  "cancellationtokentests deregisterfromwithinacallbackissafe synccontexttest",
  0
 ],
 [
  "public override void writeto(itextoutput output) {\toutput.indent();\ttryblock.writeto(output);\toutput.unindent();\toutput.writeline(\"}\");\tforeach (catchblock block in catchblocks) {\tblock.writeto(output);\t}\tif (faultblock != null) {",
  "ok",
  1
 ],
 [
  "static int main (string[] args) {\tappdomain.currentdomain.unhandledexception += (sender, exception_args) => {\tcustomexception exc = exception_args.exceptionobject as customexception;\tif (exc == null) {\t_exit (1);\t}\tconsole.writeline (exc.stacktrace);\tif (string.isnullorempty (exc.stacktrace)) {\t_exit (2);\t} else {",
  "projectbrowser dragging file onto file",
  1
 ],
 [
  "if (s11.f6 != 6+9) {\treturn 6;\t}\tif (s11.f7 != 7+9) {\treturn 7;\t}\tif (s11.f8 != 8+9) {\treturn 8;\t}\tif (s11.f9 != 9+9) {",
  "setupschema partial primary key detected",
  1
 ],
 [
  "public static void usage (string message) {\tif (message != null) {\tconsole.writeline (\"{0}{1}{0}\", environment.newline, message);\t}",
  "x x client certificate multiple entries allowed",
  0
 ],
 [
  "xmlreader r = readerhelper.create(sr, rs, string.empty);\txmlreader wr = readerhelper.create(r, wrs);\treturn wr;\t}\tif (stream != null) {\txmlreader r = readerhelper.create(stream, rs, filename);\txmlreader wr = readerhelper.create(r, wrs);\treturn wr;\t}\tif (fragment != null) {",
  "dummy",
  1
 ],
 [
  "if (s16.f10 != 10+9) {\treturn 10;\t}\tif (s16.f11 != 11+9) {\treturn 11;\t}\tif (s16.f12 != 12+9) {\treturn 12;\t}\tif (s16.f13 != 13+9) {",
  "got but expected",
  0
 ],
 [
  "public void canseek_open_close() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tcom.open();\tstream serialstream = com.basestream;\tcom.close();",
  "verifying canseek property throws exception after open then close",
  0
 ],
 [
  "public texttag indent () {\ttexttag tag;\tindent++;\tif (indent >= tags.count) {\ttag = new texttag ($\"{trackerid}-{indent}\");",
  "tag name",
  0
 ],
 [
  "public int testreadbinhex_13() {\tint binhexlen = 10;\tbyte[] binhex = new byte[binhexlen];\treloadsource(ereader_type.binhex_test);\tdatareader.positiononelement(st_elem_name4);\tif (checkcanreadbinarycontent()) return test_pass;\tstring stractbinhex = \"\";\tfor (int i = 0; i < binhexlen; i = i + 2) {\tdatareader.readelementcontentasbinhex(binhex, i, 2);\tstractbinhex = (system.bitconverter.tochar(binhex, i)).tostring();",
  "actual exp",
  0
 ],
 [
  "public void startelement () {",
  "bytearray and blob are not the same bad",
  1
 ],
 [
  "private static bool callsecondstructinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturndynamicstruct<int>();\tif ((!(bool)(s[1].instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "certificate s added to store",
  1
 ],
 [
  "static private void help () {\tconsole.writeline ();",
  "did not throw argumentnullexception",
  1
 ],
 [
  "public void loadgeneric6(inputtype inputtype, readertype readertype) {\ttry {\tloadxsl(\"idontexist.xsl\", inputtype, readertype);\t}\tcatch (system.io.filenotfoundexception) {\treturn;\t}",
  "exception not generated for non existent file parameter name",
  0
 ],
 [
  "if (element == null || element.iscomplete) {\tvar parent = element;\telement = new xelement (context.locationminus (2));\telement.parent = parent;\tcontext.nodes.push (element);\t}\tif (c == '<') {\tif (element.isnamed) {\tclose (element, context, context.locationminus (1));\t} else {",
  "unexpected in unnamed tag",
  0
 ],
 [
  "private static bool test4() {\tbool[] boolvalues = new bool[]\t{\ttrue, false }\t;\tforeach (bool a1 in boolvalues) {\tforeach (bool a2 in boolvalues) {\tbool d1 = a1;\tdynamic d2 = a2;\tif ((d1 && d2) != (a1 && a2)) {",
  "got",
  1
 ],
 [
  "if (lib == null || !typelibrary.isassycurrent(assyfilename, lib.filename)) {\t_assemblies.remove(assembly);\tprogressdialog.updateprogress(1);\tcontinue;\t}\t}\tassembly assy = assembly.load(aname);\tif (assembly.typelibguid.length > 0) typelibrary.restoreassembly(assy, guid, assembly.typelibversion);\tprogressdialog.updateprogress(1);\t} catch (exception ex) {",
  "string string",
  1
 ],
 [
  "string fname = locatefile (new uri (url).localpath);\tstring aname = makebundle.getassemblyname (fname);\tmaker.add (\"assembly:\" + aname, fname);\tif (file.exists (fname + \".config\")){\tmaker.add (\"config:\" + aname, fname + \".config\");\t}\t}\tif (!maybeaddfile (maker, \"systemconfig:\", config_file) || !maybeaddfile (maker, \"machineconfig:\", machine_config_file)) return false;\tif (config_dir != null){\tmaker.add (\"config_dir:\", config_dir);",
  "exception",
  1
 ],
 [
  "static void main (string[] args) {\ttry {\ttestoledb test = new testoledb ();\ttest.testdatareader ();\ttest.testtransaction ();\ttest.close ();\t} catch (exception e) {",
  "verifying requesttosendxonxoff handshake after open",
  1
 ],
 [
  "public bool onprompt (intptr title, intptr text, ref intptr retval) {\t#if debug ongeneric (\"onprompt\");",
  "onprompt",
  0
 ],
 [
  "assert.false(string.isnullorempty(description), \"networkinterface.description should not be null or empty.\");\tstring id = nic.id;\tassert.false(string.isnullorempty(id), \"networkinterface.id should not be null or empty.\");\tassert.throws<platformnotsupportedexception>(() => nic.isreceiveonly);\ttry {\tassert.inrange(nic.speed, -1, long.maxvalue);\t}\tcatch (platformnotsupportedexception pnse) {\t_log.writeline(pnse.tostring());\t}",
  "verifying read method with zero timeout that resizes serialport s buffer",
  1
 ],
 [
  "public delegate int doit(int a, int b, int c, doit d);\tinternal class repro {\tprivate int doitwrong(int a, int b, int c, doit d) {\treturn -1;\t}\tprivate int doitright(int a, int b, int c, doit d) {\treturn 100;\t}\tprivate int accomplice(int a, int b, int c, doit d) {",
  "got but expected",
  1
 ],
 [
  "static bool callsecondclassindexer() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturnclass();\tif ( (!(bool)(((dynamic)(s + 1))[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "foreach (servicecontroller controller in servicecontroller.getservices()) {\ttry {\tcurrentservice = controller.displayname;\tif (controller.displayname.startswith(\"test service\")) {\ttestserviceinstaller deleteservice = new testserviceinstaller() {\tservicename = controller.servicename };\tdeleteservice.removeservice();\t}\t}\tcatch (exception ex) {",
  "validation failed",
  1
 ],
 [
  "protected void createassynames() {\tif (_assyinfo._name == null) {\tstring dir = componentinspectorproperties.convertedassemblydirectory;",
  "wait on the scenario to finish",
  1
 ],
 [
  "public static void creategenerictestfile(string strfilename) {\tstream s = new memorystream();\ttextwriter tw = new streamwriter(s);\ttw.writeline(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"no\\\"?>\");\ttw.writeline(\"<!-- comment1 -->\");\ttw.writeline(\"<?pi1a?>\");\ttw.writeline(\"<?pi1b?>\");\ttw.writeline(\"<?pi1c?>\");\ttw.writeline(\"<root xmlns:something=\\\"something\\\" xmlns:my=\\\"my\\\" xmlns:dt=\\\"urn:uuid:c2f41010-65b3-11d1-a29f-00aa00c14882/\\\">\");\ttw.writeline(\"<elem1 child1=\\\"\\\" child2=\\\"no_referencee2;\\\" child3=\\\"something\\\">\");",
  "orleansazureweb onstop",
  1
 ],
 [
  "_result.mapping = _typemap;\tarraylist maps = (arraylist) mapsbynamespace [_result.namespace];\tif (maps == null) {\tmaps = new arraylist ();\tmapsbynamespace [_result.namespace] = maps;\t}\tmaps.add (_result);\t}\tforeach (dictionaryentry entry in mapsbynamespace) {\tarraylist maps = (arraylist) entry.value;",
  "namespace",
  0
 ],
 [
  "private nvdlinterpretation createinterp (nvdldispatcher d, simplemode m, simpleaction a, nvdlinterpretation p) {",
  "success",
  1
 ],
 [
  "public void methodparameternamedvalue() {",
  "usage installvst vstemplatefile destinationpath",
  1
 ],
 [
  "private void emitmetadatareader() {\topenscope(\"public partial class metadatareader\");\tforeach (var record in schemadef.recordschema) {\topenscope($\"public {record.name} get{record.name}({record.name}handle handle)\");\tif (record.name == \"constantstringvalue\") {",
  "return new constantstringvalue",
  0
 ],
 [
  "public void emitsource() {",
  "message sender",
  1
 ],
 [
  "private void writehelp() {\tconsole.out.writeline(sr.format(sr.helpdescription));",
  "dotnet",
  0
 ],
 [
  "public void reset() {",
  "valuecollectionenumerator entering reset",
  0
 ],
 [
  "if (data as bool? ?? false) {\t#endif memberresolveresult mrr = this.resolve(objectcreateexpression) as memberresolveresult;\t#if debug if (mrr != null) {\t}\t#endif if (mrr != null && mrr.resolvedmember is imethod && (mrr.resolvedmember.declaringtype.compareto(this.resourcemanagermember.returntype.getunderlyingclass()) == 0 || mrr.resolvedmember.declaringtype.istypeininheritancetree(this.resourcemanagermember.returntype.getunderlyingclass())) ) {\t#endif foreach (expression param in objectcreateexpression.parameters) {\tprimitiveexpression p = param as primitiveexpression;\tif (p != null) {\tstring pvalue = p.value as string;\tif (!string.isnullorempty(pvalue)) {",
  "resourcetoolkit bclnrefactoryresourceresolver found string parameter",
  0
 ],
 [
  "private static bool callsecondstructinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturnstruct();\tif ((!(bool)(((dynamic)s.instanceproperty).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "overlay_protected = xwt.drawing.image.fromresource(\"lock-required-overlay-16.png\");\toverlay_unlocked = xwt.drawing.image.fromresource(\"unlocked-overlay-16.png\");\toverlay_locked = xwt.drawing.image.fromresource(\"locked-overlay-16.png\");\toverlay_ignored = xwt.drawing.image.fromresource(\"ignored-overlay-16.png\");\ticon_modified = imageservice.geticon (\"vc-file-modified\", gtk.iconsize.menu);\ticon_removed = imageservice.geticon (\"vc-file-removed\", gtk.iconsize.menu);\ticon_conflicted = imageservice.geticon (\"vc-file-conflicted\", gtk.iconsize.menu);\ticon_added = imageservice.geticon (\"vc-file-added\", gtk.iconsize.menu);\ticon_controled = xwt.drawing.image.fromresource(\"versioned-overlay-16.png\");\t} catch (exception e) {",
  "error while loading icons",
  0
 ],
 [
  "});\tcancellationduration = await taskcompletionsource.task;\ttoken.throwifcancellationrequested();\treturn new azureoperationresponse<protocol.models.cloudjob, protocol.models.jobgetheaders>() { body = new protocol.models.cloudjob() };\t};\t});\tawait assert.throwsasync<operationcanceledexception>(async () => await client.joboperations.getjobasync(\"dummy\", additionalbehaviors: new list<batchclientbehavior> { requestinterceptor }));\t}\tassert.notnull(cancellationduration);\tif (expectedcustomtokentimeouttohitfirst) {",
  "expected custom token timeout to hit first",
  0
 ],
 [
  "public bool run() {\tbool ok = false;\ttry {\tsilohost.initializeorleanssilo();\tok = silohost.startorleanssilo();\tif (ok) {",
  "successfully started orleans silo as a node",
  0
 ],
 [
  "int pos=req.indexofany(new char[]{' '});\tif(pos>=0) {\treq=req.remove(pos, req.length-pos);\t}\tpos=req.lastindexof('.');\tstring filetype;\tif (pos != -1) filetype=req.substring(pos);\telse filetype = \"\";\tstring mime_type = (string) mime_types [filetype];\tif (mime_type == null) mime_type = \"text/plain\";",
  "mime type is",
  0
 ],
 [
  "public static void main (string [] args) {\tif (args.length == 0 || args.length > 3) {",
  "unable to load assembly",
  1
 ],
 [
  "public void validationcallback(object sender, validationeventargs args) {\tif (args.severity == xmlseveritytype.warning) {\tbwarningcallback = true;\twarningcount++;\twarninginnerexceptionset = (args.exception.innerexception != null);",
  "innerexceptionset",
  0
 ],
 [
  "output.writeline();\t}\tif (type.hasnestedtypes) {\tcancellationtoken.throwifcancellationrequested();\tdisassembletype(nestedtype);\toutput.writeline();\t}\toutput.writeline();\t}\tif (type.hasfields) {",
  "usage mono api html options reference xml assembly xml diff html",
  1
 ],
 [
  "public void resolvemembermethod () {\tvar assembly = genassembly ();\tvar module = assembly.definedynamicmodule (\"foo.dll\", \"foo.dll\");\tvar type = module.definetype (\"foo\");\tvar method = type.definemethod (\"str\", methodattributes.static, typeof (void), type.emptytypes);\tvar il = method.getilgenerator ();",
  "little endian",
  1
 ],
 [
  "static int async_func_throws (int a) {",
  "async func throws from delegate",
  0
 ],
 [
  "private static int verify() {\tlock (test.locker) {\tif (test.s_field == null) {",
  "x",
  1
 ],
 [
  "public static void buildclient (servicedata sd) {\tstring file = getclientfile (sd);\tif (file.exists (file)) return;\tcreatefolderforfile (file);\tstreamwriter sw = new streamwriter (file);",
  "did not throw exception",
  1
 ],
 [
  "private static bool callsecondstructinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tdynamic d = new firstclassreturnstruct<int>();\tif ((!(((secondstruct<int>)d.instancemethod()).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "return;\t}\tforeach (var loc in locations) {\tswitch (loc) {\tbreak;\tbreak;\tbreak;\tbreak;\tbreak;\tbreak;",
  "msgstr",
  1
 ],
 [
  "type[] typesinmodule = null;\ttry {\ttypesinmodule = assembly.gettypes();\t}\tcatch (reflectiontypeloadexception ex) {\tforeach (exception loadex in ex.loaderexceptions) {\tconsole.writeline(\"\\t\" + loadex.message);\t}\t}\tcatch (exception ex) {",
  "got but expected",
  1
 ],
 [
  "}\tpath.add(start);\tilist<v> view = path.view(0, 1);\twhile (adjacent.count > 0) {\tv current = view[0];\tif (debug) console.writeline(\"==> {0}\", current);\twhile (adjacent.count > 0) {\tif (debug) console.writeline(\" => {0}, {1}\", current, path.count);\tv next = adjacent.removefirst();\tview.add(next);",
  "bad",
  0
 ],
 [
  "static int main () {\tsimpledelegate d = new simpledelegate (async_func_throws);\tasynccallback ac = new asynccallback (async_callback);\tstring state1 = \"state1\";\tiasyncresult ar1 = d.begininvoke (1, ac, state1);\twhile (cb_state == 0) thread.sleep (0);\ttry {\td.endinvoke (ar1);\treturn 1;\t} catch (asyncexception) {",
  "usage gconvexhull pointcount",
  1
 ],
 [
  "object [] arguments;\targuments = new object [] { str };\tif (compare (\"set\", mask, ref stateindex, arguments, ref more_states)) {\tcontinue;\t}\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;",
  "assert areequal mtp set",
  0
 ],
 [
  "using (var sw = new streamwriter (temppath)) {\twrite (sw);\t}\tfileservice.systemrename (temppath, path);\tgtk.application.invoke ((o, args) => {\tfileservice.notifyfilechanged (path);\t});\twrittencount++;\t} catch (ioexception ex) {\tif (monitor != null) monitor.reporterror (gettextcatalog.getstring (\"failed to write file '{0}'.\", path), ex);",
  "codebehindwriter failed",
  0
 ],
 [
  "public void addparam20(inputtype inputtype, readertype readertype, transformtype transformtype, doctype doctype) {\tstring expected = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?><result xmlns:myobj1=\"\"urn:http: 1.test1 2.test2 3.test3 4.test4 5.no value specified 6.no value specified</result>\";\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(\"myarg1\", \"urn:\" + szxslns, \"test1\");\tretobj = m_xsltarg.getparam(\"myarg1\", \"urn:\" + szxslns);",
  "added value retrieved value",
  0
 ],
 [
  "for (int j = 0; j < useless.length; j++) {\tif (useless[j] == 'u') console.writeline (\"i have detected an u char\");\t}\ttry {\tforeach (string environmentvariable in environment.getenvironmentvariables ().keys) console.writeline (environmentvariable);\t}\tcatch (system.security.securityexception exception) {\tconsole.writeline (exception.message);\tconsole.writeline (exception);\t}",
  "wde debugcontrollerthread expressionevaluationfunction other exception",
  1
 ],
 [
  "public void basictest_getipv4interfacestatistics_success_osx() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipv4interfacestatistics stats = nic.getipv4statistics();",
  "incomingunknownprotocolpackets",
  0
 ],
 [
  "needtoretry = false;\tdisposememberde = false;\tif (f) {\tdirectoryentry memberde = null;\ttry {\tstring memberdn = (string)_membersenum.current;\tmemberde = sdsutils.builddirectoryentry( buildpathfromdn(memberdn), _storectx.credentials, _storectx.authtypes);\t_storectx.initializenewdirectoryoptions(memberde);\t_storectx.loaddirectoryentryattributes(memberde);\tif ((!adutils.isofobjectclass(memberde, \"group\")) && (!adutils.isofobjectclass(memberde, \"user\")) && (!adutils.isofobjectclass(memberde, \"foreignsecurityprincipal\"))) {",
  "failed enum",
  1
 ],
 [
  "if(args.length != 3) {\treturn;\t}\tstring connectionstring = string.format( \"data source={0};\" + \"user id={1};\" + \"password={2}\", args[0], args[1], args[2]);\tconstr = connectionstring;\toracleconnection con1 = new oracleconnection();\tshowconnectionproperties (con1);\tcon1.connectionstring = connectionstring;\tcon1.infomessage += new oracleinfomessageeventhandler (oninfomessage);\tcon1.statechange += new statechangeeventhandler (onstatechange);",
  "opening",
  0
 ],
 [
  "state.ignoreaddedpropertysetters = true;\tstate.ignorevirtualchanges = true;\tstate.ignorenew.add (new regex (\".*\"));\tstate.ignoreadded.add (new regex (\".*\"));\t}\tif (showhelp || extra == null || extra.count < 2 || extra.count > 3) {\tconsole.writeline ();\toptions.writeoptiondescriptions (console.out);\tconsole.writeline ();\tconsole.writeline ();",
  "setattachedproperty",
  1
 ],
 [
  "try {\turi uri = new uri (_url);\thttpwebrequest httpwebrequest = (httpwebrequest) webrequest.create (uri);\twebresponse httpwebresponse = httpwebrequest.getresponse ();\tstream responsestream = httpwebresponse.getresponsestream ();\tstreamreader responsestreamreader = new streamreader (responsestream);\tstring response = responsestreamreader.readline ();\tresponsestreamreader.close ();\tresponsestream.close ();\thttpwebresponse.close ();",
  "attribute values",
  1
 ],
 [
  "public static void validate(x509certificate2collection expected, x509chain actual) {\titestoutputhelper log = testlogging.getinstance();",
  "certificatechainvalidation",
  0
 ],
 [
  "if (s9.f3 != 3+906) {\treturn 3;\t}\tif (s9.f4 != 4+906) {\treturn 4;\t}\tif (s9.f5 != 5+906) {\treturn 5;\t}\tif (s9.f6 != 6+906) {",
  "aborted",
  1
 ],
 [
  "public symvalue addjointedge (symvalue v1target, symvalue v2target, tfunc function, symvalue[] resultargs) {\tsymvalue result = lookupmapping (v1target, v2target);\tbool newedge = false;\tif (result == null) {\tif (ismappingalreadyadded (v1target, v2target)) {",
  "symgraph changed due to pre existing mapping in of",
  0
 ],
 [
  "public int transformresolver(string szxmlfile, outputtype outputtype, navtype navtype, xmlresolver xr, bool errorcase) {\tszxmlfile = fullfilepath(szxmlfile);\tixpathnavigable xd = loadxml(szxmlfile, navtype);",
  "executing transform",
  0
 ],
 [
  "private static bool test9() {\tchar a = 'a';\tdynamic b = a;\t++b;\tif (b == 'b') return true;",
  "failed char",
  0
 ],
 [
  "static void writesymbol (streamwriter sw, string name, long size) {\tswitch (style){",
  "overload binary operator",
  1
 ],
 [
  "if (!int.tryparse (args [0], out tcpport)) return 2;\tif (!int.tryparse (args [1], out processid)) return 3;\tvar thread = new thread (new parameterizedthreadstart (loop));\tthread.start (tcpport);\tvar sw = stopwatch.startnew ();\twhile (!disonnected) {\tsentevent.waitone ();\tsw.restart ();\tif (!responseevent.waitone (100)) {\tstartcollectingstacks ();",
  "response seq in sw elapsed",
  0
 ],
 [
  "}\tadditemtoallowrollback(ref addeditems, datacolumn);\tcolumncollection.add(datacolumn);\t}\tif (addprimarykeys && schemarow.iskey) {\tif (keys == null) {\tkeys = new datacolumn[schemarows.length];\t}\tkeys[keycount++] = datacolumn;\t#if debug if (adapterswitches.dataschema.traceverbose) {",
  "setupschema building list of primarykey uniqueconstraint",
  0
 ],
 [
  "public principalcontext( contexttype contexttype, string name, string container, contextoptions options, string username, string password) {",
  "principalcontext entering ctor",
  0
 ],
 [
  "public void element_5(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(null);\t}\tcatch (argumentexception e) {\tcerror.compare(w.writestate, (utils.writertype == writertype.charcheckingwriter) ? writestate.start : writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "main creating second thread",
  1
 ],
 [
  "public void databits_7_afteropen() {",
  "rununwraptests waiting for container if we deadlock cancellations are not being cleaned up properly",
  1
 ],
 [
  "protected override void generateconditionstatement (codeconditionstatement statement) {\ttextwriter output = output;\toutput.write (\"if \");\tgenerateexpression (statement.condition);\t++indent;\tgeneratestatements (statement.truestatements);\t--indent;\tcodestatementcollection falses = statement.falsestatements;\tif (falses.count > 0) {",
  "else",
  0
 ],
 [
  "public void basictest_accessinstanceproperties_noexceptions_osx() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tstring description = nic.description;\tassert.false(string.isnullorempty(description), \"networkinterface.description should not be null or empty.\");\tstring id = nic.id;\tassert.false(string.isnullorempty(id), \"networkinterface.id should not be null or empty.\");",
  "verifying minvalue databits",
  1
 ],
 [
  "public void testincompleteparameter() {\tstring code = {\tvoid bar (params system.a) {}\t}\t\";\tvar unit = syntaxtree.parse(code);\tvar type = unit.members.first() as typedeclaration;\tvar method = type.members.first() as methoddeclaration;\tbool passed = method.parameters.count == 1;\tif (!passed) {",
  "unhandled exception in onlayoutsize",
  1
 ],
 [
  "public static bool verifynode(xmlreader r, xmlnodetype eexpnodetype, string strexpname, string strexpvalue) {\tbool bpassed = true;\tif (r.nodetype != eexpnodetype) {\tbpassed = false;\t}\tif (r.name != strexpname) {\tbpassed = false;\t}\tif (r.value != strexpvalue) {",
  "invalid view hash offset size",
  1
 ],
 [
  "public bool stop() {\tbool ok = false;\ttry {\tsilohost.stoporleanssilo();",
  "orleans silo shutdown",
  0
 ],
 [
  "if (tool.useoutputpad) processwrapper = runtime.processservice.startprocess (commandtool, argumentstool, initialdirectorytool, progressmonitor.log, progressmonitor.log, null);\telse processwrapper = runtime.processservice.startprocess (commandtool, argumentstool, initialdirectorytool, null);\tstring processname = system.io.path.getfilename (commandtool);\ttry {\tprocessname = processwrapper.processname;\t} catch (systemexception) {\t}\tprocesswrapper.waitforoutput ();\tif (processwrapper.exitcode == 0) {\t} else {",
  "exception",
  1
 ],
 [
  "try {\tw.writestartelement(\"root\");\tw.writeraw(\"\\ud812\");\t}\tcatch (argumentexception e) {\tcerror.writelineignore(e.tostring());\tcerror.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "private static bool callsecondinterfaceinstancemethod() {\tint failcount = 0;\tdynamic d = new firstclassreturninterface();\tverify.firstcalled = false;\tif ((!(((d + 1)).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "opened",
  1
 ],
 [
  "public void build () {\ttry {\tforeach (xelement el in xdocument.nodes.oftype<xelement> ()) addmember (el);\t} catch (exception ex) {",
  "activeworkbenchwindowchanged to",
  1
 ],
 [
  "myobject obj = new myobject(1, _output);\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addextensionobject(szdefaultns, obj);\tm_xsltarg.removeextensionobject(szdefaultns);\ttry {\tif ((loadxsl(\"myobjectdef.xsl\", inputtype, readertype) == 1)) transform_arglist(\"fruits.xml\", true, transformtype, doctype);\t}\tcatch (system.xml.xsl.xsltexception) {\treturn;\t}",
  "did not throw expected exception",
  0
 ],
 [
  "public virtual servicetype getservice<servicetype> (params object[] args) where servicetype : class {",
  "asdafsdafs",
  0
 ],
 [
  "public void ipinfotest_accessallipv4properties_noerrors() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfaceproperties ipproperties = nic.getipproperties();\tif (!nic.supports(networkinterfacecomponent.ipv4)) {\tvar nie = assert.throws<networkinformationexception>(() => ipproperties.getipv4properties());\tassert.equal(socketerror.protocolnotsupported, (socketerror)nie.errorcode);\tcontinue;\t}\tipv4interfaceproperties ipv4properties = ipproperties.getipv4properties();",
  "issuing request type",
  1
 ],
 [
  "public void printusage() {\tusing (var usagestr = new stringwriter()) {",
  "failed long",
  1
 ],
 [
  "_output.writeline(e1.message);\tif (xslinputtype == xslinputtype.uri) return;\telse {\tassert.true(false);\t}\t}\tcatch (argumentnullexception e2) {\t_output.writeline(e2.message);\tif (xslinputtype == xslinputtype.uri) return;\telse {",
  "argumentnullexception is not supposed to be thrown for the input type",
  0
 ],
 [
  "public static void thread() {\tthread.sleep(500);\tthread.sleep(500);\tthread.sleep(500);\tthread.sleep(500);",
  "slow command update ms command method commandtargettype",
  1
 ],
 [
  "public void add (xelement source, xelement target, apichange change) {\tif (!change.anychange) {\tif (!change.hasignoredchanges) {\tvar isfield = source.name.localname == \"field\";\tif (isfield) {\t} else {",
  "wtf",
  1
 ],
 [
  "public void checkexpectederror(exception ex, string assembly) {\tcexceptionhandler handler = new cexceptionhandler(path.combine(_strpath, \"exceptions.xml\"), assembly, _output);\tbool result = handler.verifyexception(ex);\tif (handler.res != _expectederrorcode) {",
  "actual exception",
  0
 ],
 [
  "int i = 0;\tvar solutionformat = gettextcatalog.getstring (\"load solution {0}\");\tvar ctrlmodtext = gettextcatalog.getstring (\"hold control to open in current workspace.\");\tforeach (var ri in projects) {\ticonid icon;\ttry {\tif (!file.exists (ri.filename)) continue;\ticon = ideapp.services.projectservice.fileisobjectoftype (ri.filename, typeof(solution)) ? \"md-solution\": \"md-workspace\";\t}\tcatch (unauthorizedaccessexception exaccess) {",
  "table",
  1
 ],
 [
  "} catch (exception e) {\tif (!(e is threadabortexception)) throw;\tif (!got_to_the_end_of_the_finally) throw new exception (\"test 4: did not get to the end of the cctor\");\t}\t});\tthread.start ();\tdriver.mre1.waitone ();\tthread.abort ();\tthread.join ();\tif (!got_to_the_end_of_the_finally) {",
  "got but expected",
  1
 ],
 [
  "idatareader reader;\tobject odatavalue;\ttry {\tdroptable (cnc);\t}\tcatch (sqlexception e) {\t}\ttry {\tcreatetable (cnc);\tinsertdata (cnc);",
  "ok",
  0
 ],
 [
  "public int getextnobject2(object args) {\tobject retobj;\tfor (int i = 1; i <= 100; i++) {\tretobj = xsltarg1.getextensionobject(((object[])args)[1].tostring());\tif (((myobject)retobj).myvalue() != (int)((object[])args)[0]) {",
  "if reader isemptyelement reader skip reader movetocontent continue",
  1
 ],
 [
  "if (e.item is idragdropitem) {\tidragdropitem node = (idragdropitem)e.item;\tnode.selectthisitem();\tif (node.isdragsource) {\tdesignerhost.host.addingcontrols = true;\t((control)_control).dodragdrop(node, dragdropeffects.copy);\tdesignerhost.host.addingcontrols = false;\t}\t}\t} catch (exception ex) {",
  "itemdragevent exception",
  0
 ],
 [
  "foreach (object value in list) {\tconsole.write (value);\tconsole.write (environment.newline);\t}\tint x = 0;\tfor (int i = 0; i < 100; i++) x++;\tconsole.writeline (x);\tstring useless = \"useless string\";\tif (useless.equals (\"other useless\")) {\tuseless = string.empty;",
  "other useless string",
  0
 ],
 [
  "private static bool callsecondstructoperator() {\tint failcount = 0;\tverify.firstcalled = false;\tdynamic d = new firstclassreturnstruct<int>();\tif ((!(((secondstruct<int>)d.instancemethod()) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "value of removed object is not null",
  1
 ],
 [
  "if (_foreignresultset != null) {\tdebug.assert(_recursive == true);\tbool f = _foreignresultset.movenext();\tif (f) {\t_current = null;\t_currentfakeprincipal = null;\t_currentforeign = null;\treturn true;\t}\tif (_foreigngroups.count > 0) {",
  "modifier color",
  1
 ],
 [
  "dynpara = null;\tint n = 0;\ttry {\tvv.m(dynpara, n);\t}\tcatch (microsoft.csharp.runtimebinder.runtimebinderexception e) {\tif (errorverifier.verify(errormessageid.badargtypes, e.message, \"s.m<int>(int, int)\")) ret--;\t}\ttry {\tvd.m(n, dynpara);",
  "no ex",
  0
 ],
 [
  "public void ipinfotest_accessallipv4properties_noerrors() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfaceproperties ipproperties = nic.getipproperties();\tipv4interfaceproperties ipv4properties = ipproperties.getipv4properties();\tassert.throws<platformnotsupportedexception>(() => ipv4properties.isautomaticprivateaddressingactive);\tassert.throws<platformnotsupportedexception>(() => ipv4properties.isautomaticprivateaddressingenabled);\tassert.throws<platformnotsupportedexception>(() => ipv4properties.isdhcpenabled);\tassert.throws<platformnotsupportedexception>(() => ipv4properties.isforwardingenabled);",
  "waiting for task to be scheduled",
  1
 ],
 [
  "selectaggregate (cnc, \"sum(int_value)\");\treader = selectdata (cnc);\treaddata(reader);\treader = selectdatausingcommand(cnc);\treaddata(reader);\treader = selectdatausinginsertcommand(cnc);\treaddata(reader);\tobject obj = callstoredprocedure(cnc);\t}\tcatch(exception e) {",
  "exception caught",
  0
 ],
 [
  "s5.f1 = 1;\ts5.f2 = 2;\ts5.f3 = 3;\ts5.f4 = 4;\ts5.f5 = 5;\ts5 = mono_return_short5(s5, 90);\tif (s5.f1 != 1+90) {\treturn 1;\t}\tif (s5.f2 != 2+90) {",
  "got but expected",
  0
 ],
 [
  "m_xsltarg = new xsltargumentlist();\tm_xsltarg.addextensionobject(szdefaultns, obj);\tif ((loadxsl(\"myobject_notfound.xsl\", xslinputtype, readertype) == 1)) {\ttry {\ttransform_arglist(\"fruits.xml\", outputtype, navtype, true);\t}\tcatch (system.xml.xsl.xsltexception) {\treturn;\t}\t}",
  "the timer test failed the periodic timer has not fired",
  1
 ],
 [
  "static bool callsecondstructoperator() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturndynamicstruct<int>();\tif ( (!(bool)(s.instanceproperty + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "outgoingpacketswitherrors",
  1
 ],
 [
  "public static void dumpfeed(syndicationfeed f, string label) {\tstring path = path.combine(\"test\", label);\tf.lastupdatedtime = feedlib.fixedchangeddate;\tusing (xmltextwriter writer = new xmltextwriter(path + \".atom.xml\", null)) {\twriter.formatting = formatting.indented;\tatom10serializer serializer = new atom10serializer();\tserializer.writeto(writer, f);\t}\tusing (xmltextwriter writer = new xmltextwriter(path + \".rss.xml\", null)) {",
  "added value retrieved value",
  1
 ],
 [
  "xdocument doc = new xdocument();\txmlwriter w = createwriter(doc);\txmlreader xr = createreader(path.combine(filepathutil.gettestdatapath(), path.combine(\"xmlwriter2\", \"xmlreader.xml\")));\twhile (xr.read()) {\tif (xr.localname == \"attributesgeneric\") {\tdo { xr.read(); } while (xr.localname != \"node\");\tbreak;\t}\t}\tif (xr.nodetype != xmlnodetype.element) {",
  "define",
  1
 ],
 [
  "catch {\ti--;\t}\t}\tsn = new strongname (size);\twritetofile (args[i], cryptoconvert.tocapikeyblob (sn.rsa, true));\tbreak;\tbreak;\tcase \"-o\": byte[] infiled = readfromfile (args [i++]);\twritecsvtofile (args [i], infiled, \"d\");",
  "output csv file is decimal format",
  0
 ],
 [
  "debug.assert(_blen <= s_cnumemax, \"m_blen <= x_cnumemax\", \"in assertvalid\");\tuint[] rgldata = new uint[4] { _data1, _data2, _data3, _data4 };\tif (rgldata[_blen - 1] == 0) {\tdebug.assert(_blen == 1, \"m_blen == 1\", \"in assertvalid\");\t}\tfor (int iuldata = _blen; iuldata < s_cnumemax; iuldata++) debug.assert(rgldata[iuldata] == 0, \"rgldata[iuldata] == 0\", \"in assertvalid\");\t}\t[system.diagnostics.conditional(\"debug\")]\tprivate void print() {\tif (isnull) {",
  "numeric null",
  0
 ],
 [
  "var promises = new list<task<double>>();\tfor (int s = 0; s < numstreams; s++) {\tguid streamid = guid.newguid();\ttask<double> promise = task.run( () => testonestream(streamid, streamprovidername, numproducers, numconsumers, nummessages, usefanout));\tpromises.add(promise);\tif (!usefanout) {\tawait promise;\t}\t}\tif (usefanout) {",
  "nic",
  1
 ],
 [
  "public void testalreadypresentnullcheckinconditionalternaryexpression1() {",
  "imports system imports system collections generic class testclass public sub testmethod list as ienumerable of string console writeline if list isnot nothing list first end sub end class",
  0
 ],
 [
  "xmlschemaattribute attribute = (xmlschemaattribute)derivedtype.attributeuses[attributebase.qualifiedname];\tif (attribute == null) {\tderivedtype.attributeuses.add(attributebase.qualifiedname, attributebase);\t}\telse {\tif (attributebase.use == xmlschemause.prohibited && attribute.use != xmlschemause.prohibited) {\t#if debug string position = string.empty;\tif (derivedtype.sourceuri != null) {\tposition = \" in \" + derivedtype.sourceuri + \"(\" + derivedtype.linenumber + \", \" + derivedtype.lineposition + \")\";\t}",
  "access friend internal method ok",
  1
 ],
 [
  "static void thread () {\ttfailed = false;\tif (var != 0) tfailed = true;\tfor (int i = 0; i < 10; ++i) {\tvar += 10;\tthread.sleep (5);\t}",
  "task done",
  1
 ],
 [
  "public chirperperformancecounters(string instancename) {\tchirpspersecond = new chirperperformancecounterlong(null);\tif (performancecountercategory.exists(categoryname)) {\ttry {\tchirpspersecond = new chirperperformancecounterlong(new performancecounter(categoryname, chirpspersecondname, instancename, false));\t}\tcatch {",
  "failed to initialize performance counters",
  0
 ],
 [
  "public void runaction (action<texteditordata> action) {\ttry {\taction (gettexteditordata ());\t} catch (exception e) {",
  "error while executing",
  0
 ],
 [
  "if (!(t && f == false)) error++;\telse ok |= 16;\tint i = 0;\tw(3);\tdo {\ti++;\t} while (!(i > 5));\tif (i != 6) error ++;\telse ok |= 32;\tw(100);",
  "value",
  0
 ],
 [
  "if (size != dict.count) {\tconsole.writeline(\"list.size ({0}) != dict.count ({1})\", size, dict.count);\tretval = false;\t}\tnode n = startsentinel.next, n2;\twhile (n != endsentinel) {\tif (!dict.find(n.item, out n2)) {\tretval = false;\t}\telse if (n != n2) {",
  "wrong node in dict for item",
  0
 ],
 [
  "private static bool guidtypewithidentityconversioninassignment() {\tint failcount = 0;\tguid origin = new guid(\"11111111-2222-3333-4444-555555555555\");\tdynamic d = origin;\tguid result = d;\tif (result != origin) {\tfailcount++;",
  "rowsaffected after close",
  1
 ],
 [
  "boolean bt = (1 == 1);\tm_xsltarg.addparam(\"myarg4\", szempty, bt);\tretobj = m_xsltarg.getparam(\"myarg4\", szempty);\tif (!bt.equals(retobj)) {\tassert.true(false);\t}\txpathdocument xd = new xpathdocument(fullfilepath(\"fish.xml\"));\tm_xsltarg.addparam(\"myarg5\", szempty, ((ixpathnavigable)xd).createnavigator());\tretobj = m_xsltarg.getparam(\"myarg5\", szempty);\tif (retobj == null) {",
  "failed bool bool",
  1
 ],
 [
  "static void help () {",
  "verifying false rtsenable before open",
  1
 ],
 [
  "static dnd () {\ttry {\twidgeticon = gdk.pixbuf.loadfromresource (\"widget.png\");\t} catch (exception e) {",
  "error while loading pixbuf widget png",
  0
 ],
 [
  "public static void createwhitespacehandlingtestfile(string strfilename) {\tstream s = new memorystream();\ttextwriter tw = new streamwriter(s);",
  "nested got but expected",
  1
 ],
 [
  "static bool runtest (methodinfo test) {\tconsole.write (\"running test {0, -25}\", test.name);\ttry {\tvar d = new dynamicobjectmock ();\ttest.invoke (new tester (), new[] { d, d });\tif (d.hitcounter < 1) assert (true, false, \"hitcounter\");\treturn true;\t} catch (exception e) {",
  "failed",
  0
 ],
 [
  "private static bool nullablechartypewithidentityconversioninassignment() {\tint failcount = 0;\tchar? origin = '\\0';\tdynamic d = origin;\tchar? result = d;\tif (result != origin) {\tfailcount++;",
  "test failed at conversion result",
  0
 ],
 [
  "public static async task test () {\tusing (var device_resource = new c ()) {\ttry {",
  "missing argument to repeat command line option",
  1
 ],
 [
  "static void generate_emision () {\tforeach (string type in types){\tw (\"\\tstatic void probe_\" + type + \"()\\n\\t{\\n\");\tvar (type, \"zero\", \"0\");\tvar (type, \"min\", type + \".minvalue\");\tvar (type, \"max\", type + \".maxvalue\");\twl (\"\");",
  "console writeline type",
  0
 ],
 [
  "static private void help () {",
  "pragma warning disable writeline",
  1
 ],
 [
  "static int main () {\tr1 myobj = new r1 ();\tint res = 0;\tmyproxy real_proxy = new myproxy (myobj);\tr1 o = (r1)real_proxy.gettransparentproxy ();\tremotedelegate1 d1 = new remotedelegate1 (o.add);\tiasyncresult ar = d1.begininvoke (2, out res, 3, null, null);\tmystruct myres = d1.endinvoke (out res, ar);",
  "result",
  0
 ],
 [
  "public static void cursorpositionandarrowkeys() {",
  "use the up down left and right arrow keys to move around when done press enter",
  0
 ],
 [
  "protected static void writeheader (streamwriter s, string assembly, bool noconfig) {\tif (!noconfig) {",
  "include config h",
  0
 ],
 [
  "public static async task formatfile (policycontainer policies, filepath file) {\tstring mime = desktopservice.getmimetypeforuri (file);\tif (mime == null) return;\tvar formatter = codeformatterservice.getformatter (mime);\tif (formatter != null) {\ttry {\tvar content = await textfileutility.readalltextasync (file);\tvar formatted = formatter.formattext (policies, content.text);\tif (formatted != null) textfileutility.writetext (file, formatted, content.encoding);\t} catch (exception ex) {",
  "optimization failed",
  1
 ],
 [
  "public static void displaypools(itestoutputhelper testoutputhelper, ienumerable<cloudpool> poolsenumerable) {\tlist<cloudpool> pools = new list<cloudpool>(poolsenumerable);\tint numpools = (null != pools) ? pools.count : 0;\ttestoutputhelper.writeline(\"\");\ttestoutputhelper.writeline(\"\");\tforeach (cloudpool curpool in pools) {\ttestoutputhelper.writeline(curpool.id + \":\");",
  "at",
  1
 ],
 [
  "static void run() {\tprocess proc = new process();\tbool ret;\tproc.startinfo.filename=\"wibble-redir\";\tproc.startinfo.arguments=\"arg1    arg2\\targ3 \\\"arg4a arg4b\\\"\";\tproc.startinfo.useshellexecute=false;\tproc.startinfo.redirectstandardinput=true;\tret=proc.start();\tsystem.threading.thread.sleep(1000);",
  "debug mode message",
  1
 ],
 [
  "string[] stringvalues = new string[]\t{\tstring.empty, \"abc\", null }\t;\tforeach (string a2 in stringvalues) {\tforeach (string a3 in stringvalues) {\tbool d1 = true;\tstring d2 = a2;\tdynamic d3 = 100;\tif ((d1 ? \"abc\" : d3) != (d1 ? \"abc\" : a3)) {",
  "failed bool string string",
  0
 ],
 [
  "public override string tostring () {\tstringwriter sw = new stringwriter ();",
  "extra",
  0
 ],
 [
  "static void function () {",
  "adding integer parameter of value",
  1
 ],
 [
  "try {\tw.writestartelement(\"root\");\tw.writeendelement();\tw.writefullendelement();\t}\tcatch (invalidoperationexception e) {\tcerror.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "private static bool nouserdefinedimplicitandexplicitconversion() {\tint failcount = 0;\tc origin = new c();\tdynamic d = origin;\ttry {\tc2 result = d;\tfailcount++;",
  "test failed should throw exception",
  0
 ],
 [
  "static bool loadproperties (string filename) {\tproperties = null;\tif (file.exists (filename)) {\ttry {\tproperties = properties.load (filename);\t} catch (exception ex) {",
  "error loading properties from file",
  0
 ],
 [
  "sb = new stringbuilder ();\tsr = new streamreader (ms, encoding.utf8);\tline = sr.readline ();\twhile (line != null) {\tsb.append (line);\tsb.append (\"\\r\\n\");\tline = sr.readline ();\t}\t}\tsw = new stringwriter ();",
  "content length",
  0
 ],
 [
  "public static int main () {\tobject o = 3;\tbool r = o is system.string t1;\tif (r) return 2;\tif (o is string t2) return 3;\tlong? l = 5;\tbool r3 = l is long t4;\tif (!r3) return 8;",
  "assert areequal scan",
  1
 ],
 [
  "protected override void write (parray array) {\tif (array.count == 0) {\treturn;\t}",
  "verifying read method throws exception without a call to open",
  1
 ],
 [
  "string a = args[i];\tif (a.startswith(\"-\") || a.startswith(\"/\")) {\tswitch (a.tolowerinvariant()) {\tcase \"/?\": case \"/help\": case \"-?\": case \"-help\": return false;\treturn false;\t}\t}\telse if (a.contains(\"=\")) {\tstring[] split = a.split('=');\tif (string.isnullorempty(split[1])) {",
  "bad command line arguments supplied",
  0
 ],
 [
  "protected override void generatetypeconstructor(codetypeconstructor e) {\tif (!(iscurrentclass || iscurrentstruct)) return;\tif (e.customattributes.count > 0) {\toutputattributes(e.customattributes, false);\t}",
  "cil managed",
  1
 ],
 [
  "public void parityreplace_after_parityreplace() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (serialport com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "name uri",
  1
 ],
 [
  "public static extern int symlink (string oldpath, string newpath);\tprivate static string getgacdir () {\tsystem.reflection.propertyinfo gac = typeof (system.environment).getproperty (\"gacpath\", system.reflection.bindingflags.static|system.reflection.bindingflags.nonpublic);\tif (gac == null) {",
  "error mono runtime not detected please use the mono runtime for gacutil exe",
  0
 ],
 [
  "public void setup () {\tint i = 0;\tdo {\ttempdir = path.combine (basetempdir, (++i).tostring());\t} while (directory.exists (tempdir));\tdirectory.createdirectory (tempdir);\tfname = path.combine (tempdir, \"basic.txt\");\tusing (streamwriter sw = new streamwriter (fname)) {",
  "b test",
  1
 ],
 [
  "if (s16.f5 != 5+9) {\treturn 5;\t}\tif (s16.f6 != 6+9) {\treturn 6;\t}\tif (s16.f7 != 7+9) {\treturn 7;\t}\tif (s16.f8 != 8+9) {",
  "net detection failed optional header too short this can t be a net image",
  1
 ],
 [
  "private void disposedc() {\tif (_oldbitmap != intptr.zero && _compatdc != intptr.zero) {\tsafenativemethods.selectobject(new handleref(this, _compatdc), new handleref(this, _oldbitmap));\t_oldbitmap = intptr.zero;\t}\tif (_compatdc != intptr.zero) {",
  "delete compat dc",
  0
 ],
 [
  "public void testcase6() {\ttest<stringcompareisculturespecificissue>(@\" class test {\tvoid foo () {\t}\t}\", @\" class test {\tvoid foo () {",
  "verifying databits",
  1
 ],
 [
  "}\ttry {\tx509stores stores = ((machine) ? x509storemanager.localmachine : x509storemanager.currentuser);\tupdatestore (stores.trustedroot);\tupdatestore (stores.intermediateca);\tupdatestore (stores.personal);\tupdatestore (stores.otherpeople);\treturn 0;\t}\tcatch (exception e) {",
  "exception",
  1
 ],
 [
  "if (objecttype.isenum || instance is bool || instance is string || instance is int || instance is uint || instance is byte || instance is sbyte || instance is short || instance is ushort || instance is long || instance is ulong || instance is double || instance is float || instance is version) {\tserializedwritelinetolog(log, string.format(\"{0}: {1}\", prefix, instance));\treturn;\t}\tif (objecttype.isgenerictype || (objecttype.basetype != null && objecttype.basetype.isgenerictype)) {\tint index = 0;\tforeach (object o in (instance as system.collections.ienumerable)) {\tlog(log, string.format(\"{0}[{1}]\", prefix, index++), o);\t}\tif (index == 0) {",
  "empty",
  0
 ],
 [
  "schedule schedule = new schedule();\tschedule.donotrununtil = datetime.now.addyears(1);\tunboundjobschedule.schedule = schedule;\tunboundjobschedule.commit();\ttry {\tcloudjobschedule boundjobschedule = batchcli.jobscheduleoperations.getjobschedule(jobscheduleid);\tassert.equal(originaldisplayname, boundjobschedule.displayname);\tassert.equal(originaldisplayname, boundjobschedule.jobspecification.displayname);\tassert.equal(originaldisplayname, boundjobschedule.jobspecification.jobmanagertask.displayname);\tassert.equal(originaldisplayname, boundjobschedule.jobspecification.poolinformation.autopoolspecification.poolspecification.displayname);",
  "test failed at call result",
  1
 ],
 [
  "public void transfer([nonnull] node node, [nonnull] object infact, [nonnull] object outfact, bool warn) {\tbasicblock bb = (basicblock)node;\tif(bb.isexit || bb.isexception) return;\tnullderefframe outframe = (nullderefframe)outfact;\tvariabledefinitioncollection vars = method.body.variables;\tif (verbose) {\ttrace.writeline (string.empty);",
  "basic block",
  0
 ],
 [
  "static void help (string details) {\tswitch (details) {",
  "vx remove all exemptions entries",
  0
 ],
 [
  "public static int main () {\tint v;\tv = test1 ();\tif (v != 0) return v;\tv = test2 ();\tif (v != 0) return v;",
  "all tests pass",
  0
 ],
 [
  "private void renderpostbackcards() {\tfor (int i = 0; i < 2; i++) {\tif (_writtenpostbacktype[i]) {\twritebegintag(\"card\");\twriteattribute(\"id\", i == 0 ? _postbackwithvarscardid : _postbackwithoutvarscardid);\twriteline(\">\");\twrite(\"<onevent type=\\\"onenterforward\\\">\");\trendergoaction(null, _postbackeventargumentvarname, wmlpostfieldtype.variable, i == 0);",
  "tests done",
  1
 ],
 [
  "private static bool dynamiclocalvariabledefinitioninusing() {\tint failcount = 0;\tc.calleddisposeflag = false;\tusing (dynamic d = new c()) {\tif (((int)d.m(10)) != 10) {\tfailcount++;\t}\t}\tif (!c.calleddisposeflag) {\tfailcount++;",
  "did not throw exception",
  1
 ],
 [
  "public void inbreak() {\tusing (var com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {",
  "returned lock",
  1
 ],
 [
  "string path = string.empty;\ttry {\tint length = filename_max + 1;\tstringbuilder location = new stringbuilder(length);\tint hr = msigetproductinfow(getsdkdir ? productsdkcode : productcode, installproperty_installlocation, location, ref length);\tint error = marshal.getlastwin32error();\tif (hr == 0) {\tpath = location.tostring();\t}\telse {",
  "did not return null for empty string param name",
  1
 ],
 [
  "static void run() {\tprocess proc = new process();\tbool ret;\tproc.startinfo.filename=\"wibble\";\tproc.startinfo.arguments=\"arg1    arg2\\targ3 \\\"arg4a arg4b\\\"\";\tproc.startinfo.useshellexecute=false;\tret=proc.start();",
  "frompage",
  1
 ],
 [
  "public void defaultcolumnnameaddlistchangedtest() {\tstring result = @\"setting table... ---- onlistchanged propertydescriptorchanged,0,0 ---- onlistchanged reset,-1,-1 table was set. ---- onlistchanged propertydescriptoradded,0,0 default named column added. ---- onlistchanged propertydescriptoradded,0,0 non-default named column added. ---- onlistchanged propertydescriptoradded,0,0 another default named column added (column2). ---- onlistchanged propertydescriptoradded,0,0 add a column with the same name as the default columnnames. ---- onlistchanged propertydescriptoradded,0,0 add a column with a null name. ---- onlistchanged propertydescriptoradded,0,0 add a column with an empty name. \";\t_eventwriter = new stringwriter();\tdatatable dt = new datatable(\"table\");\tcomplexeventsequence1view dv = new complexeventsequence1view(dt, _eventwriter);\tdt.columns.add();\tdt.columns.add(\"non-defaultnamedcolumn\");\tdatacolumn c = dt.columns.add();",
  "void bar system console writeline",
  1
 ],
 [
  "public void readafterclose() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {",
  "cannot find data file",
  1
 ],
 [
  "public virtual bool namefirst (ometastream<char> inputstream, out object result) {\tresult = null;",
  "ok",
  0
 ],
 [
  "nsapplication.init();\tusing(new nsautoreleasepool()) {\tstring[] interfaces = cwinterface.supportedinterfaces;\tif(interfaces.length<1){\treturn;\t}\tcwinterface selectedintface = cwinterface.fromname (interfaces[0]);\tnserror error;\tcwnetwork[] data = selectedintface.scanfornetworkswithparameters(null, out error);\tif(error!=null){",
  "basecolumnname",
  1
 ],
 [
  "while (game == null) {\ttry {\tgame = await player.getcurrentgame();\tif (game == null) {\tawait task.delay(5000);\t}\t}\tcatch (exception exc) {\t}\t}",
  "class testclass void test system console writeline",
  1
 ],
 [
  "public static int main () {\tx x = new x ();\t((ia) x).draw ();",
  "ib",
  0
 ],
 [
  "private byte[] encryptrecordfragment( contenttype\tcontenttype, byte[]\t\tfragment) {\tbyte[] mac\t= null;\tif (this.context is clientcontext) {\tmac = this.context.write.cipher.computeclientrecordmac(contenttype, fragment);\t}\telse {\tmac = this.context.write.cipher.computeserverrecordmac (contenttype, fragment);\t}",
  "verifying read with bytes encoded with",
  1
 ],
 [
  "public static int main () {\trect rect = new rect ();\trect.x += 20;",
  "failed",
  1
 ],
 [
  "protected override string generateinfo (string filename) {\ttry {\tvar doc = typesystemservice.parsefile (null, filename, desktopservice.getmimetypeforuri (filename), stringtextsource.readfrom (filename)).result as webformsparseddocument;\tif (doc != null && !string.isnullorempty (doc.info.inheritedclass)) return doc.info.inheritedclass;\t} catch (exception ex) {",
  "error reading codebehind name for file",
  0
 ],
 [
  "private bool parsearguments(string[] args) {\tstring deploymentid = null;\tstring siloname = dns.gethostname();\tint argpos = 1;\tfor (int i = 0; i < args.length; i++) {\tstring a = args[i];\tif (a.startswith(\"-\") || a.startswith(\"/\")) {\tswitch (a.tolowerinvariant()) {\tcase \"/?\": case \"/help\": case \"-?\": case \"-help\": return false;",
  "bad command line arguments supplied",
  0
 ],
 [
  "public static void run () {\ttry {\tlong (5);\tthread.sleep (10000);\t}\tcatch (threadabortexception) {\tthread.resetabort ();",
  "field value",
  1
 ],
 [
  "public void readafterclose() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {",
  "blah",
  1
 ],
 [
  "}\tvar regex = new regex (\"converting[^\\n]* method ([^\\n]+)\\n\");\tvar matches = regex.matches (stdout);\tvar methods = new list<string> ();\tforeach (match match in matches) {\tvar method = match.groups [1].value;\tmethods.add (method);\t}\tvar success = runwithmethods (methods);\tif (success) {",
  "error ran successfully with all methods optimized nothing to bisect",
  0
 ],
 [
  "public static void main (string [] args) {\tforeach (string arg in args){\tif (arg == \"-h\" || arg == \"--help\"){",
  "retrieved",
  1
 ],
 [
  "}\ttestrunner testrunner = makerunnerfromcommandline( options );\ttry {\tif (testrunner.test == null) {\ttestrunner.unload();\treturn fixture_not_found;\t}\teventcollector collector = new eventcollector( options, outwriter, errorwriter );\ttestfilter testfilter = testfilter.empty;\tif ( options.run != null && options.run != string.empty ) {",
  "assert areequal color white brushes as solidbrush color p count",
  1
 ],
 [
  "} else if (klass == eventhandler.keventclasskeyboard) {\tswitch (kind) {\tcase keventrawkeydown: case keventrawkeyrepeat: msg.message = msg.wm_keydown;\tprocesskeypress (eventref, ref msg);\tbreak;\tcase keventrawkeyup: msg.message = msg.wm_keyup;\tprocesskeypress (eventref, ref msg);\tbreak;\tcase keventrawkeymodifierschanged: processmodifiers (eventref, ref msg);\tbreak;",
  "show help on property pad",
  1
 ],
 [
  "writer.writeline (\"<!doctype plist public \\\"- writer.writeline (\"<plist version=\\\"1.0\\\">\");\tforeach (var setting in theme.settings) {\tif (setting.name != null) {\t}\tif (setting.scopes.count > 0) {\t}\tif (setting.settings.count > 0) {\tforeach (var kv in setting.settings) {\t}\t}",
  "collision on name creation",
  1
 ],
 [
  "cmd2.transaction = transaction;\tcmd2.commandtext = \"drop table clobtest\";\tcmd2.executenonquery ();\t}\tcatch (oracleexception oe1) {\t}\toraclecommand create = connection.createcommand ();\tcreate.transaction = transaction;\tcreate.commandtext = \"create table clobtest (clob_column clob)\";\tcreate.executenonquery ();",
  "insert record",
  0
 ],
 [
  "if (provider.find (loc.item2) != null) {\tfound++;\t} else {\tmissing++;\t}\t}\t} catch (exception e) {\texceptions++;\t}\t}",
  "found",
  0
 ],
 [
  "public void openclose_openclose() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {",
  "verifying calling open close methods after calling open and basestream close",
  0
 ],
 [
  "public override string getsavedlicensekey(type type, assembly resourceassembly) {\tif (savedlicensekeys == null || savedlicensekeys[type.assemblyqualifiedname]==null) {\tif (savedlicensekeys == null) {\tsavedlicensekeys = new hashtable();\t}\turi licensefile = null;\tif (resourceassembly == null) {\tstring rawfile = (string)appdomain.currentdomain.setupinformation.licensefile;",
  "rawfile",
  0
 ],
 [
  "private void finishruntimetype(typedesc type) {",
  "got but expected",
  1
 ],
 [
  "content.encoding = content.provider.currentencoding;\tcontent.reader = new stringreader (content.text);\t}\tcontent.results.addrange(findall (monitor, content.provider, content.reader, pattern, replacepattern, filter));\tlock (results) {\tresults.addrange (content.results);\t}\tfoundmatchescount += content.results.count;\tif (searchedfilescount % step == 0) monitor.step (1);\t} catch (exception e) {",
  "chars xxx chars",
  1
 ],
 [
  "public static void threadmethod_waiter_2() {",
  "thread b i m before wait for event",
  0
 ],
 [
  "allcomputenodes.foreach( (icn) => {\t});\t}\tcatch (exception ex) {\tassert.true(false, \"samplewithfilesandpool probably can ignore this if its pool not found: \" + ex.tostring());\t}\t}) });\tlist<cloudtask> tasks = boundjob.listtasks(null).tolist();\tcloudtask mycompletedtask = tasks[0];\tforeach (cloudtask curtask in tasks) {",
  "task id state",
  0
 ],
 [
  "private void onhandleremove(string handlename, intptr handle, int handlecount) {\thandletype type = (handletype)s_handletypes[handlename];\tbool removed = false;\tif (type != null) {\tremoved = type.remove(handle);\t}\tif (!removed) {\tif (compmodswitches.handleleak.level >= tracelevel.error) {\tdebug.writeline(\"*************************************************\");",
  "virtual network gatewaysubnet id",
  1
 ],
 [
  "assert.equal(expectedfilesize, file.properties.contentlength);\tassert.equal(\"application/octet-stream\", file.properties.contenttype);\tcloudtask boundtask = boundjob.gettask(taskid);\tstring computenodeid = boundtask.computenodeinformation.affinityid.split(':')[1];\tcomputenode computenode = batchcli.pooloperations.getcomputenode(this.poolfixture.poolid, computenodeid);\tlist<nodefile> files = computenode.listnodefiles(recursive: true).tolist();\tforeach (nodefile nodefile in files) {\t}\tstring filepathtoget = string.format(\"workitems/{0}/{1}/{2}/{3}\", jobid, \"job-1\", taskid, stdoutfilename);\tfile = computenode.getnodefile(filepathtoget);",
  "delta",
  1
 ],
 [
  "public void verifyresult(string expectedvalue) {\txmldiff.xmldiff xmldiff = new xmldiff.xmldiff();\txmldiff.option = xmldiffoption.infosetcomparison | xmldiffoption.ignoreemptyelement | xmldiffoption.normalizenewline;\tstreamreader sr = new streamreader(new filestream(\"out.xml\", filemode.open, fileaccess.read));\tstring actualvalue = sr.readtoend();\tsr.dispose();",
  "parsing mono s source code",
  1
 ],
 [
  "failcount += 1;\t}\ttry {\tvar b = new wrongcasefriendassembly.internalclass(@public: 'a');\tb.internalmethod();\t} catch (memberaccessexception) {\tfailcount += 1;\t}\ttry {\twrongcasefriendassembly.internalclass.privatestaticmethod();",
  "access friend private static method ok",
  0
 ],
 [
  "if (rgldata[m_blen-1] == 0) {\tsqldebug.check(m_blen == 1, \"m_blen == 1\", \"in assertvalid\");\t}\tfor (int iuldata = m_blen; iuldata < x_cnumemax; iuldata++) sqldebug.check(rgldata[iuldata] == 0, \"rgldata[iuldata] == 0\", \"in assertvalid\");\t}\t[system.diagnostics.conditional(\"debug\")]\tprivate void print() {\tif (isnull) {\treturn;\t}",
  "error while removing template file",
  1
 ],
 [
  "public void emitsource() {",
  "using system reflection",
  0
 ],
 [
  "public void storeconfiguration() {",
  "cleanup gc",
  1
 ],
 [
  "public static void main(string[] args) {",
  "adamstorectx populatauxobjectlist unable to read schemanamingcontrext from",
  1
 ],
 [
  "private static bool test1() {\tlong[] longvalues = new long[]\t{\tlong.minvalue, long.minvalue, 0 }\t;\tforeach (long a1 in longvalues) {\tdynamic d1 = a1;\tif ((method(d1) < 10) != (a1 < 10)) {",
  "testing dynamic invoke stubs",
  1
 ],
 [
  "static int main () {\tvar res = new c { a = { [1, 1] = 11, [0, 2] = 2} };\tif (res.a [1, 1] != 11) return 1;\tif (res.a [1, 2] != 0) return 2;\tif (res.a [0, 2] != 2) return 3;",
  "ok",
  0
 ],
 [
  "try {\tthread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();\t} finally {\t}\ttry {\t} catch(threadabortexception) {\tthread.resetabort();\t} finally {",
  "threadabortexception finally",
  0
 ],
 [
  "if (objinfo != null) {\tobject o = objinfo.obj;\tobjectinfo.removeobjectinfo(o);\twhile (true) {\tint count = marshal.releasecomobject(o);\tif (count <= 0) break;\t}\t}\twhile (true) {\tint count = marshal.release(comobj);",
  "final marshal release count",
  0
 ],
 [
  "cmd.transaction = trans;\ttry {\treader = cmd.executereader();\treader.read();\treader.close();\ttrans.commit();\t}\tcatch(oracleexception e) {\ttrans.commit();\t}",
  "test failed at call result",
  1
 ],
 [
  "public static int main () {\tfoo foo = new foo ();\tfoo.p = 1;\tif (!do (foo)) return 1;",
  "attribute of type found",
  1
 ],
 [
  "userdefaultpolicies = null;\ttry {\tif (directory.exists (policiesfolder)) {\tforeach (var file in directory.getfiles (policiesfolder, \"*.mdpolicy.mdpolicy.xml\")) file.delete (file);\tforeach (var file in directory.getfiles (policiesfolder, \"*.mdpolicy.mdpolicy.xml.previous\")) file.delete (file);\tif (file.exists (policiesfolder.combine (\"default.mdpolicy.xml\")) && file.exists (policiesfolder.combine (\"userdefault.mdpolicy.xml\"))) file.delete (policiesfolder.combine (\"default.mdpolicy.xml\"));\tforeach (var file in directory.getfiles (policiesfolder, \"*.mdpolicy.xml\")) {\ttry {\tloadpolicy (file);\t} catch (exception ex) {",
  "failed to load policy file",
  0
 ],
 [
  "public void largeswitch (string s) {\tswitch (s) {\tbreak;",
  "rows retrieved",
  1
 ],
 [
  "public async static task run (monodevelop.ide.gui.document doc) {\tvar ad = doc.analysisdocument;\tif (ad == null) return;\ttry {\tdocument newdocument = await sortusingsasync (ad, default (cancellationtoken));\tad.project.solution.workspace.applydocumentchanges (newdocument, cancellationtoken.none);\t} catch (exception e) {",
  "error while sorting usings",
  0
 ],
 [
  "public static bool setcommstate(intptr hfile, ref dcb lpdcb) {",
  "added value retrieved value",
  1
 ],
 [
  "}\t}\tif (ref_changed) break;\t}*/ if (!ref_changed && last_gen_time >= file.getlastwritetime (info.steticfile)) return null;\tif (info.guibuilderproject.haserror) {\tvar error = gettextcatalog.getstring (\"gui code generation failed for project '{0}'. the file '{1}' could not be loaded.\", project.name, info.steticfile);\tmonitor.reporterror (error, null);\tthrow new userexception (error);\t}\tif (info.guibuilderproject.isempty) return null;",
  "generating gui code for project",
  0
 ],
 [
  "public void readtimeout_infinite_read_byte_int_int() {",
  "verifying infinite readtimeout with read byte buffer int offset int count",
  0
 ],
 [
  "public void ctsholding_default() {\tusing (serialport com1 = new serialport()) {\tserialportproperties serportprop = new serialportproperties();",
  "bucket s with cost",
  1
 ],
 [
  "if (datareader.getattribute(\"xmlns\") == null) {\treturn test_fail;\t}\t}\twhile (datareader.read()) ;\tdatareader.close();\treturn test_pass;\tcase \"ns\": datareader.readtodescendant(\"e:elem\");\tif (datareader.hasattributes) {\tif (datareader.getattribute(\"xmlns:e\") == null) {",
  "positioned on wrong element not on ns",
  0
 ],
 [
  "public override void run() {\ttry {\tbase.run();\t}\tcatch (exception exc) {",
  "verifying call discard method after input buffer has been filled discarded and filled again",
  1
 ],
 [
  "\"usage: git [--version] ... <command> [<args>]\", \"\", \"common options:\", { \"version\", \"show version info\", v => showversion = v != null }, { \"help\", \"show this message and exit\", v => showhelp = v != null }, \"\", \"these are common git commands used in various situations:\", \"\", \"start a working area (see also: git help tutorial)\", new command (\"clone\", \"clone a repository into a new directory\"), new command (\"init\",  \"create an empty git repository or reinitialize an existing one\"), new command (\"thisisaverylongcommandnameinordertoinducewrapping\", \"create an empty git repository or reinitialize an existing one. let's make this really long to cause a line wrap, shall we?\"), };\tvar expectedhelp = new stringwriter ();\texpectedhelp.writeline (\"\");\texpectedhelp.writeline (\"\");\texpectedhelp.writeline (\"\");\tassert.areequal (0, git.run (new [] { \"help\" }));\tassert.areequal (expectedhelp.tostring (), o.tostring ());\tvar expectedhelphelp    = new stringwriter ();\texpectedhelphelp.writeline ();\texpectedhelphelp.writeline ();",
  "resolveentity succeeded",
  1
 ],
 [
  "private static void assertequalfloatarray(float[] expected, float[] actual) {\tassert.equal(expected.length, actual.length);\tfor (int i = 0; i < expected.length; i++) {\ttry {\tassert.equal(expected[i], actual[i], 3);\t}\tcatch {\tconsole.writeline(i);",
  "microsoft visual studio solution file format version",
  1
 ],
 [
  "public void ipinfotest_accessallipv6properties_noerrors() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfaceproperties ipproperties = nic.getipproperties();\tipv6interfaceproperties ipv6properties = ipproperties.getipv6properties();\tif (ipv6properties == null) {",
  "is null",
  0
 ],
 [
  "public static int main () {\tfoo (new d1 (delegate {\tcounter = 82;",
  "in",
  0
 ],
 [
  "if (module.hasexportedtypes) {\tforeach (exportedtype exportedtype in module.exportedtypes) {\toutput.write(\".class extern \");\tif (exportedtype.isforwarder) output.write(\"forwarder \");\toutput.write(exportedtype.declaringtype != null ? exportedtype.name : exportedtype.fullname);\topenblock(false);\tif (exportedtype.declaringtype != null) output.writeline(\".class extern {0}\", disassemblerhelpers.escape(exportedtype.declaringtype.fullname));\tcloseblock();\t}\t}",
  "incorrect at",
  1
 ],
 [
  "previous = node;\t}\t}\tforeach (node node in allnodes) {\tif (!string.isnullorempty(node.codon.insertbefore)) {\tforeach (string beforereference in node.codon.insertbefore.split(',')) {\tnode referencednode;\tif (nametonodedict.trygetvalue(beforereference, out referencednode)) {\treferencednode.previous.add(node);\t} else {",
  "codon specified in the insertbefore of the codon does not exist",
  0
 ],
 [
  "public static void compareequal0isreallyequal(icomparable<int> a) {\tif (a.compareto(0) == 0) {",
  "other options",
  1
 ],
 [
  "private bool hascertificatecollectionchanged() {\tif (_certificates.count != _certificateoriginalthumbprints.count) {",
  "solution version is different",
  1
 ],
 [
  "}\tstrxml = \"<root>\t\t\t </root>\";\tbreak;\t}\txmlreader xr;\txr = createreader(new stringreader(strxml));\tdo { xr.read(); }\twhile ((xr.nodetype.tostring() != tokentype) && (xr.readstate != readstate.endoffile));\tif (xr.readstate == readstate.endoffile || xr.nodetype.tostring() != tokentype) {\txr.dispose();",
  "verifying flush throws exception after open then close",
  1
 ],
 [
  "public async task<int> run (string[] arguments) {\tdesktopservice.initialize ();\tforeach (string s in arguments) readargument (s);\tif (help) {",
  "sort sorts the output po file",
  0
 ],
 [
  "if (s17.f13 != 13+9) {\treturn 13;\t}\tif (s17.f14 != 14+9) {\treturn 14;\t}\tif (s17.f15 != 15+9) {\treturn 15;\t}\tif (s17.f16 != 16+9) {",
  "got but expected",
  0
 ],
 [
  "} else if (eku != null) {\treturn eku.enhancedkeyusages [\"1.3.6.1.5.5.7.3.1\"] != null || eku.enhancedkeyusages [\"2.16.840.1.113730.4.1\"] != null;\t}\tx509extension ext = cert.extensions [\"2.16.840.1.113730.1.1\"];\tif (ext != null) {\tstring text = ext.netscapecerttype (false);\treturn text.indexof (\"ssl server authentication\", stringcomparison.ordinal) != -1;\t}\treturn true;\t} catch (exception e) {",
  "please report this problem to the mono team",
  0
 ],
 [
  "public void addservicereference() {\tcompilermessageview.instance.bringtofront();\turi uri = getserviceuri();\tif (uri == null) return;\ttry {\tservicegenerator.options.servicename = defaultnamespace;\tservicegenerator.options.url = uri.tostring();\tservicegenerator.addservicereference();\t} catch (exception ex) {",
  "failed to add service reference",
  0
 ],
 [
  "int x = 0;\tfor (int i = 0; i < 100; i++) x++;\tconsole.writeline (x);\tstring useless = \"useless string\";\tif (useless.equals (\"other useless\")) {\tuseless = string.empty;\t}\tuseless = string.concat (useless,\" 1\");\tfor (int j = 0; j < useless.length; j++) {\tif (useless[j] == 'u') console.writeline (\"i have detected an u char\");",
  "i have detected an useless char",
  0
 ],
 [
  "}\tforeach (tfunc function in functions) {\tsymvalue v1 = this.graph1.lookupwithoutmanifesting (sv1, function);\tsymvalue v2 = this.graph2.lookupwithoutmanifesting (sv2, function);\tif (v1 == null) {\tif (!this.widen && function.manifestfield) {\tchanged = true;\t} else continue;\t}\tif (v2 == null && (this.widen || !function.manifestfield)) {",
  "symgraph changed due to absence of map in",
  0
 ],
 [
  "{\tifoo t = new classwithifoo(\"class\");\tfunc<int, string> d = t.dofoo;\tif (d(987) != \"class987\") return false;\t}\t{\tifoo t = new structwithifoo(\"struct\");\tfunc<int, string> d = t.dofoo;\tif (d(654) != \"struct654\") return false;\t}",
  "hello",
  1
 ],
 [
  "private static bool exceptionwithreferenceconversionfromuserdefinedexceptioninassignment() {\tint failcount = 0;\tvar origin = new myexception(0xe000);\tdynamic d = origin;\texception result = d;\tif (((myexception)result).code != origin.code) {\tfailcount++;",
  "resourcetoolkit defaultfilelocalizedresourcesfinder getlocalizedcontents returning null for file because it has been detected as being a localized resource file itself",
  1
 ],
 [
  "static void async_callback (iasyncresult ar) {",
  "assert areequal mtp verifystring",
  1
 ],
 [
  "public int getparam1(object args) {\tobject retobj;\tfor (int i = 1; i <= 100; i++) {\tretobj = xsltarg1.getparam(((object[])args)[1].tostring(), szempty);\tif (retobj.tostring() != \"test1\") {",
  "error",
  0
 ],
 [
  "thread.sleep(trigering_events_wait_time);\tcom1.databits = 8;\tcom1.parity = parity.none;\tcom2.basestream.write(new byte[] { 40 }, 0, 1);\tthread.sleep(trigering_events_wait_time);\tcom1.databits = 7;\tcom1.parity = parity.none;\tcom2.basestream.write(new byte[] { 0x01 }, 0, 1);\tthread.sleep(trigering_events_wait_time);\tcom2.rtsenable = true;",
  "exception",
  1
 ],
 [
  "private string generatetypeelement(xmltypemapping xmltypemapping) {\telementaccessor element = xmltypemapping.accessor;\ttypemapping mapping = element.mapping;\tstring methodname = nextmethodname(element.name);\twriter.writeline();\twriter.write(\"public void \");\twriter.write(methodname);",
  "assert areequal mtp verifychar out maskedtextresulthint out",
  1
 ],
 [
  "throw adp.invalidsourcetable(nameof(sourcetable));\t}\tswitch (mappingaction) {\tcase missingmappingaction.passthrough: #if debug if (adapterswitches.dataschema.traceinfo) {\t}\t#endif return new datatablemapping(sourcetable, datasettable);\tcase missingmappingaction.ignore: #if debug if (adapterswitches.dataschema.tracewarning) {\t}\t#endif return null;\tcase missingmappingaction.error: #if debug if (adapterswitches.dataschema.traceerror) {",
  "bad view hash offset size end index underlying size",
  1
 ],
 [
  "}\tprocess p = new process ();\tp.startinfo.useshellexecute = false;\tp.startinfo.redirectstandardoutput = true;\tp.startinfo.filename = \"gacutil\";\tp.startinfo.arguments = \"-l\";\ttry {\tp.start ();\t}\tcatch {",
  "warning gacutil could not be found",
  0
 ],
 [
  "static bool callsecondstructoperator() {\tint failcount = 0; verify.firstcalled = false;\tif ( (!(bool)(firstclassreturndynamicstruct<int>.staticmethod() + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "iimmutablemap<symvalue, symvalue> backwardmap = immutableintkeymap<symvalue, symvalue>.empty (symvalue.getuniquekey);\tiimmutablemap<symvalue, sequence<symvalue>> forwardmap = immutableintkeymap<symvalue, sequence<symvalue>>.empty (symvalue.getuniquekey);\tiimmutablemap<symvalue, int> triggers = immutableintkeymap<symvalue, int>.empty (symvalue.getuniquekey);\twhile (!worklist.isempty ()) {\tequalitypair<tfunc, tadomain> equalitypair = worklist.pull ();\tsymvalue sv1 = equalitypair.sv1;\tsymvalue sv2 = equalitypair.sv2;\tsymvalue s;\tif (visitedbefore (sv2, backwardmanifested, backwardmap, out s)) {\tif (s != null && s == sv1) continue;",
  "test failed",
  1
 ],
 [
  "static bool callsecondinterfaceindexer() {\tint failcount = 0; verify.firstcalled = false;\tif ( (!(bool)(((dynamic)firstclassreturninterface.staticmethod())[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "tokentoderivefrom",
  1
 ],
 [
  "targetsilo = hostedcluster.secondarysilos.first().siloaddress.endpoint;\t}\tguid proxykey;\tirandomplacementtestgrain proxy;\tipendpoint expected;\tdo {\tproxykey = guid.newguid();\tproxy = grainfactory.getgrain<irandomplacementtestgrain>(proxykey);\texpected = await proxy.getendpoint();\t} while (!targetsilo.equals(expected));",
  "project name not specified in p option",
  1
 ],
 [
  "}\tif (s2.f2 != 2+906) {\treturn 2;\t}\tfloat3 s3;\ts3.f1 = 1;\ts3.f2 = 2;\ts3.f3 = 3;\ts3 = mono_return_float3(s3, 906);\tif (s3.f1 != 1+906) {",
  "got but expected",
  0
 ],
 [
  "public void ongeneric (string type) {",
  "callback generic",
  0
 ],
 [
  "public void linqtosqlobject04() {\tvar db = createdb();\tvar ds = new dataloadoptions();\tds.loadwith<customer>(p => p.orders);\tds.loadwith<order>(p => p.orderdetails);\tdb.loadoptions = ds;\tvar custs = from c in db.customers where c.city == \"london\" select c;\tforeach (var cust in custs) foreach (var ord in cust.orders) foreach (var orderdetail in ord.orderdetails) {",
  "x",
  1
 ],
 [
  "protected override versioninfo[] ongetdirectoryversioninfo (filepath localdirectory, bool getremotestatus, bool recursive) {\ttry {\treturn getdirectoryversioninfo (localdirectory, null, getremotestatus, recursive);\t} catch (exception e) {",
  "failed to get git directory status",
  0
 ],
 [
  "if (s8.f2 != 2+906) {\treturn 2;\t}\tif (s8.f3 != 3+906) {\treturn 3;\t}\tif (s8.f4 != 4+906) {\treturn 4;\t}\tif (s8.f5 != 5+906) {",
  "got but expected",
  0
 ],
 [
  "isequenced<int> inner = new treeset<int>();\tinner.add(i); inner.add(i+1);\touter.add(inner);\t}\tipersistentsorted<int> inner1 = new treeset<int>(), inner2 = new treeset<int>(), inner3 = new treeset<int>();\tinner1.addall<int>(new int[] { 2, 3, 5, 7, 11 });\tinner2.addall(inner1); inner2.add(13);\tinner3.addall(inner1);\touter.add(inner1.snapshot());\tinner1.add(13);",
  "in outer",
  0
 ],
 [
  "public override void process(ilinstruction ilinstruction, string operandstring) {",
  "il",
  0
 ],
 [
  "public bool getinternalvariable(string name, out string svalue) {\tsvalue = \"\";\tbool valuereturned = false;\ttry {\tif (internalvariables.containskey (name) == true) {\tsvalue = (string) internalvariables[name];\tvaluereturned = true;\t}\t}\tcatch(exception e) {",
  "error internal variable does not exist",
  0
 ],
 [
  "static private void help () {",
  "failed",
  1
 ],
 [
  "public static int main () {\tstring [] s = typeof (c).assembly.getmanifestresourcenames ();\tif (s [0] != \"test-465.cs\") return 1;\tif (typeof (c).assembly.getmanifestresourcestream (\"test-465.cs\") == null) return 2;",
  "ok",
  0
 ],
 [
  "public static int main () {\ttest2 ();\ttest2 (1, 2, 3, 4, 5);\tif (test () != 0) return 1;",
  "ok",
  0
 ],
 [
  "}\ttry {\tt1.wait();\tassert.true(false, string.format(\"    > failed.  no exception thrown from wait().\"));\t}\tcatch (aggregateexception ae) {\tif (!(ae.innerexceptions[0] is taskschedulerexception)) {\tassert.true(false, string.format(\"    > failed.  wrong inner exception thrown from wait(): {0}\", ae.innerexceptions[0].gettype().name));\t}\t}",
  "base",
  1
 ],
 [
  "public void addtemplate (solutiontemplate template) {\ttry {\tif (template.hasgroupid) removetemplatefromsamegroup (template);\tvar recentitem = createrecentitem (template);\trecenttemplates.addwithlimit (recentitem, templategroup, itemlimit);\t} catch (exception e) {",
  "od outputdirectory directory directory where output will be generated",
  1
 ],
 [
  "public void sendalert(alert alert) {\talertlevel level;\talertdescription description;\tbool close;\tif (alert == null) {\tlevel = alertlevel.fatal;\tdescription = alertdescription.internalerror;\tclose = true;\t} else {",
  "collation is not null",
  1
 ],
 [
  "protected void dragenterevent(object sender, drageventargs e) {\ttry {\tidragdropitem targetnode = null;\tidragdropitem node = drageventcommon(sender, e, ref targetnode);\tif (e.effect == dragdropeffects.none) {\tidroptarget con = findancestordropcontrol(e);\tif (con != null) con.dragenterevent(sender, e);\t}\t} catch (exception ex) {",
  "exception in event handler",
  0
 ],
 [
  "public static void dataadaptertest2_insert (oracleconnection con) {\tconsole.writeline(\"================================\");\tconsole.writeline(\"=== adapter insert =============\");\tconsole.writeline(\"================================\");\toracletransaction transaction = con.begintransaction ();\toracledataadapter da = new oracledataadapter(\"select * from mono_adapter_test\", con);\tda.selectcommand.transaction = transaction;\toraclecommandbuilder mycb = new oraclecommandbuilder(da);\tdataset ds = new dataset();",
  "fill data set via adapter",
  0
 ],
 [
  "public static int main () {\tint number = new foo () + new foo () ;\tconsole.writeline (number);\tfoo tmp = new foo ();\tint k = tmp;\tfloat f = tmp;\tif (f == 3) console.writeline (\"best implicit conversion selected correctly.\");",
  "signature algorithm",
  1
 ],
 [
  "poolid = this.poolfixture.poolid };\tcloudjob.commit();\t{\tconst string taskid = \"t1\";\tcloudtask tasktoadd = new cloudtask(taskid, \"ping 127.0.0.1 -n 60\");\tbatchcli.joboperations.addtask(jobid, tasktoadd);\tlist<cloudtask> tasks = batchcli.joboperations.listtasks(jobid).tolist();\tassert.equal(1, tasks.count);\ttaskstatemonitor taskstatemonitor = batchcli.utilities.createtaskstatemonitor();\ttaskstatemonitor.waitall( tasks, taskstate.running, timespan.fromseconds(30), new odatamonitorcontrol {delaybetweendatafetch = timespan.fromseconds(5)});",
  "terminating task",
  0
 ],
 [
  "if (s9.f9 != 9+906) {\treturn 9;\t}\tfloat4_nested sn4;\tsn4.nested1.f1 = 1;\tsn4.f2 = 2;\tsn4.f3 = 3;\tsn4.nested2.f4 = 4;\tsn4 = mono_return_float4_nested(sn4, 906);\tif (sn4.nested1.f1 != 1+906) {",
  "test failed conversion result is incorrect",
  1
 ],
 [
  "private void dochecktimeout() {\tint currentmillis = environment.tickcount;\tif (currentmillis < timeoutoccursat) return;\tif (0 > timeoutoccursat && 0 < currentmillis) return;\t#if dbg if (runregex.debug) {\tdebug.writeline(\"\");",
  "search pattern",
  0
 ],
 [
  "public void indent () {\ttrace.indentlevel = 0;\ttrace.indentsize = 4;\tstring value = \"list of errors:\" + environment.newline + \"    error 1: file not found\" + environment.newline + \"    error 2: directory not found\" + environment.newline + \"end of list of errors\" + environment.newline;\ttrace.indent ();\tassert.areequal (1, trace.indentlevel);\ttrace.unindent ();\tassert.areequal (0, trace.indentlevel);",
  "schema error on datacolumn datasetcolumn",
  1
 ],
 [
  "itaskitem newitem = new taskitem (source);\tnewitem.itemspec = outputfile;\ttemporaryfileswritten.add (newitem);\t}\t} else {\tif (sources.length != outputresources.length) {\treturn false;\t}\tfor (int i = 0; i < sources.length; i ++) {\tif (string.isnullorempty (outputresources [i].itemspec)) {",
  "failed to add file",
  1
 ],
 [
  "public static implicit operator short (blah i) {",
  "blah short",
  0
 ],
 [
  "writeline(\"if (record == null)\");\twriteline(\"{\");\twriteline(\"}\");\twriteline(\"{\");\twriteline(\"}\");\tclosescope(\"ashandle\");\topenscope($\"internal new {record.name}handle handle\");\topenscope(\"get\");\tif (isconstantstringvalue) {\twriteline(\"if (value == null)\");",
  "return new constantstringvaluehandle handleoffset",
  0
 ],
 [
  "string pattern = getexceptioncaptureregex(exceptionnamecapturegroup);\tsourceparser sourceparser = new sourceparser(this.proxysourcelocation, sourcefiletype, null, pattern);\tlist<sourceparserresult> results = sourceparser.parse().tolist();\tconst int expectedexceptioncount = 100;\tassert.true(results.count > expectedexceptioncount);\thashset<string> exceptionset = new hashset<string>();\tforeach (sourceparserresult parserresult in results) {\tstring exceptionname = parserresult.match.groups[exceptionnamecapturegroup].value;\texceptionset.add(exceptionname);\t}",
  "category",
  1
 ],
 [
  "public static void main (string [] args) {\tif (args.length == 0 || args.length > 3) {",
  "usage zipmark file iterations blocksize",
  0
 ],
 [
  "public void dispose () {",
  "dispose",
  0
 ],
 [
  "var el = elements [i];\tel.style.display = el.getattribute ('data-original-display');\t}\tvar links = document.getelementsbyclassname ('hide-nonbreaking');\tfor (i = 0; i < links.length; i++) links [i].style.display = '';\tlinks = document.getelementsbyclassname ('restore-nonbreaking');\tfor (i = 0; i < links.length; i++) links [i].style.display = 'none';\t}\t</script>\");\tif (ac.sourceassembly == ac.targetassembly) {",
  "dll",
  0
 ],
 [
  "public void complexeventsequence1 () {\tstring result = @\"setting table... ---- onlistchanged propertydescriptorchanged,0,0 ----- updateindex : true ---- onlistchanged reset,-1,-1 table was set. ---- onlistchanged propertydescriptoradded,0,0 col1 added. ---- onlistchanged propertydescriptoradded,0,0 col2 added. ---- onlistchanged propertydescriptoradded,0,0 col3 added. uniq added. ----- updateindex : true ---- onlistchanged reset,-1,-1 sort changed. ---- onlistchanged propertydescriptordeleted,0,0 col3 removed. ----- updateindex : true ---- onlistchanged reset,-1,-1 rowfilter changed. ----- updateindex : true ---- onlistchanged reset,-1,-1 rowstatefilter changed. ----- updateindex : true ---- onlistchanged reset,-1,-1 rowstatefilter changed. ---- onlistchanged itemadded,0,-1 added row to rows. ---- onlistchanged itemadded,0,-1 added row to rows. ---- onlistchanged itemadded,0,-1 added row to rows. ---- onlistchanged itemadded,3,-1 addnew() invoked. 4 ---- onlistchanged itemdeleted,3,-1 ---- onlistchanged itemmoved,-2147483648,3 endedit() invoked. 3 ---- onlistchanged itemmoved,0,-2147483648 value changed to appear. 4 ---- onlistchanged itemmoved,3,0 value moved. 4 ---- onlistchanged itemmoved,1,3 value moved again. 4 ---- onlistchanged propertydescriptorchanged,0,0 ----- updateindex : true ---- onlistchanged reset,-1,-1 table changed. \";\teventwriter = new stringwriter ();\tdatatable dt = new datatable (\"table\");\tcomplexeventsequence1view dv = new complexeventsequence1view (dt, eventwriter);\tdt.columns.add (\"col1\");\tdt.columns.add (\"col2\");\tdt.columns.add (\"col3\");\tdt.constraints.add (new uniqueconstraint (dt.columns [0]));\tdv.sort = \"col2\";",
  "onclientmousedown",
  1
 ],
 [
  "public void trycatchfinally() {\ttry {",
  "runexclusive null",
  1
 ],
 [
  "static void innerfromeh () {\tthread = thread.currentthread;\tmethodinfo mi = typeof (driver).getmethod (\"sleeploop\");\ttry {\ttry {\t} finally {\thandle.set ();\tsleeploop ();",
  "on queue we received a total of message on stream",
  1
 ],
 [
  "public override void writepropertywithbackingfield(specificationdefinition specificationdefinition, string name, string propertytype, bool privatesetter) {\twritefieldorproperty(specificationdefinition, name, propertytype);",
  "get set private",
  0
 ],
 [
  "public void generateserializers (textwriter writer) {\t_writer = writer;\t_results = new generationresult [_xmlmaps.length];",
  "begin transaction",
  1
 ],
 [
  "_typefailedexception = new exception(\"unable to determine clr type for \" + getname(), ex);\tthrow _typefailedexception;\t}\tfinally {\ttry {\tif (objinfo != null) {\tobject o = objinfo.obj;\tobjectinfo.removeobjectinfo(o);\twhile (true) {\tint count = marshal.releasecomobject(o);",
  "in time seq",
  1
 ],
 [
  "private static bool callsecondclassinstanceproperty() {\tint failcount = 0;\tdynamic d = new firstclassreturnclass();\tverify.firstcalled = false;\tif ((!(((secondclass)d.instancemethod()).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "end set",
  1
 ],
 [
  "case \"deploymentid\": deploymentid = split[1];\tbreak;\treturn false;\t}\t}\telse if (argpos == 1) {\tsiloname = a;\targpos++;\t}\telse {",
  "i will add more useless code",
  1
 ],
 [
  "testsuitename = args [i + 1];\ti += 2;\t} else if (args [i] == \"--input-file\") {\tif (i + 1 >= args.length) {\treturn 1;\t}\tinputfile = args [i + 1];\ti += 2;\t} else if (args [i] == \"--mono-path\") {\tif (i + 1 >= args.length) {",
  "missing argument to mono path command line option",
  0
 ],
 [
  "if (disposing) {\t_listener.stop();\t}\t}\tprotected virtual void onclientaccepted(tcpclient client) {\t}\tprivate void onauthenticate(task result, clientstate state) {\tsslstream sslstream = (sslstream)state.stream;\ttry {\tresult.getawaiter().getresult();",
  "server authenticated to client with encryption cipher bit strength",
  0
 ],
 [
  "if ( --level == 0) {\ttrace.writeline( \"############################################################################\" );\tif (messages.count == 0) {\t}\telse {\tforeach ( string s in messages ) {\ttrace.writeline(s);\t}\t}\ttrace.writeline( \"############################################################################\" );",
  "publicipaddress gateway ip",
  1
 ],
 [
  "public static void ondisposed<t> (intptr obj, bool disposing) {\tif (disposing && !enabled) throw new invalidoperationexception ();\tif (environment.hasshutdownstarted) return;\tif (!disposing) {",
  "code generation failed",
  1
 ],
 [
  "static private x509certificatecollection getcertificates (string spcfile) {\tif (spcfile == null) {\treturn null;\t}\tif (!file.exists (spcfile)) {",
  "couldn t find file",
  0
 ],
 [
  "public override bool hassearchchildren(isearcher searcher) {\tsearcher.reportstatus(\"reading: \", getname(prefer_description));\ttry {\t_searchmode = true;\treadtypelibinfo();\t_searchmode = false;\t} catch (exception ex) {",
  "exception reading typelib info during find ex",
  0
 ],
 [
  "private static bool test5() {\tint a = -1;\tdynamic b = a;\tb--;\tif (b == -2) return true;",
  "test failed at call result",
  1
 ],
 [
  "public void getparam9() {\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(\"myarg1\", szempty, \"test9\");\tretobj = m_xsltarg.getparam(\"myarg1\", \"http: if (retobj != null) {",
  "got but expected",
  1
 ],
 [
  "public static void connectionpoolingtest2 () {",
  "did not throw argumentnullexception",
  1
 ],
 [
  "static void writesymbol (streamwriter sw, string name, long size) {\tswitch (style){\tbreak;\tbreak;\tcase \"windows\": string mangled_symbol_name = \"\";\tif (target64bitapplication()) mangled_symbol_name = name;\telse mangled_symbol_name = \"_\" + name;",
  "verifying infinite writetimeout with writebyte",
  1
 ],
 [
  "public void loadgeneric12(inputtype inputtype, readertype readertype) {\tstream strmtemp;\ttry {\tint i = loadxsl(\"xslt_error.xsl\", inputtype, readertype);\t}\tcatch (system.xml.xsl.xsltcompileexception) {\ttry {\tstrmtemp = new filestream(fullfilepath(\"xslt_error.xsl\"), filemode.open, fileaccess.read);\t}\tcatch (exception ex) {",
  "did not close stylesheet properly after load",
  0
 ],
 [
  "protected override void applymetadatareferenceadded (projectid projectid, metadatareference metadatareference) {\tvar mdproject = getmonoproject (projectid) as monodevelop.projects.dotnetproject;\tvar path = getmetadatapath (metadatareference);\tif (mdproject == null || path == null) return;\tforeach (var r in mdproject.references) {\tif (r.referencetype == monodevelop.projects.referencetype.assembly && r.reference == path) {",
  "logonuser called",
  1
 ],
 [
  "console.writeline (\"graphics created ok {0}\", gr != null);\tif (gr != null) {\tpen p = new pen (color.red, 2);\tgr.drawline (p, 10.0f, 10.0f, 90.0f, 90.0f);\tgr.drawrectangle (p, 10.0f, 10.0f, 80.0f, 80.0f);\tp.dispose ();\t}\tbmp.save (filename, imgfmt);\tgr.dispose ();\tbmp.dispose ();",
  "bitmap stored to",
  0
 ],
 [
  "public static int main () {\tx [] x = { new x (40), f (10) };\tif (x [0].value != 40) return 1;\tif (x [1].value != 10) return 2;",
  "test ok",
  0
 ],
 [
  "doc.add(xa);\txmlwriter w = doc.createwriter();\tw.dispose();\ttry {\tdoc.save(new memorystream());\t}\tcatch (argumentexception) {\tcheckclosedstate(w.writestate);\treturn;\t}",
  "did not throw exception",
  0
 ],
 [
  "public static void main() {\ttest a=new test();\tlock(a) {\ta.val=2;\t}",
  "a is",
  0
 ],
 [
  "foo ();\t}\tcatch (stackoverflowexception) {\tcount ++;\t}\tif (count != 1) return 1;\tcount = 0;\ttry {\trecurse ();\t} catch (exception ex) {",
  "handled",
  0
 ],
 [
  "}\tfragment = new byte[fragmentlength];\tbuffer.blockcopy(recorddata, position, fragment, 0, fragmentlength);\tif ((this.context.write != null) && (this.context.write.cipher != null)) {\tfragment = this.encryptrecordfragment (contenttype, fragment);\t}\trecord.write((byte)contenttype);\trecord.write(this.context.protocol);\trecord.write((short)fragment.length);\trecord.write(fragment);",
  "console writeline a",
  1
 ],
 [
  "static byte [] nocontentlengthhandler (socket socket) {\tstringwriter sw = new stringwriter ();",
  "there was an error loading one or more of the types from the referenced assembly assembly",
  1
 ],
 [
  "public void loadgeneric11(inputtype inputtype, readertype readertype, transformtype transformtype, doctype doctype) {\tstring expected = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?><book> name </book>\";\tif (doctype.tostring() == \"datadocument\") return;\telse {\tif (loadxsl(\"books_entity_ref.xsl\", inputtype.reader, readertype) != 1) {",
  "failed to load stylesheet books entity ref xsl",
  0
 ],
 [
  "public static void main(string[] args) {",
  "return a non null value when retrieving param with namespace",
  1
 ],
 [
  "for (int i = 0; i < args.length; i++) {\tcmd.commandtext = system.io.file.readalltext(args[i]);\tcnn.open();\tcmd.executenonquery();\tcnn.close();\t}\tcmd.dispose();\tcnn.dispose();\t}\t#else if (args.length != 4) {",
  "test failed at call result",
  1
 ],
 [
  "static void printurls (rooturlscollection col) {\tfor (int i = 0; i < col.count; i++) {\tconfigurationelement e = col [i];\turlconfigelement ue = e as urlconfigelement;\tif (ue != null) {",
  "got but expected",
  1
 ],
 [
  "string args = path.getfilename(projectfilename) + \" \\\"/p:documentationfile=\" + docfile +  \"\\\" \\\"/p:nowarn=1591 1573 1574 1572 419\\\"\";\tstring msbuild = path.combine(path.getdirectoryname(typeof(object).assembly.location), \"msbuild.exe\");\tprocessstartinfo info = new processstartinfo(msbuild, args);\tinfo.workingdirectory = path.getdirectoryname(projectfilename);\tdebug.writeline(info.workingdirectory + \">\" + info.filename + \" \" + info.arguments);\tprocess p = process.start(info);\tif (!p.waitforexit(60000)) {\treturn null;\t}\tif (p.exitcode != 0) {",
  "msbuild exit code",
  0
 ],
 [
  "if (transitioninfo.eventhandler != null) statedesignerconnector.eventhandlername = transitioninfo.eventhandler.qualifiedname;\t}\tfinally {\tthis.rootstatedesigner.addingsetstate = true;\t}\t}\t}\t}\t}\t#if debug catch (exception exception) {",
  "urn urn",
  1
 ],
 [
  "public void testparamsinvalidcontext() {\ttestwrongcontext<addnametoargumentcoderefactoringprovider>(@\" class testclass {\tpublic void f() {",
  "foo",
  0
 ],
 [
  "int caretpositon = input.indexof('$');\tif (caretpositon > 0) input = input.substring(0, caretpositon) + input.substring(caretpositon + 1);\tvar document1 = new stringbuilderdocument(input);\tint expectedcaretposition = expectedoutput.indexof('$');\tif (expectedcaretposition > 0) expectedoutput = expectedoutput.substring(0, expectedcaretposition) + expectedoutput.substring(expectedcaretposition + 1);\tvar fixer = new constructfixer(formattingoptionsfactory.createmono (), new texteditoroptions { eolmarker = \"\\n\" });\tint newcaretposition;\tassert.istrue(fixer.tryfix(document1, caretpositon, out newcaretposition));\tvar isequal = expectedoutput == document1.text.replace(\"\\r\\n\", \"\\n\");\tif (!isequal) {",
  "db orders remove db orders first",
  1
 ],
 [
  "w.writestartattribute(\"attr\", \"\");\t}\tcatch (invalidoperationexception) {\ttestlog.compare(w.writestate, writestate.error, \"error\");\ttry {\tw.writestartattribute(\"attr\", \"\");\t}\tcatch (invalidoperationexception) { return; }\t}\t}",
  "unexpected error message",
  1
 ],
 [
  "public void listallgroups_tostring () {\ttry {",
  "the apiname option is required",
  1
 ],
 [
  "static geteffectiveprivilegesrequest() {\ttry {\tldapextendedresponse.register(replicationconstants.get_effective_privileges_res, system.type.gettype(\"novell.directory.ldap.extensions.geteffectiveprivilegesresponse\"));\t}\tcatch (system.exception e) {",
  "try get a",
  1
 ],
 [
  "private void attributeidentityconstraints(string name, string ns, object obj, string sobj, xmlschemadatatype datatype) {\tfor (int ci = this.startidconstraint; ci < this.validationstack.length; ci ++) {\tif (((validationstate)(this.validationstack[ci])).constr == null) {\tcontinue;\t}\tconstraintstruct[] constraintstructures = ((validationstate)this.validationstack[ci]).constr;\tfor (int i = 0; i < constraintstructures.length; ++i) {\tfor (int j = 0; j < constraintstructures[i].axisfields.count; ++j) {\tlocatedactiveaxis laxis = (locatedactiveaxis)constraintstructures[i].axisfields[j];\tif (laxis.movetoattribute(name, ns)) {",
  "attribute field match",
  0
 ],
 [
  "bwarningcallback = true;\twarningcount++;\tbreak;\tberrorcallback = true;\terrorcount++;\tbreak;\t}\tif (args.exception.innerexception != null) {\t}\telse {",
  "main task sleeping",
  1
 ],
 [
  "#endregion x-ram function pointer definitions #region x-ram tokens private int al_eax_ram_size, al_eax_ram_free, al_storage_automatic, al_storage_hardware, al_storage_accessible;\t#endregion x-ram tokens #region constructor / extension loading /// <summary> /// <summary> /// constructs a new xramextension instance. /// constructs a new xramextension instance. /// </summary> /// </summary> public xramextension() {\t_valid = false;\tif (al.isextensionpresent(\"eax-ram\") == false) return;\tal_eax_ram_size = al.getenumvalue(\"al_eax_ram_size\");\tal_eax_ram_free = al.getenumvalue(\"al_eax_ram_free\");\tal_storage_automatic = al.getenumvalue(\"al_storage_automatic\");\tal_storage_hardware = al.getenumvalue(\"al_storage_hardware\");\tal_storage_accessible = al.getenumvalue(\"al_storage_accessible\");\tif (al_eax_ram_size == 0 || al_eax_ram_free == 0 || al_storage_automatic == 0 || al_storage_hardware == 0 || al_storage_accessible == 0) {",
  "hello",
  1
 ],
 [
  "public static int main () {\tm2 m2 = new m2();\ttry {\tvar dll = assembly.loadfile(@\"test-multi-netmodule-3-dll2.dll\");\tvar m3type = dll.gettype(\"m3\");\tvar m3 = activator.createinstance(m3type);\tvar m3m1field = m3type.getfield(\"m1\");\t} catch (system.typeloadexception) {\treturn 0;\t}",
  "result",
  1
 ],
 [
  "private void verifybaudrate(int baudrate) {\tverifybaudrateatopen(baudrate);",
  "schedule",
  1
 ],
 [
  "}\tif (s.hit != 0) return 1;\tusing (var s = new s ()) {\t}\tif (s.hit != 1) return 2;\tc c = null;\tgenmethod (c);\tusing (s? a = nullable, b = nullable) {\t}\tif (s.hit != 1) return 3;",
  "ok",
  0
 ],
 [
  "public static void main(string[] args) {\tvar foo = new foo();\tsystem.console.writeline(foo.bar());\tvar goo = new goo();\tvar foo2 = new foo2();",
  "loadinternal",
  1
 ],
 [
  "static void writehelp () {\tconsole.writeline ();",
  "main returns",
  1
 ],
 [
  "if (compare (\"add\", mask, ref stateindex, arguments, ref more_states)) {\tcontinue;\t}\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;\tresult = mtp.add (s, out testposition, out resulthint);\twritelinenonformat (\"result = mtp.add (@\\\"\" + s.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\", out testposition, out resulthint);\");",
  "assert areequal resulthint",
  0
 ],
 [
  "object odatavalue;\ttry {\tdroptable (cnc);\t}\tcatch (pgsqlexception e) {\t}\ttry {\tcreatetable (cnc);\tinsertdata (cnc);\tupdatedata (cnc);",
  "insert values for all known types",
  0
 ],
 [
  "string f = \"co\\\"a\";\tif (s != d) return 1;\tif (e != f) return 2;\tstring g = \"hello\\nworld\";\tusing (streamreader sr = new streamreader(\"test-74.cs\")) {\tint i = sr.read ();\tif (sr.read () <= 13) g = g.replace (\"\\n\", \"\\r\\n\");\t}\tstring h = @\"hello world\";\tif (g != h) return 3;",
  "method entry",
  1
 ],
 [
  "public override void dispose() {\ttry {\tif (!_disposed) {",
  "validating center on screen",
  1
 ],
 [
  "protected override void generatetypeconstructor (codetypeconstructor constructor) {\tif (iscurrentdelegate || iscurrentenum || iscurrentinterface) {\treturn;\t}\t#if net_2_0 outputattributes (constructor.customattributes, null, linehandling.continueline);\tindent++;\tgeneratestatements (constructor.statements);\tindent--;",
  "imports system imports system collections generic class testclass public sub testmethod list as ienumerable of string if list isnot nothing andalso list contains bla class",
  1
 ],
 [
  "static int method1 (type t, int val) {",
  "got but expected",
  1
 ],
 [
  "writeline(\"if (record == null)\");\twriteline(\"{\");\twriteline(\"}\");\twriteline(\"{\");\twriteline(\"}\");\tclosescope(\"ashandle\");\topenscope($\"internal new {record.name}handle handle\");\topenscope(\"get\");\tif (isconstantstringvalue) {\twriteline(\"if (value == null)\");",
  "test failed at call result",
  1
 ],
 [
  "int mdiff = (int)tdiff/10000;\ttms += mdiff;\t}\tran++;\tif (result != expected) {\tfailed++;\t}\t}\tif (!quiet) {\tif (do_timings) {",
  "total ms",
  0
 ],
 [
  "public static int main () {\trect rect = new rect ();\trect.x += 20;",
  "should be",
  0
 ],
 [
  "public delegate int delegateb (int i);\tstatic delegatea dt;\tstatic delegateb dt2;\tpublic static int main () {\tbool b = delegatemethod == dt;\tif (b) return 1;\tb = delegatemethod != dt;\tif (!b) return 2;\tb = dt2 == delegatemethod;\tif (b) return 3;",
  "skipped assy typelib not opened or current",
  1
 ],
 [
  "public void bytestoread_read_byte_int_int() {",
  "verifying bytestoread with read byte buffer int offset int count",
  0
 ],
 [
  "public static void creategenerictestfile(string strfilename) {\tfilepathutil.addstream(strfilename, new memorystream());\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"no\\\"?>\");\ttw.writeline(\"<!-- comment1 -->\");\ttw.writeline(\"<?pi1a?>\");\ttw.writeline(\"<?pi1b?>\");\ttw.writeline(\"<?pi1c?>\");",
  "verifying read method throws exception after a call to cloes",
  1
 ],
 [
  "public void showmethoddef (object sender, methoddefinedeventargs args) {",
  "transform thread iteration done with reader transform",
  1
 ],
 [
  "public static int errorprocessbody() {",
  "hello",
  1
 ],
 [
  "public override void garbagecollectionstartworldend (uint collection, uint generation, ulong counter) {",
  "garbagecollectionstartworldend",
  0
 ],
 [
  "public void ipinfotest_accessallproperties_noerrors() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {",
  "unhandled exceptions",
  1
 ],
 [
  "break;\t}\t}\telse if (argpos == 0) {\tlong id = 0;\tok = !string.isnullorwhitespace(a) && long.tryparse(a, out id);\tthis.userid = id;\targpos++;\t}\telse {",
  "creating job schedule",
  1
 ],
 [
  "arguments = new object [] { int32_out, maskedtextresulthint_out };\tif (compare (\"remove\", mask, ref stateindex, arguments, ref more_states)) {\tcontinue;\t}\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;\tfor (int i = -1; i < mask.length + 2; i++) {",
  "add a column with the same name as the default columnnames",
  1
 ],
 [
  "else {\t}\t}\tjobspecification jobspec = curwi.jobspecification;\tif (null == jobspec) {\t}\telse {\ttestoutputhelper.writeline(\"\");\tjobconstraints jobcon = jobspec.constraints;\tif (null == jobcon) {",
  "testfixture",
  1
 ],
 [
  "contenttype\tcontenttype\t= (contenttype)type;\tbyte[] buffer = this.readrecordbuffer(type, record);\tif (buffer == null) {\tinternalresult.setcomplete((byte[])null);\treturn;\t}\tif (contenttype == contenttype.alert && buffer.length == 2) {\t}\telse if ((this.context.read != null) && (this.context.read.cipher != null)) {\tbuffer = this.decryptrecordfragment (contenttype, buffer);",
  "installing mac appleevent handlers failed skipping",
  1
 ],
 [
  "public void setattachedproperty<t>(attachedproperty<t> prop, t val) {",
  "setattachedproperty",
  0
 ],
 [
  "private void verifyoutput(string expected) {\tstring actual = _strwriter.tostring();\tif (actual != expected) {",
  "expected",
  0
 ],
 [
  "public void xmlresolver3(object param, xslinputtype xslinputtype, readertype readertype, outputtype outputtype, navtype navtype) {\tappcontext.setswitch(\"switch.system.xml.allowdefaultresolver\", true);\tstring baseline = path.combine(\"baseline\", (string)param);\tif (loadxsl(\"xmlresolver_document_function.xsl\", xslinputtype, readertype) == 1) {\tif (transform((string) \"fruits.xml\", (outputtype) outputtype, navtype) == 1) {\tverifyresult(baseline, _stroutfile);\treturn;\t}\t}\telse {",
  "res mainwindow xmlvalidationmessages validationfailed",
  1
 ],
 [
  "xmldocument doc = new xmldocument ();\tdoc.nodeinserting += new xmlnodechangedeventhandler (oninserting);\tdoc.nodeinserted += new xmlnodechangedeventhandler (oninserted);\tdoc.nodechanging += new xmlnodechangedeventhandler (onchanging);\tdoc.nodechanged += new xmlnodechangedeventhandler (onchanged);\tdoc.noderemoving += new xmlnodechangedeventhandler (onremoving);\tdoc.noderemoved += new xmlnodechangedeventhandler (onremoved);\tforeach (fileinfo fi in new directoryinfo (@\"xml-test-suite/xmlconf/oasis\").getfiles (\"*.xml\")) {\ttry {\tif (fi.name.indexof (\"fail\") >= 0) continue;",
  "file",
  0
 ],
 [
  "bool needtorepeat = false;\tdo {\tbool f = _resultset.movenext();\tif (f) {\tprincipal principal = (principal)_resultset.currentasprincipal;\tif (_removedvaluescompleted.contains(principal) || _removedvaluespending.contains(principal)) {\tneedtorepeat = true;\tcontinue;\t}\telse if (_insertedvaluescompleted.contains(principal) || _insertedvaluespending.contains(principal)) {",
  "principalcollectionenumerator movenext resultset mode found insert skipping",
  0
 ],
 [
  "if (s9.f9 != 9+906) {\treturn 9;\t}\tfloat4_nested sn4;\tsn4.nested1.f1 = 1;\tsn4.f2 = 2;\tsn4.f3 = 3;\tsn4.nested2.f4 = 4;\tsn4 = mono_return_float4_nested(sn4, 906);\tif (sn4.nested1.f1 != 1+906) {",
  "nested got but expected",
  0
 ],
 [
  "for (int j = 0; j < useless.length; j++) {\tif (useless[j] == 'u') console.writeline (\"i have detected an u char\");\t}\ttry {\tforeach (string environmentvariable in environment.getenvironmentvariables ().keys) console.writeline (environmentvariable);\t}\tcatch (system.security.securityexception exception) {\tconsole.writeline (exception.message);\tconsole.writeline (exception);\t}",
  "read eof block",
  1
 ],
 [
  "public override string tostring () {\tstringwriter sw = new stringwriter ();",
  "missingtotal",
  0
 ],
 [
  "public delegate void databaseconnectioncontextcallback (databaseconnectioncontext context, bool connected, object state);\tpublic static class queryservice {\tpublic static void raiseexception (exception exception) {\tmessageservice.showexception (exception);",
  "database exception",
  0
 ],
 [
  "case \"writevalue\": w.writevalue(invalidxml[3].tostring());\tw.writeendelement();\tw.dispose();\tassert.true(utils.comparereader(\"<root>&#xc;</root>\"));\treturn;\tdefault: cerror.compare(false, \"invalid param value\");\tbreak;\t}\t}\tcatch (argumentexception e) {",
  "did not throw exception",
  1
 ],
 [
  "public override void onstop() {",
  "orleansazureweb onstop",
  0
 ],
 [
  "public void readtimeout_default_read_char_int_int() {",
  "verifying default readtimeout with read char buffer int offset int count",
  0
 ],
 [
  "static void findderivedclasses(hashset<iclass> resultlist, iclass baseclass, ienumerable<iprojectcontent> projectcontents, bool directderivationonly) {\tbaseclass = baseclass.getcompoundclass();",
  "internal static class uniqueid",
  1
 ],
 [
  "object [] arguments;\targuments = new object [] { str, i, int32_out, maskedtextresulthint_out };\tif (compare (\"replace\", mask, ref stateindex, arguments, ref more_states)) {\tcontinue;\t}\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;",
  "async callback",
  1
 ],
 [
  "var root = sourcetree.getroot ();\tvar classnode = root.findnode (classregion.sourcespan) as classdeclarationsyntax;\tif (classnode == null) return;\tvar newclassnode = classnode;\tnewclassnode = newclassnode.withmembers (newclassnode.members.add (newmethod ()));\tif (newclassnode != classnode) {\tvar newroot = root.replacenode<syntaxnode> (classnode, newclassnode);\tnewroot = formatter.format (newroot, proj.solution.workspace);\tvar newsolution = proj.solution.withdocumentsyntaxroot (docid, newroot);\tif (!proj.solution.workspace.tryapplychanges (newsolution)) {",
  "filter defects for the specified confidence levels",
  1
 ],
 [
  "public static int main(string[] args) {\tfoolist l = new foolist();\tfoo f1 = new foo(\"first\");\tfoo f2 = new foo(\"second\");\tl.add(f1);\tl.add(f2);\tforeach (foo f in l) {\t}\tif (foolist.foo_current_called != true) return 1;\tif (foolist.ienumerator_current_called != false) return 2;",
  "try",
  1
 ],
 [
  "}\treturn \"done\";\t}, j, cts[j].token). continuewith((task, o) => {\tint d = (int)o;\tinterlocked.add(ref data, d);\t}, j, cancellationtoken.none, taskcontinuationoptions.onlyoncanceled, taskscheduler.default).wait(int32.maxvalue - 1, cts2.token);\t});\talltasks[i].start(scheduler.concurrentscheduler);\t}\ttask.waitall(alltasks, int.maxvalue - 1, cancellationtoken.none);",
  "tasks ended result",
  0
 ],
 [
  "public void writenode_xmlreader24(xmlwriterutils utils) {\tif (isxpathdatamodelreader()) {",
  "show strongname informations about the assembly",
  1
 ],
 [
  "public void endreadafterclose() {\tusing (var com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (var com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {",
  "hello",
  1
 ],
 [
  "private void emitcollection(string collectiontypename, string elementtypename) {\topenscope($\"public partial struct {collectiontypename}\");",
  "private uint offset",
  0
 ],
 [
  "string shortnameb = b.getattribute(\"name\").substring(b.getattribute(\"name\").lastindexof('.') + 1);\treturn shortnamea.compareto(shortnameb);\t};\tdoozers.sort(comparison);\tconditions.sort(comparison);\tusing (streamwriter html = new streamwriter(path.combine(srcdir, \"..\\\\doc\\\\technotes\\\\doozerlist.html\"))) {\twriteheader(html, \"doozer list\");\twritelist(html, doozers, true);\twritefooter(html);\t}",
  "writing condition list",
  0
 ],
 [
  "public int getint () {",
  "getint in",
  0
 ],
 [
  "if ( --level == 0) {\ttrace.writeline( \"############################################################################\" );\tif (messages.count == 0) {\t}\telse {\tforeach ( string s in messages ) {\ttrace.writeline(s);\t}\t}\ttrace.writeline( \"############################################################################\" );",
  "ideapp workspace is not available when creating packagemanagementworkspace",
  1
 ],
 [
  "static void main(string[] args) {\tappdomain hostdomain = appdomain.createdomain(\"orleanshost\", null, new appdomainsetup {\tappdomaininitializer = initsilo, appdomaininitializerarguments = args, });",
  "orleans silo is running press enter to terminate",
  0
 ],
 [
  "public static void print(xmltypemapping tm) {",
  "elementname",
  0
 ],
 [
  "writeline (\"\");\t}\twritelineind (\"{\");\twriteline (\"system.collections.hashtable readmethods = null;\");\twriteline (\"system.collections.hashtable writemethods = null;\");\twriteline (\"system.collections.hashtable typedserializers = null;\");\twriteline (\"\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twriteline (\"\");",
  "probing assembly location",
  1
 ],
 [
  "public workerrole() {",
  "orleansazuresilos constructor called",
  0
 ],
 [
  "public void beforesendreply (ref message reply, object correlationstate) {\tconsole.writeline (reply);",
  "using system globalization",
  1
 ],
 [
  "static bool canreferencenetstandardproject (dotnetproject project, dotnetproject targetproject) {\ttry {\treturn dotnetcoreframeworkcompatibility.canreferencenetstandardproject (project, targetproject);\t} catch (exception ex) {",
  "error checking target framework compatibility",
  0
 ],
 [
  "private async task fullrunasync() {\treport[] reports = await task.whenall(enumerable.range(0, 200).select(i => runasync(i, 100, timespan.fromseconds(30))));\treport finalreport = new report();\tforeach (report report in reports) {\tfinalreport.succeeded += report.succeeded;\tfinalreport.failed += report.failed;\tfinalreport.elapsed = timespan.frommilliseconds(math.max(finalreport.elapsed.totalmilliseconds, report.elapsed.totalmilliseconds));\t}",
  "finalreport succeeded calls in finalreport elapsed totalmilliseconds ms",
  0
 ],
 [
  "public targetframework gettargetframework (targetframeworkmoniker id) {\ttargetframework fx;\tif (frameworks.trygetvalue (id, out fx)) return fx;",
  "unknown targetframework is being requested from systemassemblyservice ensuring runtimes initialized and trying again",
  0
 ],
 [
  "if (s12.f5 != 5+9) {\treturn 5;\t}\tif (s12.f6 != 6+9) {\treturn 6;\t}\tif (s12.f7 != 7+9) {\treturn 7;\t}\tif (s12.f8 != 8+9) {",
  "deleting task",
  1
 ],
 [
  "public object afterreceiverequest (ref message request, iclientchannel channel, instancecontext instancecontext) {\tconsole.writeline (request);",
  "end message received by host",
  0
 ],
 [
  "using (streamwriter tc = new streamwriter (file.create (temp_c))) {\tstring prog = null;\tif (bundled_header) {\tconst char *name;\tconst unsigned char *data;\tconst unsigned int size;\t} monobundledassembly;\tvoid          mono_register_bundled_assemblies (const monobundledassembly **assemblies);\tvoid          mono_register_config_for_assembly (const char* assembly_name, const char* config_xml);\t\");",
  "define mono aot mode full",
  0
 ],
 [
  "public void run (object cmdtarget, commandinfo info) {\tif (customhandlerchain != null) {\tinfo.updatehandlerdata = method;\tvar sw = stopwatch.startnew ();\tcustomhandlerchain.commandupdate (cmdtarget, info);\tsw.stop ();",
  "tls use",
  1
 ],
 [
  "}\tlaststoppedposition = frame.sourcelocation;\ttargetstoppedevent.set ();\t};\tsession.targetstopped += (sender, e) => {\tif (e.backtrace != null) {\tframe = e.backtrace.getframe (0);\tlaststoppedposition = frame.sourcelocation;\ttargetstoppedevent.set ();\t} else {",
  "e assembly output pub export the assembly public key to the specified file",
  1
 ],
 [
  "assert.areequal (typeof (outer<double>.inner), res, \"#5\");\ttname = \"system.collections.generic.list`1[system.int32]\";\tres = type.gettype (tname, name => {\treturn assembly.load (name);\t},(asm,name,ignore) => {\treturn asm == null ? type.gettype (name, false, ignore) : asm.gettype (name, false, ignore);\t}, false, false);\tassert.areequal (typeof (list<int>), res, \"#6\");\ttname = typeof (foo<>).fullname + \"[,][]\";\tres = type.gettype (tname, name => {",
  "resolve asm name",
  0
 ],
 [
  "public static void createwhitespacehandlingtestfile(string strfilename) {\tstream s = new memorystream();\ttextwriter tw = new streamwriter(s);\ttw.writeline(\"]>\");",
  "doc",
  0
 ],
 [
  "public static void main (string[] args) {\tfor (int i = 0; i < 10; i++) {",
  "got but expected",
  1
 ],
 [
  "b.internalmethod();\t} catch (memberaccessexception) {\tfailcount += 1;\t}\ttry {\tvar a = new wrongcasefriendassembly.internalclass(@private: false);\t} catch (memberaccessexception) {\t}\ttry {\tvar a = new wrongcasefriendassembly.internalclass(@internal: 0);",
  "a b",
  1
 ],
 [
  "private void read(string filename) {\txmlserializer ser=new xmlserializer(typeof(employees));\tfilestream fs=new filestream(filename, filemode.open);\temployees emps;\temps=(employees)ser.deserialize(fs);\tfs.close();\tforeach(employee emp in emps) {",
  "server starting ssl authentication",
  1
 ],
 [
  "while (receivedbatches < numbatches) {\tvar messages = receiver.getqueuemessagesasync(sqsstorage.max_number_of_message_to_peak).result.toarray();\tif (!messages.any()) {\tcontinue;\t}\tforeach (var message in messages.cast<sqsbatchcontainer>()) {\tstreamsperqueue.addorupdate(queueid, id => new hashset<istreamidentity> { new streamidentity(message.streamguid, message.streamguid.tostring()) }, (id, set) => {\tset.add(new streamidentity(message.streamguid, message.streamguid.tostring()));\treturn set;\t});",
  "strategy args not found",
  1
 ],
 [
  "public override int test () {",
  "the return attribute is not bar",
  1
 ],
 [
  "public void writedot(string filename) {\ttextwriter wr = new streamwriter(new filestream(filename, filemode.create, fileaccess.write));\twr.writeline(\"size=\\\"11,8.25\\\";\");\twr.writeline(\"rotate=90;\");\twr.writeline(\"rankdir=lr;\");\twr.writeline(\"start [style=invis];\");",
  "start d",
  0
 ],
 [
  "for (int j = 0; j < useless.length; j++) {\tif (useless[j] == 'u') console.writeline (\"i have detected an u char\");\t}\ttry {\tforeach (string environmentvariable in environment.getenvironmentvariables ().keys) console.writeline (environmentvariable);\t}\tcatch (system.security.securityexception exception) {\tconsole.writeline (exception.message);\tconsole.writeline (exception);\t}",
  "db orders",
  1
 ],
 [
  ";\tlong?[] longnvalues = new long?[]\t{\tlong.maxvalue, long.minvalue, null }\t;\tforeach (bool a1 in boolvalues) {\tforeach (long? a2 in longnvalues) {\tbool d1 = a1;\tdynamic d2 = a2;\tif ((d1 ? d2 : 10l) != (a1 ? a2 : 10l)) {",
  "if readnull return null",
  1
 ],
 [
  "public void loadconfiguration() {",
  "connection established and closed ssl",
  1
 ],
 [
  "m_xsltarg.addextensionobject(\"myarg2\", i);\tretobj = m_xsltarg.getextensionobject(\"myarg2\");\tif (!i.equals(retobj)) {\tassert.true(false);\t}\tif (i != (int)retobj) assert.true(false);\tboolean bf = (1 == 0);\tm_xsltarg.addextensionobject(\"myarg3\", bf);\tretobj = m_xsltarg.getextensionobject(\"myarg3\");\tif (!bf.equals(retobj)) {",
  "timing empty",
  1
 ],
 [
  "public void encoding_asciiencoding_afteropen() {",
  "verifying asciiencoding encoding after open",
  0
 ],
 [
  "}\tif (doc.editor.gettextat (extractionresult.methoddeclarationnode.spanstart, \"private \".length) == \"private \") {\tdoc.editor.removetext (extractionresult.methoddeclarationnode.spanstart, \"private \".length);\t}\t}\tawait doc.updateparsedocument ();\tvar info = refactoringsymbolinfo.getsymbolinfoasync (doc, extractionresult.invocationnametoken.span.start).result;\tvar sym = info.declaredsymbol ?? info.symbol;\tif (sym != null) await new monodevelop.refactoring.rename.renamerefactoring ().rename (sym);\t} catch (exception e) {",
  "token",
  1
 ],
 [
  "public void inandoutbufferfilled_discard() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (serialport com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\tint origbytestowrite;",
  "test failed at call result",
  1
 ],
 [
  "writelineind (\"if (typedserializers == null) {\");\twriteline (\"typedserializers = new system.collections.hashtable ();\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twriteline (\"\");\twritelineind (\"{\");\tforeach (generationresult res in generatedmaps) {\tif (res.mapping is xmltypemapping) {",
  "got but expected",
  1
 ],
 [
  "private void utf8encoding() {",
  "stderr",
  1
 ],
 [
  "public static void main () {\tobject o = \"hello world\";",
  "blah",
  0
 ],
 [
  "public void addextobject6(inputtype inputtype, readertype readertype, transformtype transformtype, doctype doctype) {\tstring expected = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?><result> string  argument: system.string int32   argument: system.int32 boolean argument: system.boolean boolean argument: system.boolean double  argument: system.double string  argument: system.string</result>\";\tm_xsltarg = new xsltargumentlist();\tstring obj = \"0.00\";\tm_xsltarg.addextensionobject(\"myarg1\", obj);\tretobj = m_xsltarg.getextensionobject(\"myarg1\");\tif (retobj.tostring() != \"0.00\") {",
  "failed to add get a value for of type string",
  0
 ],
 [
  "private async task<tuple<int,int>> commitandcount(itransactionmanagerservice tms, list<transactioninfo> newtransactions, hashset<long> transactionsinflight) {\tint success = 0;\tint failed = 0;\tcommittransactionsresponse commitresponse = await tms.committransactions(newtransactions, transactionsinflight);\tif (commitresponse.commitresult.count != 0) {",
  "commited commitresponse commitresult count transactions",
  0
 ],
 [
  "public static void false(bool condition) {\tif (!condition) return;",
  "assertion failure assert false",
  0
 ],
 [
  "if (null == comptc) {\t}\telse {\tthis.testoutputhelper.writeline(\"\");\tassert.true(comptc.maxtaskretrycount.hasvalue);\tassert.equal(99, comptc.maxtaskretrycount.value);\t}\ttaskexecutioninformation tei = mycompletedtask.executioninformation;\tassert.notnull(tei);\tif (null == tei) {",
  "null",
  0
 ],
 [
  "public void fetch (progressmonitor monitor, string remote) {\tmonitor.begintask (gettextcatalog.getstring (\"fetching\"), 1);",
  "fetching from",
  0
 ],
 [
  "public static void null(object value) {\tif (value == null) return;",
  "helpviewer tryshowhelp calls",
  1
 ],
 [
  "x509certificate signer = coll [i-1];\tbool signed = false;\ttry {\tif (signer.rsa != null) {\tsigned = x509.verifysignature (signer.rsa);\t} else if (signer.dsa != null) {\tsigned = x509.verifysignature (signer.dsa);\t} else {\tsigned = true;\t}",
  "exception",
  1
 ],
 [
  "public void emptystring() {\tusing (serialport com1 = tcsupport.initfirstserialport()) using (serialport com2 = tcsupport.initsecondserialport(com1)) {",
  "show add reference dialog for",
  1
 ],
 [
  "public static void eval(dynamic result, string comment) {\tif ((int)result != 0) {\tfailcount++;",
  "where the basic options are",
  1
 ],
 [
  "public void id_issystem() {\tgrainid testgrain = orleans.runtime.constants.directoryserviceid;\tassert.true(testgrain.issystemtarget);\tgrainid sgrain = (grainid)this.environment.serializationmanager.deepcopy(testgrain);\tassert.true(sgrain.issystemtarget);\tassert.equal(testgrain, sgrain);\tassert.same(testgrain, sgrain);\tactivationid testactivation = activationid.getsystemactivation(testgrain, siloaddress.new(new ipendpoint(ipaddress.loopback, 2456), 0));",
  "importkey import privatekey to keypair store",
  1
 ],
 [
  "com2.open();\tcom1.errorevent += new serialerroreventhandler(erreventhandler.handleevent);\tcom2.basestream.write(new byte[32767], 0, 32767);\telapsedtime = 0;\twhile(1 > erreventhandler.numeventshandled && elapsedtime < max_time_wait) {\tsystem.threading.thread.sleep(iteration_time_wait);\telapsedtime += iteration_time_wait;\t}\tretvalue &= erreventhandler.validate(serialerrors.overrun, com1.receivedbytesthreshold, 0);\tif(!retvalue) {",
  "err verifying overrun event failed",
  0
 ],
 [
  "if (sn16.f9 != 9+9) {\treturn 9;\t}\tif (sn16.f10 != 10+9) {\treturn 10;\t}\tif (sn16.f11 != 11+9) {\treturn 11;\t}\tif (sn16.f12 != 12+9) {",
  "test",
  1
 ],
 [
  "datetime startedat = datetime.utcnow;\ttry {\tlist<task<bool>> promises = new list<task<bool>>();\tfor (int i = 0; i < numofinserts; i++) {\tstring s = string.format(\"177bf46e-d06d-44c0-943b-c12f26d{0:d5}\", i);\tvar e = new reminderentry {\tgrainref = this.fixture.internalgrainfactory.getgrain(grainid.newid()), remindername = \"my_reminder_\" + i, period = timespan.fromseconds(5), startat = datetime.utcnow };\tint capture = i;\ttask<bool> promise = task.run(async () => {\tawait remindertable.upsertrow(e);",
  "done",
  0
 ],
 [
  "public void nullablefieldsshouldsupportnullvalue () {\tstring json = @\"{\"\"should_have_value\"\":null}\";\tvar inputstream = new memorystream (encoding.utf8.getbytes (json));\tdatacontractjsonserializer serializer = new datacontractjsonserializer(typeof(datetest));",
  "commands",
  1
 ],
 [
  "public void dumpreader (xmlreader xr, bool attvalue) {",
  "error closing debugger session",
  1
 ],
 [
  "public static void connectionpoolingtest1 () {\toracleconnection[] connections = null;\tint maxcon = max_connections + 1;\tint i = 0;\ttry {\tconnections = new oracleconnection[maxcon];\tfor (i = 0; i < maxcon; i++) {",
  "field",
  1
 ],
 [
  "public void defaultcolumnnameaddlistchangedtest() {\tstring result = @\"setting table... ---- onlistchanged propertydescriptorchanged,0,0 ---- onlistchanged reset,-1,-1 table was set. ---- onlistchanged propertydescriptoradded,0,0 default named column added. ---- onlistchanged propertydescriptoradded,0,0 non-default named column added. ---- onlistchanged propertydescriptoradded,0,0 another default named column added (column2). ---- onlistchanged propertydescriptoradded,0,0 add a column with the same name as the default columnnames. ---- onlistchanged propertydescriptoradded,0,0 add a column with a null name. ---- onlistchanged propertydescriptoradded,0,0 add a column with an empty name. \";\t_eventwriter = new stringwriter();\tdatatable dt = new datatable(\"table\");\tcomplexeventsequence1view dv = new complexeventsequence1view(dt, _eventwriter);\tdt.columns.add();\tdt.columns.add(\"non-defaultnamedcolumn\");\tdatacolumn c = dt.columns.add();\tdt.columns.add(\"column3\");",
  "invalid complextype content restriction",
  1
 ],
 [
  "static void main(string[] args) {\ttry {\tnamevaluecollection appsettings = configurationmanager.appsettings;\tconfiguration config = configurationmanager.openexeconfiguration (configurationuserlevel.none);\tappsettingssection appsettings = config.appsettings;",
  "at",
  1
 ],
 [
  "static void printmethodallocationsperclass (textwriter writer, loadedclass.allocationspermethod allocationspermethod, bool jittime, bool printstacktraces, double stacktracetreshold) {\tif (! jittime) {",
  "commit",
  1
 ],
 [
  "static bool arechildrenasproperties (inamedtypesymbol type, out string defaultproperty) {\tbool childrenasproperties = false;\tdefaultproperty = \"\";\tattributedata att = getattributes (type, \"system.web.ui.parsechildrenattribute\").firstordefault ();\tif (att == null) return childrenasproperties;\tvar posargs = att.constructorarguments;\tif (posargs.length == 0) return childrenasproperties;\tif (posargs.length > 0) {\tvar expr = posargs [0];\tif (expr.isnull) {",
  "incomingpacketswitherrors",
  1
 ],
 [
  "if (entry.toupper() == \"q\") return false;\treturn true;\t}\tpublic void showdefaults() {\tconsole.writeline ();\tif (provider.equals (string.empty) && factory == null) console.writeline (\"provider is not set.\");\telse if(factory != null) {\t}\telse {\tif (provider.equals (\"loadextprovider\")) {",
  "hello",
  1
 ],
 [
  "public override bool onstart() {",
  "certificate removed",
  1
 ],
 [
  "if (buildall) host = null;\tarraylist proxies = new arraylist ();\tforeach (servicedata fd in services.services) {\tif (host != null && host != new uri (fd.wsdl).host) continue;\tbuildproxy (fd, buildall, proxies, ele);\t}\tstreamwriter sw = new streamwriter (path.combine (basepath, \"proxies.sources\"));\tforeach (string f in proxies) sw.writeline (f);\tsw.close ();\tdoc.save (\"proxy-gen-error.xml\");",
  "return offset",
  1
 ],
 [
  "if (!complete) {\treturn 1;\t}\t} else {\treturn 2;\t}\t}\ttw.close ();\t}\tcatch (exception e) {",
  "error",
  0
 ],
 [
  "{\tobject stringarray = new string[] { \"a\", \"b\", \"c\", \"d\" };\tstring result = string.empty;\tforeach (var s in (system.collections.ienumerable)stringarray) result += s;\tif (result != \"abcd\") {\treturn fail;\t}\t}\t{\tobject intarray = new int[5, 5];",
  "testing ilist on mdarray",
  0
 ],
 [
  "private static bool test1() {\tdynamic d1 = true;\tishit = false;\tif (d1 || boolvalue) {\tif (ishit) {\treturn false;\t}\t}\telse {",
  "unknown method",
  1
 ],
 [
  "public int read8() {\tstring filename = path.combine(testdata, \"common\", \"bug_65660a.xml\");\ttry {\treloadsource(filename);\twhile (datareader.read()) ;\treturn test_fail;\t}\tcatch (xmlexception e) {",
  "size of",
  1
 ],
 [
  "for (int n=0; n<ents.length; n++) epaths [n] = ents [n].itemid;\tvar r = services.projectservice.export (mon, sourcefile, epaths, folder, fileformat).result;\tif (string.isnullorempty (r)) return false;\tstring td = path.getdirectoryname (targetfile);\tif (!directory.exists (td)) directory.createdirectory (td);\tdeployservice.createarchive (mon, tmpfolder, targetfile);\t}\tfinally {\tdirectory.delete (tmpfolder, true);\t}",
  "created file",
  0
 ],
 [
  "writer.write(\"<table columns=\\\"\");\twriter.write(fieldcount.tostring(cultureinfo.invariantculture));\twriter.writeline(\"\\\">\");\tif (shouldrendertableheaders()) {\twriter.write(\"<tr>\");\tforeach (int fieldindex in tablefieldindices) {\twriter.write(\"<td>\");\twriter.rendertext(control.allfields[fieldindex].title);\twriter.write(\"</td>\");\t}",
  "tr",
  0
 ],
 [
  "public static void runspinlocktests_negativetests() {\tfor (int i = 0; i < 2; i++) {\tbool b;\tif (i == 0) {\tb = true;\t}\telse {",
  "with thread ids new spinlock false",
  0
 ],
 [
  "try {\turi uri = new uri (_url);\thttpwebrequest httpwebrequest = (httpwebrequest) webrequest.create (uri);\twebresponse httpwebresponse = httpwebrequest.getresponse ();\tstream responsestream = httpwebresponse.getresponsestream ();\tstreamreader responsestreamreader = new streamreader (responsestream);\tstring response = responsestreamreader.readline ();\tresponsestreamreader.close ();\tresponsestream.close ();\thttpwebresponse.close ();",
  "response for",
  0
 ],
 [
  "public static int test5 () {\tint a;\ttry {",
  "checking",
  1
 ],
 [
  "gc.collect ();\tgc.waitforpendingfinalizers ();\tconsole.writeline (\"a is null {0}\", a == null);\tconsole.writeline (\"b is null {0}\", b == null);\tif (a == null || b == null) return 1;\ta.link.clear ();\tb.__test = toggleref.strong;\ta = b = null;\tgc.collect ();\tgc.waitforpendingfinalizers ();",
  "try get a",
  0
 ],
 [
  "public void writetimeout_int32minvalue() {",
  "verifying minvalue writetimeout",
  0
 ],
 [
  "try {\tstring maxstrvalue;\tcon = new sqlconnection(connectionstring);\tcon.open();\tsql = \t\"select count(*) \" + \"from sometable\";\tcmd = new sqlcommand(sql,con);\tint64 rowcount = (int64) cmd.executescalar();\tsql = \t\"select max(tdesc) \" + \"from sometable\";\tcmd = new sqlcommand(sql,con);\tstring minvalue = (string) cmd.executescalar();",
  "max value",
  0
 ],
 [
  "private static void validatemanifest(string baseline, string manifest) {\tvar baselineorig = path.getfullpath(baseline);\tbaselineorig = baselineorig.replace(@\"\\bin\\debug\\\", @\"\\\");\tbaselineorig = baselineorig.replace(@\"\\bin\\release\\\", @\"\\\");",
  "should have exited in the unhandledexception event handler",
  1
 ],
 [
  "if ( --level == 0) {\ttrace.writeline( \"############################################################################\" );\tif (messages.count == 0) {\t}\telse {\tforeach ( string s in messages ) {\ttrace.writeline(s);\t}\t}\ttrace.writeline( \"############################################################################\" );",
  "total time seconds",
  0
 ],
 [
  "protected override void onendload(bool successful, icollection errors) {\tthis.loading = false;\ttry {\tbase.onendload(successful, errors);\t} catch(exceptioncollection e) {\tforeach(exception ine in e.exceptions) {",
  "public override bool candeserialize system xml xmlreader xmlreader",
  1
 ],
 [
  "bitmapdata data = bmp.lockbits (new rectangle (0, 0, bmp.width, bmp.height), imagelockmode.readonly, pixelformat.format24bpprgb);\ttry {\tassert.areequal (bmp.height, data.height, \"height\");\tassert.areequal (bmp.width, data.width, \"width\");\tassert.areequal (pixelformat.format24bpprgb, data.pixelformat, \"pixelformat\");\tassert.areequal (520, data.stride, \"stride\");\tint size = data.height * data.stride;\tunsafe {\tbyte* scan = (byte*) data.scan0;\t#if false for (int p = 0; p < size; p += 1009) {",
  "assert areequal scan",
  0
 ],
 [
  "values.add (exceptionpagetemplate.template_fullstacktracename, formatfullstacktrace ());\thtmlizedexception htmlexception = ex as htmlizedexception;\tif (htmlexception == null) filldefaulterrorvalues (true, true, ex, values);\telse {\tpagetype = exceptionpagetemplatetype.htmlized;\tfillhtmlizederrorvalues (values, htmlexception, ref pagetype);\t}\t}\treturn template.render (values, pagetype);\t} catch (exception ex) {",
  "an exception has occurred while generating httpexception page",
  0
 ],
 [
  "static private void help () {",
  "found metadata template for type",
  1
 ],
 [
  "public task<string> a1method() {",
  "got but expected",
  1
 ],
 [
  "static void setupinstrumentation () {\tinstrumentationservice.enabled = runtime.preferences.enableinstrumentation;\tif (instrumentationservice.enabled) {",
  "instrumentation service started",
  0
 ],
 [
  "task.delay(1);\tassert.notequal(scheduler, taskscheduler.current);\tpause1.waitone();\treturn 1;\t});\ttask2 = task.run(() => {\tassert.notequal(scheduler, taskscheduler.current);\ttask.delay(1);\tassert.notequal(scheduler, taskscheduler.current);\tpause2.waitone();",
  "did not throw exception",
  1
 ],
 [
  "private static bool callsecondstructinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tdynamic d = new firstclassreturnstruct<int>();\tif ((!(((secondstruct<int>)d.instanceproperty).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "static void displaycrl (x509crl crl, bool machine, bool verbose) {",
  "x v crl",
  0
 ],
 [
  "this.testoutputhelper.writeline(stdout);\tthis.testoutputhelper.writeline(\"\");\tthis.testoutputhelper.writeline(stderr);\tthis.testoutputhelper.writeline(\"\");\ttaskconstraints comptc = mycompletedtask.constraints;\tassert.notnull(comptc);\tif (null == comptc) {\t}\telse {\tthis.testoutputhelper.writeline(\"\");",
  "copy bytes from to return block",
  1
 ],
 [
  "public void localization () {\tvar p = new optionset (f => \"hello!\") {\t{ \"n=\", (int v) => { } }, };\tutils.assertexception (typeof(optionexception), \"hello!\", p, v => { v.parse (_(\"-n=value\")); });\tstringwriter expected = new stringwriter ();",
  "nhello hello",
  0
 ],
 [
  "public static bool operator true (blah i) {",
  "you continued",
  1
 ],
 [
  "public static ienumerable<string> yieldreturnwithnestedtryfinally(bool breakinmiddle) {\tyield return \"start of method\";\ttry {\tyield return \"within outer try\";",
  "within outer try",
  0
 ],
 [
  "public virtual void generatecodefromcodedom(system.codedom.codecompileunit compileunit, textwriter writer) {\tvar provider = this.createcodedomprovider();\tif (provider != null) {\tvar options = new system.codedom.compiler.codegeneratoroptions();\toptions.blanklinesbetweenmembers = ambienceservice.codegenerationproperties.get(\"blanklinesbetweenmembers\", true);\toptions.bracingstyle             = ambienceservice.codegenerationproperties.get(\"startblockonsameline\", true) ? \"block\" : \"c\";\toptions.elseonclosing            = ambienceservice.codegenerationproperties.get(\"elseonclosing\", true);\toptions.indentstring = sd.editorcontrolservice.globaloptions.indentationstring;\tprovider.generatecodefromcompileunit(compileunit, writer, options);\t} else {",
  "no codedom provider was found for this language",
  0
 ],
 [
  "}\twhile (needtorepeat);\t}\tif (_currentmode == currentenumeratormode.insertedvaluescompleted) {\tbool f = _enumerator.movenext();\tif (f) {\t_current = _enumerator.current;\treturn true;\t}\telse {",
  "principalcollectionenumerator movenext insvaluescomp mode moving to insvaluespend mode",
  0
 ],
 [
  "static int main () {\ttest t1 = new test ();\tobjref myref = remotingservices.marshal (t1, \"/test\");",
  "blob",
  1
 ],
 [
  "if (diff != null) {\tstring diffhtml = string.empty;\tusing (var writer = new stringwriter ()) {\tstate.output = writer;\tac.compare ();\tdiffhtml = state.output.tostring ();\t}\tif (diffhtml.length > 0) {\tusing (var file = new streamwriter (diff)) {\tif (state.colorize) {",
  "timesincludemillisecondpart got a file time of time tostring o on driveformat",
  1
 ],
 [
  "public void testpropertyaccess() {",
  "x x",
  1
 ],
 [
  "if (s12.f7 != 7+9) {\treturn 7;\t}\tif (s12.f8 != 8+9) {\treturn 8;\t}\tif (s12.f9 != 9+9) {\treturn 9;\t}\tif (s12.f10 != 10+9) {",
  "got but expected",
  0
 ],
 [
  "public static void thread() {\tthread.sleep(500);",
  "passwordinfo expirepasswordnow sending request",
  1
 ],
 [
  "if (retobj.tostring() != \"0.00\") {\tassert.true(false);\t}\tint i = 8;\tm_xsltarg.addparam(\"myarg2\", szempty, i);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tassert.equal(retobj.gettype(), i.gettype());\tboolean bf = (1 == 0);\tm_xsltarg.addparam(\"myarg3\", szempty, bf);\tretobj = m_xsltarg.getparam(\"myarg3\", szempty);",
  "tried saving credentials but got unknown error code x",
  1
 ],
 [
  "if (members.length > 0 && members[0].mapping.isreturnvalue) writer.writeline(\"isreturnvalue = true;\");\tstring checktypehrefsource = (!haswrapperelement && !writeaccessors) ? \"hreflist\" : null;\tif (checktypehrefsource != null) writeinitchecktypehreflist(checktypehrefsource);\twriteparamsread(mappings.length);\tint loopindex = writewhilenotloopstart();\twriter.indent++;\tstring unrecognizedelementsource = checktypehrefsource == null ? \"unknownnode((object)p);\" : \"if (reader.getattribute(\\\"id\\\", null) != null) { readreferencedelement(); } else { unknownnode((object)p); }\";\twritememberelements(members, unrecognizedelementsource, \"unknownnode((object)p);\", null, null, checktypehrefsource);\twritewhileloopend(loopindex);\tif (checktypehrefsource != null) writehandlehreflist(members, checktypehrefsource);",
  "readreferencedelements",
  0
 ],
 [
  "public static int testsharedgenerics() {",
  "no exception was thrown",
  1
 ],
 [
  "public static void creategenerictestfile(string strfilename) {\tmemorystream ms = new memorystream();\ttextwriter tw = new streamwriter(ms);\ttw.writeline(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"no\\\"?>\");\ttw.writeline(\"<!-- comment1 -->\");\ttw.writeline(\"<?pi1a?>\");\ttw.writeline(\"<?pi1b?>\");\ttw.writeline(\"<?pi1c?>\");",
  "rendercontents",
  1
 ],
 [
  "public void outbufferfilled_discard_cycle() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {",
  "verifying call discard method after input buffer has been filled discarded and filled again",
  0
 ],
 [
  "boolean bt = (1 == 1);\tm_xsltarg.addextensionobject(\"myarg4\", bt);\tretobj = m_xsltarg.getextensionobject(\"myarg4\");\tif (!bt.equals(retobj)) {\tassert.true(false);\t}\tdouble d = 3.14;\tm_xsltarg.addextensionobject(\"myarg5\", d);\tretobj = m_xsltarg.getextensionobject(\"myarg5\");\tif (!d.equals(retobj)) {",
  "exception expected",
  1
 ],
 [
  "private static bool callsecondclassinstancemethod() {\tint failcount = 0;\tdynamic d = new firstclassreturnclass();\tverify.firstcalled = false;\tif ((!(((secondclass)d.instanceproperty).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public override int compareobjects (itreenavigator thisnode, itreenavigator othernode) {\ttry {\tif (thisnode == null || othernode == null) return -1;\tvar e1 = thisnode.dataitem as assemblyloader;\tvar e2 = othernode.dataitem as assemblyloader;\tif (e1 == null && e2 == null) return 0;\tif (e1 == null || e1.assembly == null) return 1;\tif (e2 == null || e2.assembly == null) return -1;\treturn string.compare (e1.assembly.name.name, e2.assembly.name.name, stringcomparison.ordinal);\t} catch (exception e) {",
  "exception in assembly browser sort function",
  0
 ],
 [
  "dictionary<string, failedtest> failed_tests = new dictionary<string,failedtest> ();\tlist<string> ignored_tests = new list<string> ();\tint tests_passed = populatefailuretable (file, failed_tests, ignored_tests);\tfail_total += failed_tests.count;\tpass_total += tests_passed;\trun_total += failed_tests.count + tests_passed;\tif (failed_tests.count > 0) {\tsw.writeline (\"        <tr class='errorrow' onclick=\\\"toggle('el{0}')\\\" onmouseover='highlight(this)' onmouseout='unhighlight(this)'>\", assembly);\tsw.writeline (@\"            <td><img src='media/fail.png' /></td>\");\t} else {",
  "test failed at call result",
  1
 ],
 [
  "xmlschemaattribute attribute = (xmlschemaattribute)derivedtype.attributeuses[attributebase.qualifiedname];\tif (attribute == null) {\tderivedtype.attributeuses.add(attributebase.qualifiedname, attributebase);\t}\telse {\tif (attributebase.use == xmlschemause.prohibited && attribute.use != xmlschemause.prohibited) {\t#if debug string position = string.empty;\tif (derivedtype.sourceuri != null) {\tposition = \" in \" + derivedtype.sourceuri + \"(\" + derivedtype.linenumber + \", \" + derivedtype.lineposition + \")\";\t}",
  "invalid complextype attributes restriction",
  0
 ],
 [
  "}\tschedule sched = curwi.schedule;\tif (null == sched) {\t}\telse {\t}\tjobschedulestatistics stats = curwi.statistics;\tif (null == stats) {\t}\telse {",
  "readiops",
  0
 ],
 [
  "public e (e e) : base (10) {",
  "configuration exception not thrown",
  1
 ],
 [
  "public void basictest_accessinstanceproperties_noexceptions() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {",
  "status",
  0
 ],
 [
  "#if debug if (adapterswitches.dataschema.traceinfo) {\t}\t#endif return columnmappings.items[index];\t}\t}\tif (adp.isempty(sourcecolumn)) {\tthrow adp.invalidsourcecolumn(\"sourcecolumn\");\t}\tswitch (mappingaction) {\tcase missingmappingaction.passthrough: #if debug if (adapterswitches.dataschema.traceinfo) {",
  "mapping passthrough of sourcecolumn sourcecolumn",
  0
 ],
 [
  "public virtual void onevent () {",
  "onevent error",
  0
 ],
 [
  "public static intptr createfile (string lpfilename, uint dwdesiredaccess, uint dwsharemode, intptr securityattributes, uint dwcreationdisposition, uint dwflagsandattributes, intptr htemplatefile) {",
  "please compare baseline with output",
  1
 ],
 [
  "using (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writedoctype(\"test\", null, null, \"\");\t}\tcatch (invalidoperationexception e) {\tcerror.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "public buildresult executebuild () {\tbuildresult result;\ttry {\tif (affinity == nodeaffinity.outofproc) throw new notimplementedexception ();\tresult = build.internalexecute ();\t} catch (exception ex) {",
  "uncaught build node exception occured",
  0
 ],
 [
  "public bool errorevent_txfull() {\tserialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname);\tserialport com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname);\terroreventhandler erreventhandler = new erroreventhandler(com1);\tint elapsedtime;",
  "verifying txfull event",
  0
 ],
 [
  "private string generatetypeelement(xmltypemapping xmltypemapping) {\telementaccessor element = xmltypemapping.accessor;\ttypemapping mapping = element.mapping;\tstring methodname = nextmethodname(element.name);\twriter.writeline();\twriter.write(\"public void \");\twriter.write(methodname);\twriter.indent++;",
  "writestartdocument",
  0
 ],
 [
  "private static bool nullableuserdefinedenumwithnullableidentityconversioninassignment() {\tint failcount = 0;\te origin = e.one;\tdynamic d = origin;\te? result = d;\tif (result != origin) {\tfailcount++;",
  "test failed at conversion result",
  0
 ],
 [
  "output.writeline(\"{\");\toutput.indent();\tbool oldisintype = isintype;\tisintype = true;\twriteattributes(type.customattributes);\twritesecuritydeclarations(type);\tif (type.haslayoutinfo) {\toutput.writeline();\t}\tif (type.hasnestedtypes) {",
  "exception not generated for non existent file name",
  1
 ],
 [
  "static async task executeasync () {\tvar t = thread.currentthread;\tmre.set ();\tawait tcs.task;\tt = thread.currentthread;",
  "testing",
  1
 ],
 [
  "static void dump(astcontext ctx, parsertargetinfo targetinfo, target target) {\tstring targetfile;\tif (!string.isnullorempty (outputfile)) {\ttargetfile = outputfile;\t} else {\ttargetfile = target.triple;\tif (!string.isnullorempty (outputdir)) targetfile = path.combine (outputdir, targetfile);\ttargetfile += \".h\";\t}\tusing (var writer = new streamwriter(targetfile)) {",
  "task files",
  1
 ],
 [
  "var obj = new nonbridge ();\tobj.link = list;\tlist = obj;\t}\tvar heads = new bridge [fan_out];\tfor (int i = 0; i < fan_out; ++i) {\tvar obj = new bridge ();\tobj.links.add (list);\theads [i] = obj;\t}",
  "call from inside grandchild",
  1
 ],
 [
  "public static int main() {\tint result = pass;\tif (!testvaluetypedelegates()) {\tresult = fail;\t}\tif (!testvirtualdelegates()) {\tresult = fail;\t}\tif (!testinterfacedelegates()) {",
  "build continues with revision number",
  1
 ],
 [
  "static int main () {\tvar t = new thread (setuplinks);\tt.start ();\tt.join ();\tgc.collect ();\tbridge a, b;\ta = b = null;\tconsole.writeline (\"a is null {0}\", a == null);\tconsole.writeline (\"b is null {0}\", b == null);\tif (a == null || b == null) return 1;",
  "b test",
  0
 ],
 [
  "static void writehelp () {\tconsole.writeline ();",
  "is inputschemafile schemafile schema from which to generate proxy classes",
  0
 ],
 [
  "public unittestresult getnextresult (datetime date) {\ttry {\tif (store != null) return store.getnextresult (test.activeconfiguration, test, date);\t} catch (exception ex) {",
  "wrong string method",
  1
 ],
 [
  "public static void dumpproperties(object value, textwriter writer, int indent) {\tif (value == null) {",
  "assembly is delay signed but not strongnamed",
  1
 ],
 [
  "outputline (\"  connection class: \" + providerconnectionclass);\t}\t}\t}\tpublic void changeconnectionstring (string[] parms, string entry) {\tif (parms.length >= 2) connectionstring = entry.substring (parms[0].length, entry.length - (parms[0].length + 1));\telse connectionstring = \"\";\t}\tpublic void setupoutputresultsfile (string[] parms) {\tif (parms.length != 2) {",
  "error wrong number of parameters",
  0
 ],
 [
  "public void checkwegotdefaultloggers () {",
  "with priority",
  1
 ],
 [
  "public void isopen_open() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "verifying bytestowrite with one call to write",
  1
 ],
 [
  "debug.assert(_blen <= s_cnumemax, \"m_blen <= x_cnumemax\", \"in assertvalid\");\tuint[] rgldata = new uint[4] { _data1, _data2, _data3, _data4 };\tif (rgldata[_blen - 1] == 0) {\tdebug.assert(_blen == 1, \"m_blen == 1\", \"in assertvalid\");\t}\tfor (int iuldata = _blen; iuldata < s_cnumemax; iuldata++) debug.assert(rgldata[iuldata] == 0, \"rgldata[iuldata] == 0\", \"in assertvalid\");\t}\t[system.diagnostics.conditional(\"debug\")]\tprivate void print() {\tif (isnull) {",
  "ok",
  1
 ],
 [
  "int ret = testmethod();\tif (test_pass == ret) {\ttestmodule.passcount++;\t}\telse if (test_fail == ret) {\tsystem.console.writeline(indent + curvar.desc);\ttestmodule.failcount++;\t}\telse {\tsystem.console.writeline(indent + curvar.desc);",
  "running",
  1
 ],
 [
  "if (!directory.exists (asmdir)) {\twriteline (\"number of items = 0\");\treturn;\t}\tstring search = getsearchstring (asm_info);\tstring [] dir_list = directory.getdirectories (asmdir, search);\tint count = 0;\tforeach (string dir in dir_list) {\tstring asmb = path.combine (dir, (string) asm_info [\"assembly\"]) + \".dll\";\tif (file.exists (asmb)) {",
  "abort reset",
  1
 ],
 [
  "public void isopen_default() {\tusing (serialport com1 = new serialport()) {\tserialportproperties serportprop = new serialportproperties();",
  "verifying default isopen",
  0
 ],
 [
  "private static bool test11() {\tdouble a = 1.10d;\tdynamic b = a;\t++b;\tif (b == 2.10d) return true;",
  "failed double",
  0
 ],
 [
  "httpwebrequest httpwebrequest = (httpwebrequest) webrequest.create (uri);\twebresponse httpwebresponse = httpwebrequest.getresponse ();\tstream responsestream = httpwebresponse.getresponsestream ();\tstreamreader responsestreamreader = new streamreader (responsestream);\tstring response = responsestreamreader.readline ();\tresponsestreamreader.close ();\tresponsestream.close ();\thttpwebresponse.close ();\t}\tcatch (webexception e) {",
  "source",
  0
 ],
 [
  "symvalue v1 = this.graph1.lookupwithoutmanifesting (sv1, function);\tbool isplaceholder;\tsymvalue v2 = this.graph2.lookuporbottomplaceholder (sv2, function, out isplaceholder);\tif (!isplaceholder || function.keepasbottomfield) {\tsymvalue r1 = addjointedge (v1, v2, function, r);\tif (r1 != null) joinsymbolicvalue (v1, v2, r1);\t}\t}\t}\t} else if (!this.widen && this.graph1.hasallbottomfields (sv1)) {",
  "symgraph changed due to an all bottom field value in changing to non bottom",
  0
 ],
 [
  "public void onremoving (object o, xmlnodechangedeventargs e) {",
  "removing",
  0
 ],
 [
  "static void main () {\ttype type = typeof (brushes);\tpropertyinfo[] properties = type.getproperties ();\tint count = 1;\tforeach (propertyinfo property in properties) {\tconsole.writeline(\"\\n\\t\\t\\tbr = brushes.\" + property.name + \";\");",
  "assert istrue br is solidbrush p count",
  0
 ],
 [
  "public void writeschema (string assembly, string lookup_type, string output_dir) {\tassembly a;\ttry {\ta = assembly.loadfrom (assembly);\t} catch (exception e) {",
  "cannot use",
  0
 ],
 [
  "throw new exception(\"error converting value \" + \"for struct member \" + field.name, ex);\t}\t}\telse {\tif (!fieldtype.equals(_type)) {\tfieldvalue = getstructvalues (fieldtype, fieldtype.getfields (reflectionhelper.all_bindings), ref controlindex);\t}\telse continue;\t}\tif (traceutil.if(this, tracelevel.verbose)) {",
  "test failed at call result",
  1
 ],
 [
  "public static void main(string[] args) {\truntwothreads(delegate { addandremove(15000); });\tcoll = new arraylist<int>();\truntwothreads(delegate { safeaddandremove(15000); });\tarraylist<int> from, to;\tfrom = new arraylist<int>();\tto = new arraylist<int>();\tfor (int i=0; i<count; i++) from.add(i);\truntwothreads(delegate { while (!from.isempty) move(from, to); });",
  "configuration exception not thrown",
  1
 ],
 [
  "protected virtual void onrunactivated(object sender, system.eventargs e) {",
  "verifiedimagerefs version",
  1
 ],
 [
  "public void dumpreader (xmlreader xr, bool attvalue) {",
  "file",
  1
 ],
 [
  "if (_querymembersresults != null) {\t_querymembersresults.dispose();\t}\tif (_currentmemberssearcher != null) {\t_currentmemberssearcher.dispose();\t}\tif (_membersearchresults != null) {\t_membersearchresults.dispose();\t}\tif (_membersearchersqueue != null) {",
  "did not throw exception",
  1
 ],
 [
  "public override object trackedvisitobjectcreateexpression(objectcreateexpression objectcreateexpression, object data) {\tif (data as bool? ?? false) {\t#endif memberresolveresult mrr = this.resolve(objectcreateexpression) as memberresolveresult;\t#if debug if (mrr != null) {\t}\t#endif if (mrr != null && mrr.resolvedmember is imethod && (mrr.resolvedmember.declaringtype.compareto(this.resourcemanagermember.returntype.getunderlyingclass()) == 0 || mrr.resolvedmember.declaringtype.istypeininheritancetree(this.resourcemanagermember.returntype.getunderlyingclass())) ) {",
  "resourcetoolkit bclnrefactoryresourceresolver this is the correct constructor",
  0
 ],
 [
  "int i;\tint freed = 0;\tfor (i = 0; i < count; ++i) {\tif ((i % d) == 0) {\tif (handle_array [i].isallocated) {\thandle_array [i].free ();\tfreed++;\t}\t}\t}",
  "halting due to error exception",
  1
 ],
 [
  "}\t}\tif (e.hasset) {\tif (!iscurrentinterface) {\tindent++;\tgeneratevbstatements(e.setstatements);\tindent--;\t}\t}\tindent--;",
  "end property",
  0
 ],
 [
  "mousebtnbox.packstart (laright);\tpackstart (mousebtnbox);\tpackstart (la);\tpackstart (resla);\tla.mouseentered += (sender, e) => {\tinsidelabel = true;\tapplication.timeoutinvoke (100, checkmouseoverlabel);\t};\tla.mouseexited += (sender, e) => {\tinsidelabel = false;",
  "networkwritebytes",
  1
 ],
 [
  "static critical () {\tprogram.mre1.set ();\tprogram.mre2.waitone ();\ttry {\tthrow new exception ();\t} catch (exception) {",
  "pre",
  1
 ],
 [
  "static void test2 () {",
  "test",
  0
 ],
 [
  "s3.f2 = 2;\ts3.f3 = 3;\ts3 = mono_return_double3(s3, 9);\tif (s3.f1 != 1+9) {\treturn 1;\t}\tif (s3.f2 != 2+9) {\treturn 2;\t}\tif (s3.f3 != 3+9) {",
  "got but expected",
  0
 ],
 [
  "public void testcurrencymanagerbindings () {\tdataset data_source = createrelateddatasetlarge ();\tbindingcontext bc = new bindingcontext ();\tcurrencymanager cm = bc [data_source] as currencymanager;\tforeach (propertydescriptor pd in cm.getitemproperties ()) debugwriteline (\" + {0}\", pd.name);\tdebugwriteline ();",
  "dataset",
  0
 ],
 [
  "static void systemdataparametercollreplace (string srcdir, string targetdir, string target, string resns, string ns, string parname) {\tvar t = file.readalltext (path.combine (srcdir, \"dbparametercollectionhelper.cs\"));",
  "retrieved",
  1
 ],
 [
  "m_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(\"myarg1\", szempty, \"test2\");\tm_xsltarg.removeparam(\"myarg1\", szempty);\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);\tif (retobj != null) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg1\", szempty, \"test1\");\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);\tif (retobj.tostring() != \"test1\") {",
  "error copying file to backup",
  1
 ],
 [
  "int pagestart = control.firstvisibleitemindex;\tint pagesize = control.visibleitemcount;\tstring listsuffix, itemprefix, itemsuffix;\tlistdecoration decoration = control.decoration;\tbool insidestyle = true;\tif (decoration != listdecoration.none || !device.tables) {\twriter.enterstyle(style);\tinsidestyle = false;\t}\tswitch (decoration) {",
  "ul",
  0
 ],
 [
  "public static void main() {\tappdomain domain = appdomain.currentdomain;\tdomain.unhandledexception += new unhandledexceptioneventhandler(myhandler);\ttry {",
  "first try block",
  0
 ],
 [
  "public void setcustomservicesettings (peerservicesettingsinfo info) {",
  "request setcustomservicesettings controlmeshshape refreshinterval cleanupinterval",
  0
 ],
 [
  "public void handshake_int32maxvalue() {",
  "verifying maxvalue handshake",
  0
 ],
 [
  "static void addp12 (string path, string filename, string password, ushort port) {\tx509certificate2 x509 = null;\ttry {\tx509 = new x509certificate2 (filename, password);\t} catch (exception e) {",
  "ok",
  1
 ],
 [
  "protected virtual void teardown () {\tint c = application.openforms.count;\tif (c > 0) {",
  "test",
  0
 ],
 [
  "w.writecdata(\"invalid\");\t}\tcatch (invalidoperationexception) {\ttestlog.compare(w.writestate, writestate.error, \"error\");\ttry {\tw.writecdata(\"invalid\");\t}\tcatch (invalidoperationexception) { return; }\t}\t}",
  "exception attempting a transform without loading an xsl file",
  1
 ],
 [
  "output.writeline(\"clusterid={0} serviceid={1}\", this.hostedcluster.options.clusterid, serviceid);\tguid id = guid.newguid();\tiawsstoragetestgrain grain = this.fixture.grainfactory.getgrain<iawsstoragetestgrain>(id);\tint val = await grain.getvalue();\tassert.equal(0, val);\tawait grain.dowrite(1);\tforeach (var silo in this.hostedcluster.getactivesilos().tolist()) {\tthis.hostedcluster.restartsilo(silo);\t}\tthis.hostedcluster.initializeclient();",
  "test failed at call result",
  1
 ],
 [
  "public static void generatebitmasks () {\topcodebitmask bitmask;\tbitmask = new opcodebitmask ();\tbitmask.set (code.stfld);\tbitmask.set (code.stsfld);\tbitmask.set (code.call);\tbitmask.set (code.callvirt);\tapplicable_method_bitmask = bitmask;",
  "applicable method bitmask",
  0
 ],
 [
  "if(args.length != 3) {\treturn;\t}\tstring connectionstring = string.format( \"data source={0};\" + \"user id={1};\" + \"password={2}\", args[0], args[1], args[2]);\tconstr = connectionstring;\toracleconnection con1 = new oracleconnection();\tshowconnectionproperties (con1);\tcon1.connectionstring = connectionstring;\tcon1.infomessage += new oracleinfomessageeventhandler (oninfomessage);\tcon1.statechange += new statechangeeventhandler (onstatechange);",
  "calling",
  1
 ],
 [
  "public void encoding_chinesesimplified_gb18030() {",
  "err verifying txfull event failed",
  1
 ],
 [
  "protected override void onreadsolution (progressmonitor monitor, monodevelop.projects.msbuild.slnfile file) {\tbase.onreadsolution (monitor, file);\ttry {\tmakefiledata.resolveprojectreferences (solution.rootfolder, monitor);\t} catch (exception e) {",
  "got total rps on streams or rps per streams",
  1
 ],
 [
  "if (s9.f4 != 4+9) {\treturn 4;\t}\tif (s9.f5 != 5+9) {\treturn 5;\t}\tif (s9.f6 != 6+9) {\treturn 6;\t}\tif (s9.f7 != 7+9) {",
  "failed to resolve document function with absolute uri",
  1
 ],
 [
  "public static int main () {\tif (!isstatic (typeof (staticclass))) return 1;\tif (!isstatic (typeof (staticclass2))) return 2;",
  "ok",
  0
 ],
 [
  "}\ttry {\twrongcasefriendassembly.internalclass.internalstaticmethod();\t} catch (memberaccessexception) {\tfailcount += 1;\t}\ttry {\twrongcasefriendassembly.publicclass.internalstaticmethod();\t} catch (memberaccessexception) {\tfailcount += 1;",
  "access public internal static method fail",
  0
 ],
 [
  "copy_c = null;\ttry {\tusing (mydispose c = new mydispose ()){\tcopy_c = c;\tthrow new exception ();\t}\t} catch {}\tif (!copy_c.disposed) return 3;\tusing (mydispose d = null){\t}",
  "null test passed",
  0
 ],
 [
  "public ienumerable get (int a) {\tyield return a;\tj = 10;",
  "sending",
  0
 ],
 [
  "if (!complete) {\treturn 1;\t}\t} else {\treturn 2;\t}\t}\ttw.close ();\t}\tcatch (exception e) {",
  "did not throw exception",
  1
 ],
 [
  "}\t#endif _datatable.primarykey = keys;\t}\telse {\tuniqueconstraint unique = new uniqueconstraint(\"\", keys);\tconstraintcollection constraints = _datatable.constraints;\tint constraintcount = constraints.count;\tfor (int i = 0; i < constraintcount; ++i) {\tif (unique.equals(constraints[i])) {\t#if debug if (adapterswitches.dataschema.traceverbose) {",
  "setupschema duplicate contraint detected",
  0
 ],
 [
  "protected override string ongetvalue () {\tvar style = base.ongetvalue ();\tif (syntaxhighlightingservice.containsstyle (style)) return style;\tvar defaultstyle = syntaxhighlightingservice.getdefaultcolorstylename ();",
  "highlighting theme not found using default instead",
  0
 ],
 [
  "}\t}\t}\tif (resolvedmember != null) {\t#endif if (resolvedmember.gettype().equals(this.resourcemanagermember.gettype()) && resolvedmember.compareto(this.resourcemanagermember) == 0) {\t#endif data = true;\t} else if (this.compilationunit != null && !this.islocalvariable && istyperelationshippossible(resolvedmember, this.resourcemanagermember)) {\tif (this.resourcemanagermember is iproperty && resolvedmember is ifield) {\tthis.tryresolveresourcemanagerproperty();\tif (this.resourcemanagerfieldaccessedbyproperty != null && this.resourcemanagerfieldaccessedbyproperty.compareto(resolvedmember) == 0) {",
  "resourcetoolkit bclnrefactoryresourceresolver found assignment to field",
  0
 ],
 [
  "var settings = cmd.parsearguments (args);\tif (settings == null) return 1;\tif (cmd.hasbeenstopped) return 0;\tdriver d = new driver (new compilercontext (settings, new consolereportprinter ()));\tif (d.compile () && d.report.errors == 0) {\tif (d.report.warnings > 0) {\t}\tenvironment.exit (0);\treturn 0;\t}",
  "compilation failed error s warnings",
  0
 ],
 [
  "test<removebracescoderefactoringprovider>(@\"class testclass {\tvoid test() {\tif (true) {\t} $else {\t}\t}\t}\", @\"class testclass {\tvoid test() {\tif (true) {\t}",
  "world",
  0
 ],
 [
  "if (new b () != \"b-struct\" || b.counter != 3) return 2;\tif (new b () == null || b.counter != 4) {\t}\tif (new d () != new d () || d.counter != 2) return 10;\tif (new d () != null || d.counter != 3) {\t}\tif (new a () != \"a-class\" || a.counter != 1) return 20;\tif (new a () == null  || a.counter != 1) return 21;\tif (new e () != new e ()  || e.counter != 2) return 31;\tif (new f () == new f ()) return 40;",
  "ok",
  0
 ],
 [
  "public override void visit(membercore member) {",
  "member",
  0
 ],
 [
  "t1 = new thread(new threadstart (tests.threadstart1));\tt1.name = \"thread 1\";\tthread.sleep (100);\tt1.start();\tmonitor.wait (started);\t}\tthread.sleep (100);\tt1.abort (\"statetest\");\tt1.join ();\tif (result != 59) {",
  "build options build file",
  1
 ],
 [
  "nativehashtable typetemplateshashtable = loadhashtable(moduleinfo, reflectionmapblob.typetemplatemap, out externalfixupstable);\tif (typetemplateshashtable.isnull) continue;\tvar enumerator = typetemplateshashtable.lookup(hashcode);\tnativeparser entryparser;\twhile (!(entryparser = enumerator.getnext()).isnull) {\truntimetypehandle candidatetemplatetypehandle = externalfixupstable.getruntimetypehandlefromindex(entryparser.getunsigned());\ttypedesc candidatetemplate = concretetype.context.resolveruntimetypehandle(candidatetemplatetypehandle);\tif (canonform == candidatetemplate.converttocanonform(kind)) {\tnativelayoutinfotoken = (uint)externalfixupstable.getexternalnativelayoutoffset(entryparser.getunsigned());\tif (nativelayoutinfotoken == badtokenfixupvalue) {",
  "should not reach here",
  1
 ],
 [
  "static void downloadwsdls (string host) {\tconsole.writeline ();\tconsole.writeline (\"---------------------------\");\tforeach (servicedata sd in services.services) {\tif (host != null && host != new uri (sd.wsdl).host) continue;\tif (!file.exists (getwsdlfile(sd))) resolve (sd);\t}",
  "fields",
  1
 ],
 [
  "itfs[48] = new foo48();\titfs[49] = new foo49();\tstringbuilder sb = new stringbuilder();\tint counter = 0;\tfor (int i = 0; i < 50; i++) {\tsb.append(itfs[i].getastring());\tcounter += itfs[i].getanint();\t}\tstring expected = \"foo0foo1foo2foo3foo4foo5foo6foo7foo8foo9foo10foo11foo12foo13foo14foo15foo16foo17foo18foo19foo20foo21foo22foo23foo24foo25foo26foo27foo28foo29foo30foo31foo32foo33foo34foo35foo36foo37foo38foo39foo40foo41foo42foo43foo44foo45foo46foo47foo48foo49\";\tif (!expected.equals(sb.tostring())) {",
  "concatenating strings from interface calls failed",
  0
 ],
 [
  "static void dataadaptertest (oracleconnection connection) {\toraclecommand command = connection.createcommand ();\tcommand.commandtext = \"select * from scott.emp\";\toracledataadapter adapter = new oracledataadapter (command);\tdataset dataset = new dataset (\"emp\");\tadapter.fill (dataset);\tdatatable table = dataset.tables [0];",
  "display each row",
  0
 ],
 [
  "}\t}\tif (service == null) {\tservices.trygetvalue(servicetype, out service);\t}\tif (service is servicecreatorcallback) {\tservice = ((servicecreatorcallback)service)(this, servicetype);\tdebug.writelineif(traceservice.traceverbose, \"callback return object: \" + (service == null ? \"(null)\" : service.tostring()));\tif (service != null && !service.gettype().iscomobject && !servicetype.isassignablefrom(service.gettype())) {\tdebug.fail(\"object \" + service.gettype().name + \" was returned from a service creator callback but it does not implement the registered type of \" + servicetype.name);",
  "end of outer try",
  1
 ],
 [
  "static void dataadaptertest (oracleconnection connection) {\toraclecommand command = connection.createcommand ();\tcommand.commandtext = \"select * from scott.emp\";\toracledataadapter adapter = new oracledataadapter (command);\tdataset dataset = new dataset (\"emp\");\tadapter.fill (dataset);",
  "get datatable",
  0
 ],
 [
  "private void printtableorview (dataview dv, string label) {\tconsole.writeline (\"\\n\" + label);",
  "sort key",
  0
 ],
 [
  "public void basictest_getipinterfacestatistics_success_linux() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfacestatistics stats = nic.getipstatistics();\tassert.throws<platformnotsupportedexception>(() => stats.incomingunknownprotocolpackets);\tassert.throws<platformnotsupportedexception>(() => stats.nonunicastpacketssent);",
  "outgoingpacketswitherrors",
  0
 ],
 [
  "public void basictest_accessinstanceproperties_noexceptions() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tassert.inrange(nic.speed, -1, long.maxvalue);",
  "getphysicaladdress",
  0
 ],
 [
  "public static void clobtest (oracleconnection connection) {\toracletransaction transaction = connection.begintransaction ();",
  "drop table clobtest",
  0
 ],
 [
  "public static void createxmlspacetestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));",
  "foo compareto b",
  1
 ],
 [
  "static void writehelp () {\tconsole.writeline ();\tconsole.writeline ();\tconsole.writeline ();\tconsole.writeline ();\tconsole.writeline ();",
  "test failed at call result",
  1
 ],
 [
  "static void dataadaptertest (oracleconnection connection) {\toraclecommand command = connection.createcommand ();\tcommand.commandtext = \"select * from scott.emp\";",
  "create data adapter",
  0
 ],
 [
  "static void help (string details) {\tswitch (details) {\tbreak;",
  "i keypair snk container import the keypair from a snk file into a csp container",
  0
 ],
 [
  "private static void assertisnotinvalidoperationexception(exception thrownexception, string expectedmessagesubstring) {",
  "got but expected",
  1
 ],
 [
  "private void writeheader () {",
  "produced on for",
  0
 ],
 [
  "public void rtsenable_true_false_afteropen() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "verifying seting rtsenable to true then false after open",
  0
 ],
 [
  "byte[] originalmodulus = rsaparameters.modulus;\tbyte[] originalexponent = rsaparameters.exponent;\tif (!expectedmodulus.sequenceequal(rsaparameters.modulus) || !expectedexponent.sequenceequal(rsaparameters.exponent)) {\trsaparameters = rsa.exportparameters(false);\tif (!expectedmodulus.sequenceequal(rsaparameters.modulus) || !expectedexponent.sequenceequal(rsaparameters.exponent)) {\t}\tif (cert != null) {\trsa = cert.getrsapublickey();\trsaparameters = rsa.exportparameters(false);\tif (!expectedmodulus.sequenceequal(rsaparameters.modulus) || !expectedexponent.sequenceequal(rsaparameters.exponent)) {",
  "new key handle exportparameters was not successful either",
  0
 ],
 [
  "private static void verifyreader(string tag, sqldatareader dr, string expectedtypename, string expectedbasetypename) {\tdr.read();\tstring actualtypename = dr.getsqlvalue(0).gettype().tostring();\tstring actualbasetypename = dr.getstring(1);\tconsole.writeline(\"{0,-40} -> {1}:{2}\", tag, actualtypename, actualbasetypename);\tif (!actualtypename.equals(expectedtypename)) {\t}\tif (!actualbasetypename.equals(expectedbasetypename)) {",
  "error expected base type does not match actual base type",
  0
 ],
 [
  "var config = new clientconfiguration {\tclusterid = \"orleans-docker\", gatewayprovider = clientconfiguration.gatewayprovidertype.azuretable, dataconnectionstring = connectionstring };\tvar client = new clientbuilder() .configureapplicationparts(parts => parts.addapplicationpart(typeof(ipinggrain).assembly).withreferences()) .useconfiguration(config) .build();\tawait client.connect();\twhile (!isstopping) {\tvar grainid = guid.newguid();\tvar grain = client.getgrain<ipinggrain>(grainid);\tfor (var i = 0; i < numberofping; i++) {\tif (isstopping) break;\tvar value = await grain.ping();",
  "ping value",
  0
 ],
 [
  "\"usage: bundling [options]+\", \"demo program to show the effects of bundling options and their values\", \"\", \"gcc-like options:\", { \"d:\", \"predefine a macro with an (optional) value.\", (m, v) => {\tif (m == null) throw new optionexception (\"missing macro name for option -d.\", \"-d\");\tmacros.add (m, v);\t} }, { \"d={-->}{=>}\", \"alternate macro syntax.\", (m, v) => macros.add (m, v) }, { \"o=\", \"specify the output file\", v => output = v }, \"\", \"tar-like options:\", { \"f=\", \"the input file\",   v => input = v }, { \"x\",  \"extract the file\", v => extract = v != null }, { \"c\",  \"create the file\",  v => create = v != null }, { \"t\",  \"list the file\",    v => list = v != null }, \"\", \"ls-like optional values:\", { \"color:\", \"control whether and when color is used\", v => color = v }, \"\", \"other:\", { \"h|help\",  \"show this message and exit\", v => show_help = v != null }, { \"<>\", v => console.writeline (\"def handler: color={0}; arg={1}\", color, v)}, };\ttry {\tp.parse (args);\t}\tcatch (optionexception e) {\tconsole.write (\"bundling: \");\tconsole.writeline (e.message);",
  "coll has items should be",
  1
 ],
 [
  "rollback = string.empty;\treturn parent;\t}\tcontext.statetag = gettingeq;\t}\telse if (context.previousstate is xmlattributevaluestate) {\tcontext.nodes.pop ();\tatt.end (context.locationminus (1));\tiattributedxobject element = (iattributedxobject) context.nodes.peek ();\tif (element.attributes.get (att.name, false) != null) {",
  "verifying minvalue readtimeout",
  1
 ],
 [
  "public override conversion isvalid(itype[] parametertypes, itype returntype, csharpconversions conversions) {\tlog.indent();\tvar hypothesis = gethypothesis(parametertypes);\tconversion c = hypothesis.isvalid(returntype, conversions);\tlog.unindent();",
  "tests failed",
  1
 ],
 [
  "static void throwexcthroughmethodswithfinalizers1(string caller) {\tcreatesomegarbage();\tstring s = caller + \" + throwexcthroughmethodswithfinalizers1\";\tcreatesomegarbage();\ttry {\tthrowexcthroughmethodswithfinalizers2(s);\t}\tfinally {",
  "d compare and without signatures",
  1
 ],
 [
  "private void thread_func() {\tthread thr=thread.currentthread;\tlock(thr) {\tthread.sleep(2000);\tthread.sleep(15000);\t}\tlock(thr) {",
  "waiting",
  0
 ],
 [
  "public void breakstate_true_false_true() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "hello world",
  1
 ],
 [
  "public static void save (textwriter writer, editortheme theme) {\twriter.writeline (\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\");\twriter.writeline (\"<!doctype plist public \\\"- writer.writeline (\"<plist version=\\\"1.0\\\">\");\tforeach (var setting in theme.settings) {\tif (setting.name != null) {",
  "key name key",
  0
 ],
 [
  "status = teststatus.loading;\tvar discoveredtests = await vstestdiscoveryadapter.instance.discovertestsasync (project);\tvar tests = discoveredtests.buildtestinfo (this);\tstatus = teststatus.ready;\ttests.clear ();\tforeach (unittest test in tests) {\ttests.add (test);\t}\tontestchanged ();\t} catch (exception e) {",
  "there are entries",
  1
 ],
 [
  "public void readtimeout_0_readto_beforeopen() {",
  "verifying zero readtimeout before open with readto",
  0
 ],
 [
  "assert.true(false);\t}\tm_xsltarg.addparam(\"myarg3\", szempty, d3);\tretobj = m_xsltarg.getparam(\"myarg3\", szempty);\tif (!double.isnan((double)retobj)) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg4\", szempty, d4);\tretobj = m_xsltarg.getparam(\"myarg4\", szempty);\tif (!d4.equals((double)retobj)) {",
  "publicipaddress gateway ip",
  1
 ],
 [
  "string path, pattern;\tsplitpathandpattern (spec, out path, out pattern);\tif (pattern.indexof ('*') == -1){\tprocessfile (spec);\treturn;\t}\tstring [] files = null;\ttry {\tfiles = directory.getfiles (path, pattern);\t} catch (system.io.directorynotfoundexception) {",
  "source file could not be found",
  0
 ],
 [
  "printseparator (writer);\tforeach (allocationsummary allocationsummary in allocationsummaries) {\tallocationclassdata<loadedclass>[] classdata = allocationsummary.data;\tforeach (allocationclassdata<loadedclass> cdata in classdata) {\t}\t}\t}\theapsnapshot[] heapsnapshots = data.loadedelements.heapsnapshots;\tif (heapsnapshots.length > 0) {\tprintseparator (writer);",
  "reporting heap data for collections",
  0
 ],
 [
  "igrainstoragetestgrain grain = this.grainfactory.getgrain<igrainstoragetestgrain>(id);\tint val = await grain.getvalue();\tassert.equal(0, val);\tawait grain.dowrite(1);\tvar serviceid = await this.grainfactory.getgrain<iserviceidgrain>(guid.empty).getserviceid();\tassert.equal(initialserviceid, serviceid);\tforeach (var silo in this.hostedcluster.getactivesilos().tolist()) {\tthis.hostedcluster.restartsilo(silo);\t}\tthis.hostedcluster.initializeclient();",
  "mouse entered",
  1
 ],
 [
  "static void commandlocaltargets () {\tstring [] targets;",
  "close connection",
  1
 ],
 [
  "public fraction(int numerator, int denominator) {",
  "in fraction constructor int int",
  0
 ],
 [
  "public static void main () {\tulong aa = 10;\tulong bb = 3;",
  "generating",
  1
 ],
 [
  "}\tif (logname == null || logname.length == 0) logname = \"application\";\tif (!validlogname(logname, false)) throw new argumentexception(sr.badlogname);\tif (source == null || source.length == 0) throw new argumentexception(sr.format(sr.missingparameter, nameof(source)));\tif (source.length + eventlogkey.length > 254) throw new argumentexception(sr.format(sr.parametertoolong, nameof(source), 254 - eventlogkey.length));\tmutex mutex = null;\truntimehelpers.prepareconstrainedregions();\ttry {\tsharedutils.entermutex(eventlogmutexname, ref mutex);\tif (sourceexists(source, machinename, true)) {",
  "adstorectx updategroupmembership remove via sid",
  1
 ],
 [
  "static void main (string[] args) {",
  "hello world",
  0
 ],
 [
  "public void loadproviders () {\tstring config_dir = environment.getfolderpath (environment.specialfolder.applicationdata);\tstring monodoc_dir = system.io.path.combine (config_dir, \"monodoc\");\tstring settings_file = system.io.path.combine (monodoc_dir, \"providers.xml\");\txmlserializer ser = new xmlserializer (typeof (providers));\tproviders p;\tif (file.exists (settings_file)) p = (providers) ser.deserialize (new xmltextreader (settings_file));\telse {",
  "could not find the profile name from this",
  1
 ],
 [
  "public void write (textwriter writer) {\twriter.newline = format.newline;\tfor (int n=0; n<prefixblanklines; n++) writer.writeline ();\twriter.writeline (\"# \" + productdescription);\tmetadata.write (writer);\tforeach (var p in projects) p.write (writer);\tforeach (slnsection s in sections) s.write (writer, \"globalsection\");",
  "endglobal",
  0
 ],
 [
  "public static int main (string[] args) {\ttry {\tif (args.length < 2) {",
  "arguments missing",
  0
 ],
 [
  "static void onconfigurationupdated(eventargs e) {",
  "helpviewer onconfigurationupdated event raised",
  0
 ],
 [
  "public void dispose() {\tif (!_disposed) {",
  "table",
  1
 ],
 [
  "string name;\tstring domainname;\tint accountusage;\tint err = utils.lookupsid(this.machineusersuppliedname, _credentials, sid, out name, out domainname, out accountusage);\tif (err != 0) {\tglobaldebug.writelineif(globaldebug.error, \"samstorectx\", \"findnativebysididentref:lookupsid on {0} failed, err={1}\", this.machineusersuppliedname, err);\treturn null;\t}\tif (utils.classifysid(sid) == sidtype.realobjectfakedomain) {\tdomainname = this.machineflatname;",
  "samstorectx findnativebysididentref using for domainname",
  0
 ],
 [
  "public void cdata_10(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writeendelement();\tw.writecdata(\"foo\");\t}\tcatch (invalidoperationexception e) {",
  "exception",
  0
 ],
 [
  "public void defaultcolumnnameaddlistchangedtest() {\tstring result = @\"setting table... ---- onlistchanged propertydescriptorchanged,0,0 ---- onlistchanged reset,-1,-1 table was set. ---- onlistchanged propertydescriptoradded,0,0 default named column added. ---- onlistchanged propertydescriptoradded,0,0 non-default named column added. ---- onlistchanged propertydescriptoradded,0,0 another default named column added (column2). ---- onlistchanged propertydescriptoradded,0,0 add a column with the same name as the default columnnames. ---- onlistchanged propertydescriptoradded,0,0 add a column with a null name. ---- onlistchanged propertydescriptoradded,0,0 add a column with an empty name. \";\t_eventwriter = new stringwriter();\tdatatable dt = new datatable(\"table\");\tcomplexeventsequence1view dv = new complexeventsequence1view(dt, _eventwriter);\tdt.columns.add();\tdt.columns.add(\"non-defaultnamedcolumn\");",
  "hello",
  1
 ],
 [
  "throw new exception ();\t} catch (exception e) {\tone = true;\tthrow;\t}\t} catch {\ttwo = true;\t}\tif (one && two){\treturn 0;",
  "total string data size",
  1
 ],
 [
  "sw.writeline (@\"            <td><img src='media/pass.png' /></td>\");\t}\tif (failed_tests.count == 0) continue;\tsw.writeline (@\"        <tr id='el{0}' class='errorlist' style='display: none'>\", assembly);\tsw.writeline (@\"            <td colspan='4'>\");\tsw.writeline (@\"                <table cellpadding='2' cellspacing='0' width='100%'>\");\tint test_num = 0;\tforeach (failedtest ft in failed_tests.values) {\tsw.writeline (\"                    <tr onclick=\\\"toggle('as{0}ed{1}')\\\" onmouseover='highlight(this)' onmouseout='unhighlight(this)'>\", assembly, test_num);\tsw.writeline (@\"                        <td style='width: 17px'><img src='media/bullet.png' /></td>\");",
  "error trying to read configure in for project",
  1
 ],
 [
  "public int readempty() {\tstring xml = \"<root/>\";\treloadsourcestr(xml);\twhile (datareader.read()) {\tif (datareader.nodetype == xmlnodetype.endelement) {",
  "endelement nodetype for empty element",
  0
 ],
 [
  "try {\tsqlcommand command = new sqlcommand(generatecommandtext(), connection);\tconnection.open();\tiasyncresult result = command.beginexecutenonquery();\twhile (!result.iscompleted) {\tsystem.threading.thread.sleep(100);\t}\tassert.true(command.endexecutenonquery(result) > 0, \"failed: beginexecutenonquery did not complete successfully.\");\t}\tcatch (sqlexception ex) {",
  "error",
  0
 ],
 [
  "public void consolewrite() {",
  "where did i see this",
  0
 ],
 [
  "object [] arguments;\targuments = new object [] { str, i, int32_out, maskedtextresulthint_out };\tif (compare (\"replace\", mask, ref stateindex, arguments, ref more_states)) {\tcontinue;\t}\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;",
  "verifying discard method does not throw an exception after a call to open",
  1
 ],
 [
  "request.useragent = \"mozilla/4.0 (compatible; msie 6.0; windows nt 5.1; sv1; .net clr 1.1.4322)\";\trequest.accept = \"image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, application/x-shockwave-flash, */*\";\thttpwebresponse response = (httpwebresponse)request.getresponse();\tstream responsestream = response.getresponsestream();\tstreamreader sr = new streamreader(responsestream);\tstring s = sr.readtoend();\tsr.close();\treturn s;\t}\tcatch(exception e) {",
  "argumentnullexception is not supposed to be thrown for the input type",
  1
 ],
 [
  "public void parityreplace_default_afteropen() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "verifying default parityreplace after open",
  0
 ],
 [
  "protected static string extensioncacheconverter(filterbase filter, string suggestedadproperty) {\tstringbuilder query = new stringbuilder();\tif (filter.value != null) {\textensioncache ec = (extensioncache)filter.value;\tforeach (keyvaluepair<string, extensioncachevalue> kvp in ec.properties) {\ttype type = kvp.value.type == null ? kvp.value.value.gettype() : kvp.value.type;",
  "formatted formatted",
  1
 ],
 [
  "collectors.add (col);\tcol.task = cat.getresults (col, pattern, token);\t}\ttask.whenall (collectors.select (c => c.task)).continuewith (t => {\tif (token.iscancellationrequested) return;\tvar newresults = new list<tuple<searchcategory, ireadonlylist<searchresult>>> (collectors.count);\tforeach (var col in collectors) {\tif (col.task.iscanceled) {\tcontinue;\t} else if (col.task.isfaulted) {",
  "imports system class testclass public sub testmethod str as string console writeline str end sub end class imports system class testclass public sub testmethod str as string if str isnot nothing then console writeline str end if end sub end class",
  1
 ],
 [
  "void foo () {\ta = cond ? expr }\t}\";\tvar unit = syntaxtree.parse(code);\tvar type = unit.members.first() as typedeclaration;\tvar method = type.members.first() as methoddeclaration;\tvar exprstmt = method.body.statements.firstordefault() as expressionstatement;\tvar expr = exprstmt.expression as assignmentexpression;\tbool passed = expr != null && expr.right is conditionalexpression;\tif (!passed) {",
  "was",
  0
 ],
 [
  "private async task missingactivation_runner( int grainid, timespan lazyderegistrationdelay, bool forcecreationinsecondary = false) {",
  "smissingactivation runner",
  0
 ],
 [
  "numkeyversions += results.count();\tforeach (var m in results) console.out.writeline(\"\\t{0}-{1}\", m.identifier.name, m.identifier.version);\t}\twhile (results != null && !string.isnullorwhitespace(results.nextpagelink)) {\tresults = task.run(() => keyvaultclient.getkeyversionsnextasync(results.nextpagelink)).configureawait(false).getawaiter().getresult();\tif (results != null) {\tnumkeyversions += results.count();\tforeach (var m in results) console.out.writeline(\"\\t{0}-{1}\", m.identifier.name, m.identifier.version);\t}\t}",
  "number of versions of key in the vault",
  0
 ],
 [
  "breturn = diff.compare(xrexpected, xractual);\t}\tcatch (exception e) {\tcerror.writeline(e);\t}\tfinally {\txractual.dispose();\txrexpected.dispose();\t}\tif (!breturn) {",
  "verifying read method throws exception without a call to open",
  1
 ],
 [
  "}\tstrxml = \"<root>\t\t\t </root>\";\tbreak;\t}\txmlreader xr;\txr = createreader(new stringreader(strxml));\tdo { xr.read(); }\twhile ((xr.nodetype.tostring() != tokentype) && (xr.readstate != readstate.endoffile));\tif (xr.readstate == readstate.endoffile || xr.nodetype.tostring() != tokentype) {\txr.dispose();",
  "nodetype",
  0
 ],
 [
  "if (s3.f3 != 3+906) {\treturn 3;\t}\tint4 s4;\ts4.f1 = 1;\ts4.f2 = 2;\ts4.f3 = 3;\ts4.f4 = 4;\ts4 = mono_return_int4(s4, 906);\tif (s4.f1 != 1+906) {",
  "package named not specified in configure in",
  1
 ],
 [
  "public static void printnumberofunhandledopcodes() {\t#if debug foreach (var pair in unhandledopcodes) {",
  "root",
  1
 ],
 [
  "private static bool callsecondstructinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturnstruct<int>();\tif ((!(bool)(((dynamic)(s + 1)).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "verifying requesttosend handshake before open",
  1
 ],
 [
  "m_xsltarg.removeparam(\"myarg1\", szempty);\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);\tif (retobj != null) {\tassert.true(false);\t}\tint i = 2;\tm_xsltarg.addparam(\"myarg2\", szempty, i);\tm_xsltarg.removeparam(\"myarg2\", szempty);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (retobj != null) {",
  "errors and failures",
  1
 ],
 [
  "private void initializegui () {\tnotebook.sensitive = true;\twaitdialog.hidedialog ();\tcolumneditor.initialize (table, columns, constraints, datatypes);\tif (constrainteditor != null) constrainteditor.initialize (tables, table, columns, constraints, datatypes);\tif (triggereditor != null) triggereditor.initialize (table, triggers);",
  "tableeditordialog leaving initializegui",
  0
 ],
 [
  "static int main () {\tsimpledelegate d = new simpledelegate (async_func_throws);\tasynccallback ac = new asynccallback (async_callback);\tstring state1 = \"state1\";\tiasyncresult ar1 = d.begininvoke (1, ac, state1);\twhile (cb_state == 0) thread.sleep (0);\ttry {\td.endinvoke (ar1);\treturn 1;\t} catch (asyncexception) {",
  "received exception ok",
  0
 ],
 [
  "if (s == null) {\ts = caseinsensitivemanifestresourcestreamlookup(asm, filename + \".licenses\");\t}\tif (s != null) {\tdesigntimelicensecontextserializer.deserialize(s, filename.toupper(cultureinfo.invariantculture), this);\tbreak;\t}\t}\t}\telse if (!resourceassembly.isdynamic) {",
  "resourceassembly is not null",
  0
 ],
 [
  "object vt = options[readerfactory.ht_validationtype];\tstring fragment = (string)options[readerfactory.ht_fragment];\tstringreader sr = (stringreader)options[readerfactory.ht_stringreader];\tif (rs == null) rs = new xmlreadersettings();\trs.dtdprocessing = dtdprocessing.ignore;\tif (sr != null) {\txmlreader reader = readerhelper.create(sr, rs, string.empty);\treturn reader;\t}\tif (stream != null) {",
  "instantiating form window",
  1
 ],
 [
  "public void rtsenable_true_handshake_requesttosendxonxoff() {",
  "verifying true rtsenable after setting handshake to requesttosendxonxoff",
  0
 ],
 [
  "string contextmenupath = \"/sharpdevelop/reportdesigner/contextmenus/\";\tvar selectionservice = (iselectionservice)base.getservice(typeof(iselectionservice));\tif (selectionservice != null) {\tif (menuid == menucommands.trayselectionmenu) {\tcontextmenupath += \"trayselectionmenu\";\t}\telse if (selectionservice.primaryselection is rootreportmodel) {\tcontextmenupath += \"containermenu\";\t}\telse if (selectionservice.primaryselection is basesection) {",
  "even numbers",
  1
 ],
 [
  "public void ipinfotest_accessallproperties_noerrors() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfaceproperties ipproperties = nic.getipproperties();\tassert.notnull(ipproperties);\tassert.notnull(ipproperties.anycastaddresses);\tforeach (ipaddressinformation anyaddr in ipproperties.anycastaddresses) {\t_log.writeline(\"-- \" + anyaddr.address.tostring());",
  "principalsearchresult checkdisposed accessing disposed object",
  1
 ],
 [
  "static void help () {",
  "a server side script must be installed to run postecho",
  0
 ],
 [
  "public static void usage (string message) {",
  "runruntests waiting for a future w uncanceled token if we hang something went wrong",
  1
 ],
 [
  "while ((line = s.readline ()) != null) {\tstring name = line.trim ();\tif (name.length == 0) continue;\tuninstall (line, package, gacdir, libdir, true, ref uninstalled, ref failed);\t}\twriteline (\"assemblies processed = {0}\", uninstalled+failed);\twriteline (\"assemblies uninstalled = {0}\", uninstalled);\twriteline (\"failures = {0}\", failed);\treturn (failed == 0);\t} catch (ioexception) {",
  "failed to open assemblies list file",
  0
 ],
 [
  "public static bool getcommstate (intptr hfile, ref dcb lpdcb) {",
  "expected",
  1
 ],
 [
  "return parent;\t}\tif (xmlchar.iswhitespace (c)) {\treturn null;\t}\tif (!ct.isnamed && (char.isletter (c) || c == '_')) {\trollback = string.empty;\treturn namestate;\t}\trollback = string.empty;",
  "unexpected character in closing tag",
  0
 ],
 [
  "static void help (string details) {\tswitch (details) {",
  "test failed",
  1
 ],
 [
  "elementlist.removeat(i--);\tcontinue;\t}\te.setattribute(\"shortname\", shortname);\thtml.writeline(\"  <li><a href=\\\"#\" + shortname + \"\\\">\" + shortname + \"</a>\");\t}\tforeach (xmlelement e in elementlist) {\tstring fullname = e.getattribute(\"name\").substring(2);\tstring shortname = e.getattribute(\"shortname\");\thtml.writeline(\"  <h2><a name=\\\"\" + shortname + \"\\\">\" + shortname + \"</a></h2>\");",
  "main test ended",
  1
 ],
 [
  "public void testremovebracesfromforeach() {\ttest<removebracesaction>(@\"class testclass {\tvoid test () {\t$foreach (var a in b) {",
  "task tests",
  1
 ],
 [
  "}\tfinally {\tmounthelper.unmount(mounteddirname);\tdeletedir(mounteddirname, true);\t}\tfile.appendalltext(debugfilename, string.format(\"completed scenario {0}\", environment.newline));\t}\t}\tcatch (exception ex) {\ts_pass = false;",
  "exception not generated for non existent file parameter name",
  1
 ],
 [
  "result |= 32;\t}\tresult = 255;\t} catch (threadabortexception e) {\tconsole.writeline (e);\tif ((string)e.exceptionstate == \"statetest\") result |= 1;\tthread.resetabort ();\tthrow e;\t}\t} catch (threadabortexception e) {",
  "cought exception level",
  0
 ],
 [
  "public static void ondisposed<t> (intptr obj, bool disposing) {\tif (disposing && !enabled) throw new invalidoperationexception ();\tif (environment.hasshutdownstarted) return;\tif (!disposing) {\tif (enabled) {\tstring val;\tif (traces.trygetvalue (obj, out val)) {\tconsole.error.writeline (val);\t}\t} else {",
  "set mono cairo debug dispose to track allocation traces",
  0
 ],
 [
  "static void loadschemas (list<xmlschemacompletiondata> list, string folder, bool readonly) {",
  "element field filling value",
  1
 ],
 [
  "btn.buttonpressed += handlebuttonpressed;\tbtn.buttonreleased += handlebuttonreleased;\tbtn.clicked += (sender, e) => {\tresbtn.text = \"button clicked\";\t};\tpackstart (canvas);\tpackstart (rescanvas);\tcanvas.mouseentered += (sender, e) =>  {\tinsidecanvas = true;\tapplication.timeoutinvoke (100, checkmouseovercanvas);",
  "mouse entered",
  0
 ],
 [
  "private static bool bytetypewithidentityconversioninassignment() {\tint failcount = 0;\tdynamic d = (byte)0;\tbyte result = d;\tif (result != 0) {\tfailcount++;",
  "test failed at conversion result",
  0
 ],
 [
  "var obj = new nonbridge ();\tobj.link = list;\tlist = obj;\t}\tvar heads = new bridge [fan_out];\tfor (int i = 0; i < fan_out; ++i) {\tvar obj = new bridge ();\tobj.links.add (list);\theads [i] = obj;\t}",
  "inverse fan done",
  0
 ],
 [
  "public dummy assume (label pc, edgetag tag, source condition, textwriter data) {",
  "received destroy notification for",
  1
 ],
 [
  "if (!typemap.typedata.isvaluetype) {\tif (_format == serializationformat.literal) writelineuni (\"}\");\tif (typemap.typedata.type.isabstract) {\tgenerateendhook ();\treturn;\t}\twriteline (\"\");\twriteline (string.format (\"ob = ({0}) activator.createinstance(typeof({0}), true);\", typemap.typedata.csharpfullname));\t}\twriteline (\"\");",
  "assert areequal maskedtextresulthint out",
  1
 ],
 [
  "public bool checkcanreadbinarycontent() {\tbyte[] buffer = new byte[1];\tif (!datareader.canreadbinarycontent) {\ttry {\tint nbytes = 0;\tswitch ((int)new random().next(4)) {\tnbytes = datareader.readcontentasbinhex(buffer, 0, 1);\tbreak;",
  "selecting recabh",
  0
 ],
 [
  "public static explicit operator int(fraction thefraction) {",
  "failed",
  1
 ],
 [
  "return null;\t}\t}\t\", @\" class bar {\tpublic bar baz (object foo) {\tvar bar = foo as bar;\tif (bar != null) {\tbaz (bar);\treturn bar;\t} else {",
  "hello",
  0
 ],
 [
  "eventqueue.maineventqueue.enqueue (delegate {\tassert.areequal (maintoolkit, toolkit.currentengine);\tnoxwtcallback = true;\t});\tsectoolkit.invoke (delegate {\tassert.aresame (sectoolkit, toolkit.currentengine);\tassert.isfalse (noxwtcallback);\tapplication.mainloop.dispatchpendingevents ();\tassert.istrue (noxwtcallback);\tassert.aresame (sectoolkit, toolkit.currentengine);",
  "q quiet quiet mode minimal display",
  1
 ],
 [
  "public void basictest_getipinterfacestatistics_success() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfacestatistics stats = nic.getipstatistics();",
  "true",
  1
 ],
 [
  "public static int test4 (int b, out float f) {\tlong a;",
  "pass task is cancelled",
  1
 ],
 [
  "static bool projectcontainsreference(iproject project, assemblyname referencename) {\tbool isalreadyinreffolder = false;\tforeach (projectitem projectitem in project.items) {\treferenceprojectitem referenceitem = projectitem as referenceprojectitem;\tif (referenceitem != null) {\tif (referenceitem.itemtype == itemtype.reference) {",
  "checking project reference",
  0
 ],
 [
  "public void basictest_getipinterfacestatistics_success_linux() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfacestatistics stats = nic.getipstatistics();\tassert.throws<platformnotsupportedexception>(() => stats.incomingunknownprotocolpackets);\tassert.throws<platformnotsupportedexception>(() => stats.nonunicastpacketssent);",
  "outputqueuelength",
  0
 ],
 [
  "private void greedyread() {\tusing (serialport com1 = tcsupport.initfirstserialport()) using (serialport com2 = tcsupport.initsecondserialport(com1)) {\tchar[] charxmitbuffer = tcsupport.getrandomchars(128, true);\tbyte[] bytexmitbuffer = new byte[1024];\tchar utf32char = tcsupport.generaterandomcharnonsurrogate();\tbyte[] utf32charbytes = encoding.utf32.getbytes(new[] { utf32char });\tint numbytes;",
  "verifying that readexisting will read everything from internal buffer and drivers buffer",
  0
 ],
 [
  "public void writetimeout_default_write_char_int_int() {",
  "method with the params found",
  1
 ],
 [
  "static void writesolution (slngenerator sln_gen, string slnfilename) {",
  "sln gen write slnfilename",
  0
 ],
 [
  "public void formsreportcontains_4_sections() {\treportcreator.buildexportlist();\tvar x = reportcreator.pages[0].exporteditems;\tvar y = from s in x where s.gettype() == typeof(exportcontainer) select s;\tassert.that(y.tolist().count,is.equalto(4));",
  "pagelayoutfixture showdebug",
  0
 ],
 [
  "paths.append (new uri (file).localpath);\t}\tvar cmd = string.format (\"{0} {1} -b true -out {2} {3} -c link -p copy \", runtime, managed_linker_path, outdir, paths.tostring ());\texecute (cmd);\t}\tstatic void preprocessassemblies (list <string> chosenfiles, list <string> files) {\tif (aot_mode == \"\" || (cil_strip_path == null && managed_linker_path == null)) return;\tvar temp_dir_name = path.combine(directory.getcurrentdirectory(), \"temp_assemblies\");\taot_temp_dir = new directoryinfo (temp_dir_name);\tif (aot_temp_dir.exists) {",
  "ok",
  1
 ],
 [
  "static bool callsecondstructindexer() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturnstruct<int>();\tif ( (!(bool)(((dynamic)s.instanceproperty)[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "i have detected an useless char",
  1
 ],
 [
  "result = s.checksignature (mx.rsa);\t}\telse if (mx.dsa != null) {\tresult = s.checksignature (mx.dsa);\t}\t}\telse {\tresult = s.checksignature ();\t}\tif (result) {",
  "nested got but expected",
  1
 ],
 [
  "public static void usage (string message) {\tif (message != null) {\tconsole.writeline (\"{0}{1}{0}\", environment.newline, message);\t}",
  "access friend private static method ok",
  1
 ],
 [
  "public static ienumerable<string> yieldreturnwithnestedtryfinally(bool breakinmiddle) {\tyield return \"start of method\";\ttry {\tyield return \"within outer try\";\ttry {\tyield return \"within inner try\";\tif (breakinmiddle) yield break;",
  "create command",
  1
 ],
 [
  "public void loadproviders () {\tstring config_dir = environment.getfolderpath (environment.specialfolder.applicationdata);\tstring monodoc_dir = system.io.path.combine (config_dir, \"monodoc\");\tstring settings_file = system.io.path.combine (monodoc_dir, \"providers.xml\");\txmlserializer ser = new xmlserializer (typeof (providers));\tproviders p;\tif (file.exists (settings_file)) p = (providers) ser.deserialize (new xmltextreader (settings_file));\telse {",
  "file does not exist",
  0
 ],
 [
  "static librarycache load () {\tstring index_path = path.combine (dir, \"index.xml\");\tif (file.exists (index_path)) {\ttry {\tlibrarycache result;\txmlserializer serializer = new xmlserializer (typeof (librarycache));\tusing (xmltextreader rdr = new xmltextreader (index_path)) result = (librarycache) serializer.deserialize (rdr);\treturn result;\t} catch (exception e) {",
  "xmlschemadataobject did not find element in the schema",
  1
 ],
 [
  "public static void dopaste(isolutionfoldernode foldernode) {\tsystem.windows.idataobject dataobject = sd.clipboard.getdataobject();\tif (!doenablepaste(foldernode.folder, dataobject)) {",
  "solutionfoldernode dopaste pasting was not enabled",
  0
 ],
 [
  "public static int main () {\tbyte b = (byte) myenum.foo;",
  "foo has a value of",
  0
 ],
 [
  "public void readtimeout_750_readbyte() {",
  "verifying readtimeout with readbyte",
  0
 ],
 [
  "private static void testinstancefields() {\tfoo<classtype> fooclasstype = new foo<classtype> {\tm_intfield = 1212, m_stringfield = \"2323\", m_floatfield = 34.34f, m_objectfield = \"4545\", };\tfoo<structtype> foostructtype = new foo<structtype> {\tm_intfield = 2323, m_stringfield = \"3434\", m_floatfield = 45.45f, m_objectfield = \"5656\", };\tbar bar = new bar {\tm_intfield = 3434, m_stringfield = \"4545\", m_floatfield = 56.56f, m_objectfield = \"6767\", };",
  "test failed conversion result is incorrect",
  1
 ],
 [
  "private void registerorremovefilter(object sender, commonregistereventargs e) {\tif (e.register) {",
  "registerhelpfilter",
  0
 ],
 [
  "}\t}\tcerror.compare(datareader.readtodescendant(\"elem\", \"elem\"), false, \"there are no more descendants\");\tcerror.compare(datareader.nodetype, xmlnodetype.endelement, \"wrong node type\");\twhile (datareader.read()) ;\tdatareader.close();\treturn test_pass;\tcase \"ns\": datareader.readtodescendant(\"e:elem\");\tif (datareader.hasattributes) {\tif (datareader.getattribute(\"xmlns:e\") == null) {",
  "positioned on wrong element not on dns",
  0
 ],
 [
  "public static int main() {\twaitsubsystemtests.doublesetoneventwithtimedoutwaitershouldnotstayinwaiterslist();\twaitsubsystemtests.manualreseteventtest();\twaitsubsystemtests.autoreseteventtest();\twaitsubsystemtests.semaphoretest();\twaitsubsystemtests.mutextest();\twaitsubsystemtests.waitdurationtest();\tthreadpooltests.runprocessorcountitemsinparallel();\tthreadpooltests.runmorethanmaxjobsmakesonejobwaitforstarvationdetection();\tthreadpooltests.threadpoolcanpickuponejobwhenthreadisavailable();",
  "error formatting xml file",
  1
 ],
 [
  "m_xsltarg = new xsltargumentlist();\tm_xsltarg.addextensionobject(szdefaultns, obj);\tif ((loadxsl(\"myobject_notfoundns.xsl\", inputtype, readertype) == 1)) {\ttry {\ttransform_arglist(\"fruits.xml\", true, transformtype, doctype);\t}\tcatch (system.xml.xsl.xsltexception) {\treturn;\t}\t}",
  "x x",
  1
 ],
 [
  "public void ipinfotest_accessallproperties_noerrors() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {",
  "got total rps on streams or rps per streams",
  1
 ],
 [
  "private static keybundle createkey(keybundle keybundle, out string keyname) {\tkeybundle = keybundle ?? inputvalidator.getkeybundle();\tvar vaultaddress = inputvalidator.getvaultaddress();\tkeyname = inputvalidator.getkeyname();\tvar tags = inputvalidator.gettags();\tvar name = keyname;\tvar createdkey = task.run(() => keyvaultclient.createkeyasync(vaultaddress, name, keybundle.key.kty, keyattributes: keybundle.attributes, tags: tags)) .configureawait(false).getawaiter().getresult();",
  "refresh packages folder error",
  1
 ],
 [
  "if (myparameter3.value == dbnull.value) sinoutvalue = \"dbnull.value\";\telse {\tinoutvalue = (datetime)myparameter3.value;\tsinoutvalue = inoutvalue.tostring(\"yyyy-mm-dd hh:mm:ss\");\t}\tif (myparameter4.value == dbnull.value) sreturnvalue = \"dbnull.value\";\telse {\treturnvalue = (datetime)myparameter4.value;\tsreturnvalue = returnvalue.tostring(\"yyyy-mm-dd hh:mm:ss\");\t}",
  "done",
  1
 ],
 [
  "public static void testcontinuewhenanyexception(task[] antecedents, bool futurefactory, bool continuationisfuture) {\tbool antecedentsarefutures = (antecedents as task<int>[]) != null;",
  "test failed at call result",
  1
 ],
 [
  "catch (exception e) {\t}\t}\tpublic void setuseparameters (string[] parms) {\tif (parms.length != 2) {\treturn;\t}\tstring parm = parms[1].toupper ();\tif (parm.equals (\"true\")) useparameters = true;\telse if (parm.equals (\"false\")) useparameters = false;",
  "error invalid parameter",
  0
 ],
 [
  "public void displayinitializationui () {",
  "verifying write method throws exception with a failed call to open",
  1
 ],
 [
  "cmd2.executenonquery ();\t}\tcatch (oracleexception) {\t}\toraclecommand cmd = null;\tcmd = new oraclecommand ();\tcmd.connection = con;\tcmd.commandtext = \"create table mono_adapter_test ( \" + \" varchar2_value varchar2(32),  \" + \" number_whole_value number(18) primary key, \" + \" number_scaled_value number(18,2), \" + \" number_integer_value integer, \" + \" float_value float, \" + \" date_value date, \" + \" clob_value clob, \" + \" blob_value blob ) \";\tcmd.commandtext = \"create table mono_adapter_test ( \" + \" varchar2_value varchar2(32),  \" + \" number_whole_value number(18) primary key, \" + \" number_scaled_value number(18,2), \" + \" number_integer_value integer, \" + \" float_value float, \" + \" date_value date, \" + \" char_value char(32), \" + \" clob_value clob, \" + \" blob_value blob ) \";\tcmd.executenonquery();",
  "begin trans for table mono adapter test",
  0
 ],
 [
  "public static void createlinenumbertestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<?xml version=\\\"1.0\\\" ?>\");\ttw.writeline(\" <element a0='a0&e1;v' a1='a1value' a2='a2&e1;v'><embedded /></element>\");\ttw.writeline(\"<?pi1?>\");\ttw.writeline(\"<base64>9f6hju++</base64>\");",
  "decimal decimal",
  0
 ],
 [
  "cmd2.transaction = transaction;\tcmd2.commandtext = \"drop table clobtest\";\tcmd2.executenonquery ();\t}\tcatch (oracleexception oe1) {\t}\toraclecommand create = connection.createcommand ();\tcreate.transaction = transaction;\tcreate.commandtext = \"create table clobtest (clob_column clob)\";\tcreate.executenonquery ();",
  "task started",
  1
 ],
 [
  "public static void testpersistsucurityinfo3() {\toracleconnection con = new oracleconnection(\"data source=palis;user id=scott;password=tiger\");",
  "range the whole ring with silo is",
  1
 ],
 [
  "static void stopcollectingstacks () {\tif (!sampleprocess.hasexited) mono.unix.native.syscall.kill (sampleprocess.id, mono.unix.native.signum.sigint);",
  "policy changes confirmation",
  1
 ],
 [
  "public virtual mystruct add (int a, out int c, int b) {",
  "getprocessinfos found a duplicate process id",
  1
 ],
 [
  "static readonly universe universe = new universe ();\tstatic readonly dictionary<string, string> loaded_assemblies = new dictionary<string, string> ();\tpublic static string getassemblyname (string path) {\tstring resourcepathseparator = style == \"windows\" ? \"\\\\\\\\\" : \"/\";\tstring name = path.getfilename (path);\tif (name.endswith (\".resources.dll\", stringcomparison.ordinalignorecase)) {\tstring dir = path.getdirectoryname (path);\tint idx = dir.lastindexof (path.directoryseparatorchar);\tif (idx >= 0) {\tname = dir.substring (idx + 1) + resourcepathseparator + name;",
  "storing satellite assembly path with name name",
  0
 ],
 [
  "else {\tif (!deskatrs[i].name.equals(coreclratrs[i].name)) {\treturn false;\t}\tstring deskprefix, coreclrprefix;\tif (isprefixedattributevalue(deskatrs[i].value, out deskprefix)) {\tif (isprefixedattributevalue(coreclratrs[i].value, out coreclrprefix)) {\txnamespace deskns = baselinexelement.getnamespaceofprefix(deskprefix);\txnamespace coreclrns = actualxelement.getnamespaceofprefix(coreclrprefix);\tif (!deskns.equals(coreclrns)) {",
  "principalsearcher checkdisposed accessing disposed object",
  1
 ],
 [
  "public fixture() {\ttry {\tsqlserverstorage = relationalstoragefortesting.setupinstance(adonetinvariants.invariantnamesqlserver, testdatabasename).getawaiter().getresult();\t}\tcatch (exception ex) {\t}\ttry {\tmysqlstorage = relationalstoragefortesting.setupinstance(adonetinvariants.invariantnamemysql, testdatabasename).getawaiter().getresult();\t}\tcatch (exception ex) {",
  "failed to initialize mysql for relationalgeneraltests",
  0
 ],
 [
  "public void dispose() {\tisdisposed = true;\thosttoworkerpipe.dispose();\tif (thread.currentthread != readerthread) {",
  "waiting for thread join",
  0
 ],
 [
  "public override void update() {\tbase.update();\tthis.context.sessionid\t\t\t= this.sessionid;\tthis.context.serverrandom\t\t= this.random;\tthis.context.negotiating.cipher = this.ciphersuite;\tthis.context.compressionmethod\t= this.compressionmethod;\tthis.context.protocolnegotiated\t= true;",
  "client random",
  0
 ],
 [
  "public ienumerable foo (int a) {\ttry {\ttry {\tyield return a;\t} finally {\t}\ttry {\tyield return a * a;\t} finally {",
  "boston",
  0
 ],
 [
  "}\t}\t} else if (setsynchronizingobject.matches (call)) {\tif (ins.previous.opcode.code == code.ldarg_0) {\tthissynchronized.add (call_type);\t}\t}\tbreak;\t}\tif (candidate != null) {",
  "got but expected",
  1
 ],
 [
  "static bool myfilter (memberinfo mi, object criteria) {",
  "you passed in",
  0
 ],
 [
  "public void state_7(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartdocument();\tw.writestartattribute(\"attr\", \"\");\t}\tcatch (invalidoperationexception e) {",
  "exception",
  0
 ],
 [
  "directoryinfo dir = new directoryinfo (dirname);\tforeach (fileinfo file in dir.getfiles ()) {\ttry {\trunresult rr = runresult.none;\tif (file.name.startswith (\"strict_\")) rr = runresult.strict;\telse if (file.name.startswith (\"valid_\")) rr = runresult.valid;\telse if (file.name.startswith (\"unverifiable_\")) rr = runresult.unverifiable;\telse if (file.name.startswith (\"invalid_\")) rr = runresult.invalid;\tif (file.name.endswith (\".exe\") && rr != runresult.none) executetest (file.fullname, file.name, rr);\t} catch (exception e) {",
  "all good",
  1
 ],
 [
  "foreach (int actual in e) {\tconsole.writeline (actual);\tif (int_array [pos++] * 2 != actual) return pos;\t}\te = from i in int_array let u = i * 2 let v = u * 3 where u != 0 select v;\tpos = 1;\tforeach (int actual in e) {\tconsole.writeline (actual);\tif (int_array [pos++] * 6 != actual) return pos;\t}",
  "method with unused parameters",
  1
 ],
 [
  "public static void formatoutput (iexporttext textcolumn) {\tif (string.isnullorwhitespace(textcolumn.text)) {\treturn;\t}\tif (textcolumn.name == \"xy\") {",
  "exception not generated for non existent file parameter name",
  1
 ],
 [
  "return;\t}\tswitch (type) {\tcase objecttype.certificate: for(int i = 0; i < store.certificates.count; i++) {\tconsole.writeline (\"==============certificate # {0} ==========\", i + 1);\tdisplaycertificate (store.certificates[i], machine, verbose);\t}\tint selection;\tconsole.write(\"enter cert # from the above list to put-->\");\tif (!int.tryparse(console.readline(), out selection) || selection > store.certificates.count) {",
  "error invalid selection",
  0
 ],
 [
  "}\t}\tif (adp.isempty(sourcetable)) {\tthrow adp.invalidsourcetable(\"sourcetable\");\t}\tswitch (mappingaction) {\tcase missingmappingaction.passthrough: #if debug if (adapterswitches.dataschema.traceinfo) {\t}\t#endif return new datatablemapping(sourcetable, datasettable);\tcase missingmappingaction.ignore: #if debug if (adapterswitches.dataschema.tracewarning) {",
  "orleans silo is running press enter to terminate",
  1
 ],
 [
  "static string createcachedirectory (filepath filename) {\tcanonicalizepath (ref filename);\ttry {\tstring cacheroot = getassemblycacheroot (filename);\tstring cachedir = getpossiblecachedirnames (cacheroot).first (d => !directory.exists (d));\tdirectory.createdirectory (cachedir);\tfile.writealltext ( path.combine (cachedir, \"data.xml\"), string.format (\"<deriveddata><file name=\\\"{0}\\\" version =\\\"{1}\\\"/></deriveddata>\", escapetoxml (filename), currentversion) );\treturn cachedir;\t} catch (exception e) {",
  "sdsutils entering insertprincipal",
  1
 ],
 [
  "object [] arguments;\targuments = new object [] { str, i, j, int32_out, maskedtextresulthint_out };\tif (compare (\"replace\", mask, ref stateindex, arguments, ref more_states)) {\tcontinue;\t}\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;",
  "sdsutils writeattribute writing to on",
  1
 ],
 [
  "private void completioncallback(object context) {\tif (boolflags[flag_disposed]) {\treturn;\t}",
  "name type",
  1
 ],
 [
  "public int run (string[] args) {\tparseargs (args);\tif (!nologo) {",
  "mono xml serializer generator tool",
  0
 ],
 [
  "referencedprefixes[filename].add(rprr.prefix);\t}\t}\t} else {\tif (monitor != null) monitor.showingdialog = true;\tmessageservice.showwarning(\"found a resource reference that could not be resolved.\"+environment.newline+(reference.filename ?? \"<null>\")+\":\"+reference.offset+environment.newline+\"expression: \"+(reference.expression ?? \"<null>\"));\tif (monitor != null) monitor.showingdialog = false;\t}\t}\tforeach (string filename in referencedkeys.keys) {",
  "resourcetoolkit findunusedkeys referenced resource file",
  0
 ],
 [
  "public int v15() {\treloadsource(new stringreader(\"<root><b/></root>\"));\tdatareader.read();\tif (isbinaryreader()) datareader.read();\ttry {\tdatareader.readtofollowing(null);\t}\tcatch (argumentnullexception) {",
  "fail",
  1
 ],
 [
  "public void dispose() {\tif(manager != null && siloinstancetabletestconstants.deleteentriesaftertest) {\ttimespan timeout = siloinstancetabletestconstants.timeout;\toutput.writeline(\"testcleanup timeout={0}\", timeout);\tmanager.deletetableentries(this.clusterid).waitwiththrow(timeout);",
  "testcleanup finished",
  0
 ],
 [
  "s = sr.readtoend ();\t}\tusing (streamwriter sw = new streamwriter (args [3], false, encoding.getencoding (args [2]))) {\tsw.write (s);\t}\tstring s2;\tusing (streamreader sr = new streamreader (args [3], encoding.getencoding (args [2]))) {\ts2 = sr.readtoend ();\t}\tif (s != s2) {",
  "failure",
  0
 ],
 [
  "addressprefixes = new list<string>() {\t\"192.168.0.0/16\", }\t}\t};\tvar putlocalnetworkgatewayresponse = networkmanagementclient.localnetworkgateways.createorupdate(resourcegroupname, localnetworkgatewayname, localnetworkgateway);\tassert.equal(\"succeeded\", putlocalnetworkgatewayresponse.provisioningstate);\tvar getlocalnetworkgatewayresponse = networkmanagementclient.localnetworkgateways.get(resourcegroupname, localnetworkgatewayname);\tstring publicipname = testutilities.generatename();\tstring domainnamelabel = testutilities.generatename();\tvar nic1publicip = testhelper.createdefaultpublicipaddress(publicipname, resourcegroupname, domainnamelabel, location, networkmanagementclient);",
  "failed long long",
  1
 ],
 [
  "console.clear();\tconsole.writeline(\"db.orders.add(new order { productid = 7, customerid = 1, orderdate = datetime.now });\");\tdb.orders.insertonsubmit(new order { employeeid = 1, customerid = \"alfki\", orderdate = datetime.now });\tdb.submitchanges();\tconsole.writeline(\"db.orders.add(new order { productid = 2, customerid = 2, orderdate = datetime.now });\");\tdb.orders.insertonsubmit(new order { employeeid = 1, customerid = \"alfki\", orderdate = datetime.now });\tdb.submitchanges();\tforeach (var v in db.orders) objectdumper.write(v);\tconsole.readkey();\tconsole.clear();",
  "assert istrue br is solidbrush p count",
  1
 ],
 [
  "public static void displayjobschedulelong(itestoutputhelper testoutputhelper, cloudjobschedule curwi) {\t{\tjobscheduleexecutioninformation wiexinfo = curwi.executioninformation;",
  "failed float",
  1
 ],
 [
  "public static languagebinding getbindingperlanguagename (string language) {\tif (string.isnullorempty (language)) {",
  "cannot get binding for null language at",
  0
 ],
 [
  "private static void printhelp() {\tconsole.writeline();\tconsole.writeline();\tconsole.writeline();",
  "all run all tests best for debugging not perf measurements",
  0
 ],
 [
  "public void databits_1() {",
  "verifying databits",
  0
 ],
 [
  "n = k + 1;\t};\ttask.factory.startnew(action).continuewith(tsk => {\tlogcontext(\"sub-task \" + id + \"-continuewith\");\t});\t}\t};\tiworkitem workitem = new closureworkitem(closure);\tthis.scheduler.queueworkitem(workitem, context);\tthread.sleep(timespan.fromseconds(2));",
  "main task awake",
  0
 ],
 [
  "private void registerorremovenamespace(object sender, commonregistereventargs e) {\tif (e.register) {\t}\telse {",
  "removehelpnamespace",
  0
 ],
 [
  "public bool checkcanreadbinarycontent() {\tbyte[] buffer = new byte[1];\tif (!datareader.canreadbinarycontent) {\ttry {\tint nbytes = 0;\tswitch ((int)new random().next(4)) {",
  "selecting rcabh",
  0
 ],
 [
  "return;\t}\tvar oldheapshot = heapshots[heapshots.count - 2];\tvar diffcounter = new list<tuple<long, int>> ();\tforeach (var classinfoid in newheapshot.classinfos.keys) {\tif (!oldheapshot.objectsperclasscounter.trygetvalue (classinfoid, out int oldcount)) oldcount = 0;\tif (!newheapshot.objectsperclasscounter.trygetvalue (classinfoid, out int newcount)) newcount = 0;\tif (newcount - oldcount != 0) diffcounter.add (tuple.create (classinfoid, newcount - oldcount));\t}\tforeach (var diff in diffcounter.orderbydescending (d => d.item2)) {",
  "newheapshot classinfos diff name diff",
  0
 ],
 [
  "public static xmlassembly createfromfile (string file) {\txmldocument doc = new xmldocument ();\tdoc.load (file.openread (file));\txmlnode node = doc.selectsinglenode (\"/assemblies/assembly\");\tif (node != null) {\txmlassembly result = new xmlassembly ();\ttry {\tresult.loaddata (node);\t} catch (exception e) {",
  "cout writeline",
  1
 ],
 [
  "stringbuilder sb = new stringbuilder();\tfor (int i = 0; i < 1000000; i++) sb.append(i);\tcmd.commandtext = \"insert into #blobs (id, blob) values (1, @blob)\";\tcmd.parameters.add(\"@blob\", sqldbtype.varchar, -1);\tcmd.parameters[\"@blob\"].direction = parameterdirection.input;\tcmd.parameters[\"@blob\"].value = new stringreader(sb.tostring());\ttask t = cmd.executenonqueryasync(cts.token);\tif (!t.iscompleted) cts.cancel();\ttry {\tt.wait();",
  "create data set",
  1
 ],
 [
  "public static bool queryperformancecounter (out long performancecount) {",
  "queryperformancecounter called",
  0
 ],
 [
  "icollection valuecollection;\tif (kvp.value.value.length == 1 && kvp.value.value[0] is icollection && !(kvp.value.value[0] is byte[])) {\tvaluecollection = (icollection)kvp.value.value[0];\t}\telse {\tvaluecollection = (icollection)kvp.value.value;\t}\tforeach (object oval in valuecollection) {\tif (null != oval) {\tif ((oval is icollection || oval is ilist) && !(oval is byte[])) throw new argumentexception(sr.invalidextensioncollectiontype);",
  "oncreated",
  1
 ],
 [
  "static void do_one () {\tbuild_array ();\tget_stats ();\tgc.collect ();",
  "after collect",
  0
 ],
 [
  "session = new usagedatasessionwriter(dbfilename, finduserid);\t} catch (incompatibledatabaseexception ex) {\tif (ex.actualversion < ex.expectedversion) {\tguid? olduserid = usagedatasessionwriter.retrieveuserid(dbfilename);\ttrydeletedatabase();\ttry {\tsession = new usagedatasessionwriter(dbfilename, () => (olduserid ?? finduserid()));\t} catch (incompatibledatabaseexception ex2) {\t}\t} else {",
  "signature",
  1
 ],
 [
  "static void help () {",
  "format",
  1
 ],
 [
  "private static void listcertificates() {\tvar vaultaddress = inputvalidator.getvaultaddress();\tvar numsecretsinvault = 0;\tvar maxresults = 1;",
  "longdatepattern",
  1
 ],
 [
  "}\tcatch (exception ex) {\tvar caughtexceptiontype = ex.gettype();\tif (!whitelist.any(knownexceptiontype => knownexceptiontype.isassignablefrom(caughtexceptiontype))) {\tthrow;\t}\tif (attempt < maxattempts) {\tthread.sleep(initialtimeout * (int)math.pow(timeoutfactor, attempt - 1));\tcontinue;\t}",
  "error invalid port",
  1
 ],
 [
  "public override void beforeremoving (ienumerable<xelement> list) {\tfirst = true;\tif (state.basetype == \"system.enum\") {",
  "p removed value p s",
  0
 ],
 [
  "public void readwithoutopen() {\tusing (serialport com = new serialport()) {",
  "verifying read method throws exception without a call to open",
  0
 ],
 [
  "public static void printnumberofunhandledopcodes() {\t#if debug foreach (var pair in unhandledopcodes) {",
  "addmethodbodybuilder unhandled opcode x",
  0
 ],
 [
  "public targetframework gettargetframework (targetframeworkmoniker id) {\ttargetframework fx;\tif (frameworks.trygetvalue (id, out fx)) return fx;\tforeach (var r in runtimes) r.ensureinitialized ();\tif (frameworks.trygetvalue (id, out fx)) return fx;",
  "unknown targetframework is being requested from systemassemblyservice returning empty targetframework",
  0
 ],
 [
  "public override void applychanges () {",
  "exception raised",
  1
 ],
 [
  "public void rtsenable_true_false_beforeopen() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "verifying seting rtsenable to true then false before open",
  0
 ],
 [
  "static void main (string [] args) {\tthread.currentthread.currentuiculture = thread.currentthread.currentculture;\tlib1.book book = new lib1.book ();\tlib1.publisher publisher = new lib1.publisher ();",
  "publisher default name",
  0
 ],
 [
  "public void test(foo f) {",
  "bar test foo f equals f ok",
  0
 ],
 [
  "public void pi_4(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writeprocessinginstruction(null, \"test\");\t}\tcatch (argumentexception e) {",
  "exception",
  0
 ],
 [
  "thread.sleep(0);\tif(monitor.tryenter(thr, 100)==true) {\tmonitor.exit(thr);\t} else {\t}\tthread.setdata(slot, main);\tthread storedthr=(thread)thread.getdata(slot);\tthread.setdata(namedslot, main);\tstoredthr=(thread)thread.getdata(namedslot);\tif(thr.join(5000)) {",
  "joined thread",
  0
 ],
 [
  "public void greedyread() {\tusing (serialport com1 = tcsupport.initfirstserialport()) using (serialport com2 = tcsupport.initsecondserialport(com1)) {\trandom rndgen = new random();\tbyte[] bytexmitbuffer = new byte[1024];\tbyte[] expectedbytes = new byte[bytexmitbuffer.length + 4];\tbyte[] bytercvbuffer;\tchar utf32char = (char)8169;\tbyte[] utf32charbytes = encoding.utf32.getbytes(new[] { utf32char });\tint numbytesread;",
  "failed to localize string",
  1
 ],
 [
  "protected override void run () {\ttry {\tstring title = gettextcatalog.getstring (\"clear recent projects\");\tstring question = gettextcatalog.getstring (\"are you sure you want to clear recent projects list?\");\tif (messageservice.genericalert ( monodevelop.ide.gui.stock.question, title, question, alertbutton.no, alertbutton.yes) == alertbutton.yes) {\tdesktopservice.recentfiles.clearprojects ();\t}\t} catch (exception ex) {",
  "error clearing recent projects list",
  0
 ],
 [
  "public override monodevelop.projects.extensions.migrationtype shouldmigrateproject () {",
  "ib",
  1
 ],
 [
  "protected override void run () {\ttry {\tstring title = gettextcatalog.getstring (\"clear recent files\");\tstring question = gettextcatalog.getstring (\"are you sure you want to clear recent files list?\");\tif (messageservice.genericalert ( monodevelop.ide.gui.stock.question, title, question, alertbutton.no, alertbutton.yes) == alertbutton.yes) {\tdesktopservice.recentfiles.clearfiles ();\t}\t} catch (exception ex) {",
  "test failed at call result",
  1
 ],
 [
  "string temp_o = (style != \"windows\") ? \"temp.o\" : \"temp.s.obj\";\tif (compile_only) temp_c = output;\tif (object_out != null) temp_o = object_out;\ttry {\tlist<string> c_bundle_names = new list<string> ();\tlist<string[]> config_names = new list<string[]> ();\tusing (streamwriter ts = new streamwriter (file.create (temp_s))) {\tusing (streamwriter tc = new streamwriter (file.create (temp_c))) {\tstring prog = null;\tif (bundled_header) {",
  "ifndef null define null void endif",
  0
 ],
 [
  "gctime += gcs.duration;\tgcmarktime += gcs.markduration;\tgcsweeptime += gcs.sweepduration;\t}\t}\tprintseparator (writer);\tforeach (profilereventhandler.gcstatistics gcs in gcstatistics) {\tif (gcs.newheapsize == null) {\tulong gcstartclicks = gcs.startcounter - data.startcounter;\t} else {",
  "heap resized to bytes",
  0
 ],
 [
  "var q5 = from c in db.customers from o in c.orders where c.city == \"london\" select new { c, o };\tforeach (var v in q4) objectdumper.write(v);\tconsole.readkey();\tconsole.clear();\tconsole.writeline(\"from o in db.orders where o.customer.city == \\\"london\\\" select new { c = o.customer, o };\");\tvar q6 = from o in db.orders where o.customer.city == \"london\" select new { c = o.customer, o };\tforeach (var v in q4) objectdumper.write(v);\tconsole.readkey();\tconsole.clear();\tforeach (var v in db.orders) objectdumper.write(v);",
  "press enter to continue",
  0
 ],
 [
  "public async task closeasync_serverinitiatedclose_success(uri server) {\tconst string closewebsocketmetacommand = \".close\";\tusing (clientwebsocket cws = await websockethelper.getconnectedwebsocket(server, timeoutmilliseconds, _output)) {\tvar cts = new cancellationtokensource(timeoutmilliseconds);\tawait cws.sendasync( websocketdata.getbufferfromtext(closewebsocketmetacommand), websocketmessagetype.text, true, cts.token);\tvar recvbuffer = new byte[256];",
  "skipping since drive is not ntfs and there is no other drive on the machine",
  1
 ],
 [
  "{\tstring.empty, \"abc\", null }\t;\tforeach (bool a1 in boolvalues) {\tforeach (string a2 in stringvalues) {\tforeach (string a3 in stringvalues) {\tdynamic d1 = a1;\tdynamic d2 = a2;\tdynamic d3 = a3;\tif ((d1 ? d2 : d3) != (a1 ? a2 : a3)) {",
  "failed bool string string",
  0
 ],
 [
  "try {\tmodule.gettypes ();\treturn 3;\t} catch (exception) {}\ttry {\tcorlib.gettypes ();\treturn 4;\t} catch (exception) {}\tl.clear ();\tl = null;",
  "failure",
  1
 ],
 [
  "game = await player.getcurrentgame();\tif (game == null) {\tawait task.delay(5000);\t}\t}\tcatch (exception exc) {\t}\t}\tvar watcher = new gameobserver();\tawait game.subscribeforgameupdates( await client.createobjectreference<igameobserver>(watcher));",
  "principalcontext domachineinit caught exception of type and message",
  1
 ],
 [
  "public static void blobtest (oracleconnection connection) {",
  "writeline",
  1
 ],
 [
  "public static int main () {\tvar tests = from test in typeof (tester).getmethods (bindingflags.instance | bindingflags.nonpublic | bindingflags.declaredonly) where test.getparameters ().length == 0 orderby test.name select runtest (test);\tint failures = tests.count (a => !a);",
  "running nant",
  1
 ],
 [
  "}\ttypeofexpression t = param as typeofexpression;\tif (t != null && this.positionavailable) {\t#endif resolveresult rr = this.resolve(new typereferenceexpression(t.typereference), expressioncontext.type);\t#if debug if (rr == null) {\t} else {\t}\t#endif if (rr != null) {\t#endif this.foundresourceset = nrefactoryresourceresolver.getresourcesetreference(this.resourcemanagermember.declaringtype.compilationunit.filename, rr.resolvedtype.fullyqualifiedname);\t#if debug if (this.foundresourceset.filename != null) {",
  "test failed at conversion result",
  1
 ],
 [
  "static extern void mono_test_native_to_managed_exception_rethrow (action action);\t[dllimport (\"libc\")]\tstatic extern void _exit (int exitcode);\tstatic int main (string[] args) {\tappdomain.currentdomain.unhandledexception += (sender, exception_args) => {\tcustomexception exc = exception_args.exceptionobject as customexception;\tif (exc == null) {",
  "etag",
  1
 ],
 [
  "if (htmlexception == null) filldefaulterrorvalues (true, true, ex, values);\telse {\tpagetype = exceptionpagetemplatetype.htmlized;\tfillhtmlizederrorvalues (values, htmlexception, ref pagetype);\t}\t}\treturn template.render (values, pagetype);\t} catch (exception ex) {\tconsole.error.writeline (ex);\tconsole.error.writeline ();",
  "the actual exception which was being reported was",
  0
 ],
 [
  "public static void createxdrtestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<schema xmlns=\\\"uuid:bdc6e3f0-6da3-11d1-a2a3-00aa00c14882\\\"><elementtype content=\\\"empty\\\" name=\\\"tt\\\"></elementtype>\");\ttw.writeline(\"<elementtype content=\\\"eltonly\\\" order=\\\"seq\\\" name=\\\"bar\\\" model=\\\"closed\\\"><element type=\\\"tt\\\" /><element type=\\\"tt\\\" /></elementtype>\");",
  "created new dependency saving solution",
  1
 ],
 [
  "public void deserialization() {\tglobal::system.runtime.serialization.iformatter fmtr = new global::system.runtime.serialization.formatters.binary.binaryformatter ();\tglobal::system.io.memorystream src;\tfor (int i = 0; i < serializationcases.length; ++i) {\tsrc = new global::system.io.memorystream ( bitconverter_bytearray_fromstring (serializationcases[i].resultbinarystring));\tdatetimeoffset result = (datetimeoffset)fmtr.deserialize (src);",
  "input o s",
  0
 ],
 [
  "private void ondomainunload(object sender, system.eventargs e) {",
  "usage managed linker path to exe",
  1
 ],
 [
  "static void writehelp () {\tconsole.writeline ();",
  "a schema or proxy",
  0
 ],
 [
  "public static void usage (string message) {\tif (message != null) {\tconsole.writeline (\"{0}{1}{0}\", environment.newline, message);\t}",
  "running tests for v",
  1
 ],
 [
  "if (s17.f4 != 4+9) {\treturn 4;\t}\tif (s17.f5 != 5+9) {\treturn 5;\t}\tif (s17.f6 != 6+9) {\treturn 6;\t}\tif (s17.f7 != 7+9) {",
  "got but expected",
  0
 ],
 [
  "public leaf () {",
  "called on return",
  1
 ],
 [
  "public void projectfinishedhandler (object sender, projectfinishedeventargs args) {\tif (isverbositygreaterorequal (loggerverbosity.normal)) {\tif (indent == 1) indent --;\tsetcolor (eventcolor);",
  "retrieved",
  1
 ],
 [
  "bool retval = true;\tnode[] nodes = new node[size + 2];\tint i = 0;\tnode n = startsentinel;\twhile (n != null) {\tnodes[i++] = n;\tn = n.next;\t}\tforeach (hashedlinkedlist<t> view in views) {\tif (!view.isvalid) {",
  "invalid view hash offset size",
  0
 ],
 [
  "public static int main () {\tint arg;\tbyte b = 4;\tvar d = new derived (-5, ref b, out arg);\tif (d.field != -5) return 1;\tif (d.fieldref != 4) return 2;",
  "ok",
  0
 ],
 [
  "public static void thread() {\tthread.sleep(500);\tthread.sleep(500);\tthread.sleep(500);",
  "error reading keybindings definition in addin",
  1
 ],
 [
  "public ruleresult checktype (typedefinition type) {\tif (!type.hasmethods || type.isenum || type.isdelegate ()) return ruleresult.doesnotapply;\tlog.writeline (this);\tlog.writeline (this, \"----------------------------------\");\tlog.writeline (this, type);\tif (!type.implements (\"system\", \"idisposable\")) {\tforeach (methoddefinition method in type.methods.where (m => m.name == \"dispose\")) {",
  "found",
  0
 ],
 [
  "elementlist.removeat(i--);\tcontinue;\t}\te.setattribute(\"shortname\", shortname);\thtml.writeline(\"  <li><a href=\\\"#\" + shortname + \"\\\">\" + shortname + \"</a>\");\t}\tforeach (xmlelement e in elementlist) {\tstring fullname = e.getattribute(\"name\").substring(2);\tstring shortname = e.getattribute(\"shortname\");\thtml.writeline(\"  <h2><a name=\\\"\" + shortname + \"\\\">\" + shortname + \"</a></h2>\");",
  "table",
  0
 ],
 [
  "static guid finduserid() {\tstring[] othersharpdevelopversions;\ttry {\tothersharpdevelopversions = directory.getdirectories(path.combine(propertyservice.configdirectory, \"..\"));\t} catch (ioexception) {\tothersharpdevelopversions = new string[0];\t} catch (unauthorizedaccessexception) {\tothersharpdevelopversions = new string[0];\t}",
  "looking for existing udc database in directories",
  0
 ],
 [
  "snd_pcm_hw_params (handle, hw_param);\t} else {\t}\talsa_err = snd_pcm_sw_params_malloc (ref sw_param);\tif (alsa_err == 0) {\tsnd_pcm_sw_params_current (handle, sw_param);\tsnd_pcm_sw_params_set_avail_min(handle, sw_param, chunk_size);\tsnd_pcm_sw_params_set_start_threshold(handle, sw_param, buffer_size);\tsnd_pcm_sw_params(handle, sw_param);\t} else {",
  "failed to alloc alsa sw param struct",
  0
 ],
 [
  "private static void verify<t>(t expected, t actual) {\tif (!actual.equals(expected)) {",
  "expected",
  0
 ],
 [
  "public int read3() {\tstring strxml = \"<root:  />\";\ttry {\treloadsourcestr(strxml);\twhile (datareader.read()) ;\t}\tcatch (xmlexception e) {",
  "message",
  0
 ],
 [
  "static void runexternaltool (externaltools.externaltool tool, string argumentstool) {\tstring commandtool = stringparserservice.parse (tool.command, ideapp.workbench.getstringtagmodel ());\tstring initialdirectorytool = stringparserservice.parse (tool.initialdirectory, ideapp.workbench.getstringtagmodel ());\tprogressmonitor progressmonitor = ideapp.workbench.progressmonitors.getrunprogressmonitor ();\ttry {",
  "running",
  0
 ],
 [
  "for (j = 0; j < exclude_test.count; j++) {\tif (name.endswith (exclude_test [j])) {\tskip = true;\tbreak;\t}\t}\tforeach (categoryattribute attr in attrs) {\tif (exclude.containskey (attr.category)) skip = true;\t}\tif (skip) {",
  "skipping",
  0
 ],
 [
  "assert.areequal (test, uri.tostring (), \"tostring/\" + test);\t}\t}\t[test]\tpublic void unixlocalpath_wtf () {\tstring path = \"file: uri fileuri = new uri( path );\tassert.areequal (\"/tmp/foo/bar\", fileuri.absolutepath, path);\tstring path2 = \"file: fileuri = new uri (path2);\tassert.areequal (\"file: }\tpublic static void print (uri uri) {",
  "fragment",
  0
 ],
 [
  "public override string tostring () {\tstringwriter sw = new stringwriter ();",
  "assembly has thrown",
  1
 ],
 [
  "files = directory.getfiles (dir, pattern);\tforeach (string file in files) {\tfilenames.add (file);\t}\tbreak;\t}\t}\tstring subdir = path.combine (outputdir, version);\tif (!directory.exists (subdir)) directory.createdirectory (subdir);\tforeach (string file in filenames) {",
  "processing",
  0
 ],
 [
  "public void logblockstart (functionid functionid, logmessage logmessage, int uniquepairid, cancellationtoken cancellationtoken) {",
  "roslyn error",
  0
 ],
 [
  "if (isdoozer) html.writeline(\"       <th colspan=2>doozer name:</td>\");\telse html.writeline(\"       <th colspan=2>condition name:</td>\");\tbool lastwasattribute = false;\tforeach (xmlelement sub in e) {\tswitch (sub.name) {\tcase \"summary\": case \"example\": break;\tcase \"attribute\": if (!lastwasattribute) {\tlastwasattribute = true;\thtml.writeline(\"    <tr><td colspan=3><hr><h3>attributes:</h3></td></tr>\");\t}",
  "tr",
  0
 ],
 [
  "if (str != (\"cwd \" + cwd)) {\twhere = \"cwd - \" + str;\treturn false;\t}\twriter.flush ();\tstr = reader.readline ();\tif (str != (\"type i\")) {\twhere = \"type - \" + str;\treturn false;\t}",
  "printf cookie",
  1
 ],
 [
  "lastwasattribute = false;\thtml.writeline(\"    <tr><td colspan=3><hr></td></tr>\");\t}\thtml.writeline(\"       <th colspan=2>\" + char.toupper(sub.name[0]) + sub.name.substring(1) + \":</td>\");\tbreak;\t}\t}\tforeach (xmlelement sub in e) {\tif (sub.name == \"example\") {\thtml.writeline(\"  <p><span class=\\\"exampletitle\\\">example: \" + xmltohtml(sub.getattribute(\"title\")) + \"</span>\");",
  "output longer than expected",
  1
 ],
 [
  "public list<keyoperationtype> getkeyoperations() {\tlist<keyoperationtype> keyoperations = new list<keyoperationtype>();\tforeach ( var arg in args ) {\tvar result = new keyoperationtype();\tif ( enum.tryparse<keyoperationtype>( arg, true, out result ) ) {\tkeyoperations.add( result );\t}\t}\tif ( keyoperations.count == 0 ) {",
  "file not found",
  1
 ],
 [
  "tr.write(\"        \" + returntype + \" \" + decl.functionname + \"(\");\ttr.write(\"intptr thishandle\");\tforeach (parameter param in decl.parameters) {\ttr.write(\", \");\ttr.write(param.type.managedtypename + \" \" + param.name);\t}\ttr.writeline(\")\");\t}\ttr.writeline();\t#endif foreach (functiondecl decl in functiondata) {",
  "attr key is",
  1
 ],
 [
  "protected override void dispose(bool disposing) {\tbool leaked = !disposing && !isinvalid;\t#if leaks_identifying if (leaked) {\tleakscontainer.add(gettype().name);\t}\t#endif base.dispose(disposing);\t#if leaks_tracking if (!leaked) {\t}\telse {",
  "assembly is not strong named",
  1
 ],
 [
  "public contentvalidator finish(bool usedfa) {\tdebug.assert(contenttype == xmlschemacontenttype.elementonly || contenttype == xmlschemacontenttype.mixed);\tif (_contentnode == null) {\tif (contenttype == xmlschemacontenttype.mixed) {\tstring ctype = isopen ? \"any\" : \"textonly\";\treturn isopen ? contentvalidator.any : contentvalidator.textonly;\t}\telse {",
  "got but expected",
  1
 ],
 [
  "private static void teststringbuilder() {",
  "testing marshalling string builder",
  0
 ],
 [
  "static int main () {\tvar da = appdomain.createdomain (\"le domain\");\tda.docallback (delegate { appdomainmethod ();});",
  "unloading",
  0
 ],
 [
  "public static void usage (string message) {\tif (message != null) {\tconsole.writeline (\"{0}{1}{0}\", environment.newline, message);\t}",
  "ok",
  1
 ],
 [
  "console.writeline( \"from c in db.customers from o in c.orders where c.city == \\\"london\\\" select new { c, o };\");\tvar q5 = from c in db.customers from o in c.orders where c.city == \"london\" select new { c, o };\tforeach (var v in q4) objectdumper.write(v);\tconsole.readline();\tconsole.clear();\tconsole.writeline( \"from o in db.orders where o.customer.city == \\\"london\\\" select new { c = o.customer, o };\");\tvar q6 = from o in db.orders where o.customer.city == \"london\" select new { c = o.customer, o };\tforeach (var v in q4) objectdumper.write(v);\tconsole.readline();\tconsole.clear();",
  "db orders",
  0
 ],
 [
  "rootmenu.additem (new mdsubmenuitem (commandmanager, (commandentryset)ce));\t}\t} catch (exception ex) {\ttry {\tvar m = nsapplication.sharedapplication.mainmenu;\tif (m != null) {\tm.dispose ();\t}\tnsapplication.sharedapplication.mainmenu = null;\t} catch {}",
  "resourcefiles null",
  1
 ],
 [
  "public void marklabel(label lbl) {\tif (this.lastsourceinfo != null && !this.lastsourceinfo.isnosource) {\tdebugsequencepoint(sourcelineinfo.nosource);\t}",
  "user x unknown",
  1
 ],
 [
  "int failcount = 0;\tbool ispass = false;\tforeach (var v in new nctestingreturnienumeratort(33)) {\tif (v == 33) {\tispass = true;\t}\tbreak;\t}\tif (!ispass) {\tfailcount++;",
  "test failed at call result",
  1
 ],
 [
  "public static void help () {\tconsole.writeline (\"\\t--protocol=2\\tuse v2 protocol (not ssl related)\");\tconsole.writeline (\"\\t--protocol=3\\tuse v3 protocol (not ssl related)\");",
  "testing marshalling string",
  1
 ],
 [
  "methodbuilder main = m.definemethod(\"main\", methodattributes.public | methodattributes.static );\t{\tilgenerator il = main.getilgenerator();\til.emit(opcodes.call, typebuilder.getmethod (gobj, foo));\til.emit(opcodes.ret);\t}\tasmbuild.setentrypoint (main);\tg.createtype();\tm.createtype();\tasmbuild.save(\"instance.exe\");",
  "ok",
  0
 ],
 [
  "}\t}\tif (string.isnullorempty(sourcecolumn)) {\tthrow adp.invalidsourcecolumn(nameof(sourcecolumn));\t}\tswitch (mappingaction) {\tcase missingmappingaction.passthrough: #if debug if (adapterswitches.dataschema.traceinfo) {\t}\t#endif return datacolumnmapping.getdatacolumnbyschemaaction(sourcecolumn, sourcecolumn, datatable, datatype, schemaaction);\tcase missingmappingaction.ignore: #if debug if (adapterswitches.dataschema.tracewarning) {",
  "total time seconds",
  1
 ],
 [
  "static processinfo[] getprocessinfos(performancecounterlib library, int processindex, int threadindex, byte[] data) {",
  "null returned from entry getvalues",
  1
 ],
 [
  "public void testalreadypresentifnotnullcheck3() {",
  "transaction failed due to in doubt transaction",
  1
 ],
 [
  "try {\tyield return a;\t} finally {\t}\ttry {\tyield return a * a;\t} finally {\t}\t} finally {\t}",
  "outer block",
  0
 ],
 [
  "string resourcegroupname = testutilities.generatename(\"csmrg\");\tresourcesclient.resourcegroups.createorupdate(resourcegroupname, new resourcegroup {\tlocation = location });\tstring publicipname = testutilities.generatename();\tstring domainnamelabel = testutilities.generatename();\tvar nic1publicip = testhelper.createdefaultpublicipaddress(publicipname, resourcegroupname, domainnamelabel, location, networkmanagementclient);\tstring vnetname = testutilities.generatename();\tstring subnetname = \"gatewaysubnet\";\tvar virtualnetwork = testhelper.createvirtualnetwork(vnetname, subnetname, resourcegroupname, location, networkmanagementclient);\tvar getsubnetresponse = networkmanagementclient.subnets.get(resourcegroupname, vnetname, subnetname);",
  "virtual network gatewaysubnet id",
  0
 ],
 [
  "if (s9.f6 != 6+9) {\treturn 6;\t}\tif (s9.f7 != 7+9) {\treturn 7;\t}\tif (s9.f8 != 8+9) {\treturn 8;\t}\tif (s9.f9 != 9+9) {",
  "test failed at call result",
  1
 ],
 [
  "public void generatestructures () {\tw.writeline (\"/* ======== structures ======== */\");",
  "typedef struct",
  0
 ],
 [
  "public static void dumpproperties(object value, textwriter writer, int indent) {\tif (value == null) {\t} else if (value is string) {\t} else if (value is byte[]) {",
  "byte",
  0
 ],
 [
  "public override int invoke (ienumerable<string> args) {\ttry {\tvar extra = options.parse (args);\tif (showhelp) {\toptions.writeoptiondescriptions (commandset.out);\treturn 0;\t}\tif (string.isnullorempty (name)) {\tconsole.error.writeline (\"commands: missing required argument `--name=name`.\");",
  "removehelpfilter",
  1
 ],
 [
  "case \"sybaseclient\": con = new sybaseconnection();\tbreak;\treturn;\treturn;\t#endif }\tcon.connectionstring = constr;\ttry {\tcon.open();\t}\tcatch(sqlexception se) {",
  "class",
  0
 ],
 [
  "public void transformstrstr10(xslinputtype xslinputtype, readertype readertype) {\tif (loadxsl(\"showparam.xsl\", xslinputtype, readertype) == 1) {\ttry {\txslt.transform(\"fruits.xml\", \"http: }\tcatch (system.exception e) {\t_output.writeline(e.tostring());\treturn;\t}\t}",
  "threadabortexception finally",
  1
 ],
 [
  "system.threading.thread.sleep(5000);\t{\tbool repeat = true;\twhile (repeat) {\tcloudpool boundpool = batchcli.pooloperations.getpool(this.poolfixture.poolid);\trepeat = false;\tforeach (cloudtask curtask in boundjob.listtasks()) {\tif (curtask.state != microsoft.azure.batch.common.taskstate.completed) {\trepeat = true;\tthis.testoutputhelper.writeline(\"manual wait task id: \" + curtask.id + \", state = \" + curtask.state);",
  "compute nodes",
  0
 ],
 [
  "public override void added (xelement target, bool wasparentadded) {\tstring name = target.attribute (\"name\").value;\tvar addeddescription  = $\"{state.namespace}.{name}: added type\";\tstate.logdebugmessage ($\"possible -n value: {addeddescription}\");\tif (state.ignorenew.any (re => re.ismatch (addeddescription))) return;\toutput.writeline (\"<pre class='added' data-is-non-breaking>\");\tstate.indent = 0;\taddedinner (target);",
  "slow command update ms command customupdater commandtargettype",
  1
 ],
 [
  "public void dump() {\tint i;",
  "things not ported yet",
  1
 ],
 [
  "public static void dumpcodeinfo (imagecodecinfo codec) {",
  "dllname",
  0
 ],
 [
  "command.executescalar();\t}\tcatch (exception e) {\tprintexception(expectedexception, e);\t}\ttry {\tusing (dbdatareader reader = command.executereader()) {\tbool moreresults = true;\tdo {\ttry {",
  "supports",
  1
 ],
 [
  "public static void readclob (oracleconnection connection) {\toraclecommand rcmd = connection.createcommand ();\trcmd.commandtext = \"select clob_column from clobtest\";\toracledatareader reader2 = rcmd.executereader ();\toraclelob lob2 = reader2.getoraclelob (0);",
  "reference comparison",
  1
 ],
 [
  "s11.f7 = 7;\ts11.f8 = 8;\ts11.f9 = 9;\ts11.f10 = 10;\ts11.f11 = 11;\ts11 = mono_return_sbyte11(s11, 9);\tif (s11.f1 != 1+9) {\treturn 1;\t}\tif (s11.f2 != 2+9) {",
  "could not find the profile name from this",
  1
 ],
 [
  "public static int main (string[] args) {\tdouble1 s1;\ts1.f1 = 1;\ts1 = mono_return_double1(s1, 9);\tif (s1.f1 != 1+9) {",
  "got but expected",
  0
 ],
 [
  "public void run (object o) {\tstring arg = (string)o;\tstring ports = arg.substring (8);\tint sp = ports.indexof (':');\tint port = int32.parse (ports.substring (0, sp));\tint interrupt_port = int32.parse (ports.substring (sp+1));",
  "csharp agent started connecting to localhost",
  0
 ],
 [
  "var qcache = caches[kvp.key];\tforeach (istreamidentity streamguid in kvp.value) {\tiqueuecachecursor cursor = qcache.getcachecursor(streamguid, firstincache);\tint messagecount = 0;\tstreamsequencetoken tenthincache = null;\tstreamsequencetoken lasttoken = firstincache;\twhile (cursor.movenext()) {\texception ex;\tmessagecount++;\tibatchcontainer batch = cursor.getcurrent(out ex);",
  "return writemethods",
  1
 ],
 [
  "public static ienumerable<string> yieldreturnwithnestedtryfinally(bool breakinmiddle) {\tyield return \"start of method\";\ttry {\tyield return \"within outer try\";",
  "got but expected",
  1
 ],
 [
  "public void bytestowritesuccessive() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tasyncwriterndbytearray asyncwriterndbytearray = new asyncwriterndbytearray(com, byte_size_bytes_to_write);\tvar t1 = new task(asyncwriterndbytearray.writerndbytearray);\tvar t2 = new task(asyncwriterndbytearray.writerndbytearray);",
  "verifying bytestowrite with successive calls to write",
  0
 ],
 [
  "if (!opcodebitmask.calls.intersect (opcodeengine.getbitmask (method))) return ruleresult.doesnotapply;\tlog.writeline (this);\tlog.writeline (this, \"---------------------------------------\");\tlog.writeline (this, method);\tforeach (instruction ins in method.body.instructions) {\tswitch (ins.opcode.code) {\tcase code.call: case code.callvirt: methodreference callee = (ins.operand as methodreference).resolve();\tif (callee != null) {\tif (callee.metadatatoken == method.metadatatoken) {\tif (callee.tostring () == method.tostring ()) {",
  "recursive call at",
  0
 ],
 [
  "public static int main() {\tbool xx = flags.public != 0;\tbool xx2 = 0 < flags.public;\tif ((_enumflags & flags.removed) != 0) return 3;\tif ((flags.public & 0).tostring () != \"removed\") return 1;\tif ((0 & flags.public).tostring () != \"removed\") return 1;",
  "warning tried to acquire lock at while holding at",
  1
 ]
]