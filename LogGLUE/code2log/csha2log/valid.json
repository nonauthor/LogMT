[
 [
  "private static void samaccountnamefromwinntconverter(directoryentry de, string suggestedwinntproperty, principal p, string propertyname) {\tdebug.assert(de.properties[\"name\"].count == 1);\tstring samaccountname = (string)de.properties[\"name\"][0];",
  "samstorectx samaccountnamefromwinntconverter loading sam",
  0
 ],
 [
  "private static bool callsecondinterfaceinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturndynamicinterface();\tif ((!(bool)(s[1].instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "private static bool callsecondinterfaceinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tif ((!(bool)(((dynamic)firstclassreturninterface<int>.staticmethod()).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "hello world",
  1
 ],
 [
  "if (s9.f5 != 5+906) {\treturn 5;\t}\tif (s9.f6 != 6+906) {\treturn 6;\t}\tif (s9.f7 != 7+906) {\treturn 7;\t}\tif (s9.f8 != 8+906) {",
  "got but expected",
  0
 ],
 [
  "public void testmethodhassynchronized() {\tvar input = @\" using system.runtime.compilerservices;\tclass testclass {\t[methodimpl (methodimploptions.synchronized | methodimploptions.noinlining)]\tvoid testmethod () {",
  "foo",
  0
 ],
 [
  "public bool run() {\tbool ok = false;\ttry {\tsilohost.initializeorleanssilo();\tok = silohost.startorleanssilo();\tif (ok) {",
  "return",
  1
 ],
 [
  "public static void blobtest (oracleconnection connection) {\toracletransaction transaction = connection.begintransaction ();",
  "calls from",
  1
 ],
 [
  "public void removeextobj2() {\tmyobject obj = new myobject(2, _output);\tm_xsltarg = new xsltargumentlist();\ttry {\tm_xsltarg.removeextensionobject(null);\t}\tcatch (system.argumentnullexception) {\treturn;\t}",
  "exception not generated for null parameter name",
  0
 ],
 [
  "public static void thrower () {\ttry {\tthrow new exception ();\t} finally {\theusl (new se ());",
  "after",
  0
 ],
 [
  "threadlocal<string> tlocal = null;\tint numofthreads = 10;\ttask[] threads = new task[numofthreads];\tobject alock = new object();\tlist<string> seenvaluesfromallthreads = new list<string>();\tint counter = 0;\ttlocal = new threadlocal<string>(() => (++counter).tostring());\tfor (int i = 0; i < threads.length; ++i) {\tthreads[i] = new task(() => {\tstring value = tlocal.value;",
  "positioned on wrong element not on ns",
  1
 ],
 [
  "public static bool log(object actual, object expected, string source, string message, string details, tagerrorlevel eerrorlevel) {\ttagerrorlevel rsavedlevel = errorlevel;\terrorlevel = eerrorlevel;\ttry {\tif (testconsole != null) {\ttestconsole.log(common.format(actual), common.format(expected), source, message, details, tagconsoleflags.console_text, \"fake_filename\", 999 );\t}\telse if (error != null) {",
  "message",
  0
 ],
 [
  "assert.true(false);\t}\tm_xsltarg.addparam(\"myarg2\", szempty, d2);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (!double.isnegativeinfinity((double)retobj)) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg3\", szempty, d3);\tretobj = m_xsltarg.getparam(\"myarg3\", szempty);\tif (!double.isnan((double)retobj)) {",
  "failed to add get a value for",
  0
 ],
 [
  "static bool callsecondstructoperator() {\tint failcount = 0; verify.firstcalled = false;\tif ( (!(bool)(((dynamic)firstclassreturnstruct.staticproperty) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "static bool callsecondinterfaceindexer() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturninterface<int>();\tif ( (!(bool)(((dynamic)s[1])[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "try {\tint i=0;\twhile (i < args.length) {\tswitch (args [i++]) {\tcase \"-#\": sn = bitconverter.getbytes (convert.toint32 (args [i++]));\tbreak;\tcase \"-n\": subject = args [i++];\tbreak;\tcase \"-$\": string usagerestriction = args [i++].tolower ();\tswitch (usagerestriction) {",
  "commercial individual warning unsupported deprecated certification extension keyusagerestriction not included",
  0
 ],
 [
  "if (detailed) {\t}\twriteline ();\tif (detailed) {\t}\twriteline ();\twriteline (\"-?\");\twriteline ();\tif (!detailed) return;\twriteline ();",
  "used to specify the gacs base directory once an assembly has been installed to a non standard gacdir the mono gac prefix environment variable must be used to access the assembly",
  0
 ],
 [
  "if (s8.f1 != 1+906) {\treturn 1;\t}\tif (s8.f2 != 2+906) {\treturn 2;\t}\tif (s8.f3 != 3+906) {\treturn 3;\t}\tif (s8.f4 != 4+906) {",
  "output frame",
  1
 ],
 [
  "private void attributeidentityconstraints(string name, string ns, object obj, string sobj, xmlschemadatatype datatype) {\tfor (int ci = _startidconstraint; ci < _validationstack.length; ci++) {\tif (((validationstate)(_validationstack[ci])).constr == null) {\tcontinue;\t}\tconstraintstruct[] constraintstructures = ((validationstate)_validationstack[ci]).constr;\tfor (int i = 0; i < constraintstructures.length; ++i) {\tfor (int j = 0; j < constraintstructures[i].axisfields.count; ++j) {\tlocatedactiveaxis laxis = (locatedactiveaxis)constraintstructures[i].axisfields[j];\tif (laxis.movetoattribute(name, ns)) {",
  "attribute field match",
  0
 ],
 [
  "serializerdata sd = batch.datas [n];\tlock (sd) {\tsd.writertype = res.compiledassembly.gettype (gres.namespace + \".\" + gres.writerclassname);\tsd.readertype = res.compiledassembly.gettype (gres.namespace + \".\" + gres.readerclassname);\tsd.writermethod = sd.writertype.getmethod (gres.writemethodname);\tsd.readermethod = sd.readertype.getmethod (gres.readmethodname);\tsd.batch = null;\t}\t}\tcp.tempfiles.delete ();",
  "generation finished ms",
  0
 ],
 [
  "if (url.startswith (\"edit:\")) {\tcurrenttab.edit_node = editingutils.getnodefromurl (url, help_tree);\tcurrenttab.edit_url = url;\tcurrenttab.setmode (mode.editor);\tcurrenttab.text_editor.buffer.text = currenttab.edit_node.innerxml;\treturn;\t}\tnode node;\tstring[] urlparts = url.split (':');\tif (urlparts [0].length == 1) url = urlparts [0].toupper () + url.substring (1);",
  "invalid configuration valid configurations",
  1
 ],
 [
  "static void innerfunc () {\tres = 2;\ttry {\tres = 3;\t} finally {\tres = 4;\twhile (!foo);\tres = 5;",
  "fonts",
  1
 ],
 [
  "private static bool callsecondstructinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tif ((!(bool)(((dynamic)firstclassreturnstruct<int>.staticproperty).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "contains",
  1
 ],
 [
  "public void print () {",
  "results of test",
  0
 ],
 [
  "public static int streambody() {",
  "done building target in project failed",
  1
 ],
 [
  "public static void main () {\tmethodsignature ms = new methodsignature (\"hello\", null, null);",
  "about to look for",
  0
 ],
 [
  "usesimplereader = false;\tbreak;\tbreak;\t}\toutputline (\"the default provider is \" + provider);\tif (provider.equals (\"loadextprovider\")) {\toutputline (\"          assembly: \" + providerassembly);\toutputline (\"  connection class: \" + providerconnectionclass);\t}\t}",
  "error provider only has one parameter",
  0
 ],
 [
  "public void os10(object param0, object param1) {\tinit(param0.tostring(), param1.tostring());\t_xsl.load(_xslfile);\txmlwritersettings os = _xsl.outputsettings;\tassert.equal(os.omitxmldeclaration, true);",
  "indent",
  0
 ],
 [
  "public dummy return (label pc, source source, textwriter data) {",
  "eee",
  1
 ],
 [
  "m_xsltarg.addparam(\"myarg2\", szempty, d2);\tm_xsltarg.removeparam(\"myarg2\", szempty);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (retobj != null) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg3\", szempty, d3);\tm_xsltarg.removeparam(\"myarg3\", szempty);\tretobj = m_xsltarg.getparam(\"myarg3\", szempty);\tif (retobj != null) {",
  "failed to remove",
  0
 ],
 [
  "} catch (indexoutofrangeexception) {\thelp (true);\t} catch {\thelp (true);\t}\tbreak;\tcase \"-p12\": if (p12file != null) {\thelp (true);\t}\tif (pvkfile != null || certfile != null) {",
  "error use either or pvk and cert",
  0
 ],
 [
  "assert.areequal (maintoolkit, toolkit.currentengine);\tnoxwtcallback = true;\treturn false;\t}, timespan.frommilliseconds (50));\tvar t = sectoolkit.invoke (async delegate {\tassert.aresame (sectoolkit, toolkit.currentengine);\tassert.isfalse (noxwtcallback);\tawait task.delay (200);\tassert.istrue (noxwtcallback);\tassert.aresame (sectoolkit, toolkit.currentengine);",
  "assume",
  1
 ],
 [
  "public void baudrate_zero() {",
  "unexpected character in tag",
  1
 ],
 [
  "v = header[identification[i].name];\t}\telse if (string.compare(identification[i].group, \"capability\", true, system.globalization.cultureinfo.currentculture) == 0) {\tv = result[identification[i].name];\t}\tif (v == null) {\tv = string.empty;\t}\tmatch m = identification[i].getmatch(v);\tif (identification[i].ismatchsuccessful(m) == false) {",
  "close connection",
  1
 ],
 [
  "public printmodule () {",
  "description none",
  1
 ],
 [
  "object [] arguments;\targuments = new object [] { str, int32_out, maskedtextresulthint_out };\tif (compare (\"verifystring\", mask, ref stateindex, arguments, ref more_states)) {\tcontinue;\t}\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;",
  "assert areequal mtp verifystring out out out maskedtextresulthint out",
  0
 ],
 [
  "public void eventsandprocessingorder () {\tvar asm = assembly.getexecutingassembly ();\tvar context = new xamlschemacontext (new assembly [] { asm });\tvar output = xamarinbug3003.testcontext.writer;\toutput.writeline ();\tvar reader = new xamlxmlreader (xmlreader.create (new stringreader (xamarinbug3003.testcontext.xmlinput)), context);\tvar writersettings = new xamlobjectwritersettings ();\twritersettings.afterbegininithandler = (sender, e) => {",
  "xamlobjectwritersettings afterbegininit",
  0
 ],
 [
  "if (myparameter3.value == dbnull.value) sinoutvalue = \"dbnull.value\";\telse {\tinoutvalue = (datetime)myparameter3.value;\tsinoutvalue = inoutvalue.tostring(\"yyyy-mm-dd hh:mm:ss\");\t}\tif (myparameter4.value == dbnull.value) sreturnvalue = \"dbnull.value\";\telse {\treturnvalue = (datetime)myparameter4.value;\tsreturnvalue = returnvalue.tostring(\"yyyy-mm-dd hh:mm:ss\");\t}",
  "value",
  0
 ],
 [
  "}\t}\tif (type.hasevents) {\tcancellationtoken.throwifcancellationrequested();\tdisassembleevent(ev);\toutput.writeline();\t}\toutput.writeline();\t}\tif (type.hasproperties) {",
  "foreach var prop in type properties",
  0
 ],
 [
  "public void ipv6scopeid_accessallvalues_success() {\tassert.true(capability.ipv6support());\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {",
  "nic",
  0
 ],
 [
  "public override void visit(membercore member) {",
  "unexpected error",
  1
 ],
 [
  "public delegate int foo (int i, int j);\tprivate void thread_func () {",
  "clientwriteiv",
  1
 ],
 [
  "public void attach(designerview viewcontent) {\tif (viewcontent == null) throw new argumentnullexception(\"viewcontent\");",
  "verifying default discardnull with readbyte",
  1
 ],
 [
  "public void cdholding_default_afterclose() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (serialport com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "doing incremental join full join",
  1
 ],
 [
  "if (variation.param.tostring() == \"null\") temp = null;\telse temp = string.empty;\tw.writequalifiedname(temp, \"test\");\tw.writeendelement();\t}\tcatch (argumentexception) {\ttestlog.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "error creating directory",
  1
 ],
 [
  "static void main (string[] args) {",
  "improperly reported an exception for a whitespace value",
  1
 ],
 [
  "}\tassert.contains(\"shared\", filelistfromcomputenodeoperations.select(f => f.path));\tlist<nodefile> filelistfromcomputenode = computenode.listnodefiles(recursive: true).tolist();\tforeach (nodefile f in filelistfromcomputenodeoperations) {\t}\tassert.contains(\"shared\", filelistfromcomputenode.select(f => f.path));\tstring filepathtoget = filelistfromcomputenode.first(f => !f.isdirectory.value).path;\tnodefile computenodefilefrommanager = batchcli.pooloperations.getnodefile(this.poolfixture.poolid, computenodeid, filepathtoget);\tthis.testoutputhelper.writeline(computenodefilefrommanager.readasstring());\tnodefile filefromcomputenode = computenode.getnodefile(filepathtoget);",
  "file data",
  0
 ],
 [
  "public virtual void beforeadding (ienumerable<xelement> list) {\tfirst = true;",
  "in method equals",
  1
 ],
 [
  "public override string tostring () {\tstringwriter sw = new stringwriter ();",
  "verifying writetimeout before open with write string",
  1
 ],
 [
  "private static bool callsecondclassinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tif ((!(bool)(firstclassreturndynamicclass<int>.staticmethod().instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "end namespace",
  1
 ],
 [
  "public static int main () {\tif (!isstatic (typeof (staticclass))) return 1;\tif (!isstatic (typeof (staticclass2))) return 2;",
  "no exception thrown",
  1
 ],
 [
  "public void async_asyncexecutorwithretriestest_4() {\tint counter = 0;\tint lastiteration = 0;\tfunc<int, task<int>> myfunc = ((int funccounter) => {\tlastiteration = funccounter;\tassert.equal(counter, funccounter);",
  "ide reserved",
  1
 ],
 [
  "var failcount = 0;\ttry {\tvar a = new correctcasefriendassembly.publicclass ();\ta.internalmethod ();\t} catch (memberaccessexception) {\tfailcount += 1;\t}\ttry {\tvar a = new correctcasefriendassembly.internalclass(@private: false);\t} catch (memberaccessexception) {",
  "access internal class private ctor fail",
  0
 ],
 [
  "public static void dumpcodeinfo (imagecodecinfo codec) {",
  "copies of removed",
  1
 ],
 [
  "if (s8.f1 != 1+9) {\treturn 1;\t}\tif (s8.f2 != 2+9) {\treturn 2;\t}\tif (s8.f3 != 3+9) {\treturn 3;\t}\tif (s8.f4 != 4+9) {",
  "using internal lowlevellinq",
  1
 ],
 [
  "}\tfor (j = 5; j < name.length; ++j) if (!char.isdigit (name [j])) break;\texpected = int32.parse (name.substring (5, j - 5));\tstart = datetime.now;\tresult = (int)methods [i].invoke (null, null);\tif (do_timings) {\tend = datetime.now;\tlong tdiff = end.ticks - start.ticks;\tint mdiff = (int)tdiff/10000;\ttms += mdiff;",
  "took ms",
  0
 ],
 [
  "public static bool purgecomm (intptr hfile, uint dwflags) {",
  "on queue we received a total of message on stream",
  1
 ],
 [
  "static void main (string[] args) {\tif (args.length < 1) {",
  "usage mod exe url",
  0
 ],
 [
  "beginoperation ();\tvar res = await sendrun (configurations, loggerid, logger.enabledevents, verbosity, runtargets, evaluateitems, evaluateproperties, globalproperties, taskid).configureawait (false);\tif (res == null && cancellationtoken.iscancellationrequested) {\tmsbuildtargetresult err = new msbuildtargetresult (file, false, \"\", \"\", file, 1, 1, 1, 1, \"build cancelled\", \"\");\treturn new msbuildresult (new [] { err });\t}\tif (res == null) throw new exception (\"unknown failure\");\treturn res;\t} catch (exception ex) {\tawait checkdisconnected ().configureawait (false);",
  "runtarget failed",
  0
 ],
 [
  "public static void bug720327_deregisterfromwithinacallbackissafe_synccontexttest() {",
  "failed long",
  1
 ],
 [
  "allcomputenodes.foreach( (icn) => {\t});\t}\tcatch (exception ex) {\tassert.true(false, \"samplewithfilesandpool probably can ignore this if its pool not found: \" + ex.tostring());\t}\t}) });\tlist<cloudtask> tasks = boundjob.listtasks().tolist();\tcloudtask mycompletedtask = tasks.single();\tforeach (cloudtask curtask in tasks) {",
  "name",
  1
 ],
 [
  "case objecttype.certificate: foreach (x509certificate x509 in store.certificates) {\tif (hash == cryptoconvert.tohex (x509.hash)) {\tstore.remove (x509);\treturn;\t}\t}\tbreak;\tcase objecttype.crl: foreach (x509crl crl in store.crls) {\tif (hash == cryptoconvert.tohex (crl.hash)) {\tstore.remove (crl);",
  "warning",
  1
 ],
 [
  "static int main () {",
  "friendly name",
  0
 ],
 [
  "string pattern = getexceptioncaptureregex(exceptionnamecapturegroup);\tsourceparser sourceparser = new sourceparser(this.proxysourcelocation, sourcefiletype, null, pattern);\tlist<sourceparserresult> results = sourceparser.parse().tolist();\tconst int expectedexceptioncount = 100;\tassert.true(results.count > expectedexceptioncount);\thashset<string> exceptionset = new hashset<string>();\tforeach (sourceparserresult parserresult in results) {\tstring exceptionname = parserresult.match.groups[exceptionnamecapturegroup].value;\texceptionset.add(exceptionname);\t}",
  "found types of exception thrown by rest proxy",
  0
 ],
 [
  "prot.discoverany (url);\tprot.resolveall ();\tif (prot.references.count > 0) {\tforeach (discoveryreference refe in prot.references.values) {\tif (refe is contractreference) console.write (\"- wsdl document at  \");\telse if (refe is discoverydocumentreference) console.write (\"- disco document at \");\telse console.write (\"- xml schema at    \");\tconsole.writeline (refe.url);\t}\t}",
  "warning",
  1
 ],
 [
  "m_xsltarg.addparam(\"myarg6\", szempty, d6);\tm_xsltarg.removeparam(\"myarg6\", szempty);\tretobj = m_xsltarg.getparam(\"myarg6\", szempty);\tif (retobj != null) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg7\", szempty, d7);\tm_xsltarg.removeparam(\"myarg7\", szempty);\tretobj = m_xsltarg.getparam(\"myarg7\", szempty);\tif (retobj != null) {",
  "hello",
  1
 ],
 [
  "private static void save () {\tusing (filestream file = new filestream (bookmark_file,filemode.create)) {\tserializer.serialize (file,root_group);\t}",
  "bookmarks saved",
  0
 ],
 [
  "static void main (string[] argv) {\tblockdata.debuglog = console.out;\tif (argv.length != 1) {",
  "please specify one input file",
  0
 ],
 [
  "public void var_5(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writeendelement();\tw.writeendelement();\t}\tcatch (invalidoperationexception e) {",
  "assert areequal resulthint",
  1
 ],
 [
  "console.write(\"good hash function: \");\ttimer t = new timer();\thashset<int> good = makerandom(count, new goodintegerequalitycomparer());\tisorteddictionary<int,int> bcd = good.bucketcostdistribution();\t}\t{\tconsole.write(\"bad hash function:  \");\ttimer t = new timer();\thashset<int> bad = makerandom(count, new badintegerequalitycomparer());\tisorteddictionary<int,int> bcd = bad.bucketcostdistribution();",
  "bucket s with cost",
  0
 ],
 [
  "int addmodcount = 0;\tberval bervalueptr = null;\tintptr searchattributes = intptr.zero;\tint attributecount = 0;\tint error = 0;\tif (!_connected) {\tconnect();\t_connected = true;\t}\tif (autobind && (!_bounded || _needrebind) && ((ldapdirectoryidentifier)directory).connectionless != true) {",
  "rebind occurs",
  0
 ],
 [
  "public override void writebreak() {",
  "writereferencedelements",
  1
 ],
 [
  "public void addresource (string name, string value) {\tif (!headerwritten) {\theaderwritten = true;\twriteheader ();\t}",
  "error in auto save disableing",
  1
 ],
 [
  "static void addmodifiers(entitydeclaration parent, locationsbag.memberlocations location) {\tif (location == null || location.modifiers == null) return;\tforeach (var modifier in location.modifiers) {\tmodifiers mod;\tif (!modifiertable.trygetvalue(modifier.item1, out mod)) {",
  "modifier can t be converted",
  0
 ],
 [
  "public static void main(string[] args) {\tif (args.length != 1) {",
  "expected usage",
  1
 ],
 [
  "public nsobject metadataqueryreplacementobjectforresultobject (nsmetadataquery query, nsmetadataitem result) {",
  "verifying call discard method after input buffer has been filled discarded and filled again",
  1
 ],
 [
  "static void main (string [] args) {\tif (!file.exists (\"genproj.cs\")) {",
  "this command must be executed from mono msvc scripts",
  0
 ],
 [
  "windowssdks = windowssdks.orderbydescending (p => p.version.tostring (), new stringversioncomparer ()).tolist ();\tcruntimesdks = cruntimesdks.orderbydescending (p => p.version.tostring (), new stringversioncomparer ()).tolist ();\tinstalledwindowssdks = windowssdks;\tinstalledcruntimesdks = cruntimesdks;\tif (!quiet && installedwindowssdks != null) {\tforeach (var windowssdk in installedwindowssdks) {\t}\tconsole.writeline (\"---------------\");\t}\tif (!quiet && installedcruntimesdks != null) {",
  "c runtime sdk s",
  0
 ],
 [
  "private static bool test12() {\tdecimal a = 1.10m;\tdynamic b = a;\tb++;\tif (b == 2.10m) return true;",
  "failed decimal",
  0
 ],
 [
  "t2.runsynchronously(bts);\tassert.true(false, string.format(\"    > failed.  no exception thrown.\"));\t}\tcatch (taskschedulerexception) { }\tcatch (exception e) {\tassert.true(false, string.format(\"    > failed. wrong exception thrown (expected taskschedulerexception): {0}\", e));\t}\tif (t2.status != taskstatus.faulted) {\tassert.true(false, string.format(\"    > failed. task ended up in wrong status (expected faulted): {0}\", t1.status));\t}",
  "init",
  1
 ],
 [
  "public async task simplevoidtaskmethod() {\tawait task.delay(timespan.fromseconds(1.0));",
  "after",
  0
 ],
 [
  "bool bpassed = false;\tbyte[] buffer = new byte[ibuffersize];\treloadsource(ereader_type.binhex_test);\tdatareader.positiononelement(st_elem_name1);\tdatareader.read();\tif (checkcanreadbinarycontent()) return true;\ttry {\tdatareader.readcontentasbinhex(buffer, iindex, icount);\t}\tcatch (exception e) {",
  "success stacktrace is not null for unhandled exception",
  1
 ],
 [
  "protected sealed override async task<bool> onremovefromproject (cancellationtoken token) {\tint trycount = 1;\tbool keeptrying = true;\twhile (keeptrying) {\ttry {\tif (trycount > 1) {\t} else {\t}\tthis.compilation = await typesystemservice.getcompilationasync (this.service.project).configureawait (false);\tif (this.compilation == null) {",
  "could not get compilation object",
  0
 ],
 [
  "private void emitreadcollection(string typename) {\tstring collectiontypename = $\"{typename}collection\";\topenscope($\"public static uint read(this nativereader reader, uint offset, out {collectiontypename} values)\");\twriteline($\"values = new {collectiontypename}(reader, offset);\");\twriteline(\"offset = reader.decodeunsigned(offset, out count);\");\twriteline(\"for (uint i = 0; i < count; ++i)\");\twriteline(\"{\");\twriteline(\"    offset = reader.skipinteger(offset);\");\twriteline(\"}\");",
  "return offset",
  0
 ],
 [
  "signed = x509.verifysignature (signer.dsa);\t} else {\tsigned = true;\t}\t}\tcatch {\tfailed = true;\t}\t}\tif (failed) {",
  "try man certmgr for additional help or report to bugzilla novell com",
  0
 ],
 [
  "if (!task.waitall (new[] { t }, 1000)) {\treturn false;\t}\tvar tb = t as task<bool>;\tif (tb != null) {\tif (!tb.result) {\tconsole.writeline (\"failed (result={0})\", tb.result);\treturn false;\t}\t}",
  "key key",
  1
 ],
 [
  "for (int j = 0; j < 2; j++) {\tbool useobj = (j == 0);\tobject refobj = new object();\tfor (int k = 0; k < 2; k++) {\tbool precanceledtoken = (k == 0);\ttask<int> f1;\tcancellationtokensource cts = new cancellationtokensource();\tcancellationtoken ct = cts.token;\tif (precanceledtoken) {\tcts.cancel();",
  "with cts cancelled worked",
  0
 ],
 [
  "return 1;\t}\tint2 s2;\ts2.f1 = 1;\ts2.f2 = 2;\ts2 = mono_return_int2(s2, 906);\tif (s2.f1 != 1+906) {\treturn 1;\t}\tif (s2.f2 != 2+906) {",
  "got but expected",
  0
 ],
 [
  "string a = args[i];\tif (a.startswith(\"-\") || a.startswith(\"/\")) {\tswitch (a.tolowerinvariant()) {\tcase \"/?\": case \"/help\": case \"-?\": case \"-help\": return false;\treturn false;\t}\t}\telse if (a.contains(\"=\")) {\tstring[] split = a.split('=');\tif (string.isnullorempty(split[1])) {",
  "added value retrieved value",
  1
 ],
 [
  "public static void log(textwriter log, string prefix, object instance) {\tif (log == null) {\treturn;\t}\tif (instance == null) {",
  "null",
  0
 ],
 [
  "writelineuni (\"}\");\twritelineuni (\"}\");\twriteline (\"\");\twritelineind (\"if (writemethods == null) {\");\twriteline (\"writemethods = new system.collections.hashtable ();\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twriteline (\"\");",
  "public override system collections hashtable typedserializers",
  0
 ],
 [
  "using (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writesurrogatecharentity('\\ud9a2', '\\ude34');\t}\tcatch (argumentexception e) {\tcerror.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "got but expected",
  1
 ],
 [
  "public bool check (testresult testresult) {\tif (exitzero && (testresult.exitcode != 0)) {\treturn false;\t}\tif (!cont && testresult.cont) {",
  "invalid template condition",
  1
 ],
 [
  "static void loadschema (list<xmlschemacompletiondata> list, string filename, bool readonly) {\ttry {\tstring baseuri = xmlschemacompletiondata.geturi (filename);\txmlschemacompletiondata data = new xmlschemacompletiondata (baseuri, filename);\tif (data.namespaceuri == null) {",
  "xmlschemamanager is ignoring schema with no namespace from file",
  0
 ],
 [
  "try {\tyield return \"within inner try\";\tif (breakinmiddle) yield break;\tyield return \"end of inner try\";\t} finally {\t}\tyield return \"end of outer try\";\t} finally {\t}\tyield return \"end of method\";",
  "end of method",
  0
 ],
 [
  "public static void createbigelementtestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\tstring str = new string('z', (1 << 20) - 1);\ttw.write(\"<\");\ttw.write(str);\ttw.flush();\ttw.write(\"<\");\ttw.write(str);",
  "y",
  0
 ],
 [
  "public static bool runmodalwpfdialog (window dialog, gtk.window parent) {\twhile (gtk.application.eventspending ()) gtk.application.runiteration ();\tintptr ph = hgdiobjget (parent.gdkwindow);\tintptr hdlg = intptr.zero;\tdialog.loaded += delegate {\ttry {\thdlg = new windowinterophelper (dialog).handle;\tsetgtkdialoghook (hdlg);\t} catch (exception ex) {",
  "failed to hook dialog messages",
  0
 ],
 [
  "public override idisposable writeif(string expression) {",
  "checking out file",
  1
 ],
 [
  "public void writeformatheader(solutionformatversion version) {\twriter.writeline();\tswitch (version) {\tbreak;\tbreak;\tbreak;\tbreak;\t}",
  "sharpdevelop",
  0
 ],
 [
  "}\ti += 2;\t} else {\treturn 1;\t}\t} else {\tbreak;\t}\t}\tif (string.isnullorempty (testsuitename)) {",
  "principalcollectionenumerator movenext resultset mode moving to insvaluescomp mode",
  1
 ],
 [
  "public async task<int> run (string[] arguments) {\tforeach (string s in arguments) readargument (s);\tif (help) {",
  "error while checking indexes",
  1
 ],
 [
  "enabledjob = batchcli.joboperations.getjob(jobid);\tassert.equal(jobstate.active, jobstate.active);\tjob.terminate(\"need some reason\");\tcloudjob terminatedjob = batchcli.joboperations.getjob(jobid);\tassert.true(terminatedjob.state == jobstate.terminating || terminatedjob.state == jobstate.completed);\tif (terminatedjob.state == jobstate.terminating) {\tthread.sleep(timespan.fromseconds(5));\t}\tjob.delete();\ttry {",
  "expected exception testing that job does not exist",
  0
 ],
 [
  "parameters.compileroptions = compileroptions;\tstring file = path.getfilenamewithoutextension (asm.location) + \".xmlserializers.dll\";\tif (outdir == null) outdir = path.getdirectoryname (asm.location);\tparameters.outputassembly = path.combine (outdir, file);\tif (file.exists (parameters.outputassembly) && !force) {\tconsole.writeline ();\treturn 1;\t}\txmlserializer.generateserializer ( (type[]) usertypes.toarray (typeof(type)), (xmltypemapping[]) maps.toarray (typeof(xmltypemapping)), parameters);\tif (!silent) {",
  "generated assembly",
  0
 ],
 [
  "private static void verifykey_rsa(x509certificate2 cert, rsa rsa) {\trsaparameters rsaparameters = rsa.exportparameters(false);\tbyte[] expectedmodulus = ( \"e8af5ca2200df8287cbc057b7fadeeeb76ac28533f3adb407db38e33e6573fa5\" + \"51153454a5cfb48ba93fa837e12d50ed35164eef4d7adb137688b02cf0595ca9\" + \"ebe1d72975e41b85279bf3f82d9e41362b0b40fbbe3bbab95c759316524bca33\" + \"c537b0f3eb7ea8f541155c08651d2137f02cba220b10b1109d772285847c4fb9\" + \"1b90b0f5a3fe8bf40c9a4ea0f5c90a21e2aae3013647fd2f826a8103f5a935dc\" + \"94579dfb4bd40e82db388f12fee3d67a748864e162c4252e2aae9d181f0e1eb6\" + \"c2af24b40e50bcde1c935c49a679b5b6dbcef9707b280184b82a29cfbfa90505\" + \"e1e00f714dfdad5c238329ebc7c54ac8e82784d37ec6430b950005b14f6571c5\").hextobytearray();\tbyte[] expectedexponent = new byte[] { 0x01, 0x00, 0x01 };\tbyte[] originalmodulus = rsaparameters.modulus;\tbyte[] originalexponent = rsaparameters.exponent;\tif (!expectedmodulus.sequenceequal(rsaparameters.modulus) || !expectedexponent.sequenceequal(rsaparameters.exponent)) {",
  "return null",
  1
 ],
 [
  "if (traceutil.if(this, tracelevel.info)) {\t}\tif (_typelib != null) return -1;\tucomitypelib itypelib;\tint index = -1;\ttry {\tidispatch idisp = (idispatch) marshal.getobjectforiunknown(dispptr);\tint count;\tint result = idisp.gettypeinfocount(out count);\tif (result != 0) {",
  "error while reading derived data file",
  1
 ],
 [
  "public static datacolumn getdatacolumnbyschemaaction(string sourcecolumn, string datasetcolumn, datatable datatable, type datatype, missingschemaaction schemaaction) {\tif (null == datatable) {\tthrow adp.argumentnull(nameof(datatable));\t}\tif (string.isnullorempty(datasetcolumn)) {\t#if debug if (adapterswitches.dataschema.tracewarning) {",
  "explicit filtering of sourcecolumn sourcecolumn",
  0
 ],
 [
  "try {\tw.writestartelement(\"root\");\tw.writeentityref(temp);\tw.writeendelement();\t}\tcatch (argumentexception e) {\tcerror.compare(w.writestate, (utils.writertype == writertype.charcheckingwriter) ? writestate.element : writestate.error, \"writestate should be error\");\treturn;\t}\tcatch (nullreferenceexception e) {",
  "hello world",
  1
 ],
 [
  "public static void dumpcodeinfo (imagecodecinfo codec) {",
  "formatid",
  0
 ],
 [
  "public void testremovebracesfromdowhile() {\ttest<removebracesaction>(@\"class testclass {\tvoid test () {\t$do {",
  "hello",
  0
 ],
 [
  "private void executeandverify(sqlcommand cmd, stepermutation tvpperm, object[][] objvalues, datatable dtvalues) {\tusing (sqlconnection conn = new sqlconnection(_connstr)) {\tconn.open();\tcmd.connection = conn;\ttry {\tusing (sqldatareader rdr = cmd.executereader()) {\tverifycolumnboundaries(rdr, getfields(tvpperm), objvalues, dtvalues);\t}\t}\tcatch (sqlexception se) {",
  "persona dromio of ephesus persona",
  1
 ],
 [
  "protected static void writeheader (streamwriter s, string assembly, bool noconfig) {\tif (!noconfig) {",
  "i will add more useless code",
  1
 ],
 [
  "using (xmlwriter w = createwriter(doc)) {\ttry {\tw.writeprocessinginstruction(\"pi\", \"text\");\tw.writestartdocument(true);\t}\tcatch (invalidoperationexception) {\ttestlog.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "static void touchcache (string cachedir) {\ttry {\tdirectory.setlastwritetime (cachedir, datetime.now);\t} catch (exception e) {",
  "error while touching cache directory",
  0
 ],
 [
  "}\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;\tif (with_result) {\tmtp.clear (out resulthint);\t} else {\tmtp.clear ();",
  "array initialization test okay",
  1
 ],
 [
  "public delegate int mydel(int x);\tprivate class myclass {\tpublic int do(int p) {",
  "calling",
  1
 ],
 [
  "public toolboxitem deserializetoolboxitem(object serializedobject) {",
  "deserializetoolboxitem throw exception",
  0
 ],
 [
  "static void showhelp() {",
  "help",
  0
 ],
 [
  "protected override ilist<recentfile> ongetfiles () {\ttry {\treturn get (filegroup);\t} catch (exception e) {",
  "can t get recent files list",
  0
 ],
 [
  "private static string getsidadspathfromprincipal(principal p) {\tdebug.assert(p.unpersisted == false);\tsecurityidentifier sid = p.sid;\tif (sid == null) {\treturn null;\t}\tstring sddlsid = sid.tostring();\tif (sddlsid == null) {",
  "foo bar",
  1
 ],
 [
  "}\tfinally {\tfsexpected.dispose();\tfsactual.dispose();\t}\tif (!result) {\tusing (streamreader sr = new streamreader(new filestream(baseline, filemode.open, fileaccess.read))) {\tstring baseline = sr.readtoend();\t_output.writeline(baseline);\t}",
  "wallclocktime",
  1
 ],
 [
  "int seed = unchecked((int)datetime.now.ticks);\tvar random = new random(seed);\tfor (int iop = 0; iop < operationcount; iop++) {\tswitch ((operation)random.next((int)operation.last)) {\tcase operation.add: int value = random.next();\texpected.add(value);\tactual = actual.add(value);\tbreak;\tcase operation.union: int inputlength = random.next(100);\tint[] values = enumerable.range(0, inputlength).select(i => random.next()).toarray();",
  "successfully switched to mode",
  1
 ],
 [
  "public void buildstartedhandler (object sender, buildstartedeventargs args) {\tif (isverbositygreaterorequal (loggerverbosity.normal)) {\twriteline (string.empty);",
  "build started",
  0
 ],
 [
  "static void main (string[] args) {\tvar failcount = 0;\ttry {\tvar a = new correctcasefriendassembly.publicclass ();\ta.internalmethod ();\t} catch (memberaccessexception) {\tfailcount += 1;\t}\ttry {\tvar a = new correctcasefriendassembly.internalclass(@private: false);",
  "access internal class private ctor ok",
  0
 ],
 [
  "public override void threadend (ulong threadid, ulong counter) {",
  "did not throw exception",
  1
 ],
 [
  "private static bool dynamicobjectdoesntimplementidisposable() {\tint failcount = 0;\tdynamic d = new c1();\ttry {\tusing (d) {",
  "content type text plain",
  1
 ],
 [
  "int failcount = 0;\tvar a = new[]\t{\t1, 2, 3 }\t;\tc origin = new c(0);\tdynamic d = origin;\tvar q = ( from m in a where d select m).toarray();\tif (q[1] != a[1]) {\tfailcount++;",
  "test failed conversion result is incorrect",
  0
 ],
 [
  "public void hello () {",
  "test failed at call result",
  1
 ],
 [
  "m_xsltarg.addparam(\"myarg2\", szempty, (single)i);\tm_xsltarg.removeparam(\"myarg2\", szempty);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (retobj != null) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg2\", szempty, (decimal)i);\tm_xsltarg.removeparam(\"myarg2\", szempty);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (retobj != null) {",
  "return new",
  1
 ],
 [
  "static void nullaggregatetest (oracleconnection con) {",
  "drop table mono test",
  0
 ],
 [
  "private static void printgrainstatistics(ienumerable<string> args) {\tvar silos = args.select(parsesilo).toarray();\tvar stats = systemmanagement.getsimplegrainstatistics(silos).result;",
  "act type",
  0
 ],
 [
  "public dummy initobj (label pc, typenode type, source ptr, textwriter data) {",
  "aborted",
  1
 ],
 [
  "try {\tthread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();\t} finally {\t}\ttry {\tthread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();",
  "got but expected",
  1
 ],
 [
  "var ti = c.textinfo;\tvar nf = c.numberformat;\tdump (writer, nf.currencygroupsizes, \"currencygroupsizes\");\tdump (writer, nf.nativedigits, \"nativedigits\");\tdump (writer, nf.numbergroupsizes, \"numbergroupsizes\");\tdump (writer, nf.percentgroupsizes, \"percentgroupsizes\");\tif (!c.isneutralculture) {\tvar ri = new regioninfo (c.lcid);\t}\tcompareinfo ci = compareinfo.getcompareinfo (c.lcid);",
  "compareinfo",
  0
 ],
 [
  "private void thread_func() {\tthread thr=thread.currentthread;\tlock(thr) {\tthread.sleep(2000);",
  "adstorectx findprincipalbyidentrefhelper fake principal null scheme",
  1
 ],
 [
  "public override void onstop() {",
  "got but expected",
  1
 ],
 [
  "public void readlineasync () {\tmemorystream ms = new memorystream ();\tstreamwriter sw = new streamwriter (ms, encoding.utf8);",
  "b",
  0
 ],
 [
  "console.writeline (\");\");\tif (c [0] != 'v') console.writeline ($\"\\t*({typetosigtype (c [0])}*)margs->retval = res;\");\tconsole.writeline (\"\\n}\\n\");\t}\tconsole.writeline (\"{\");\tfor (int i = 0; i < cookies.length; ++i) {\tvar c = cookies [i];\tconsole.write (\"\\t\");\tif (i > 0) console.write (\"else \");\t}",
  "bits per rgb",
  1
 ],
 [
  "}\t} catch (exception) {\tif (!skip_scan) throw;\t}\treturn true;\t}\tstatic assembly loadassemblyfile (string assembly) {\tassembly a = null;\ttry {\ta = universe.loadfile (assembly);",
  "scopeid",
  1
 ],
 [
  "}\tif (expr.value is bool) {\tchildrenasproperties = (bool)expr.value;\t} else {\treturn false;\t}\t}\tif (posargs.length > 1) {\tvar expr = posargs [1];\tif (expr.isnull || !(expr.value is string)) {",
  "ok",
  1
 ],
 [
  "public static void main (string[] args) {\tprintersettings.stringcollection col = system.drawing.printing.printersettings.installedprinters;\tfor (int i = 0; i < col.count; i++) {\tconsole.writeline (\"--- {0}\", col[i]);\tprintersettings ps = new printersettings ();\tps.printername = col[i];",
  "refresh onevent",
  1
 ],
 [
  "try {\ttransform(\"fruits.xml\", transformtype, doctype);\t}\tcatch (system.invalidoperationexception e2) {\tcheckexpectederror(e2, \"system.xml\", \"xslt_nostylesheetloaded\", new string[] { \"idontexist.xsl\" });\treturn;\t}\t}\t}\telse {",
  "errors loading initial file",
  0
 ],
 [
  "string connectionsharedkeyname = virtualnetworkgatewayconnectionname;\tvar connectionresetsharedkey = new connectionresetsharedkey() {\tkeylength = 50 };\tvar resetconnectionresetsharedkeyresponse = networkmanagementclient.virtualnetworkgatewayconnections.resetsharedkey(resourcegroupname, connectionsharedkeyname, connectionresetsharedkey);\tvar getconnectionsharedkeyresponse = networkmanagementclient.virtualnetworkgatewayconnections.getsharedkey(resourcegroupname, connectionsharedkeyname);\tassert.notequal(\"abc\", getconnectionsharedkeyresponse.value);\tvar connectionsharedkey = new connectionsharedkey() {\tvalue = \"testsharedkeyvalue\" };\tvar putconnectionsharedkeyresponse = networkmanagementclient.virtualnetworkgatewayconnections.setsharedkey(resourcegroupname, connectionsharedkeyname, connectionsharedkey);\tgetconnectionsharedkeyresponse = networkmanagementclient.virtualnetworkgatewayconnections.getsharedkey(resourcegroupname, connectionsharedkeyname);",
  "connectionsharedkey details value",
  0
 ],
 [
  "public static void createxsltstylesheetwcopytestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<xsl:stylesheet version=\\\"1.0\\\" xmlns:xsl=\\\"http: tw.writeline(\"<xsl:template match=\\\"/\\\">\");\ttw.writeline(\"<xsl:copy-of select=\\\"/\\\" />\");",
  "xsl stylesheet",
  0
 ],
 [
  "public void showtoken (object sender, newtokeneventargs args) {",
  "got but expected",
  1
 ],
 [
  "private void onvalidationevent(object sender, validationeventargs e) {\txmlschemavalidationexception exception = e.exception as xmlschemavalidationexception;\tif (exception == null || exception.sourceobject == null) {\tcerror.compare(exception != null, \"exception == null\");\tcerror.compare(exception.sourceobject != null, \"sourceobject == null\");\treturn;\t}\tif (!platformdetection.isnetnative) {\tcerror.compare(exception.sourceobject.gettype().tostring(), \"ms.internal.xml.cache.xpathdocumentnavigator\", \"sourceobject.gettype\");\t}",
  "threadpooltests threadpoolcanpickuponejobwhenthreadisavailable",
  1
 ],
 [
  "static void printurls (groupelement col) {",
  "group name",
  0
 ],
 [
  "break;\tcase \"nmtoken\": w.writenmtoken(invalidxml[5].tostring());\tbreak;\tcase \"qname\": w.writequalifiedname(invalidxml[3].tostring(), \"\");\tbreak;\tdefault: cerror.compare(false, \"invalid param value\");\tbreak;\t}\t}\tcatch (argumentexception e) {",
  "test failed at call result",
  1
 ],
 [
  "static void main(string[] args) {\ttry {\tconfiguration config = configurationmanager.openexeconfiguration (configurationuserlevel.none);\tcustomsection sect = (customsection)config.getsection(\"customsection\");\tforeach (string key in sect.settings.allkeys) {\tkeyvalueconfigurationelement e = sect.settings[key];\tconsole.writeline (\"{0} = {1}\", e.key, e.value);\t}\t}\tcatch (exception e) {",
  "exception raised",
  0
 ],
 [
  "public iviewcontent jumptofileposition(filename filename, int line, int column) {",
  "fileservice jumping to file position x",
  0
 ],
 [
  "static syntaxhighlightingservice () {\tlanguagebundles.add (builtinbundle);\tloadstylesandmodes (typeof (syntaxhighlightingservice).assembly);\tvar texteditorassembly = appdomain.currentdomain.getassemblies ().firstordefault (a => a.getname ().name.startswith (\"monodevelop.sourceeditor\", stringcomparison.ordinal));\tif (texteditorassembly != null) {\tloadstylesandmodes (texteditorassembly);\t} else {",
  "can t lookup mono texteditor assembly default styles won t be loaded",
  0
 ],
 [
  "if (_insertedvaluescompleted.contains(principal) || _insertedvaluespending.contains(principal)) {\treturn true;\t}\tif (_removedvaluescompleted.contains(principal) || _removedvaluespending.contains(principal)) {\treturn false;\t}\tif (_clearpending || _clearcompleted) {\treturn false;\t}\tif (_owninggroup.unpersisted == false && principal.unpersisted == false) return _owninggroup.getstorectxtouse().ismemberofinstore(_owninggroup, principal);",
  "principalcollection containsnativetest no store to check",
  0
 ],
 [
  "static int main (string[] args) {\tif (args.length < 1) {\theader ();",
  "initial job commit",
  1
 ],
 [
  "var indent = createengine(@\" namespace foobar {\tclass foo {\tvoid bar () {\tsystem.console.writeline ();\t}\t$ }\t}\t\");\titextpastehandler handler = new textpasteindentengine(indent, new texteditoroptions { eolmarker = \"\\n\" }, formattingoptionsfactory.createmono());\tvar text = handler.formatplaintext(indent.offset, \"void bar ()\\n{\\nsystem.console.writeline ();\\n}\", null);",
  "void bar system console writeline",
  0
 ],
 [
  "static void help () {\tconsole.writeline ();\tconsole.writeline ();",
  "bytesreceived",
  1
 ],
 [
  "generatevbstatements(current.statements);\tindent--;\t}\t}\tcodestatementcollection finallystatements = e.finallystatements;\tif (finallystatements.count > 0) {\tindent++;\tgeneratevbstatements(finallystatements);\tindent--;\t}",
  "principalcontext domachineinit authtypes is",
  1
 ],
 [
  "xmlvalidatingreader xvr = new xmlvalidatingreader (xtr);\txtr.normalization = true;\tdoc.load (xvr);\ttry {\txmlnodelist nodelist = doc.getelementsbytagname (\"signature\", signedxml.xmldsignamespaceurl);\txmlelement signature = (xmlelement) nodelist [0];\tsignedxml s = new signedxml ();\ts.loadxml (signature);\thmacsha1 mac = new hmacsha1 (key);\tif (s.checksignature (mac)) {",
  "valid",
  0
 ],
 [
  "public static async task launchbrowser (string appurl, string launchurl, task processtask) {\tlaunchurl = launchurl ?? \"\";\turi launchuri;\tif (!uri.trycreate (launchurl, urikind.absolute, out launchuri)) {\turi appuri;\tif (!uri.trycreate (appurl, urikind.absolute, out appuri)) {\treturn;\t}\tif (!uri.trycreate (launchurl, urikind.relative, out launchuri)) {",
  "failed to launch browser because invalid launch url",
  0
 ],
 [
  "public async task siloinstancetable_register_checkdata() {\tconst string testname = \"siloinstancetable_register_checkdata\";\tregistersiloinstance();\tvar data = await findsiloentry(siloaddress);\tsiloinstancetableentry siloentry = data.item1;\tstring etag = data.item2;\tassert.notnull(etag);\tassert.notnull(siloentry);\tassert.equal(siloinstancetabletestconstants.instance_status_created, siloentry.status);\tchecksiloinstancetableentry(myentry, siloentry);",
  "thread a i m before wait for event",
  1
 ],
 [
  "public void dump (textwriter tw) {\tthis.egraph.dump (tw);",
  "unmodified locations",
  0
 ],
 [
  "public bool movenext() {",
  "value should be dbnull value",
  1
 ],
 [
  "return new azureoperationresponse<protocol.models.cloudjob, protocol.models.jobgetheaders>() { body = new protocol.models.cloudjob() };\t};\t});\tawait assert.throwsasync<operationcanceledexception>(async () => await client.joboperations.getjobasync(\"dummy\", additionalbehaviors: new list<batchclientbehavior> { requestinterceptor }));\t}\tassert.notnull(cancellationduration);\tif (expectedcustomtokentimeouttohitfirst) {\tassert.true(math.abs(clientrequesttimeoutviacustomtoken.value.totalseconds - cancellationduration.value.totalseconds) < timetolerance, string.format(\"expected timeout: {0}, observed timeout: {1}\", clientrequesttimeoutviacustomtoken, cancellationduration));\t}\telse {",
  "try",
  1
 ],
 [
  "assert.true(false);\t}\tm_xsltarg.addparam(\"myarg5\", szempty, d5);\tretobj = m_xsltarg.getparam(\"myarg5\", szempty);\tif (!d5.equals(retobj)) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg6\", szempty, d6);\tretobj = m_xsltarg.getparam(\"myarg6\", szempty);\tif (!d6.equals(retobj)) {",
  "method",
  1
 ],
 [
  "}\tfile.writeline (\"{0}\\n}};\\n\", join (\",\\n\", enum_lines));\t}\telse {\tif (peer.nearestbase != null) {\tfile.writeline ();\t}\tforeach (peerfield field in peer.fields) {\tbool use_struct = true;\tif (field.peer.isvaluetype || field.peer.isopaque) use_struct = false;",
  "struct",
  0
 ],
 [
  "int repeat = 1;\tvar p = new optionset () {\t\"usage: greet [options]+ message\", \"greet a list of individuals with an optional message.\", \"if no message is specified, a generic greeting is used.\", \"\", \"options:\", { \"n|name=\", \"the {name} of someone to greet.\", v => names.add (v) }, { \"r|repeat=\", \"the number of {times} to repeat the greeting.\\n\" + \"this must be an integer.\", (int v) => repeat = v }, { \"v\", \"increase debug message verbosity\", v => { if (v != null) ++verbosity; } }, { \"h|help\",  \"show this message and exit\", v => show_help = v != null }, };\tlist<string> extra;\ttry {\textra = p.parse (args);\t}\tcatch (optionexception e) {\tconsole.write (\"greet: \");\tconsole.writeline (e.message);",
  "foo bar",
  1
 ],
 [
  "public static int main () {\tvalue val;\tarrowtype i = (arrowtype)val.val2;\tif ((arrowtype)(enum)val.val != arrowtype.left) return 1;",
  "added value retrieved value",
  1
 ],
 [
  "s17.f10 = 10;\ts17.f11 = 11;\ts17.f12 = 12;\ts17.f13 = 13;\ts17.f14 = 14;\ts17.f15 = 15;\ts17.f16 = 16;\ts17.f17 = 17;\ts17 = mono_return_sbyte17(s17, 9);\tif (s17.f1 != 1+9) {",
  "got but expected",
  0
 ],
 [
  "public void rtsenable_false_beforeopen() {",
  "verifying false rtsenable before open",
  0
 ],
 [
  "isequenced<int> inner = new treeset<int>();\tinner.add(i); inner.add(i+1);\touter.add(inner);\t}\tipersistentsorted<int> inner1 = new treeset<int>(), inner2 = new treeset<int>(), inner3 = new treeset<int>();\tinner1.addall<int>(new int[] { 2, 3, 5, 7, 11 });\tinner2.addall(inner1); inner2.add(13);\tinner3.addall(inner1);\touter.add(inner1.snapshot());\tinner1.add(13);",
  "in outer",
  0
 ],
 [
  "private static bool callsecondclassoperator() {\tint failcount = 0;\tverify.firstcalled = false;\tdynamic d = new firstclassreturnclass<int>();\tif ((!(((secondclass<int>)d[1]) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public void trycatchmultiplehandlers() {\ttry {\t}\tcatch (invalidoperationexception ex) {\tconsole.writeline(ex.message);\t}\tcatch (exception ex2) {\tconsole.writeline(ex2.message);\t}\tcatch {",
  "schema add of datatable datasettable",
  1
 ],
 [
  "public void addcreator(toolboxitemcreatorcallback creator, string format, idesignerhost host) {",
  "warning orleans codegen the input assembly contained no types which required code generation",
  1
 ],
 [
  "public static int test_0_safehandle_return_exc () {\ttry {\tsafehandle x = mono_safe_handle_return_1 ();\t} catch (marshaldirectiveexception){\treturn 0;\t}",
  "error should have generated an exception since safehandle is abstract",
  0
 ],
 [
  "public void inoutbufferfilled_flush_multiple() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (serialport com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\tasyncwriterndbytearray asyncwriterndbytearray = new asyncwriterndbytearray(com1, default_buffer_size);\tvar t = new task(asyncwriterndbytearray.writerndbytearray);\tint elapsedtime = 0;\tbyte[] xmitbytes = new byte[default_buffer_size];",
  "verifying call flush method several times after input and output buffer has been filled",
  0
 ],
 [
  "public override bool execute () {\tif (string.isnullorempty (extensiondomain)) {\treturn false;\t}\tif (addinreferences == null) {\treturn true;\t}\tapplication app = setupservice.getextensibleapplication (extensiondomain);\tif (app == null) {",
  "mapping match on sourcetable",
  1
 ],
 [
  "public static void installhelpdocumentsfromwebsource(string productcode, string productversion, string locale, string sourceweb, string brandingpackage) {\tif (string.isnullorempty(productcode)) { throw new argumentnullexception(\"productcode\"); }\tif (string.isnullorempty(productversion)) { throw new argumentnullexception(\"productversion\"); }\tif (string.isnullorempty(locale)) { throw new argumentnullexception(\"locale\"); }\tif (string.isnullorempty(sourceweb)) { throw new argumentnullexception(\"sourceweb\"); }\tif (!regex.ismatch(productversion, @\"^\\d{3}$\", regexoptions.cultureinvariant | regexoptions.ignorecase)) { throw new argumentoutofrangeexception(\"productversion\"); }\tif (!regex.ismatch(locale, @\"^\\w{2}-\\w{2}\", regexoptions.cultureinvariant | regexoptions.ignorecase)) { throw new argumentoutofrangeexception(\"locale\"); }\tstring initls = (!help3environment.islocalstoreinitialized) ? string.format(\"/content \\\"{0}\\\"\", help3environment.buildlocalstorefolder):\"\";\tstring brandingswitch = (!string.isnullorempty(brandingpackage)) ? string.format(\"/brandingpackage \\\"{0}\\\"\", brandingpackage):\"\";\tstring arguments = string.format(\"/product {0} /version {1} /locale {2} /sourceweb \\\"{3}\\\" {4} {5}\", productcode, productversion, locale, sourceweb, initls, brandingswitch);",
  "helpviewer installing help documents from web with",
  0
 ],
 [
  "public override bool onstart() {",
  "starting role entry point",
  0
 ],
 [
  "test.checkvalue (sb2, new stringbuilder (\"prefix\"), 192);\ttest.checkvalue (sb3, new stringbuilder (\"prefix-middle\"), 192);\tstringbuilder sb4 = server.run9_3 (sb3);\ttest.checkvalue (sb3, new stringbuilder (\"prefix-middle\"), 193);\ttest.checkvalue (sb4, new stringbuilder (\"prefix-middle-end\"), 193);\t}\tcatch (testexception ex) {\treturn ex.code;\t}\tcatch (exception ex) {",
  "test error",
  0
 ],
 [
  "public delegate void mydel(int x);\tprivate class myclass {\tpublic void do(int x) {\ttest.s_status = true;\t}\tpublic void do(short x) {\ttest.s_status = false;",
  "do",
  0
 ],
 [
  "session.exceptionhandler = (ex) => {\thandleanyexception(ex);\treturn true;\t};\tswitch (waithandle.waitany (new waithandle[]{ done, targetexited }, 30000)) {\tcase 0: break;\tcase 1: throw new exception (\"test application exited before hitting breakpoint\");\tdefault: throw new exception (\"timeout while waiting for initial breakpoint\");\t}\tif (session is softdebuggersession) {",
  "sdb protocol version",
  0
 ],
 [
  "public void verifyresult(string expectedvalue) {\txmldiff.xmldiff xmldiff = new xmldiff.xmldiff();\txmldiff.option = xmldiffoption.infosetcomparison | xmldiffoption.ignoreemptyelement | xmldiffoption.normalizenewline;\tstreamreader sr = new streamreader(new filestream(\"out.xml\", filemode.open, fileaccess.read));\tstring actualvalue = sr.readtoend();\tsr.dispose();",
  "actual",
  0
 ],
 [
  "foreach (var g in grouped) {\tsw.writeline (\"<h2>\" + g.key + \"</h2>\");\tsw.writeline (\"<table border='1'>\");\tforeach (var node in g.select (n => new { descriptor = n, provider = n.getprovider ()}).orderby (n => n.provider.getanalyzerid(), stringcomparer.ordinal)) {\tvar title = node.provider.getanalyzerid ();\tvar desc = node.provider.supporteddiagnostics.first ().description.tostring () != title ? node.provider.supporteddiagnostics.first ().description : \"\";\tif (node.provider.supporteddiagnostics.length > 1) {\tforeach (var subissue in node.provider.supporteddiagnostics) {\ttitle = subissue.description.tostring ();\tdesc = subissue.description.tostring () != title ? subissue.description : \"\";",
  "tr td td td td td td tr",
  0
 ],
 [
  "static void help () {",
  "quiet optional minimize output tro stdout",
  0
 ],
 [
  "schemanamingcontext = (string)deroot.properties[\"schemanamingcontext\"].value;\t}\tusing (directoryentry descn = new directoryentry(\"ldap: {\tusing (directorysearcher dirsearcher = new directorysearcher(descn)) {\tdirsearcher.filter = \"(&(objectclass=classschema)(systemauxiliaryclass=\" + auxclassname + \"))\";\tdirsearcher.propertiestoload.add(\"ldapdisplayname\");\tlist<string> objectclasses = new list<string>();\tusing (searchresultcollection searchrescollection = dirsearcher.findall()) {\tforeach (searchresult res in searchrescollection) {\tif (null == res.properties[\"ldapdisplayname\"]) {",
  "failed",
  1
 ],
 [
  "static dbfactoryservice () {\tfactories = new dictionary<string, idbfactory> ();\tforeach (dbfactorycodon codon in addinmanager.getextensionnodes (\"/monodevelop/database/sql\")) {\tidbfactory fac = codon.dbfactory;\tif (fac != null) {\tfactories.add (fac.identifier, fac);",
  "got but expected",
  1
 ],
 [
  "public codecompletionkeypressresult handlekeypress(itexteditor editor, char ch) {\tif (ch == ':') {\tif (editor.caret.offset >= 5 && editor.document.gettext(editor.caret.offset-5, 5) == \"${res\") {\tiresourcefilecontent content = icsharpcodecoreresourceresolver.geticsharpcodecorelocalresourceset(editor.filename).resourcefilecontent;\t#if debug if (content != null) {",
  "search finished gathering",
  1
 ],
 [
  "static private void help () {",
  "in b",
  1
 ],
 [
  "object [] arguments;\targuments = new object [] { str, i, int32_out, maskedtextresulthint_out };\tif (compare (\"replace\", mask, ref stateindex, arguments, ref more_states)) {\tcontinue;\t}\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;",
  "foreach var evnt in t elements event ecomparer added evnt true",
  1
 ],
 [
  "public void test (t index) {",
  "test",
  0
 ],
 [
  "public static int main () {\tif (new y ().getit () () == 1 && new y ().getit2 () () == 1) {",
  "good",
  0
 ],
 [
  "static getreplicainforequest() {\ttry {\tldapextendedresponse.register(replicationconstants.get_replica_info_res, system.type.gettype(\"novell.directory.ldap.extensions.getreplicainforesponse\"));\t}\tcatch (system.exception e) {",
  "could not register extended response class not found",
  0
 ],
 [
  "if (s14.f8 != 8+9) {\treturn 8;\t}\tif (s14.f9 != 9+9) {\treturn 9;\t}\tif (s14.f10 != 10+9) {\treturn 10;\t}\tif (s14.f11 != 11+9) {",
  "got but expected",
  0
 ],
 [
  "public void var_4(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartdocument();\tw.writeenddocument();\t}\tcatch (argumentexception e) {",
  "exception",
  0
 ],
 [
  "break;\t}\t}\tif (help) help ();\tif (sn) strongname (filename);\telse if (cert) certificate (filename);\telse help ();\tconsole.writeline ((error == null) ? \"success\" : error);\t}\tcatch (exception e) {",
  "record mac",
  1
 ],
 [
  "public static void main (string[] args) {\tif (args.length != 3) {",
  "couldn t resolve call assuming it is pure",
  1
 ],
 [
  "++indent;\tgeneratestatements (statement.truestatements);\t--indent;\tcodestatementcollection falses = statement.falsestatements;\tif (falses.count > 0) {\t++indent;\tgeneratestatements (falses);\t--indent;\t}\telse {",
  "create stored function sf to test date parameters",
  1
 ],
 [
  "public void testdisable() {\tanalyze<stringcompareisculturespecificanalyzer>(@\" class test {\tvoid foo() {",
  "csharpdiagnosticids stringcompareisculturespecificanalyzerid foo bar",
  0
 ],
 [
  "var doc = new monodevelop.xml.editor.xmlparseddocument (parseoptions.filename);\tdoc.flags = parseddocumentflags.nonserializable;\ttry {\tvar xmlparser = new xmlparser ( new xmlrootstate (new htmltagstate (), new htmlclosingtagstate (true)), true);\txmlparser.parse (parseoptions.content.createreader ());\tdoc.xdocument = xmlparser.nodes.getroot ();\tdoc.addrange (xmlparser.errors);\tif (doc.xdocument != null) doc.addrange (validate (doc.xdocument));\t}\tcatch (exception ex) {",
  "tp file show the public key and pk token from the specified file",
  1
 ],
 [
  "public contentvalidator finish(bool usedfa) {\tdebug.assert(contenttype == xmlschemacontenttype.elementonly || contenttype == xmlschemacontenttype.mixed);\tif (_contentnode == null) {\tif (contenttype == xmlschemacontenttype.mixed) {\tstring ctype = isopen ? \"any\" : \"textonly\";",
  "contenttype",
  0
 ],
 [
  "public override object visit(icsharpcode.nrefactory.monocsharp.expression expression) {",
  "sqlclient diagnostictest executenonqueryerrortest connection open successful",
  1
 ],
 [
  "m_xsltarg.addparam(\"myarg5\", szempty, d5);\tm_xsltarg.removeparam(\"myarg5\", szempty);\tretobj = m_xsltarg.getparam(\"myarg5\", szempty);\tif (retobj != null) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg6\", szempty, d6);\tm_xsltarg.removeparam(\"myarg6\", szempty);\tretobj = m_xsltarg.getparam(\"myarg6\", szempty);\tif (retobj != null) {",
  "failed to remove",
  0
 ],
 [
  "return resultaction;\t};\tawait synchronizationcontexthelper.runtestasync(async () => {\tstagingstorageaccount storagecredentials = testutilities.getstoragecredentialsfromenvironment();\tusing (batchclient batchcli = await testutilities.openbatchclientfromenvironmentasync()) {\tbatchclientparalleloptions paralleloptions = new batchclientparalleloptions() {\tmaxdegreeofparallelism = 2 };\tawait this.addtaskssimpletestasync( batchcli, testname, 1281, paralleloptions, resulthandlerfunc, storagecredentials, new list<string> { \"testresources\\\\data.txt\" }, usejoboperations: usejoboperations).configureawait(false);\t}\t}, longtesttimeout);",
  "test failed at call result",
  1
 ],
 [
  "static void main() {\tc a = new c { value = 12 };\tfieldinfo info = typeof(c).getfield(\"value\");\ttypedreference reference = __makeref(a);\tif (!(reference is typedreference reference0)) throw new exception(\"typedreference\");\tinfo.setvaluedirect(reference0, 34);\tconsole.writeline($\"a.value = {a.value}\");\tif (a.value != 34) throw new exception(\"setvaluedirect\");\tint z = 56;\tif (copyrefint(ref z) != 56) throw new exception(\"ref z\");",
  "ok",
  0
 ],
 [
  "public static bool queryperformancecounter (out long performancecount) {",
  "resourcetoolkit bclnrefactoryresourceresolver found assignment to field",
  1
 ],
 [
  "static bool callsecondstructoperator() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturnstruct();\tif ( (!(bool)(((dynamic)(s + 1)) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "added value retrieved value",
  1
 ],
 [
  "object odatavalue;\ttry {\tdroptable (cnc);\t}\tcatch (sqlexception e) {\t}\ttry {\tcreatetable (cnc);\tinsertdata (cnc);\tupdatedata (cnc);",
  "reader readstartelement",
  1
 ],
 [
  "public static int main () {\tif (attribute.getcustomattributes (typeof (test)).length != 1) return 1;\tif (attribute.getcustomattributes (typeof (test_2)).length != 1) return 1;",
  "error",
  1
 ],
 [
  "static private void extendedhelp () {",
  "xmlschemamanager is ignoring schema with no namespace from file",
  1
 ],
 [
  "static bool callsecondclassindexer() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturndynamicclass();\tif ( (!(bool)(s.instanceproperty[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public static void creategenerictestfile(string strfilename) {\tmemorystream ms = new memorystream();\ttextwriter tw = new streamwriter(ms);\ttw.writeline(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"no\\\"?>\");\ttw.writeline(\"<!-- comment1 -->\");\ttw.writeline(\"<?pi1a?>\");\ttw.writeline(\"<?pi1b?>\");\ttw.writeline(\"<?pi1c?>\");",
  "fileservice jumping to file position x",
  1
 ],
 [
  "case xmlnodetype.documenttype: if (_rxmlreader.movetofirstattribute()) {\tdo {\tcxmlattribute rnewattribute = new cxmlattribute(_rxmlreader);\trnewnode.addattribute(rnewattribute);\tcxmlnode rvaluenode = new cxmlnode(_rxmlreader);\trvaluenode._strvalue = _rxmlreader.value;\trnewattribute.insertnode(rvaluenode);\t} while (_rxmlreader.movetonextattribute());\t}\tbreak;",
  "unhandled type in process",
  0
 ],
 [
  "public void testcase5() {\tanalyze<stringcompareisculturespecificanalyzer>(@\" class test {\tvoid foo () {\t}\t}\", @\" class test {\tvoid foo () {",
  "foo bar",
  0
 ],
 [
  "static void nullaggregatetest (oracleconnection con) {\toraclecommand cmd2 = con.createcommand ();\ttry {\tcmd2.commandtext = \"drop table mono_test_table3\";\tcmd2.executenonquery ();\t}\tcatch(oracleexception) {\t}",
  "create table mono test",
  0
 ],
 [
  "public persistencegraintests_awsdynamodbstore(itestoutputhelper output, fixture fixture) : base(output, fixture) {\tif (!awstestconstants.isdynamodbavailable) {",
  "process closehandle snapshot handle",
  1
 ],
 [
  "if (!testpreinitintdata()) {\tresult = fail;\t}\tif (!testpreinittypedata()) {\tresult = fail;\t}\tif (!testpreinitmethoddata()) {\tresult = fail;\t}\tif (!testotherstatics()) {",
  "failed",
  0
 ],
 [
  "la.mousescrolled += handlemousescrolled;\tpackstart (te);\tpackstart (reste);\tte.mouseentered += (sender, e) => {\tinsidete = true;\tapplication.timeoutinvoke (100, checkmouseoverte);\treste.text = \"mouse has entered text entry\";\t};\tte.mouseexited += (sender, e) => {\tinsidete = false;",
  "items in ms ms per queue",
  1
 ],
 [
  "if (s12.f8 != 8+9) {\treturn 8;\t}\tif (s12.f9 != 9+9) {\treturn 9;\t}\tif (s12.f10 != 10+9) {\treturn 10;\t}\tif (s12.f11 != 11+9) {",
  "can t get file attributes",
  1
 ],
 [
  "static private void help () {",
  "num certificate serial number",
  0
 ],
 [
  "public void setstr (string s) {",
  "setting str",
  0
 ],
 [
  "private static void showhelp (bool detailed) {\tif (detailed) {\t}\twriteline ();\tif (detailed) {",
  "unknown command",
  1
 ],
 [
  "foreach (var setting in theme.settings) {\tif (setting.name != null) {\t}\tif (setting.scopes.count > 0) {\t}\tif (setting.settings.count > 0) {\tforeach (var kv in setting.settings) {\t}\t}\t}",
  "plist",
  0
 ],
 [
  "private static int verify() {\tlock (test.locker) {\tif (test.s_field == null) {",
  "xamlobjectwritersettings afterendinit",
  1
 ],
 [
  "static bool callsecondclassindexer() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturndynamicclass();\tif ( (!(bool)((s + 1)[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public int run() {\tif (silohost == null) {\treturn 1;\t}\ttry {\tsilohost.initializeorleanssilo();\tif (silohost.startorleanssilo()) {",
  "assembly is delay signed but not strongnamed",
  1
 ],
 [
  "public virtual void dispose() {\tif (!_disposed) {",
  "principal dispose disposing",
  0
 ],
 [
  "s1.f1 = 1;\ts1 = mono_return_sbyte1(s1, 9);\tif (s1.f1 != 1+9) {\treturn 1;\t}\tsbyte2 s2;\ts2.f1 = 1;\ts2.f2 = 2;\ts2 = mono_return_sbyte2(s2, 9);\tif (s2.f1 != 1+9) {",
  "test failed at call result",
  1
 ],
 [
  "public ienumerable get (int a) {",
  "warning",
  1
 ],
 [
  "public static void creategenerictestfile(string strfilename) {\tfilepathutil.addstream(strfilename, new memorystream());\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"no\\\"?>\");\ttw.writeline(\"<!-- comment1 -->\");\ttw.writeline(\"<?pi1a?>\");\ttw.writeline(\"<?pi1b?>\");\ttw.writeline(\"<?pi1c?>\");",
  "hello world",
  1
 ],
 [
  "dump (writer, df.monthnames, \"monthnames\");\tdump (writer, df.shortestdaynames, \"shortestdaynames\");\tvar ti = c.textinfo;\tvar nf = c.numberformat;\tdump (writer, nf.currencygroupsizes, \"currencygroupsizes\");\tdump (writer, nf.nativedigits, \"nativedigits\");\tdump (writer, nf.numbergroupsizes, \"numbergroupsizes\");\tdump (writer, nf.percentgroupsizes, \"percentgroupsizes\");\tif (!c.isneutralculture) {\tvar ri = new regioninfo (c.lcid);",
  "isocurrencysymbol",
  0
 ],
 [
  "static void commandlocaltargets () {\tstring [] targets;",
  "default current system mono",
  0
 ],
 [
  "private void emitwriteprimitivearray(string typename) {\topenscope($\"public static void write(this nativewriter writer, {typename}[] values)\");\twriteline(\"if (values == null)\");\twriteline(\"{\");\twriteline(\"}\");",
  "res files",
  1
 ],
 [
  "public void negotiatestream_streamtostream_kerberosauthinvalidtarget_failure() {\tif (!_iskrbavailable) {",
  "skipping negotiatestream streamtostream kerberosauthinvalidtarget failure",
  0
 ],
 [
  "protected override void write (pdictionary dict) {\tif (dict.count == 0) {\treturn;\t}",
  "result whitespace",
  1
 ],
 [
  "}\t}\t}\tfielddeclaration fielddeclaration = data as fielddeclaration;\tif (!this.islocalvariable && fielddeclaration != null) {\tif (variabledeclaration.name == this.resourcemanagermember.name && fielddeclaration.startlocation.x == this.resourcemanagermember.region.begincolumn && fielddeclaration.startlocation.y == this.resourcemanagermember.region.beginline) {\t#endif data = true;\t} else {\tthis.tryresolveresourcemanagerproperty();\tif (this.resourcemanagerfieldaccessedbyproperty != null && fielddeclaration.startlocation.x == this.resourcemanagerfieldaccessedbyproperty.region.begincolumn && fielddeclaration.startlocation.y == this.resourcemanagerfieldaccessedbyproperty.region.beginline) {",
  "resourcetoolkit bclnrefactoryresourceresolver found field declaration via associated property at",
  0
 ],
 [
  "private string generatememberselement(xmlmembersmapping xmlmembersmapping) {\telementaccessor element = xmlmembersmapping.accessor;\tmembersmapping mapping = (membersmapping)element.mapping;\tbool haswrapperelement = mapping.haswrapperelement;\tbool writeaccessors = mapping.writeaccessors;\tbool isrpc = xmlmembersmapping.issoap && writeaccessors;\tstring methodname = nextmethodname(element.name);\twriter.writeline();\twriter.write(\"public void \");\twriter.write(methodname);",
  "object p",
  0
 ],
 [
  "assert.true(false);\t}\tm_xsltarg.addparam(\"myarg6\", szempty, d6);\tretobj = m_xsltarg.getparam(\"myarg6\", szempty);\tif (!d6.equals(retobj)) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg7\", szempty, d7);\tretobj = m_xsltarg.getparam(\"myarg7\", szempty);\tif (!d7.equals(retobj)) {",
  "instantiating type",
  1
 ],
 [
  "testwithstruct(new mystruct2(), new mystruct2(), new mystruct2());\tconsole.writeline(\"====================\");\ts_ifoostring = \"mystruct3.imethod1<system.int32>(1,2)\";\ts_ifooobject = \"mystruct3.imethod1<system.int32>(3,4)\";\ts_ifooint = \"mystruct3.ifoo<int>.imethod1<system.int32>(5,6)\";\ttestwithstruct(new mystruct3(), new mystruct3(), new mystruct3());\tconsole.writeline(\"====================\");\t}\t{\tstring res = ((iface<string>)new anotherderivedclass<string>()).ifacegvmethod1<string>(\"string1\", \"string2\");",
  "bit detection failed",
  1
 ],
 [
  "}\tif (allowworldfound) {\tadssecurity.removeaccessrulespecific(allowworldace);\t}\t}\telse {\tif (denyselffound) {\tadssecurity.removeaccessrulespecific(denyselface);\t}\tif (denyworldfound) {",
  "retrieved",
  1
 ],
 [
  "public static void dataadaptertest2_insert (oracleconnection con) {\tconsole.writeline(\"================================\");\tconsole.writeline(\"=== adapter insert =============\");\tconsole.writeline(\"================================\");\toracletransaction transaction = con.begintransaction ();\toracledataadapter da = new oracledataadapter(\"select * from mono_adapter_test\", con);\tda.selectcommand.transaction = transaction;",
  "create command builder",
  0
 ],
 [
  "public void addextobject9() {\tmyobject obj = new myobject(9, _output);\tm_xsltarg = new xsltargumentlist();\ttry {\tm_xsltarg.addextensionobject(szdefaultns, null);\t}\tcatch (system.argumentnullexception) {\treturn;\t}",
  "verifying default ctsholding after open",
  1
 ],
 [
  "static bool callsecondinterfaceindexer() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturndynamicinterface<int>();\tif ( (!(bool)(s.instancemethod()[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "if (s7.f1 != 1+906) {\treturn 1;\t}\tif (s7.f2 != 2+906) {\treturn 2;\t}\tif (s7.f3 != 3+906) {\treturn 3;\t}\tif (s7.f4 != 4+906) {",
  "got but expected",
  0
 ],
 [
  "if (provider.find (loc.item2) != null) {\tfound++;\t} else {\tmissing++;\t}\t}\t} catch (exception e) {\texceptions++;\t}\t}",
  "test failed at call result",
  1
 ],
 [
  "public static void main (string[] args) {",
  "testing task wait task started on buggy scheduler",
  1
 ],
 [
  "getoption (\"il\", args, false, out iltest);\tchecker = new positivechecker (tester, iltest);\tpositive = true;\tif (iltest != null && getoption (\"update-il\", args, false, out temp)) {\t((positivechecker) checker).updateverificationdatafile = true;\t}\tbreak;\tcase \"nunit\": positive = true;\tchecker = new nunitchecker (tester);\tbreak;",
  "invalid mode argument",
  0
 ],
 [
  "public virtual void notifycomponentrenamed(object component, string newname, string oldname) {\treparse();",
  "renaming form to",
  0
 ],
 [
  "try {\tstring key = \"stam\" + n;\tobject o2 = c.get(key);\tif (o2 == null) {\tif (useabsolutetime) c.insert(key, 1, null, datetime.now.addticks(slidingwindow), cache.noslidingexpiration);\telse c.insert(key, 1, null, cache.noabsoluteexpiration, new timespan(slidingwindow));\t}\tn = (n * 2 + i) % modulo;\t}\tcatch (exception e) {",
  "codeattributedeclarationcollection",
  1
 ],
 [
  "static compilererror generatesatelliteassemblies (dictionary<string, string> resourcesbyculture, string outputdir, string al, string defaultns, progressmonitor monitor) {\tforeach (keyvaluepair<string, string> pair in resourcesbyculture) {\tstring culture = pair.key;\tstring satdir = path.combine (outputdir, culture);\tstring outputfile = defaultns + \".resources.dll\";\tdirectory.createdirectory (satdir);\tusing (stringwriter sw = new stringwriter ()) {\tstring args = string.format (\"/t:lib {0} \\\"/out:{1}\\\" /culture:{2}\", pair.value, outputfile, culture);",
  "generating satellite assembly for culture",
  0
 ],
 [
  "public override void assemblyunloaded (ulong threadid, uint id, ulong startcounter, ulong endcounter, string name) {",
  "renderendtag",
  1
 ],
 [
  "public override bool onstart() {",
  "certificate added",
  1
 ],
 [
  "var context = new authenticationcontext(authority, tokencache);\tvar result = await context.acquiretokenasync(resource, clientcredential).configureawait(false);\treturn result.accesstoken;\t}\tpublic async task<string> getuseraccesstoken(string authority, string resource, string scope) {\tstring clientid = testconfigurationmanager.trygetenvironmentorappsetting(\"nativeclientid\");\tvar context = new authenticationcontext(authority, tokencache);\tif (_devicecodeforstoragetests == null) {\t_devicecodeforstoragetests = await context.acquiredevicecodeasync(resource, clientid).configureawait(false);\tdebug.writeline(\"############################################################################################\");",
  "test failed at call result",
  1
 ],
 [
  "if (!maybeaddfile (maker, \"systemconfig:\", config_file) || !maybeaddfile (maker, \"machineconfig:\", machine_config_file)) return false;\tif (config_dir != null){\tmaker.add (\"config_dir:\", config_dir);\t}\tif (embedded_options != null) maker.addstring (\"options:\", embedded_options);\tif (environment.count > 0){\tforeach (var key in environment.keys) maker.addstringpair (\"env:\" + key, key, environment [key]);\t}\tif (libraries.count > 0){\tforeach (var alias_and_path in libraries){",
  "library",
  0
 ],
 [
  "if (credholder != null) {\tcredtable = (explicitcreds ? credholder.explicitcreds : credholder.defaultcreds);\tdebug.assert(credtable != null);\tobject o = credtable[username];\tif (o is placeholder) {\tcontextreadyevent = ((placeholder)o).contextreadyevent;\tcontinue;\t}\tweakreference reftocontext = o as weakreference;\tif (reftocontext != null) {",
  "sdscache getcontext reftocontext is non null",
  0
 ],
 [
  "byte[] buffer = new byte[3];\tint startpos = 0;\tint readsize = 3;\tint currentsize = 0;\tdatareader.read();\twhile (datareader.read()) {\tcurrentsize = datareader.readcontentasbinhex(buffer, startpos, readsize);\tcerror.equals(currentsize, 1, \"size\");\tcerror.equals(buffer[0], (byte)18, \"buffer\");\tif (!(isxpathnavigatorreader() || isxmlnodereader() || isxmlnodereaderdatadoc())) {",
  "linenumber",
  0
 ],
 [
  "tw.writeline(\"<attribute2 a1='a1value' />\");\ttw.writeline(\"<attribute3 a1='a1value' a2='a2value' a3='a3value' />\");\ttw.writeline(\"<attribute4 a1='' />\");\ttw.writeline(string.format(\"<attribute5 crlf='x{0}x' cr='x{0}x' lf='x\\nx' ms='x     x' tab='x\\tx' />\", environment.newline));\ttw.writeline(\"<skip1 /><afterskip1 />\");\ttw.writeline(\"<skip2></skip2><afterskip2 />\");\ttw.writeline(\"<chars1>0123456789</chars1>\");\ttw.flush();\ttw.writeline(\"<isdefault a1='a1value' />\");\ttw.writeline(\"<boolean3>1</boolean3>\");",
  "float float",
  0
 ],
 [
  "bfinal = input.getbits(1);\tstate = inflaterstate.readingbtype;\t}\tif( state == inflaterstate.readingbtype) {\tif (!input.ensurebitsavailable(2)) {\tstate = inflaterstate.readingbtype;\treturn false;\t}\tblocktype = (blocktype)input.getbits(2);\tif (blocktype == blocktype.dynamic) {",
  "failure",
  1
 ],
 [
  "public void os10(object param0, object param1) {\tinit(param0.tostring(), param1.tostring());\t_xsl.load(_xslfile);\txmlwritersettings os = _xsl.outputsettings;",
  "testing validity of for return type",
  1
 ],
 [
  "public async task serverallownoencryption_clientrequireencryption_connectwithencryption() {\tusing (var serverallownoencryption = new dummytcpserver( new ipendpoint(ipaddress.loopback, 0), encryptionpolicy.allownoencryption)) using (var client = new tcpclient()) {\tawait client.connectasync(serverallownoencryption.remoteendpoint.address, serverallownoencryption.remoteendpoint.port);\tusing (var sslstream = new sslstream(client.getstream(), false, allowanyservercertificate, null, encryptionpolicy.requireencryption)) {\tawait sslstream.authenticateasclientasync(\"localhost\", null, sslprotocolsupport.defaultsslprotocols, false);",
  "x x",
  1
 ],
 [
  "private void unloadonthread() {\tbool shadowcopy = domain.shadowcopyfiles;\tstring cachepath = domain.setupinformation.cachepath;\tstring domainname = domain.friendlyname;\ttry {\tappdomain.unload(domain);\t}\tcatch (exception ex) {",
  "unable to unload appdomain",
  0
 ],
 [
  "catch (notsupportedexception) {\treturn true;\t}\t}\ttry {\tdatareader.readvaluechunk(buffer, iindex, icount);\t}\tcatch (exception e) {\tbpassed = (e.gettype().tostring() == exceptiontype.tostring());\tif (!bpassed) {",
  "test",
  1
 ],
 [
  "var server = new tcplistener(endpoint);\tserver.start();\tusing (var clientconnection = new tcpclient(addressfamily.internetworkv6)) {\tipendpoint serverendpoint = (ipendpoint)server.localendpoint;\ttask clientconnect = clientconnection.connectasync(serverendpoint.address, serverendpoint.port);\ttask<tcpclient> serveraccept = server.accepttcpclientasync();\tawait task.whenall(new task[] { clientconnect, serveraccept }).timeoutafter( testconfiguration.passingtesttimeoutmilliseconds);\tusing (tcpclient serverconnection = await serveraccept) using (sslstream sslclientstream = new sslstream(clientconnection.getstream())) using (sslstream sslserverstream = new sslstream( serverconnection.getstream(), false, allowanyservercertificate)) {\tstring servername = _servercertificate.getnameinfo(x509nametype.simplename, false);\ttask clientauthentication = sslclientstream.authenticateasclientasync( servername, null, clientsslprotocols, false);",
  "serverasyncauthenticatetest authenticateasserverasync start",
  0
 ],
 [
  "static int main(string[] args) {\tint exitcode = initializeorleans();",
  "proxy grain was originally located on silo",
  1
 ],
 [
  "public override object getservice(type servicetype) {\tobject service = base.getservice(servicetype);\tif (service == null) {",
  "request missing service from assembly is not available",
  0
 ],
 [
  "public override void garbagecollectionsweepend (uint collection, uint generation, ulong counter) {",
  "subtreereader filename",
  1
 ],
 [
  "writer.writeline(\"() {\");\twriter.indent++;\twriter.writeline(\"object o = null;\");\tmembermapping member = new membermapping();\tmember.typedesc = mapping.typedesc;\tmember.elements = new elementaccessor[] { element };\tmember[] members = new member[] { new member(this, \"o\", \"o\", \"a\", 0, member) };\tstring unknownnode = \"unknownnode(null, \" + expectedelements(members) + \");\";\twritememberelements(members, \"throw createunknownnodeexception();\", unknownnode, element.any ? members[0] : null, null, null);\tif (element.issoap) {",
  "readreferencedelements",
  0
 ],
 [
  "public void testaddbracestoelse() {\ttest<addbracescoderefactoringprovider>(@\"class testclass {\tvoid test() {\tif (true) {\t}\t}\", @\"class testclass {\tvoid test() {\tif (true) {",
  "hello",
  0
 ],
 [
  "m_xsltarg.removeparam(\"myarg4\", szempty);\tretobj = m_xsltarg.getparam(\"myarg4\", szempty);\tif (retobj != null) {\tassert.true(false);\t}\tboolean bt = (1 == 1);\tm_xsltarg.addparam(\"myarg5\", szempty, bt);\tm_xsltarg.removeparam(\"myarg5\", szempty);\tretobj = m_xsltarg.getparam(\"myarg5\", szempty);\tif (retobj != null) {",
  "failed to remove",
  0
 ],
 [
  "oracledatareader reader = null;\toracletransaction trans = null;\toraclecommand cmd = con.createcommand();\tcmd.commandtext = \"drop table mono_adapter_test\";\ttrans = con.begintransaction();\tcmd.transaction = trans;\ttry {\treader = cmd.executereader();\treader.read();\treader.close();",
  "diskwriteiops",
  1
 ],
 [
  "public x () {\tint x, y;\ty = this.testme (out x).data;",
  "verifying zero readtimeout after open with readline",
  1
 ],
 [
  "foreach (string lib in libpaths) librarianargs.add (string.format (\"-l {0}\", librarian.quotearg (lib)));\taddmonolibraries (librarian, staticlinkmono, staticlinkcruntime, librarianargs);\tlibrarianargs.add (\"-o \" + librarian.quotearg (output));\treturn;\t}\tstatic toolchainprogram getassemblercompiler () {\tstring assembler = getenv (\"as\", \"\");\tif (assembler.length != 0) return new toolchainprogram (\"as\", assembler);\tvar vcclangassembler = visualstudiosdktoolchainhelper.getinstance ().getvcclangcompiler ();\tif (vcclangassembler == null || vcclangassembler.path.length == 0) {",
  "warning couldn t find installed visual studio sdk clang with microsoft codegen fallback to mingw as exe and default environment",
  0
 ],
 [
  "public domain join (pair<apc, apc> edge, domain newstate, domain prevstate, out bool weaker, bool widen) {\tif (debugoptions.debug) {",
  "gtk colorscheme read failure using built in colorscheme",
  1
 ],
 [
  "public static void main (string [] args) {",
  "hello world",
  0
 ],
 [
  "}\t});\tthread.start ();\tdriver.mre1.waitone ();\tthread.join ();\tif (!catched_abort) environment.exit (8);\ttry {\tisstaticconstructor3viable ();\tenvironment.exit (9);\t} catch (typeinitializationexception e) {",
  "not viable",
  0
 ],
 [
  "private static bool testoropwithdifftype() {\tclearflags();\tdynamic d1 = 10;\tdynamic d2 = new myopclasswithdifftype();\ttry {\tdynamic dr = d1 || d2;",
  "failed didn t get runtimebinderexception",
  0
 ],
 [
  "private void verifyresult(object actual, object expected, string message) {",
  "took to cancel task",
  1
 ],
 [
  "return 1;\t}\tforeach (type t in types){\ttry {\tmaps.add (imp.importtypemapping (t));\tusertypes.add (t);\tif (verbose) console.writeline( \" - \" + t );\t} catch (invalidoperationexception ex) {\t} catch (notimplementedexception ex) {\tif (verbose) {",
  "foreach var method in t elements method mcomparer added method true",
  1
 ],
 [
  "public static int main () {\ttest test = new test();\tthread thr=new thread(new threadstart(test.thread_func));\tthr.start();\tmonitor.enter(mon);\tmonitor.enter(mon);\tmonitor.wait(mon);\tmonitor.exit(mon);\tmonitor.enter(reply);",
  "main reply locked",
  0
 ],
 [
  "public static int main () {\tfoo foo = new foo ();\tfoo.p = 1;\tif (!do (foo)) return 1;",
  "ok",
  0
 ],
 [
  "static void main(string[] args) {\tstring programfiles = environment.getfolderpath(environment.specialfolder.programfiles);\tstring databasepath = path.combine(programfiles, string connstr = string.format(\"server={0};database={1};user={2};password={3}\", \"localhost\", databasepath, \"sysdba\", \"masterkey\");\tnorthwind db = new northwind(new fbconnection(connstr));\tvar x = db.orderdetails.first();\tobjectdumper.write(x);\tconsole.clear();\tvar q2 = from p in db.products orderby p.productname select p;\tforeach (var v in q2) objectdumper.write(v);",
  "press enter to continue",
  0
 ],
 [
  "static void help () {\tconsole.writeline ();\tconsole.writeline ();\tconsole.writeline ();",
  "the first argument of each pair is a directory in masterinfos",
  0
 ],
 [
  "public string getsignalgorithm() {\tvar tag = \"-algo\";\tvar algorithm = getargumentvalue( tag );\tif ( algorithm == string.empty ) {\talgorithm = jsonwebkeysignaturealgorithm.rs256;",
  "is not provided using default value",
  0
 ],
 [
  "public static void main (string[] args) {\tfoo f = new foo();\tbar b = new bar();\tb.test(f);",
  "thread signalled",
  1
 ],
 [
  "public static void main () {\tint a = 1;\ts b = delegate {\ta = 2;\t};\tb ();",
  "back got",
  0
 ],
 [
  "public bool comparestring(string strexpected) {\tstring stractual = this.getstring();\tif (strexpected != stractual) {\tint explen = (strexpected == null ? 0 : strexpected.length);\tint actlen = (stractual == null ? 0 : stractual.length);\tint minlen = (explen < actlen ? explen : actlen);\tint i;\tfor (i = 0; i < minlen; i++) {\tif (strexpected[i] != stractual[i]) {",
  "verifying canseek property returns true after a call to open",
  1
 ],
 [
  "marshal.addref(dispptr);\tgettypelib(dispptr);\t}\tfinally {\tmarshal.release(dispptr);\t}\t}\tif (_typelib != null) {\tstring typename = comclassinfo.gettypename(_typeinfo);\t_comtypename = _typelib.name + \".\" + typename;",
  "typename",
  0
 ],
 [
  "if (null == tc) {\t}\telse {\t}\tif (ijm.useridentity != null) {\t}\t}\t}\t{\tienumerable<metadataitem> mdis = curwi.metadata;",
  "metadata",
  0
 ],
 [
  "public override void addattribute (string name, string value, bool fencode) {",
  "addattribute",
  0
 ],
 [
  "using (rsa rsapublic = rsafactory.create()) using (rsa rsaprivate = rsafactory.create()) {\ttry {\trsapublic.importparameters(publicparameters);\t}\tcatch (cryptographicexception) {\treturn;\t}\trsaprivate.importparameters(keyparameters);\tif (signature == null) {\tsignature = signdata(rsaprivate, data, hashalgorithm, padding);",
  "waiting for sample close",
  1
 ],
 [
  "public void formattedtypenamesarerecoverable() {\tvar types = new[]\t{\ttypeof(namevaluecollection), typeof(int), typeof(int[]), typeof(int*[]), typeof(list<>), typeof(list<int>), typeof(list<int*[]>), typeof(inner<int[,,]>.innerinner<string, list<int>>.bottom[,]), typeof(inner<>.innerinner<,>.bottom), typeof(runtimetypenameformattertests), typeof(testgraininterfaces.circularstateteststate), typeof(int).makebyreftype(), typeof(inner<int[]>.innerinner<string, list<int>>.bottom[,]) .makepointertype() .makepointertype() .makearraytype(10) .makebyreftype(), typeof(namevaluecollection) };\tforeach (var type in types) {\tvar formatted = runtimetypenameformatter.format(type);",
  "fatal error invalid argument",
  1
 ],
 [
  "public void discardafterfailedopen() {\tusing (serialport com = new serialport(\"bad_port_name\")) {",
  "end of inner try",
  1
 ],
 [
  "restrictionerrormsg = null;\tif (basetype != null && basetype != xmlschemacomplextype.anytype && complextype.derivedby == xmlschemaderivationmethod.restriction) {\txmlschemaparticle derivedparticle = cannonicalizepointlessroot(complextype.contenttypeparticle);\txmlschemaparticle baseparticle = cannonicalizepointlessroot(basetype.contenttypeparticle);\tif (!isvalidrestriction(derivedparticle, baseparticle)) {\t#if debug if(complextype.contenttypeparticle != null && basetype.contenttypeparticle != null) {\tstring position = string.empty;\tif (complextype.sourceuri != null) {\tposition = \" in \" + complextype.sourceuri + \"(\" + complextype.linenumber + \", \" + complextype.lineposition + \")\";\t}",
  "derived",
  0
 ],
 [
  "public static void main (string[] args) {\tif (args.length == 0) {\tconsole.writeline ();",
  "usage wstest options",
  0
 ],
 [
  "finally {\tmounthelper.unmount(mounteddirname);\tdeletedir(mounteddirname, true);\t}\t}\telse {\t}\t}\tcatch (exception ex) {\ts_pass = false;",
  "base",
  1
 ],
 [
  "static void main(string[] args) {\ttry {\tconfiguration config = configurationmanager.openexeconfiguration (configurationuserlevel.none);\tcustomsection sect = (customsection)config.getsection(\"customsection\");\tconsole.writeline (\"longsetting = {0}\", sect.longsetting);\t}\tcatch (configurationerrorsexception e) {",
  "couldn t load assembly",
  1
 ],
 [
  "public static void init () {",
  "init",
  0
 ],
 [
  "public static int mainmethod() {\tint failcount = 0;\tdynamic d = new c1();\tif ((!(bool)((((c5)((((c2)d[1]) + 2).p3.m4()))[5] + 6).p7)) || (testcount.callcount != 7)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "}\tbit_array.append (string.format (\"(int) 0x{0:x8}\", numbers [i]));\tif (i != numbers.length - 1) bit_array.append (\", \");\t}\tbit_array.appendline (\"\");\tbit_array.appendline (tabs + \"};\");\tbit_array.appendline (tabs + \"};\");\twritelinenonformat (bit_array.tostring ());\twriteline (\"bitarray bits = new bitarray (answers);\");\twriteline (\"for (int i = 0; i < (int) char.maxvalue; i++)\");",
  "uint",
  1
 ],
 [
  "cmd.transaction.commit();\toraclecommand select = con.createcommand ();\tselect.commandtext = \"select blob_column from blobtest2\";\toracledatareader reader = select.executereader ();\telse {\toraclelob lob = reader.getoraclelob (0);\tif (lob == oraclelob.null) console.writeline(\"lob is oraclelob.null\");\telse {\tbyte[] blob = (byte[]) lob.value;\tstring result = gethexstring(blob);",
  "blob result",
  0
 ],
 [
  "public override imessage invoke (imessage msg) {",
  "invoke",
  0
 ],
 [
  "targetruntime targetruntime = null;\ttargetruntime defaultruntime = runtime.systemassemblyservice.defaultruntime;\tif (runtime != null) {\ttargetruntime = monotargetruntimefactory.registerruntime(new monoruntimeinfo(runtime));\tif (targetruntime != null) runtime.systemassemblyservice.defaultruntime = targetruntime;\t}\tibuildtarget item;\tif (solfile != null) item = await services.projectservice.readworkspaceitem (monitor, solfile) as ibuildtarget;\telse item = await services.projectservice.readsolutionitem (monitor, itemfile);\tif (item == null) {",
  "the file can t be built",
  0
 ],
 [
  "static void main (string[] args) {\tvar failcount = 0;",
  "correct case",
  0
 ],
 [
  "public void testremovebracesfromif() {\ttest<removebracesaction>(@\"class testclass {\tvoid test () {\t$if (true) {\t}\t}\t}\", @\"class testclass {\tvoid test () {",
  "hello",
  0
 ],
 [
  "actual = actual.union(values);\tbreak;\tcase operation.remove: if (expected.count > 0) {\tint position = random.next(expected.count);\tint element = expected.skip(position).first();\tassert.true(expected.remove(element));\tactual = actual.remove(element);\t}\tbreak;\tcase operation.except: var elements = expected.where(el => random.next(2) == 0).toarray();",
  "total known times",
  1
 ],
 [
  "poolid = this.poolfixture.poolid };\tcloudjob.commit();\t{\tconst string taskid = \"t1\";\tcloudtask tasktoadd = new cloudtask(taskid, \"ping 127.0.0.1 -n 60\");\tbatchcli.joboperations.addtask(jobid, tasktoadd);\tlist<cloudtask> tasks = batchcli.joboperations.listtasks(jobid).tolist();\tassert.equal(1, tasks.count);\ttaskstatemonitor taskstatemonitor = batchcli.utilities.createtaskstatemonitor();\ttaskstatemonitor.waitall( tasks, taskstate.running, timespan.fromseconds(30), new odatamonitorcontrol {delaybetweendatafetch = timespan.fromseconds(5)});",
  "try",
  1
 ],
 [
  "cloudjob boundjob = joboperations.getjob(jobid);\tconst string taskid = \"t1\";\tconst string taskmessage = \"this is a test\";\tcloudtask task = new cloudtask(taskid, string.format(\"cmd /c echo {0}\", taskmessage));\tboundjob.addtask(task);\tutilities utilities = batchcli.utilities;\ttaskstatemonitor taskstatemonitor = utilities.createtaskstatemonitor();\ttaskstatemonitor.waitall( joboperations.listtasks(jobid), taskstate.completed, timespan.fromseconds(30));\tnodefile file = joboperations.getnodefile(jobid, taskid, \"stdout.txt\");\tstring data = file.readasstring(encoding: encoding.utf8);",
  "data",
  0
 ],
 [
  "mres1.wait();\tcts.cancel();\tmres2.set();\ttry {\tc1.wait();\t}\tcatch (exception e) {\tassert.true(false, string.format(\"runlazycancellationtests: error. did not expect c1.wait() to throw an exception, got \" + e.tostring()));\t}\t}",
  "finished successfully",
  0
 ],
 [
  "public void rtsenable_get_handshake_xonxoff() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "invoke",
  1
 ],
 [
  "static securityelement loadxml (string filename) {\tif (!file.exists (filename)) {",
  "usage ilasm filename",
  1
 ],
 [
  "public cswriter(string filename) {\t_writer = new streamwriter(filename);",
  "error internal variable does not exist",
  1
 ],
 [
  "inputfilename = args [a + 1];\tinputfilestream = new streamreader (inputfilename);\t}\tbreak;\tcase \"o\": if (a + 1 >= args.length) console.writeline (\"error: missing filename for -o switch\");\telse {\toutputfilename = args [a + 1];\toutputfilestream = new streamwriter (outputfilename);\t}\tbreak;",
  "error unknow switch",
  0
 ],
 [
  "itaskitem newitem = new taskitem (source);\tnewitem.itemspec = outputfile;\ttemporaryfileswritten.add (newitem);\t}\t} else {\tif (sources.length != outputresources.length) {\treturn false;\t}\tfor (int i = 0; i < sources.length; i ++) {\tif (string.isnullorempty (outputresources [i].itemspec)) {",
  "filename of output can not be empty",
  0
 ],
 [
  "if (sn16.f3 != 3+9) {\treturn 3;\t}\tif (sn16.f4 != 4+9) {\treturn 4;\t}\tif (sn16.f5 != 5+9) {\treturn 5;\t}\tif (sn16.f6 != 6+9) {",
  "compute nodes",
  1
 ],
 [
  "static bool callsecondstructoperator() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturnstruct<int>();\tif ( (!(bool)(((dynamic)s[1]) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "did not return null for null uri namespace",
  1
 ],
 [
  "}\tthread.setdata(slot, main);\tthread storedthr=(thread)thread.getdata(slot);\tthread.setdata(namedslot, main);\tstoredthr=(thread)thread.getdata(namedslot);\tif(thr.join(5000)) {\t} else {\t}\tlock(thr) {\tmonitor.pulse(thr);",
  "message sender",
  1
 ],
 [
  "assert.throws<platformnotsupportedexception>(() => multi.istransient);\t}\tassert.notnull(ipproperties.unicastaddresses);\tforeach (unicastipaddressinformation uni in ipproperties.unicastaddresses) {\t_log.writeline(\"-- \" + uni.address.tostring());\tassert.throws<platformnotsupportedexception>(() => uni.addresspreferredlifetime);\tassert.throws<platformnotsupportedexception>(() => uni.addressvalidlifetime);\tassert.throws<platformnotsupportedexception>(() => uni.dhcpleaselifetime);\tassert.throws<platformnotsupportedexception>(() => uni.duplicateaddressdetectionstate);\tassert.notnull(uni.ipv4mask);",
  "mask",
  0
 ],
 [
  "public void testsimplemethodcall () {\tstring result = runcontextaction ( new createpropertyaction (), \"using system;\" + environment.newline + \"class testclass\" + environment.newline + \"{\" + environment.newline + \"\tvoid test ()\" + environment.newline + \"\t{\" + environment.newline + \"\t\tconsole.writeline ($foo);\" + environment.newline + \"\t}\" + environment.newline + \"}\" );",
  "using system class testclass object foo get set void test console writeline foo",
  0
 ],
 [
  "static int main () {",
  "friendly name",
  0
 ],
 [
  "subjectaltnameextension subjectaltname = new subjectaltnameextension (ext);\tforeach (string dns in subjectaltname.dnsnames) {\tif (match (targethost, dns)) return true;\t}\tforeach (string ip in subjectaltname.ipaddresses) {\tif (ip == targethost) return true;\t}\t}\treturn checkdomainname (mcert.subjectname, targethost);\t} catch (exception e) {",
  "please report this problem to the mono team",
  0
 ],
 [
  "public void sendalert(alert alert) {\talertlevel level;\talertdescription description;\tbool close;\tif (alert == null) {\tlevel = alertlevel.fatal;\tdescription = alertdescription.internalerror;\tclose = true;\t} else {",
  "write alert",
  0
 ],
 [
  "datacolumn = _tablemapping.getdatacolumn(_fieldnames[sortedindex], fieldtype, _datatable, mappingaction, schemaaction);\t}\tstring basetable = /*schemarow.baseservername+schemarow.basecatalogname+schemarow.baseschemaname+*/ schemarow.basetablename;\tif (null == datacolumn) {\tif (null == columnindexmap) {\tcolumnindexmap = createindexmap(schemarows.length, unsortedindex);\t}\tcolumnindexmap[unsortedindex] = -1;\tif (schemarow.iskey) {\t#if debug if (adapterswitches.dataschema.traceverbose) {",
  "there were requests executed",
  1
 ],
 [
  "public void pinchangedevent_ctschanged() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (serialport com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\tpinchangedeventhandler eventhandler = new pinchangedeventhandler(com1);",
  "verifying ctschanged event",
  0
 ],
 [
  "public static object ensuretype(object value,type targettype,object nullvalue) {\tif (value == null) return nullvalue;\tif (targettype == typeof(object)) return value;\tif (value.gettype() == targettype) return value;\ttry {\treturn convert.changetype(value, targettype,cultureinfo.currentculture);\t} catch (exception e) {",
  "typenormalizer",
  0
 ],
 [
  "public static void createlbnormalizationtestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<?xml version=\\\"1.0\\\" standalone=\\\"no\\\"?>\");\ttw.writeline(\"[\");\ttw.writeline(\"]>\");",
  "default",
  1
 ],
 [
  "if (logname == null || logname.length==0) logname = \"application\";\tif (!validlogname(logname, false)) throw new argumentexception(sr.getstring(sr.badlogname));\tif (source == null || source.length==0) throw new argumentexception(sr.getstring(sr.missingparameter, \"source\"));\tif (source.length + eventlogkey.length > 254) throw new argumentexception(sr.getstring(sr.parametertoolong, \"source\", 254 - eventlogkey.length));\teventlogpermission permission = new eventlogpermission(eventlogpermissionaccess.administer, machinename);\tpermission.demand();\tmutex mutex = null;\truntimehelpers.prepareconstrainedregions();\ttry {\tsharedutils.entermutex(eventlogmutexname, ref mutex);",
  "createeventsource calling sourceexists",
  0
 ],
 [
  "static private void help () {",
  "v pvk private key file",
  0
 ],
 [
  "}\tcontinue;\t}\ttypeofexpression t = param as typeofexpression;\tif (t != null && this.positionavailable) {\t#endif resolveresult rr = this.resolve(new typereferenceexpression(t.typereference), expressioncontext.type);\t#if debug if (rr == null) {\t} else {\t}\t#endif if (rr != null) {",
  "resourcetoolkit bclnrefactoryresourceresolver found typeof parameter type",
  0
 ],
 [
  "console.readline();\t#if !sqlite console.clear();\tconsole.writeline(\"from c in db.customers from o in c.orders where c.city == \\\"london\\\" select new { c, o };\");\tvar q5 = from c in db.customers from o in c.orders where c.city == \"london\" select new { c, o };\tforeach (var v in q4) objectdumper.write(v);\tconsole.readline();\t#endif #if !sqlite console.clear();\tconsole.writeline(\"from o in db.orders where o.customer.city == \\\"london\\\" select new { c = o.customer, o };\");\tvar q6 = from o in db.orders where o.customer.city == \"london\" select new { c = o.customer, o };\tforeach (var v in q4) objectdumper.write(v);",
  "press enter to continue",
  0
 ],
 [
  "if (retobj.tostring() != (obj + i)) {\t_output.writeline(\"{0} : {1}\", retobj, obj + i);\tassert.true(false);\t}\tm_xsltarg.clear();\t}\tfor (int i = 0; i < 200; i++) {\tm_xsltarg.addparam(\"myarg\" + i, szempty, obj + i);\tretobj = m_xsltarg.getparam(\"myarg\" + i, szempty);\tif (retobj.tostring() != (obj + i)) {",
  "failed in part to add remove iteration",
  0
 ],
 [
  "public static void main(string[] args) {\tilist<int> col1 = new linkedlist<int>(), col2 = new linkedlist<int>(), col3 = new linkedlist<int>();\tcol1.addall<int>(new int[] { 7, 9, 13 });\tcol2.addall<int>(new int[] { 7, 9, 13 });\tcol3.addall<int>(new int[] { 9, 7, 13 });\thashset<ilist<int>> hs1 = new hashset<ilist<int>>();\ths1.add(col1); hs1.add(col2); hs1.add(col3);",
  "is sane",
  0
 ],
 [
  "#endif return null;\t}\tdatacolumncollection columns = datatable.columns;\tdebug.assert(null != columns, \"getdatacolumnbyschemaaction: unexpected null datacolumncollection\");\tint index = columns.indexof(datasetcolumn);\tif ((0 <= index) && (index < columns.count)) {\tdatacolumn datacolumn = columns[index];\tdebug.assert(null != datacolumn, \"getdatacolumnbyschemaaction: unexpected null datacolumn\");\tif (!string.isnullorempty(datacolumn.expression)) {\t#if debug if (adapterswitches.dataschema.traceerror) {",
  "level",
  1
 ],
 [
  "static threadtrace() {\tlogfilename = environment.getenvironmentvariable(\"threadtrace\");\tif (logfilename == null) logfilename = \"\";\tisenabled = logfilename.length > 0;\tif (isenabled) {\tslot = thread.allocatedataslot();\tlogs = new list<threadlog>();\tnativemethods.queryperformancefrequency(out frequency);",
  "all",
  1
 ],
 [
  "public static int test_0_finally_after_try () {\tappdomain.currentdomain.unhandledexception += (obj, sender) => {\t};\tfinally_done = false;\tresult = 0;\taction ac = guardfromeh;\thandle = new manualresetevent (false);\tvar res = ac.begininvoke (null, null);\thandle.waitone ();",
  "aborting",
  0
 ],
 [
  "public void rtsenable_get_handshake_requesttosendxonxoff() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {",
  "verifying getting rtsenable with handshake set to requesttosendxonxoff",
  0
 ],
 [
  "public void loadurlresolver3(xslinputtype xslinputtype, readertype readertype) {\ttry {\tloadxsl_resolver(null, xslinputtype, readertype, new xmlurlresolver());\t}\tcatch (argumentnullexception e) {\t_output.writeline(e.tostring());\treturn;\t}",
  "output writeline maxstack",
  1
 ],
 [
  "}\titem = await services.projectservice.readsolutionitem (monitor, projectfile);\t}\tvar formats = msbuildfileformat.getsupportedformats ().toarray ();\tif (formats.length == 0) {\treturn 1;\t}\tmsbuildfileformat format = null;\tif (formatname == null || formatlist) {\tconsole.writeline ();",
  "target formats",
  0
 ],
 [
  "public void readtimeout_0_readbyte() {",
  "verifying ctschanged event",
  1
 ],
 [
  "public int testtextreadbinhex_23() {\tif (isroundtrippedreader()) return test_skipped;\tbyte[] buffer = new byte[5000];\tstring strxml = \"<b>\" + new string('a', 5000);\treloadsource(new stringreader(strxml));\tdatareader.positiononelement(\"b\");\tdatareader.read();\tif (checkcanreadbinarycontent()) return test_pass;\ttry {\tdatareader.readcontentasbinhex(buffer, 0, 5000);",
  "nodetype doesn t match",
  1
 ],
 [
  "static void main (string [] args) {\tif (!file.exists (\"genproj.cs\")) {\tenvironment.exit (1);\t}\tif (args.length == 1 && args [0].tolower ().contains (\"-h\")) {",
  "if output full solutions is false only the main system dll",
  0
 ],
 [
  "public void failedtaskcanbereactivated() {\taction test = () => {\tusing (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {\tstring jobid = constants.defaultconvenienceprefix + testutilities.getmyname() + guid.newguid();\ttry {\tcloudjob cloudjob = batchcli.joboperations.createjob(jobid, new poolinformation());\tcloudjob.poolinformation = new poolinformation() { poolid = this.poolfixture.poolid };\tcloudjob.commit();\tconst string taskid = \"t1\";\tcloudtask tasktoadd = new cloudtask(taskid, \"cmd /c \\\"ping 127.0.0.1 -n 20 > nul && exit /b 3\\\"\");",
  "adding task",
  0
 ],
 [
  "case microsoft.codeanalysis.symbolkind.namespace: result = getnamespacemarkup ((inamespacesymbol)entity);\tbreak;\tcase microsoft.codeanalysis.symbolkind.local: result = getlocalvariablemarkup ((ilocalsymbol)entity);\tbreak;\tcase microsoft.codeanalysis.symbolkind.parameter: result = getparametervariablemarkup ((iparametersymbol)entity);\tbreak;\tdefault: console.writeline (entity.kind);\treturn null;\t}\t} catch (exception e) {",
  "error cannot find an internal base type for",
  1
 ],
 [
  "public void readlineasync () {\tmemorystream ms = new memorystream ();\tstreamwriter sw = new streamwriter (ms, encoding.utf8);",
  "a",
  0
 ],
 [
  "w.writesurrogatecharentity('\\udf41', '\\ud920');\t}\tcatch (invalidoperationexception) {\ttestlog.compare(w.writestate, writestate.error, \"error\");\ttry {\tw.writesurrogatecharentity('\\udf41', '\\ud920');\t}\tcatch (invalidoperationexception) { return; }\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "r = func (10);\tconsole.writeline (\"should be 11={0}\", r);\tif (r != 11) return 2;\tnothing = (int x) => { y = x; };\tnothing (10);\tconsole.writeline (\"should be 10={0}\", y);\tif (y != 10) return 3;\tnothing = (int x) => { new x (x); };\tnothing (314);\tif (instantiated_value != 314) return 4;",
  "testing last error",
  1
 ],
 [
  "public void rtsenable_true_handshake_xonxoff() {",
  "verifying true rtsenable after setting handshake to xonxoff",
  0
 ],
 [
  "outputline (@\"                  oracle,postgresql,sqlite,sybase,tds)\");\toutputline (@\"       \\open to open the connection\");\toutputline (@\"       \\close to close the connection\");\toutputline (@\"       \\e to execute sql query (select)\");\toutputline (@\"       \\h to show help (all commands).\");\toutputline (@\"       \\defaults to show default variables.\");\toutputline (\"\");\t}\tpublic void showhelp () {\tconsole.writeline (\"\");",
  "open to open the connection",
  0
 ],
 [
  "public override bool tryinvokemember (invokememberbinder binder, object[] args, out object result) {",
  "setvalue",
  1
 ],
 [
  "public void loadspec() {",
  "loading spec from",
  0
 ],
 [
  "public static process[] getprocesses(string machinename) {\tbool isremotemachine = processmanager.isremotemachine(machinename);\tprocessinfo[] processinfos = processmanager.getprocessinfos(machinename);\tprocess[] processes = new process[processinfos.length];\tfor (int i = 0; i < processinfos.length; i++) {\tprocessinfo processinfo = processinfos[i];\tprocesses[i] = new process(machinename, isremotemachine, processinfo.processid, processinfo);\t}",
  "entity",
  1
 ],
 [
  "static byte [] outparametersresponse (socket socket) {\tstring responsecontent = \"<soap:envelope xmlns:soap=\\\"http: \"  <soap:body>\" + \"    <reqresponse2 xmlns=\\\"urn:foo\\\">\" + \"      <hits>erere</hits>\" + \"    </reqresponse2>\" + \"  </soap:body>\" + \"</soap:envelope>\";\tstringwriter sw = new stringwriter ();",
  "http ok",
  0
 ],
 [
  "if ( --level == 0) {\ttrace.writeline( \"############################################################################\" );\tif (messages.count == 0) {\t}\telse {\tforeach ( string s in messages ) {\ttrace.writeline(s);\t}\t}\ttrace.writeline( \"############################################################################\" );",
  "value moved",
  1
 ],
 [
  "}\treturn false;\t}\txmlnamespacemanager xmlnamespacemanager = new xmlnamespacemanager (nav.nametable);\ttry {\tloadnamespaces (ref xmlnamespacemanager, _namespaces);\t} catch (exception e) {\tif (iscriticalexception (e)) {\tthrow;\t}",
  "reflection said value is",
  1
 ],
 [
  "protected virtual void teardown () {\tint c = application.openforms.count;\tif (c > 0) {",
  "testsuite",
  1
 ],
 [
  "public static int test_0_marshal_handleref_argument () {\tobject o = new object ();\thandleref s = new handleref (o, (intptr) 0xeadcafe);\tif (mono_xr (s) != (0xeadcafe + 1234)) return 1;",
  "failed to launch browser because invalid launch url",
  1
 ],
 [
  "if (startsentinel == null) {\treturn retval;\t}\tint count = 0;\tnode node = startsentinel.next, prev = startsentinel;\t#if hashindex int taggroupsize = 0, oldtaggroupsize = losize + 1, seentaggroups = 0;\ttaggroup oldtg = null;\tif (underlying == null) {\ttaggroup tg = startsentinel.taggroup;\tif (tg.count != 0 || tg.first != null || tg.last != null || tg.tag != int.minvalue) {",
  "bad startsentinel tag group",
  0
 ],
 [
  "public static int main () {\tvar r = test1 ();\tif (!task.waitall (new [] { r }, 1000)) return 1;",
  "ok",
  0
 ],
 [
  "private static bool callsecondstructindexer() {\tint failcount = 0;\tverify.firstcalled = false;\tdynamic d = new firstclassreturnstruct();\tif ((!(((secondstruct)d[1])[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public static void notnull(object value) {\tif (value != null) return;",
  "timer fired at mm ss ffffff",
  1
 ],
 [
  "thread.setdata(namedslot, thr);\tstoredthr=(thread)thread.getdata(namedslot);\tlock(thr) {\tthread.sleep(1500);\t}\tlock(thr) {\tmonitor.wait(thr);\t}\tthread.sleep(10000);\tthread storedthr2=(thread)thread.getdata(slot);",
  "stored subthread is still",
  0
 ],
 [
  "if (!directory.exists(userschemafolder)) {\tdirectory.createdirectory (userschemafolder);\t}\tstring filename = path.getfilename (schemadata.filename);\tstring destinationfilename = path.combine (userschemafolder, filename);\tfile.copy (schemadata.filename, destinationfilename);\tschemadata.filename = destinationfilename;\tuserschemas.add (schemadata);\tonuserschemaadded ();\t} else {",
  "xmlschemamanager cannot register two schemas with the same namespace",
  0
 ],
 [
  "public void buildrepository (iprogressstatus statusmonitor, string path) {\tstring mainpath = path.combine (path, \"main.mrep\");\tarraylist alladdins = new arraylist ();\trepository rootrep = (repository) addinstore.readobject (mainpath, typeof(repository));\tif (rootrep == null) rootrep = new repository ();\tiprogressmonitor monitor = progressstatusmonitor.getprogressmonitor (statusmonitor);\tbuildrepository (monitor, rootrep, path, \"root.mrep\", alladdins);\taddinstore.writeobject (mainpath, rootrep);\tgenerateindexpage (rootrep, alladdins, path);",
  "updated main mrep",
  0
 ],
 [
  "ar2 = (actionref2) delegate.createdelegate(typeof (actionref2), es, typeof (emptystruct).getmethod(\"test\"));\tif (ar2 () != 110) {\treturn 4;\t}\ttry {\tdelegate.createdelegate(typeof (actionref2), new emptystruct (), typeof (emptystruct).getmethod(\"test2\"));\treturn 5;\t} catch (argumentexception) {}\ttry {\tdelegate.createdelegate(typeof (actionref3), typeof (emptystruct).getmethod(\"test\"));",
  "else",
  1
 ],
 [
  "string keyversion = inputvalidator.getkeyversion();\tif (keyversion != string.empty) {\tvar vaultaddress = inputvalidator.getvaultaddress();\tstring keyname = inputvalidator.getkeyname(true);\tsignature = task.run(() => keyvaultclient.signasync(vaultaddress, keyname, keyversion, algorithm, digest)).configureawait(false).getawaiter().getresult();\t}\telse {\tvar keyid = (key != null) ? key.key.kid : inputvalidator.getkeyid();\tsignature = task.run(() => keyvaultclient.signasync(keyid, algorithm, digest)).configureawait(false).getawaiter().getresult();\t}",
  "the signature is created using key id and algorithm",
  0
 ],
 [
  "public static void runcontinuewithbase_exceptioncases( taskcontinuationoptions options, action initran, func<task, task> continuationmaker, func<bool> ranvalue, bool taskisfuture) {\t{\tbool expect = (options & taskcontinuationoptions.notonfaulted) == 0;\ttask task;\tif (taskisfuture) task = task<string>.factory.startnew(delegate { throw new exception(\"boom\"); });\telse task = task.factory.startnew(delegate { throw new exception(\"boom\"); });\ttry { task.wait(); }\tcatch (aggregateexception) { /*swallow(ouch)*/ }",
  "value doesn t match",
  1
 ],
 [
  "public override void applychanges () {",
  "configurationoptionspanel applychanges",
  0
 ],
 [
  "public static void usage (string message) {\tif (message != null) {\tconsole.writeline (\"{0}{1}{0}\", environment.newline, message);\t}",
  "build",
  1
 ],
 [
  "static bool paranoidsave (string filename, string friendlyname, action<streamwriter> write) {\tstring backupfilename = filename + \".previous\";\tstring dir = path.getdirectoryname (filename);\tstring tempfilename = path.combine (dir, \".#\" + path.getfilename (filename));\ttry {\tif (!directory.exists (dir)) {\tdirectory.createdirectory (dir);\t}\t} catch (ioexception ex) {",
  "helper thread was gracefully interrupted",
  1
 ],
 [
  "private static bool callsecondinterfaceinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tdynamic d = new firstclassreturninterface<int>();\tif ((!(((secondinterface<int>)d[1]).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public override void renderendtag () {",
  "ok",
  1
 ],
 [
  "if (s9.f5 != 5+90) {\treturn 5;\t}\tif (s9.f6 != 6+90) {\treturn 6;\t}\tif (s9.f7 != 7+90) {\treturn 7;\t}\tif (s9.f8 != 8+90) {",
  "caught for single param",
  1
 ],
 [
  "s = sr.readtoend ();\t}\tusing (streamwriter sw = new streamwriter (args [3], false, encoding.getencoding (int.parse (args [2])))) {\tsw.write (s);\t}\tstring s2;\tusing (streamreader sr = new streamreader (args [3], encoding.getencoding (int.parse (args [2])))) {\ts2 = sr.readtoend ();\t}\tif (s != s2) {",
  "failure",
  0
 ],
 [
  "public static bool getcommstate (intptr hfile, ref dcb lpdcb) {",
  "getcommstate called",
  0
 ],
 [
  "public object builditem(builditemargs args) {\ttype providertype = args.addin.findtype(args.codon.properties[\"class\"]);\tif (providertype == null) return null;\tvar attributes = providertype.getcustomattributes(typeof(contextactionattribute), true);\tif (attributes.length == 0) {\treturn null;\t}\tif (!typeof(codeactionprovider).isassignablefrom(providertype)) {",
  "performancecounter instancenames start",
  1
 ],
 [
  "xtr.close ();\t}\tforeach (fileinfo inst in di.getfiles (\"*.xml\")) {\ttry {\trelaxngvalidatingreader vr = new relaxngvalidatingreader (new xmltextreader (inst.fullname), p);\tif (skip_error) vr.invalidnodefound += relaxngvalidatingreader.ignoreerror;\twhile (!vr.eof) vr.read ();\tif (inst.name.indexof (\"i.\") >= 0 && !skip_error) console.writeline (\"incorrectly validated instance: \" + di.name + \"/\" + inst.name);\t} catch (relaxngexception ex) {\tstring path = di.name + \"/\" + inst.name;",
  "failed to skip error",
  0
 ],
 [
  "public void pi_13(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writeprocessinginstruction(\"pi\", \"\\ud812\");\tw.writeendelement();\t}\tcatch (argumentexception e) {",
  "exception",
  0
 ],
 [
  "static void function () {",
  "delegate method",
  0
 ],
 [
  "public void greedyread() {\tusing (serialport com1 = tcsupport.initfirstserialport()) using (serialport com2 = tcsupport.initsecondserialport(com1)) {\tchar[] charxmitbuffer = tcsupport.getrandomchars(128, tcsupport.characteroptions.surrogates);\tvar bytexmitbuffer = new byte[1024];\tchar[] expectedchars;\tstring rcvstring;\tchar[] actualchars;\tchar utf32char = tcsupport.generaterandomcharnonsurrogate();\tbyte[] utf32charbytes = encoding.utf32.getbytes(new char[] { utf32char });\tint numbytes;",
  "verifying that readline will read everything from internal buffer and drivers buffer",
  0
 ],
 [
  "static void run() {\tprocess proc = new process();\tbool ret;\tproc.startinfo.filename=\"wibble-redir\";\tproc.startinfo.arguments=\"arg1    arg2\\targ3 \\\"arg4a arg4b\\\"\";\tproc.startinfo.useshellexecute=false;\tproc.startinfo.redirectstandardinput=true;\tret=proc.start();",
  "couldn t find permission set in policy",
  1
 ],
 [
  "protected static string getsidpathfromprincipal(principal p) {\tdebug.assert(p.unpersisted == false);\tif (p.fakeprincipal) {\tsecurityidentifier sid = p.sid;\tif (sid == null) {",
  "cout writeline",
  1
 ],
 [
  "public static void main () {\tgoto end;\tint a;",
  "unreachable",
  0
 ],
 [
  "var result = new colorscheme ();\tresult.name = path.getfilenamewithoutextension (filename);\tresult.description = \"imported color scheme\";\tresult.originator = \"imported from \" + filename;\tvar colors = new dictionary<string, vssettingcolor> ();\tusing (var reader = xmlreader.create (stream)) {\twhile (reader.read ()) {\tif (reader.localname == \"item\") {\tvar color = vssettingcolor.create (reader);\tif (colors.containskey (color.name)) {",
  "result changed due to fewer unmodified locations for fields since entry",
  1
 ],
 [
  "private static bool test4() {\tdynamic a = ulong.maxvalue;\tulong b = ~~a;\tif (b == ulong.maxvalue) return true;",
  "failed ulong",
  0
 ],
 [
  "public object call(string typename, string methodname, object[] args) {\ttype type = this.assembly.gettype (typename);\tif (type == null) {\t}\tvar method = type.getmethod (methodname, bindingflags.public | bindingflags.nonpublic | bindingflags.static);\tif (method == null) {",
  "cannot get method",
  0
 ],
 [
  "array.reverse (allocationstatistics);\tuint totalallocatedbytes = 0;\tforeach (heapsnapshot.allocationstatisticsperclass s in allocationstatistics) {\ttotalallocatedbytes += s.allocatedbytes;\t}\tforeach (heapsnapshot.allocationstatisticsperclass s in allocationstatistics) {\tif (s.allocatedbytes > 0) {\t}\t}\t} else {",
  "pool count",
  1
 ],
 [
  "public static void main(string[] args) {\tilist<char> lst = new arraylist<char>();\tlst.addall<char>(new char[] { 'a', 'b', 'c', 'd' });\tilist<char> v1 = lst.view(1, 1);\tconsole.writeline(\"v1 = {0}\", v1);\tinsertbeforefirst(v1, '<', 'b');\tinsertafterfirst(v1, '>', 'b');\tconsole.writeline(\"v1 = {0}\", v1);\tchar x;",
  "c has no predecessor",
  0
 ],
 [
  "outputline (@\"                  oracle,postgresql,sqlite,sybase,tds)\");\toutputline (@\"       \\open to open the connection\");\toutputline (@\"       \\close to close the connection\");\toutputline (@\"       \\e to execute sql query (select)\");\toutputline (@\"       \\h to show help (all commands).\");\toutputline (@\"       \\defaults to show default variables.\");\toutputline (\"\");\t}\tpublic void showhelp () {\tconsole.writeline (\"\");",
  "x",
  1
 ],
 [
  "public static string formatxml (textstylepolicy textpolicy, xmlformattingpolicy formattingpolicy, string input) {\txmldocument doc;\ttry {\tdoc = new xmldocument ();\tdoc.xmlresolver = null;\tdoc.loadxml (input);\t} catch (xmlexception ex) {\tif (ex.message == \"root element is missing.\") return input;",
  "error formatting xml file",
  0
 ],
 [
  "public void document_12(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartdocument();\tw.writestartelement(\"root\");\tw.writeendelement();\tint i = 1;\tw.writevalue(i);\t}\tcatch (invalidoperationexception e) {",
  "exception",
  0
 ],
 [
  "var pd = await typesystemservice.parsefile (project, realpath) as webformsparseddocument;\tif (pd != null) {\ttry {\tcontentplaceholders.addrange (pd.xdocument.getallplaceholderids ());\tfor (int i = 0; i < contentplaceholders.count; i++) {\tstring placeholder = contentplaceholders[i];\tprimaryplaceholderstore.appendvalues (placeholder);\tif (placeholder.contains (\"main\") || placeholder.contains (\"main\") || placeholder.contains (\"content\") || placeholder.contains (\"content\")) placeholdercombo.active = i;\t}\t} catch (exception ex) {",
  "unhandled exception getting master regions for",
  0
 ],
 [
  "private async task fullrunasync() {\treport[] reports = await task.whenall(enumerable.range(0, 20).select(i => runasync(i, 5000, 300)));\treport finalreport = new report();\tforeach (report report in reports) {\tfinalreport.succeeded += report.succeeded;\tfinalreport.failed += report.failed;\tfinalreport.elapsed = timespan.frommilliseconds(math.max(finalreport.elapsed.totalmilliseconds, report.elapsed.totalmilliseconds));\t}",
  "fail timeout",
  1
 ],
 [
  "public void bug1771070_1771072_jobandpoollifetimestats() {\taction test = () => {\tusing (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {\tjobstatistics jobstatistics = batchcli.joboperations.getalllifetimestatistics();\tpoolstatistics poolstatistics = batchcli.pooloperations.getalllifetimestatistics();\tassert.notnull(jobstatistics);\tassert.notnull(poolstatistics);",
  "poolstatistics starttime",
  0
 ],
 [
  "public static int main () {\ti.gettextfn _ = i.gettext;\tx x = new x ();\tthread thr = new thread (new threadstart (x.thread_func));\tthr.start ();\tthr.join ();",
  "stored subthread is",
  1
 ],
 [
  "private async task fullrunasync() {\treport[] reports = await task.whenall(enumerable.range(0, 200).select(i => runasync(i, 100, timespan.fromseconds(30))));\treport finalreport = new report();\tforeach (report report in reports) {\tfinalreport.succeeded += report.succeeded;\tfinalreport.failed += report.failed;\tfinalreport.elapsed = timespan.frommilliseconds(math.max(finalreport.elapsed.totalmilliseconds, report.elapsed.totalmilliseconds));\t}",
  "instance dispose",
  1
 ],
 [
  "public static int main () {\tvar tests = from test in typeof (tester).getmethods (bindingflags.instance | bindingflags.nonpublic | bindingflags.declaredonly) where test.getparameters ().length == 0 orderby test.name select runtest (test);\tint failures = tests.count (a => !a);",
  "count",
  1
 ],
 [
  "public void dtrenable_true_false_afteropen() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "finished layout on panel",
  1
 ],
 [
  "public void transformstrstr7(xslinputtype xslinputtype, readertype readertype) {\tstring szfullfilename = fullfilepath(\"fruits.xml\");\tif (loadxsl(\"showparam.xsl\", xslinputtype, readertype) == 1) {\ttry {\txslt.transform(szfullfilename, szempty);\t}\tcatch (system.argumentexception) {\treturn;\t}\t}",
  "exception not generated for empty output file name",
  0
 ],
 [
  "if (s15.f11 != 11+9) {\treturn 11;\t}\tif (s15.f12 != 12+9) {\treturn 12;\t}\tif (s15.f13 != 13+9) {\treturn 13;\t}\tif (s15.f14 != 14+9) {",
  "bad",
  1
 ],
 [
  "private void attributeidentityconstraints(string name, string ns, object obj, string sobj, xmlschemadatatype datatype) {\tfor (int ci = this.startidconstraint; ci < this.validationstack.length; ci ++) {\tif (((validationstate)(this.validationstack[ci])).constr == null) {\tcontinue;\t}\tconstraintstruct[] constraintstructures = ((validationstate)this.validationstack[ci]).constr;\tfor (int i = 0; i < constraintstructures.length; ++i) {\tfor (int j = 0; j < constraintstructures[i].axisfields.count; ++j) {\tlocatedactiveaxis laxis = (locatedactiveaxis)constraintstructures[i].axisfields[j];\tif (laxis.movetoattribute(name, ns)) {",
  "name uri value",
  0
 ],
 [
  "options.generatemodifiedonly = true;\tgenerationresult = steticapp.generateprojectcode (options, info.guibuilderproject.steticproject);\tinfo.guibuilderproject.steticproject.resetmodifiedwidgetflags ();\t} catch (exception ex) {\tgeneratedexception = ex;\t}\tgenerating = false;\t}\ttimer.trace (\"writing code units\");\tif (generatedexception != null) {",
  "hello world",
  1
 ],
 [
  "public void print () {\tresult.printoutput ();",
  "thread b i m before wait for event",
  1
 ],
 [
  "static void main () {\ttry {\ts = new subclient ();\t} catch {\t}",
  "using system",
  1
 ],
 [
  "public static void createutf8encodedtestfile(string strfilename, encoding encode) {\tfilepathutil.addstream(strfilename, new memorystream());\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename), encode);\ttw.write(\"\ufffd\");",
  "root",
  0
 ],
 [
  "static void main () {",
  "verifying properties after bytes have been read",
  1
 ],
 [
  "this.componentchangeservice.componentchanging += new componentchangingeventhandler(oncomponentchanging);\t}\tmenucommandservice = (menucommandservice)getservice(typeof(menucommandservice));\tif (menucommandservice != null) {\tm_menucommands = new menucommand[]\t{\tnew menucommand(new eventhandler(onmenucut), standardcommands.cut), new menucommand(new eventhandler(onmenucopy), standardcommands.copy), new menucommand(new eventhandler(onmenudelete), standardcommands.delete) };\tforeach(menucommand mc in m_menucommands) {\tm_menucommandservice.addcommand(mc);\t}",
  "failed silent success",
  1
 ],
 [
  "}\twriteline ();\tif (detailed) {\t}\twriteline ();\twriteline (\"-?\");\twriteline ();\tif (!detailed) return;\twriteline ();\twriteline ();",
  "nodetype doesn t match",
  1
 ],
 [
  "public void ipinfotest_accessallipv6properties_noerrors() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfaceproperties ipproperties = nic.getipproperties();\tipv6interfaceproperties ipv6properties = ipproperties.getipv6properties();\tif (ipv6properties == null) {\tcontinue;\t}",
  "mtu",
  0
 ],
 [
  "case microsoft.codeanalysis.symbolkind.namespace: result = getnamespacemarkup ((inamespacesymbol)entity);\tbreak;\tcase microsoft.codeanalysis.symbolkind.local: result = getlocalvariablemarkup ((ilocalsymbol)entity);\tbreak;\tcase microsoft.codeanalysis.symbolkind.parameter: result = getparametervariablemarkup ((iparametersymbol)entity);\tbreak;\tdefault: console.writeline (entity.kind);\treturn null;\t}\t} catch (exception e) {",
  "error while getting markup for",
  0
 ],
 [
  "static void writehelp () {\tconsole.writeline ();",
  "system argumentnullexception not thrown for param name empty string",
  1
 ],
 [
  "public static void run(string connectionstring) {",
  "starting outputparameter tests",
  0
 ],
 [
  "public override idisposable writepropertyset() {",
  "reader positioned on",
  1
 ],
 [
  "byte[] bytes = new byte[] { 0x45,0x46,0x47,0x48,0x49,0x50 };\tmyrow[\"varchar2_value\"] = \"oracleclient\";\tmyrow[\"number_whole_value\"] = 22;\tmyrow[\"number_scaled_value\"] = 12.34;\tmyrow[\"number_integer_value\"] = 456;\tmyrow[\"float_value\"] = 98.76;\tmyrow[\"date_value\"] = new datetime(2001,07,09);\tmyrow[\"clob_value\"] = \"clobtest\";\tmyrow[\"blob_value\"] = bytes;\tds.tables[\"mono_adapter_test\"].rows.add(myrow);",
  "da update ds",
  0
 ],
 [
  "public byte[] getplaintext() {\tvar tag = \"-text\";\tvar text = getargumentvalue( tag );\tif ( text == string.empty ) {",
  "c compiler crashed response file stdout file stderr file",
  1
 ],
 [
  "if (! resign (filename, rsa, quiet)) return 1;\tbreak;\tcase \"-t\": sn = new strongname (readfromfile (args [i]));\tbreak;\tcase \"-tp\": sn = new strongname (readfromfile (args [i]));\tbreak;\tcase \"-t\": an = assemblyname.getassemblyname (args [i++]);\tbyte [] pkt = an.getpublickeytoken ();\tif (pkt == null) {\t} else {",
  "bad command line arguments supplied",
  1
 ],
 [
  "var results = rewriter.rewrite (options);\tif (results.anyerrors) {\tforeach (var error in results.errors) {\t}\t}\tif (results.anywarnings) {\tforeach (var warning in results.warnings) {\t}\t}\tconsole.writeline ();",
  "capacity",
  1
 ],
 [
  "if (s_prefixtonamespacedesk.trygetvalue(deskprefix, out deskns)) {\tif (s_prefixtonamespacecoreclr.trygetvalue(coreclrprefix, out coreclrns)) {\tif (deskns.equals(coreclrns)) {\tif (0 == string.compare(deskelemvalue.substring(deskprefix.length), coreclrelemvalue.substring(coreclrprefix.length))) return true;\t}\t}\t}\t}\treturn false;\t}",
  "attribute value has empty prefix value before",
  0
 ],
 [
  "public int getextnobject1(object args) {\tobject retobj;\tfor (int i = 1; i <= 100; i++) {\tretobj = xsltarg1.getextensionobject(((object[])args)[1].tostring());\tif (((myobject)retobj).myvalue() != 1) {",
  "access friend private static method ok",
  1
 ],
 [
  "static void isstaticconstructor6viable () {",
  "generating",
  1
 ],
 [
  "entry = console.readline ();\t}\treturn entry;\t}\tpublic string readconnectionoption(string option, string defaultval) {\tconsole.error.write (\"\\nconnectionstring option: {0} [{1}] sql# \", option, defaultval);\treturn console.readline ();\t}\tpublic void buildconnectionstring () {\tif (factory == null) {",
  "provider is not set",
  0
 ],
 [
  "options.serviceid = servicename.tostring();\toptions.clusterid = \"development\";\t});\tbuilder.useazurestorageclustering(options => options.connectionstring = \"usedevelopmentstorage=true\");\tbuilder.configureapplicationparts(parts => parts.addapplicationpart(typeof(icalculatorgrain).assembly));\tbuilder.configurelogging(logging => logging.adddebug());\tvar client = builder.build();\tawait client.connect();\tdouble result;\tif (args.length < 1) {",
  "else writer writeusingnamespace linq",
  1
 ],
 [
  "static void main (string[] args) {\tint n = args.length;\tif (n < 2) {\theader ();",
  "current configuration",
  0
 ],
 [
  "static private void help () {",
  "tw delay between retries",
  0
 ],
 [
  "ipendpoint expected;\tdo {\tproxykey = guid.newguid();\tproxy = grainfactory.getgrain<irandomplacementtestgrain>(proxykey);\texpected = await proxy.getendpoint();\t} while (!targetsilo.equals(expected));\tguid grainkey = proxykey;\tawait proxy.startpreferlocalgrain(grainkey);\tipreferlocalplacementtestgrain grain = grainfactory.getgrain<ipreferlocalplacementtestgrain>(grainkey);\tipendpoint actual = await grain.getendpoint();",
  "preferlocalplacement grain was originally located on silo",
  0
 ],
 [
  "try {\tw.writestartelement(\"root\");\tw.writeattributestring(\"xmlns\", \"foo\", \"bar\", \"\");\tw.writeendelement();\t}\tcatch (argumentexception) {\ttestlog.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "});\tif(base.cancellationpending) return;\tlock(lockcounter) {\tcounter++;\tdispatchservice.guisyncdispatch (delegate {\tideapp.workbench.statusbar.setprogressfraction (counter / (double)totalprojects);\t});\t}\t}\t} catch (exception ex) {",
  "usage options dtdfile ns",
  1
 ],
 [
  "public static void main () {\ta a = new a (8);\tb b = new b (9);\tb.setcount (10);",
  "using system collections generic",
  1
 ],
 [
  "static void printglobalinfo () {",
  "exception in menu processing",
  1
 ],
 [
  "oraclelob blob = readerz.getoraclelob (1);\tbyte[] bytes = new byte[6] { 0x31, 0x32, 0x33, 0x34, 0x35, 0x036 };\tblob.write (bytes, 0, bytes.length);\tblob.close ();\treaderz.close();\tselect.transaction.commit();\tselect.dispose();\tselect = null;\tcmd.commandtext = \"commit\";\tcmd.executenonquery();",
  "create package",
  0
 ],
 [
  "public void basictest_getipinterfacestatistics_success_osx() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfacestatistics stats = nic.getipstatistics();\tassert.throws<platformnotsupportedexception>(() => stats.outgoingpacketsdiscarded);",
  "unicastpacketssent",
  0
 ],
 [
  "public static datacolumn getdatacolumn(datacolumnmappingcollection columnmappings, string sourcecolumn, type datatype, datatable datatable, missingmappingaction mappingaction, missingschemaaction schemaaction) {\tif (null != columnmappings) {\tint index = columnmappings.indexof(sourcecolumn);\tif (-1 != index) {\t#if debug if (adapterswitches.dataschema.traceinfo) {",
  "set and retrieved value appear to be different for urn my object",
  1
 ],
 [
  "static x509certificatecollection decodecollection () {\tx509certificatecollection roots = new x509certificatecollection ();\tstringbuilder sb = new stringbuilder ();\tbool processing = false;\tusing (stream s = getfile ()) {\tif (s == null) {",
  "couldn t retrieve the file using the supplied information",
  0
 ],
 [
  "private static void main(string[] args) {",
  "verifying space parity after open",
  1
 ],
 [
  "public static void createxmlspacetestfile(string strfilename) {\tstream s = new memorystream();\ttextwriter tw = new streamwriter(s);",
  "sdscache getcontext final contextname is",
  1
 ],
 [
  "task task;\tif (taskisfuture) task = task<string>.factory.startnew(delegate { throw new exception(\"boom\"); });\telse task = task.factory.startnew(delegate { throw new exception(\"boom\"); });\ttry { task.wait(); }\tcatch (aggregateexception) { /*swallow(ouch)*/ }\tinitran();\tbool cancel = false;\ttask cont = continuationmaker(task);\ttry { cont.wait(); }\tcatch (aggregateexception ex) { if (ex.innerexceptions[0] is taskcanceledexception) cancel = true; }",
  "finished wait",
  0
 ],
 [
  "public static void displayjobschedulelong(itestoutputhelper testoutputhelper, cloudjobschedule curwi) {\t{\tjobscheduleexecutioninformation wiexinfo = curwi.executioninformation;",
  "recentjob",
  0
 ],
 [
  "result = diff.compare(new xmltextreader(fsactual, xmlnodetype.element, context), new xmltextreader(fsexpected, xmlnodetype.element, context));\t}\tcatch (exception e) {\t_output.writeline(e.tostring());\t}\tfinally {\tfsexpected.dispose();\tfsactual.dispose();\t}\tif (!result) {",
  "test failed at call result",
  1
 ],
 [
  "public override string tostring () {\tstringwriter sw = new stringwriter ();",
  "presenttotal",
  0
 ],
 [
  "public void testremovebracesfromdowhile() {\ttest<removebracescoderefactoringprovider>(@\"class testclass {\tvoid test() {\t$do {\t} while (true);\t}\t}\", @\"class testclass {\tvoid test() {",
  "stats",
  1
 ],
 [
  "}\taf.certificates.addrange (certs);\tif (!af.sign (tbsfilename)) {\treturn 1;\t}\t} else if (af.timestampurl != null) {\tbool ts = false;\tfor (int j = 0; j < timestampretry && !ts; j++) {\tts = af.timestamp (tbsfilename);\tif (!ts && (j < timestampretry - 1)) {",
  "couldn t timestamp file will retry in ms",
  0
 ],
 [
  "public void writeafterclose() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {",
  "verifying write method throws exception after a call to cloes",
  0
 ],
 [
  "private static bool callsecondinterfaceinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tdynamic d = new firstclassreturninterface<int>();\tif ((!(((secondinterface<int>)d.instanceproperty).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "processing folder",
  1
 ],
 [
  "static int handledefaultconfig (mconfigoptions options, configuration config) {\tfeaturetarget target = options.target;\tstring[] commandarguments = options.plainarguments;\tstring configname, targetpath;\tif (commandarguments.length < 2) {\tswitch (target) {",
  "no default config file for target any",
  0
 ],
 [
  "public void testdisable() {\tanalyze<redundantunsafecontextanalyzer>(@\" #pragma warning disable \" + csharpdiagnosticids.redundantunsafecontextanalyzerid + @\" unsafe class foo {\tpublic static void main(string[] args) {",
  "hello",
  0
 ],
 [
  "public async task activationsched_whenany() {\ttaskscheduler scheduler = this.masterscheduler.getworkitemgroup(this.context).taskrunner;\tmanualresetevent pause1 = new manualresetevent(false);\tmanualresetevent pause2 = new manualresetevent(false);\tvar finish = new taskcompletionsource<bool>();\ttask<int> task1 = null;\ttask<int> task2 = null;\ttask join = null;\ttask wrapper = new task(() => {\ttask1 = task<int>.factory.startnew(() => {",
  "the mono jscript compiler is copyright c cesar lopez nataren copyright c novell inc the compiler source code is released under the terms of both the mit and mpl the compiler was written by cesar lopez nataren",
  1
 ],
 [
  "public static int test_0_abort_proxy () {\ttest test = (test) domain.createinstanceandunwrap (typeof (test).assembly.fullname, typeof (test).fullname);\tif (!remotingservices.istransparentproxy (test)) {",
  "test is no proxy",
  0
 ],
 [
  "static void main (string[] args) {\tif (args.length != 1|| !file.exists (args[0])) {",
  "usage assemblyinfowriter inputfile",
  0
 ],
 [
  "private static void main(string[] args) {\tif (args.length == 0) {",
  "mono is not installed",
  1
 ],
 [
  "public static int main () {\tstring foo = \"bar\";\tint baz = 42;\tvar v = new { foo, baz };\tif (v.foo != \"bar\") return 1;\tif (v.baz != 42) return 2;\tif (!testa (\"foo\").equals (new { s = \"foo\" })) return 3;",
  "ok",
  0
 ],
 [
  "}\tadditemtoallowrollback(ref addeditems, datacolumn);\tcolumncollection.add(datacolumn);\t}\tif (addprimarykeys && schemarow.iskey) {\tif (keys == null) {\tkeys = new datacolumn[schemarows.length];\t}\tkeys[keycount++] = datacolumn;\t#if debug if (adapterswitches.dataschema.traceverbose) {",
  "short",
  1
 ],
 [
  "public void assertareequal(string[] want, string[] got, string name) {\tif (want.length == got.length) {\tfor (int i=0; i < want.length; i++) {\tif (want[i] != got[i]) {",
  "expected got",
  0
 ],
 [
  "public static bool writefile(intptr hfile, byte [] lpbuffer, uint nnumberofbytestowrite, out uint lpnumberofbyteswritten, intptr lpoverlapped) {",
  "writefile called",
  0
 ],
 [
  "public void dumpreader (xmlreader xr, bool attvalue) {",
  "isemptyelement",
  0
 ],
 [
  "static void writehelp () {\tconsole.writeline ();",
  "ia inputassemblyfile assembly assembly that contains the types to export",
  0
 ],
 [
  "typereference ctype = eh.catchtype;\tif (!(ctype == null || ctype.isnamed (\"system\", \"object\") || ctype.isnamed (\"system\", \"exception\"))) continue;\tint start_index = instructions.indexof (eh.trystart);\tint end_index = instructions.indexof (eh.tryend);\tfor (int j = start_index; j < end_index; j++) is_safe [j] = true;\t}\t}\tvalid_ex_handler = !is_safe.contains (false);\tfor (int i = 0; i < is_safe.count; i++) {\t}",
  "handlertype trystart tryend handlerstart handlerend filterstart catchtype",
  0
 ],
 [
  "catch(sqlexception se) {\tforeach(sqlerror error in se.errors) {\t}\texception ie = se.innerexception;\tif(ie != null) {\t}\treturn;\t}\tidbcommand cmd = con.createcommand();\tcmd.commandtext = sql;",
  "execute reader",
  0
 ],
 [
  "_output.writeline(e2.message);\tif (xslinputtype == xslinputtype.uri) return;\telse {\tassert.true(false);\t}\t}\tcatch (xmlexception e3) {\t_output.writeline(e3.message);\tif (xslinputtype == xslinputtype.uri) return;\telse {",
  "visualid",
  1
 ],
 [
  "animationfactory.trygetvalue (id, out animatedicon);\t} else if (!string.isnullorempty (animation)) {\tstring id = getstockidforimagespec (addin, \"animation:\" + animation, iconsize);\timg = geticon (id, iconsize);\tanimationfactory.trygetvalue (id, out animatedicon);\t}\tif (animatedicon != null) addtoanimatediconfactory (stockid, animatedicon);\tif (imageloader != null) img.setstreamsource (imageloader);\treturn img;\t} catch (exception ex) {",
  "error loading icon",
  0
 ],
 [
  "tr.write(\"ref \");\t}\ttr.write(param.name);\t}\ttr.write(\");\");\ttr.write(@\" }\tcatch (exception ex) {\t\");\tif (!isvoid) {\tstring retuntypewithoutmarshalas = marshalas == -1 ? returntype : returntype.substring(marshalas + 1);",
  "return default",
  0
 ],
 [
  "} else {\tappendquoted (sb, \"/win32icon:\", projectparameters.win32icon);\t}\t}\tif (projectparameters.codepage != 0) sb.append (\"/codepage:\").appendline (projectparameters.codepage.tostring ());\telse if (runtime is monotargetruntime) sb.appendline (\"/codepage:utf8\");\tif (compilerparameters.unsafecode) sb.appendline (\"-unsafe\");\tif (compilerparameters.nostdlib) sb.appendline (\"-nostdlib\");\tif (!string.isnullorempty (compilerparameters.platformtarget) && !string.equals (compilerparameters.platformtarget, \"anycpu\", stringcomparison.ordinalignorecase)) {\tif (runtime.runtimeid == \"mono\" && runtime.assemblycontext.getassemblylocation (\"mono.debugger.soft\", null) == null) {",
  "mono runtime appears to be too old to support the platform c compiler flag",
  0
 ],
 [
  "try {\tw.writestartelement(\"root\");\tw.writeprocessinginstruction(\"pi\", \"\\ud812\");\tw.writeendelement();\t}\tcatch (argumentexception e) {\tutils.checkerrorstate(w.writestate);\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "if (r1 != null) joinsymbolicvalue (v1, v2, r1);\t}\t}\t}\t} else {\tienumerable<tfunc> functions;\tif (this.widen) {\tif (this.graph1.termmap.keys2count (sv1) <= this.graph2.termmap.keys2count (sv2)) functions = this.graph1.termmap.keys2 (sv1);\telse {\tfunctions = this.graph2.termmap.keys2 (sv2);",
  "foreach var d in properties",
  1
 ],
 [
  "public static void testpersistsucurityinfo2() {\tconsole.writeline(\"\\ntestpersistsucurityinfo2 - persist security info=true\");\toracleconnection con = new oracleconnection(\"data source=palis;user id=scott;password=tiger;persist security info=true\");\tcon.open();",
  "connectionstring after open",
  0
 ],
 [
  "private static bool testoropwithsametypebutwrongreturntype() {\tclearflags();\tdynamic d1 = new myopclasswitherrorreturntype();\tdynamic d2 = new myopclasswitherrorreturntype();\tdynamic dr = d1 || d2;\tif (dr.gettype() != typeof(myopclasswitherrorreturntype)) {",
  "async callback",
  1
 ],
 [
  "public void receiverequest () {\treplyhandler handler = delegate (message input) {",
  "processing a reply",
  0
 ],
 [
  "private void emitwritearray(string typename) {\topenscope($\"public static void write(this nativewriter writer, list<{typename}> values)\");\twriteline(\"if (values == null)\");\twriteline(\"{\");\twriteline(\"}\");",
  "installs one or more assemblies into the global assembly cache",
  1
 ],
 [
  "public override void renderbegintag (htmltextwriter w) {",
  "principalcollection remove urn urn no match",
  1
 ],
 [
  "static void list (string path) {\tstring [] files = directory.getfiles (path, \"*\");\tforeach (string f in files) {\tif (f.endswith (\".cer\")) {\tx509certificate2 x509 = new x509certificate2 (f);",
  "test failed conversion result is incorrect",
  1
 ],
 [
  "public void testinvalidcase1() {\ttestwrongcontext<stringcompareisculturespecificissue>(@\" class test {\tvoid foo () {",
  "foo bar",
  0
 ],
 [
  "static void storedproceduretest2 (oracleconnection con) {\toraclecommand cmd2 = con.createcommand ();\ttry {\tcmd2.commandtext = \"drop table mono_test_table2\";\tcmd2.executenonquery ();\t}\tcatch(oracleexception) {\t}",
  "listing nodes",
  1
 ],
 [
  "static void dataadaptertest (oracleconnection connection) {\toraclecommand command = connection.createcommand ();\tcommand.commandtext = \"select * from scott.emp\";\toracledataadapter adapter = new oracledataadapter (command);\tdataset dataset = new dataset (\"emp\");",
  "fill dataset via data adapter",
  0
 ],
 [
  "});\tinitialize(builder);\ticollectiontestgrain grain = await pickgraininnonprimary();\ttimespan age = await grain.getage();\toutput.writeline(age.tostring());\tawait grain.deactivateself();\tawait task.delay(3000);\tvar thrownexception = await record.exceptionasync(() => grain.getage());\tif (forwardcount != 0) {\tassert.null(thrownexception);",
  "verifying setlength method throws exception with a bad value after a call to open",
  1
 ],
 [
  "targetsilo = hostedcluster.secondarysilos.first().siloaddress.endpoint;\t}\tguid proxykey;\tirandomplacementtestgrain proxy;\tipendpoint expected;\tdo {\tproxykey = guid.newguid();\tproxy = grainfactory.getgrain<irandomplacementtestgrain>(proxykey);\texpected = await proxy.getendpoint();\t} while (!targetsilo.equals(expected));",
  "proxy grain was originally located on silo",
  0
 ],
 [
  "}\tf.position = optionalheaderstart + dotnetheaderoffset;\tuint cliheaderrva = r.readuint32();\tuint cliheadersize = r.readuint32();\tif (cliheaderrva == 0 || cliheadersize == 0) {\treturn false;\t}\treturn true;\t}\t} catch (ioexception ex) {",
  "state is not proxy",
  1
 ],
 [
  "public static int test_shift_2 () {\tunchecked {\tlong c = (long)0x800000ff00000000;\tlong d = (long)0x8ef0abcd00000000;\tlong t;\tint sa;\tt = c>>4;",
  "hello",
  1
 ],
 [
  "if ((record.flags & recorddefflags.reentrantequals) != 0) {\twriteline(\"}\");\twriteline(\"{\");\twriteline(\"    var popped = _equalsreentrancyguard.value.pop();\");\twriteline(\"}\");\t}\tclosescope(\"equals\");\tif ((record.flags & recorddefflags.reentrantequals) != 0) writeline(\"private threadlocal<reentrancyguardstack> _equalsreentrancyguard;\");\topenscope(\"public override sealed int gethashcode()\");\twriteline(\"if (_hash != 0)\");",
  "principalcollection add urn urn no match",
  1
 ],
 [
  "if (diff != null) {\tstring diffhtml = string.empty;\tusing (var writer = new stringwriter ()) {\tstate.output = writer;\tac.compare ();\tdiffhtml = state.output.tostring ();\t}\tif (diffhtml.length > 0) {\tusing (var file = new streamwriter (diff)) {\tif (state.colorize) {",
  "breaking color red",
  0
 ],
 [
  "public static idictionary<string, iresourcefilecontent> findlocalizedresourcefiles(string filenamewithoutextension, string extension) {\tdictionary<string, iresourcefilecontent> list = new dictionary<string, iresourcefilecontent>();",
  "filenamewithoutextension",
  0
 ],
 [
  "return false;\t}\t}\t}\tattnames.add(actname);\tattscopes.add(scope);\t}\tj++;\t}\tif (j != explen) {",
  "output shorter than expected",
  0
 ],
 [
  "if (s17.f13 != 13+9) {\treturn 13;\t}\tif (s17.f14 != 14+9) {\treturn 14;\t}\tif (s17.f15 != 15+9) {\treturn 15;\t}\tif (s17.f16 != 16+9) {",
  "did not throw expected exception",
  1
 ],
 [
  "static int main() {\tint ms, ms2, ms3;\tunsafe {\tms = sizeof (mystruct);\tms2 = sizeof (mystruct2);\tms3 = sizeof (mystruct3);\t}",
  "size",
  0
 ],
 [
  "static internal datacolumn createdatacolumnbyschemaaction(string sourcecolumn, string datasetcolumn, datatable datatable, type datatype, missingschemaaction schemaaction) {\tdebug.assert(datatable != null, \"should not call with a null datatable\");\tif (adp.isempty(datasetcolumn)) {\treturn null;\t}\tswitch (schemaaction) {\tcase missingschemaaction.add: case missingschemaaction.addwithkey: #if debug if (adapterswitches.dataschema.traceinfo) {\t}\t#endif return new datacolumn(datasetcolumn, datatype);\tcase missingschemaaction.ignore: #if debug if (adapterswitches.dataschema.tracewarning) {",
  "create table",
  1
 ],
 [
  "set.xmlresolver = new xmlurlresolver();\tstring path = path.combine(testdata.standardpath, \"xsd10\", \"schema\", \"schn11_a.xsd\");\tset.add(null, path);\tset.compile();\txmlreadersettings settings = new xmlreadersettings();\tsettings.validationtype = validationtype.schema;\tsettings.schemas = set;\tusing (xmlreader reader = xmlreader.create(new stringreader(xml), settings)) {\ttry {\twhile (reader.read()) ;",
  "xmlschemavalidationexception was not thrown",
  0
 ],
 [
  "}\tdebug.assert (!directive.iscomplete);\tif (context.statetag != ending && c == '%') {\tcontext.statetag = ending;\treturn null;\t}\tif (context.statetag == ending) {\tif (c == '>') {\tcontext.nodes.pop ();\tif (!directive.isnamed) {",
  "error loading install directory",
  1
 ],
 [
  "public void state_10(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartdocument();\tw.writestartelement(\"root\");\tw.writeendelement();\tw.writecdata(\"invalid\");\t}\tcatch (invalidoperationexception e) {",
  "got but expected",
  1
 ],
 [
  "private void multipleerrorhandling(dbconnection connection) {\ttry {\ttype expectedexception = null;\tif (connection is sqlconnection) {\t((sqlconnection)connection).infomessage += delegate (object sender, sqlinfomessageeventargs args) {",
  "sql connection info message",
  0
 ],
 [
  "static bool callsecondclassindexer() {\tint failcount = 0; verify.firstcalled = false;\tif ( (!(bool)(firstclassreturndynamicclass<int>.staticmethod()[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "warning handle character x in collation element table",
  1
 ],
 [
  "public void writetimeout_750_writebyte() {",
  "include mono jit jit h",
  1
 ],
 [
  "if (datareader.hasattributes) {\ttestlog.writeignore(datareader.readinnerxml() + \"\\n\");\tthrow new testexception(testresult.failed, \"\");\t}\twhile (datareader.read()) ;\tdatareader.dispose();\treturn;\tcase \"dns\": datareader.readtodescendant(\"elem\", \"elem\");\tif (datareader.hasattributes) {\tif (datareader.getattribute(\"xmlns\") == null) {",
  "exception not thrown for ns not found",
  1
 ],
 [
  "if (!cont && testresult.cont) {\treturn false;\t}\tif (cont && !testresult.cont) {\treturn false;\t}\tif (!rdue && testresult.rdue) {\treturn false;\t}\tif (rdue && !testresult.rdue) {",
  "no exception thrown for a loading a closed reader",
  1
 ],
 [
  "if (isinitialized) return;\tlock (initlock) {\tif (!isinitialized) {\ttry {\tisfullyinitialized = false;\tclient = clusterclient;\tclient.connect().getawaiter().getresult();\tisfullyinitialized = true;\t}\tcatch (exception exc) {",
  "initialization failed",
  0
 ],
 [
  "public void emitsource() {",
  "pragma warning disable writeline",
  0
 ],
 [
  "if (s9.f3 != 3+9) {\treturn 3;\t}\tif (s9.f4 != 4+9) {\treturn 4;\t}\tif (s9.f5 != 5+9) {\treturn 5;\t}\tif (s9.f6 != 6+9) {",
  "uri",
  1
 ],
 [
  "public static ienumerable<string> yieldreturnwithnestedtryfinally(bool breakinmiddle) {\tyield return \"start of method\";\ttry {\tyield return \"within outer try\";",
  "inside chain task",
  1
 ],
 [
  "if (s16.f8 != 8+9) {\treturn 8;\t}\tif (s16.f9 != 9+9) {\treturn 9;\t}\tif (s16.f10 != 10+9) {\treturn 10;\t}\tif (s16.f11 != 11+9) {",
  "orleansazureweb onstart",
  1
 ],
 [
  "static bool callsecondstructoperator() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturnstruct<int>();\tif ( (!(bool)(((dynamic)s[1]) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "var conv = storedcontext.conversions.implicitconversion(lambda.bodyresult, returntype);\tif (!conv.isidentityconversion) lambda.bodyresult = new conversionresolveresult(returntype, lambda.bodyresult, conv, storedcontext.checkforoverflow);\t}\t}\tif (returntype.kind != typekind.void || lambda.bodyexpression is statement) {\tfor (int i = 0; i < returnexpressions.count; i++) {\tvisitor.processconversion(returnexpressions[i], returnvalues[i], returntype);\t}\t}\tvisitor.mergeundecidedlambdas();",
  "merging",
  0
 ],
 [
  "if (result != null) {\tstring xmloutput = createxmloutput(result);\tresultsummarizer summary = new resultsummarizer(result);\tif (options.xmlconsole) {\tconsole.writeline(xmloutput);\t}\telse {\twritesummaryreport(summary);\tbool haserrors = summary.errors > 0 || summary.failures > 0 || result.iserror || result.isfailure;\tif (options.stoponerror && (haserrors || summary.notrunnable > 0)) {",
  "end property",
  1
 ],
 [
  "if (t9 ()[0] != 4) return 9;\tvar t10 = arraymultimutate (new string[][] { new string[] { \"a\", \"b\", \"c\" }, new string[] { \"1\", \"2\", \"3\" }, new string[] { \"a\", \"b\", \"c\" } });\tif (t10 ()[2][2] != null) return 10;\tvar array = new short[,] { { 10, 20 } };\tvar t10a = arraymultimutate (array);\tif (t10a () != array[0, 0].gethashcode ()) return 100;\tvar t11 = typeof (\"b\");\tif (t11 () != typeof (string)) return 11;\tvar t12 = nestedtypemutate<ulong> () ();\tif (t12[0] != 0 || t12[1] != 0) return 12;",
  "pairwise",
  1
 ],
 [
  "cerror.writelineignore(e.tostring());\tcerror.compare(w.writestate, (utils.writertype == writertype.charcheckingwriter) ? writestate.start : writestate.error, \"writestate should be error\");\treturn;\t}\tcatch (nullreferenceexception e) {\tcerror.writelineignore(e.tostring());\tcerror.compare(w.writestate, (utils.writertype == writertype.charcheckingwriter) ? writestate.start : writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "}\tif (addprimarykeys && schemarow.iskey) {\tif (keys == null) {\tkeys = new datacolumn[schemarows.length];\t}\tkeys[keycount++] = datacolumn;\t#if debug if (adapterswitches.dataschema.traceverbose) {\t}\t#endif if (isprimary && datacolumn.allowdbnull) {\t#if debug if (adapterswitches.dataschema.traceverbose) {",
  "setupschema changing primarykey into uniquecontraint",
  0
 ],
 [
  "formatter.ontheflyformat (doc.editor, doc, selection);\t} else {\tvar pol = doc.project != null ? doc.project.policies : null;\ttry {\tvar editortext = editor.text;\tstring text = formatter.formattext (pol, editortext, selection);\tif (text != null && editortext.substring (selection.offset, selection.length) != text) {\teditor.replacetext (selection.offset, selection.length, text);\t}\t} catch (exception e) {",
  "error during format",
  0
 ],
 [
  "assert.areequal (test, uri.tostring (), \"tostring/\" + test);\t}\t}\t[test]\tpublic void unixlocalpath_wtf () {\tstring path = \"file: uri fileuri = new uri( path );\tassert.areequal (\"/tmp/foo/bar\", fileuri.absolutepath, path);\tstring path2 = \"file: fileuri = new uri (path2);\tassert.areequal (\"file: }\tpublic static void print (uri uri) {",
  "failed to add get a value for",
  1
 ],
 [
  "public static void checkleaks() {\tlock (s_internalsyncobject) {\tif (compmodswitches.handleleak.level >= tracelevel.warning) {\tgc.collect();\tgc.waitforpendingfinalizers();\thandletype[] types = new handletype[s_handletypes.values.count];\ts_handletypes.values.copyto(types, 0);",
  "begin checkleaks",
  0
 ],
 [
  "}\tx509certificatecollection removed = new x509certificatecollection ();\tforeach (x509certificate trust in trusted) {\tif (!roots.contains (trust)) {\tremoved.add (trust);\t}\t}\tif (removed.count > 0) {\tif (confirmremoval) {\t} else {",
  "failed got wrong result",
  1
 ],
 [
  "public void linqtosqlobject01() {\tnorthwind db = createdb();\tvar custs = from c in db.customers where c.city == \"marseille\" select c;\tforeach (var cust in custs) foreach (var ord in cust.orders) {",
  "failed to add get a value for of type boolean",
  1
 ],
 [
  "public void surrogateentity_6(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writesurrogatecharentity('\\u1025', '\\ud900');\t}\tcatch (argumentexception e) {",
  "task add finished took",
  1
 ],
 [
  "}\tbreak;\t}\tif (!fileutility.isequalfilename(this.filename, this.membertofind.declaringtype.compilationunit.filename)) {\tthrow new invalidoperationexception(\"the propertyfieldassociationvisitor does currently not support the case that the field is declared in a different file than the property.\");\t}\tmemberresolveresult mrr = this.resolve(expr) as memberresolveresult;\tif (mrr != null && mrr.resolvedmember is ifield) {\tpropertydeclaration pd;\t#endif if (data as bool? ?? false) {",
  "resourcetoolkit propertyfieldassociationvisitor inside propertygetregion this property seems to reference field",
  0
 ],
 [
  "}\telse {\tprintusage();\treturn 1;\t}\t}\tif (options.inputassembly == null) {\treturn 2;\t}\tif (string.isnullorempty(options.outputfilename)) {",
  "ok",
  1
 ],
 [
  "public void publicmethod () {",
  "publicmethod",
  0
 ],
 [
  "private static bool leftisinstanceproperty() {\tint failcount = 0;\tsbyte origin = 10;\tdynamic d = origin;\tvar c = new c();\tc.p1 = d;\tif (c.p1 != origin) {\tfailcount++;",
  "positioned on wrong element not on dns",
  1
 ],
 [
  "public void writeverboseline_showverbosemessage_messagewrittentoconsole() {\tcreatehostuserinterface();\thostui.writeverboseline(\"test\");",
  "did not return null for null parameter name",
  1
 ],
 [
  "numsecretsinvault += results.count();\tforeach (var m in results) console.out.writeline(\"\\t{0}\", m.identifier.name);\t}\twhile (results != null && !string.isnullorwhitespace(results.nextpagelink)) {\tresults = task.run(() => keyvaultclient.getcertificatesnextasync(results.nextpagelink)).configureawait(false).getawaiter().getresult();\tif (results != null && results != null) {\tnumsecretsinvault += results.count();\tforeach (var m in results) console.out.writeline(\"\\t{0}\", m.identifier.name);\t}\t}",
  "no response seq in",
  1
 ],
 [
  "if (s9.f3 != 3+9) {\treturn 3;\t}\tif (s9.f4 != 4+9) {\treturn 4;\t}\tif (s9.f5 != 5+9) {\treturn 5;\t}\tif (s9.f6 != 6+9) {",
  "stderr",
  1
 ],
 [
  "treeviewcolumn colfile = new treeviewcolumn (gettextcatalog.getstring (\"file\"), new cellrenderertext(), \"text\", 2);\tfilelist.appendcolumn(colcommit);\tfilelist.appendcolumn(colstatus);\tfilelist.appendcolumn(colfile);\tcolcommit.visible = false;\tobject[] exts = addinmanager.getextensionobjects (\"/monodevelop/versioncontrol/commitdialogextensions\", false);\tbool separatorrequired = false;\tforeach (object ob in exts) {\tcommitdialogextension ext = ob as commitdialogextension;\tif (ext == null) {",
  "commit extension type must be a subclass of commitdialogextension",
  0
 ],
 [
  "private static bool callsecondclassinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturndynamicclass<int>();\tif ((!(bool)(s.instancemethod().instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "var mdproject = getmonoproject (projectid) as monodevelop.projects.dotnetproject;\tvar path = getmetadatapath (metadatareference);\tif (mdproject == null || path == null) return;\tforeach (var r in mdproject.references) {\tif (r.referencetype == monodevelop.projects.referencetype.assembly && r.reference == path) {\treturn;\t}\tif (r.referencetype == monodevelop.projects.referencetype.project) {\tforeach (var fn in r.getreferencedfilenames (monodevelop.projects.configurationselector.default)) {\tif (fn == path) {",
  "warning duplicate reference is added for project",
  0
 ],
 [
  "bitmapdata data = bmp.lockbits (new rectangle (0, 0, bmp.width, bmp.height), imagelockmode.readonly, pixelformat.format24bpprgb);\ttry {\tassert.areequal (bmp.height, data.height, \"height\");\tassert.areequal (bmp.width, data.width, \"width\");\tassert.areequal (pixelformat.format24bpprgb, data.pixelformat, \"pixelformat\");\tassert.areequal (864, data.stride, \"stride\");\tint size = data.height * data.stride;\tunsafe {\tbyte* scan = (byte*) data.scan0;\t#if false for (int p = 0; p < size; p += 1009) {",
  "assert areequal scan",
  0
 ],
 [
  "public void testunsafestatement() {\tanalyze<redundantunsafecontextanalyzer>(@\" class foo {\tpublic static void main(string[] args) {\t$unsafe$ {\t}\t}\t}\t\", @\" class foo {\tpublic static void main(string[] args) {",
  "hello",
  0
 ],
 [
  "public override void writeentry (string [] replacementstrings, eventlogentrytype type, uint instanceid, short category, byte [] rawdata) {\tlock (lockobject) {\tstring logdir = findlogstore (coreeventlog.log);\tint index = getlatestindex () + 1;\tstring logpath = path.combine (logdir, index.tostring (cultureinfo.invariantculture) + \".log\");\ttry {\tusing (textwriter w = file.createtext (logpath)) {",
  "timegenerated",
  0
 ],
 [
  "static void saveglobalcustomexecutionmodes () {\tif (globalmodes == null) return;\ttry {\txmldataserializer ser = new xmldataserializer (getdatacontext ());\tfilepath file = userprofile.current.configdir.combine (\"custom-command-modes.xml\");\tser.serialize (file, globalmodes, typeof(customexecutionmodes));\t} catch (exception ex) {",
  "could not save global custom execution modes",
  0
 ],
 [
  "environment.exit (1);\t}\tif (pkgout != null){\tstring [] xargs = pkgout.trim (new char [] {' ', '\\n', '\\r', '\\t'}). split (new char [] { ' ', '\\t'});\targs = addargs (args, xargs);\t}\tp.close ();\treturn true;\tcase \"/r\": case \"/reference\": {\tif (value == \"\"){",
  "reference requires an argument",
  0
 ],
 [
  "public void handshake_neg1() {",
  "verifying handshake",
  0
 ],
 [
  "public override void modified (xelement source, xelement target, apichanges differences) {\tvar output = output;\tstate.output = new stringwriter ();\tcomparer.compare (source, target);\tvar s = output.tostring ();\tstate.output = output;\tif (s.length > 0) {\tvar name = target.attribute (\"name\").value;",
  "disposing compatgraphics",
  1
 ],
 [
  "static private void help () {",
  "other features aren t currently supported",
  0
 ],
 [
  "public static int main () {\tint result = test ();\tif (result != 0) console.writeline (\"error: {0}\", result);",
  "line hidden",
  1
 ],
 [
  "public static int mainmethod() {\tint failcount = 0;\tdynamic d = new first();\tif ((!(bool)(((dynamic)(((second)d.m1()).p2 + 3))[4])) || (testcount.callcount != 4)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "if (automated) {\tautomationoutput = new streamwriter(\"benchmark.out\");\t}\tstopwatch w = new stopwatch();\tw.start();\ttest(swapandvirtualcalls);\ttest(badrecursion);\ttest(quicksort);\ttest(floatcalculation);\tw.stop();",
  "fully open instantiation of the typebuilder created type must have getconstructors working",
  1
 ],
 [
  "private static bool test6() {\tbool[] boolvalues = new bool[]\t{\ttrue, false }\t;\tforeach (bool a1 in boolvalues) {\tdynamic d1 = a1;\tif ((true && a1) != (true && d1)) {",
  "in a thread",
  1
 ],
 [
  "return 1;\t}\tfloat2 s2;\ts2.f1 = 1;\ts2.f2 = 2;\ts2 = mono_return_float2(s2, 906);\tif (s2.f1 != 1+906) {\treturn 1;\t}\tif (s2.f2 != 2+906) {",
  "got but expected",
  0
 ],
 [
  "if (s6.f1 != 1+90) {\treturn 1;\t}\tif (s6.f2 != 2+90) {\treturn 2;\t}\tif (s6.f3 != 3+90) {\treturn 3;\t}\tif (s6.f4 != 4+90) {",
  "innerexceptionset",
  1
 ],
 [
  "public void breakpointinsideonelinedelegatenodisplayclass () {\tinitializetest ();\taddbreakpoint (\"e0a96c37-577f-43e3-9a20-2cdd8bf7824e\");\tstarttest (\"breakpointinsideonelinedelegatenodisplayclass\");\tcheckposition (\"e0a96c37-577f-43e3-9a20-2cdd8bf7824e\");",
  "hello world",
  1
 ],
 [
  "#endif string dbserver = environment.getenvironmentvariable(\"dblinqserver\") ?? \"localhost\";\tstring connstr = string.format(\"server={0};user id={1}; password={2}; database={3}\" , dbserver, \"linquser\", \"linq2\", \"northwind\");\tnorthwind db = new northwind(new mysqlconnection(connstr));\t#if use_stored_procs int is2;\tobject xx = db.sp_selorders(\"zz\", out is2);\tstring reply0 = db.hello0();\tstring reply1 = db.hello1(\"pigafetta\");\t#endif #if use_alltypes #endif console.clear();\tvar q2 = from p in db.products orderby p.productname select p;\tforeach (var v in q2) objectdumper.write(v);",
  "waitsubsystemtests waitdurationtest",
  1
 ],
 [
  "if (defaultname == null) throw new argumentnullexception(\"defaultname\");\tif (content == null) throw new argumentnullexception(\"content\");\tvar displaybindingservice = sd.displaybindingservice;\tidisplaybinding binding = displaybindingservice.getbindingperfilename(filename.create(defaultname));\tif (binding == null) {\tbinding = new errorfallbackbinding(\"can't create display binding for file \" + defaultname);\t}\topenedfile file = createuntitledopenedfile(defaultname, content);\tiviewcontent newcontent = binding.createcontentforfile(file);\tif (newcontent == null) {",
  "created view content was null defaultname",
  0
 ],
 [
  "public static void main (string[] argv) {",
  "test",
  0
 ],
 [
  "static void function () {",
  "delegate method",
  0
 ],
 [
  "ssl.servercertvalidationdelegate += new certificatevalidationcallback (certificatevalidation);\tstreamwriter sw = new streamwriter (ssl);\tsw.flush ();\tstreamreader sr = new streamreader (ssl, encoding.utf8);\tcontent = sr.readtoend ();\t}\tcatch (exception e) {\tpropertyinfo pi = e.gettype ().getproperty (\"hresult\", bindingflags.nonpublic | bindingflags.getproperty | bindingflags.instance);\tconsole.writeline (e.tostring ());\tif (ns != null) {",
  "running fuse command",
  1
 ],
 [
  "public async task runasync() {",
  "cold run",
  0
 ],
 [
  "public void emitsource() {",
  "verifying default breakstate",
  1
 ],
 [
  "static void externalauthenticationtest () {\tstring user = environment.username;\tif (!environment.userdomainname.equals(string.empty)) user = environment.userdomainname + \"\\\\\" + environment.username;",
  "unable to unload appdomain",
  1
 ],
 [
  "dispatcherframe frame = new dispatcherframe ();\tbool fail = true;\tint next = 1;\td.begininvoke (dispatcherpriority.normal, (action) delegate {\tif (next != 3) throw new exception (\"expected state 3, got \" + next.tostring ());\tnext = 4;\t});\td.begininvoke (dispatcherpriority.normal, (action) delegate {\tif (next != 4) throw new exception (\"expected state 4, got \" + next.tostring ());\tnext = 5;",
  "second",
  0
 ],
 [
  "protected override bool ontagrender (string name, htmltextwritertag key) {",
  "ontagrender",
  0
 ],
 [
  "protected void translatesids(string target, intptr[] psids) {",
  "authzset sidlist processing sids",
  0
 ],
 [
  "public void test () {",
  "verifying call flush method several times after input buffer has been filled",
  1
 ],
 [
  "public static ienumerable<int> yieldreturnwithtryfinally() {\tyield return 0;\ttry {\tyield return 1;\t} finally {",
  "adstorectx getsidadspathfromprincipal no sid ic fake principal",
  1
 ],
 [
  "public bool onclientdomkeypress (keyinfo keyinfo, modifierkeys modifiers, nsidomnode target) {\t#if debug ongeneric (\"onclientdomkeypress\");",
  "verifying maxvalue handshake",
  1
 ],
 [
  "public override void removed (xelement source) {\tvar name = source.attribute (\"name\").value;\tvar namespacedescription  = $\"{name}: removed namespace\";\tstate.logdebugmessage ($\"possible -r value: {namespacedescription}\");\tif (state.ignoreremoved.any (re => re.ismatch (namespacedescription))) return;",
  "comobjinfo typeinfo not found",
  1
 ],
 [
  "static void showurls () {\ttry {\turlssection myurlssection = configurationmanager.getsection (\"myurls\") as urlssection;\tif (myurlssection == null) console.writeline (\"failed to load urlssection.\");\telse {",
  "failed to reset packagemanagementcredentialservice",
  1
 ],
 [
  "}\t}\t}\tfinally {\ttry {\tif (null != victim) {\tvictim.enablescheduling();\t}\t}\tcatch (exception ex) {",
  "onlineofflinetest exception during exit trying to restore scheduling state",
  0
 ],
 [
  "static void showhelp() {",
  "net resource assembler version",
  0
 ],
 [
  "public static int main (string[] args) {\tint c = 0;\ttry {\tc = 0;\t}\tcatch (exception e) {\t}\tfinally {",
  "verifying basestream after open and close have been called",
  1
 ],
 [
  "static void help () {\tconsole.writeline ();\tconsole.writeline ();",
  "webcompare db exe",
  0
 ],
 [
  "public override idisposable writeregion(string name) {\twriteline();",
  "adstorectx findprincipalbyidentrefhelper fake principal null scheme",
  1
 ],
 [
  "private void dumpsqlparam(sqlparameter param) {",
  "sqldbtype",
  0
 ],
 [
  "static public datatablemapping gettablemappingbyschemaaction(datatablemappingcollection tablemappings, string sourcetable, string datasettable, missingmappingaction mappingaction) {\tif (null != tablemappings) {\tint index = tablemappings.indexof(sourcetable);\tif (-1 != index) {\t#if debug if (adapterswitches.dataschema.tracewarning) {",
  "mapping match on sourcetable sourcetable",
  0
 ],
 [
  "public void openexeconfiguration1_userlevel_none () {\tsysconfig config = configurationmanager.openexeconfiguration(configurationuserlevel.none);",
  "adstorectx cannotchangepwdtoldapconverter add deny self",
  1
 ],
 [
  "private void writeservicepoint (string label, servicepoint sp) {\tconsole.writeline (\"\\n\" + label);",
  "address",
  0
 ],
 [
  "_inner.markchange();\tif ((index < 0) || (index >= _inner.combinedvalues.count)) {\tglobaldebug.writelineif(globaldebug.warn, \"principalvaluecollection\", \"removeat({0}): out of range (count={1})\", index, _inner.combinedvalues.count);\tthrow new argumentoutofrangeexception(\"index\");\t}\ttrackedcollection<t>.valueel el = _inner.combinedvalues[index];\tif (el.isinserted) {\t_inner.combinedvalues.removeat(index);\t}\telse {",
  "hello",
  1
 ],
 [
  "static int test_0_root_keeps_child () {\tfinalizerhelpers.performnopinaction (setuplinks);\tgc.collect ();\tgc.waitforpendingfinalizers ();\tconsole.writeline (\"a is null {0}\", a == null);\tconsole.writeline (\"b is null {0}\", b == null);\tif (a == null || b == null) return 1;",
  "a test",
  0
 ],
 [
  "private void dodomaininit() {",
  "principalcontext entering dodomaininit",
  0
 ],
 [
  "public task<string> b2method() {",
  "calling",
  0
 ],
 [
  "public static void main () {",
  "test waiting for streams to finish",
  1
 ],
 [
  "thread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();\t} finally {\t}\ttry {\tthread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();\t} finally {",
  "threadabortexception finally",
  0
 ],
 [
  "}\tassert.notnull(ipproperties.dnsaddresses);\tforeach (ipaddress dns in ipproperties.dnsaddresses) {\t_log.writeline(\"-- \" + dns.tostring());\t}\tassert.notnull(ipproperties.dnssuffix);\tassert.notnull(ipproperties.gatewayaddresses);\tforeach (gatewayipaddressinformation gateway in ipproperties.gatewayaddresses) {\t_log.writeline(\"-- \" + gateway.address.tostring());\t}",
  "dns enabled",
  0
 ],
 [
  "public void defaultvalues() {\tvar main = new codeentrypointmethod();\tforeach (type t in new[] { typeof(int), typeof(object), typeof(datetime), typeof(string) }) {\t}",
  "dfs",
  1
 ],
 [
  "if (!environment.is64bitoperatingsystem) {\treturn false;\t}\ttry {\tusing (filestream f = new filestream(exename, filemode.open, fileaccess.read)) {\tbinaryreader r = new binaryreader(f);\tf.position = 0x3c;\tint peheaderstart = r.readint32();\tf.position = peheaderstart;\tif (r.readint32() != 0x00004550) {",
  "unhandled exceptions",
  1
 ],
 [
  "public override string tostring () {\tstringwriter sw = new stringwriter ();",
  "error building recent solutions list permissions",
  1
 ],
 [
  "var options = new mono.options.optionset () {\t{ \"abi=\", \"abi triple to generate\", v => abis.add(v) }, { \"o|out=\", \"output directory\", v => outputdir = v }, { \"outfile=\", \"output directory\", v => outputfile = v }, { \"maccore=\", \"include directory\", v => maccoredir = v }, { \"monodroid=\", \"top monodroid directory\", v => monodroiddir = v }, { \"android-ndk=\", \"path to android ndk\", v => androidndkpath = v }, { \"targetdir=\", \"path to the directory containing the mono build\", v =>targetdir = v }, { \"mono=\", \"include directory\", v => monodir = v }, { \"gen-ios\", \"generate ios offsets\", v => genios = v != null }, { \"h|help\",  \"show this message and exit\",  v => showhelp = v != null }, };\ttry {\toptions.parse (args);\t}\tcatch (mono.options.optionexception e) {\tconsole.writeline (e.message);\tenvironment.exit(0);\t}\tif (showhelp) {",
  "options",
  0
 ],
 [
  "public void showmethodref (object sender, methodreferencedeventargs args) {",
  "not viable",
  1
 ],
 [
  "tcplistener interrupt_listener = new tcplistener (new ipendpoint (ipaddress.loopback, 0));\tinterrupt_listener.start ();\tstring agent_assembly = typeof (clientcsharpshell).assembly.location;\tstring agent_arg = string.format (\"--agent:{0}:{1}\" , ((ipendpoint)listener.server.localendpoint).port, ((ipendpoint)interrupt_listener.server.localendpoint).port);\tvar vm = new attach.virtualmachine (pid);\tvm.attach (agent_assembly, agent_arg);\ttcpclient client = listener.accepttcpclient ();\tns = client.getstream ();\ttcpclient interrupt_client = interrupt_listener.accepttcpclient ();\tinterrupt_stream = interrupt_client.getstream ();",
  "reader movetocontent",
  1
 ],
 [
  "public void readtimeout_default_readto() {",
  "if isemptywrapper readendelement",
  1
 ],
 [
  "int tests_passed = populatefailuretable (file, failed_tests, ignored_tests);\tfail_total += failed_tests.count;\tpass_total += tests_passed;\trun_total += failed_tests.count + tests_passed;\tif (failed_tests.count > 0) {\tsw.writeline (\"        <tr class='errorrow' onclick=\\\"toggle('el{0}')\\\" onmouseover='highlight(this)' onmouseout='unhighlight(this)'>\", assembly);\tsw.writeline (@\"            <td><img src='media/fail.png' /></td>\");\t} else {\tsw.writeline (@\"            <td><img src='media/pass.png' /></td>\");\t}",
  "td td",
  0
 ],
 [
  "protected override void generatenamespaceimport(codenamespaceimport e) {",
  "codenamespaceimport",
  0
 ],
 [
  "string fixupmethodname = \"fixup_\" + methodname;\tbool anyfixups = writememberfixupbegin(members, fixupmethodname, \"p\");\tif (members.length > 0 && members[0].mapping.isreturnvalue) writer.writeline(\"isreturnvalue = true;\");\tstring checktypehrefsource = (!haswrapperelement && !writeaccessors) ? \"hreflist\" : null;\tif (checktypehrefsource != null) writeinitchecktypehreflist(checktypehrefsource);\twriteparamsread(mappings.length);\tint loopindex = writewhilenotloopstart();\twriter.indent++;\tstring unrecognizedelementsource = checktypehrefsource == null ? \"unknownnode((object)p);\" : \"if (reader.getattribute(\\\"id\\\", null) != null) { readreferencedelement(); } else { unknownnode((object)p); }\";\twritememberelements(members, unrecognizedelementsource, \"unknownnode((object)p);\", null, null, checktypehrefsource);",
  "targetdedicated",
  1
 ],
 [
  "using (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writecharentity('\\udd12');\t}\tcatch (argumentexception e) {\tcerror.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "private void accumulatedestroyedhandles (control c, arraylist list) {\tif (c != null) {\tcontrol[] controls = c.controls.getallcontrols ();\tif (c.ishandlecreated && !c.isdisposed) {\tx11hwnd hwnd = (x11hwnd)hwnd.objectfromhandle(c.handle);",
  "task got status code",
  1
 ],
 [
  "public override void methodjitstart (lm m, ulong counter) {",
  "methodjitstart",
  0
 ],
 [
  "static void printtype (typedefinition td, int indent) {\tif (td.isnested && !string.isnullorempty (td.namespace)) throw new applicationexception (\"broken nested type:\");",
  "namespace name",
  0
 ],
 [
  "static void printtype (typedefinition td, int indent) {\tif (td.isnested && !string.isnullorempty (td.namespace)) throw new applicationexception (\"broken nested type:\");",
  "using system reflection",
  1
 ],
 [
  "public void testcase3() {\tanalyze<stringcompareisculturespecificanalyzer>(@\" class test {\tvoid foo () {\t}\t}\", @\" class test {\tvoid foo () {",
  "foo bar",
  0
 ],
 [
  "}\telse {\twriteline (typemap.typedata.csharpfullname + string.format (\" ob = ({0}) activator.createinstance(typeof({0}), true);\", typemap.typedata.csharpfullname));\tif (generatereadhook (hooktype.type, typemap.typedata.type)) {\treturn;\t}\t}\twriteline (\"system.xml.xmlqualifiedname t = getxsitype();\");\twriteline (\"if (t == null)\");\tif (typemap.typedata.type != typeof(object)) writeline (\"{ }\");",
  "error",
  1
 ],
 [
  "public static int main () {\tint a = 0;\td d1 = delegate {\ta = 1;\t};\td d2 = delegate {",
  "wr writeline digraph nfa",
  1
 ],
 [
  "static void help (string details) {\tswitch (details) {\tbreak;\tbreak;\tbreak;",
  "sn strongname signing options",
  0
 ],
 [
  "byte [] token = an.getpublickeytoken ();\tif (token == null) {\t} else {\t}\tbreak;\tcase \"-v\": filename = args [i++];\treturn verify (filename, false, quiet);\tcase \"-vf\": filename = args [i++];\treturn verify (filename, true, quiet);\tbreak;",
  "vr unimplemented option",
  0
 ],
 [
  "public void stopbits_1_beforeopen() {",
  "ok",
  1
 ],
 [
  "result = s.checksignature (mx.rsa);\t}\telse if (mx.dsa != null) {\tresult = s.checksignature (mx.dsa);\t}\t}\telse {\tresult = s.checksignature ();\t}\tif (result) {",
  "valid",
  0
 ],
 [
  "jobpreparationandreleasetaskexecutioninformation jrtei = jobprepstatuslist.firstordefault();\tif ((jrtei == null) || (null == jrtei.jobreleasetaskexecutioninformation)) {\tthread.sleep(2000);\t}\telse {\tassert.notnull(jrtei);\tif (jrtei.jobreleasetaskexecutioninformation.state != jobreleasetaskstate.completed) {\tthread.sleep(5000);\t}\telse {",
  "jobrelease commpleted",
  0
 ],
 [
  "console.writeline (\"f.handle = {0}\", f.handle);\tconsole.writeline (\"c.handle = {0}\", c.handle);\tcontrol_context = new applicationcontext (f);\tmonitor.enter (m);\tmonitor.pulse (m);\tmonitor.exit (m);\tapplication.run (control_context);\tc.dispose ();\tthreaddied = true;\tmonitor.enter (m);",
  "isemptyelement",
  1
 ],
 [
  "string itemfile = null;\tif (file == null) {\tvar files = directory.enumeratefiles (\".\");\tforeach (string f in files) {\tif (services.projectservice.isworkspaceitemfile (f)) {\tsolfile = f;\tbreak;\t} else if (itemfile == null && services.projectservice.issolutionitemfile (f)) itemfile = f;\t}\tif (solfile == null && itemfile == null) {",
  "oracletype varchar",
  1
 ],
 [
  "if (compare (\"clear\", mask, ref stateindex, arguments, ref more_states)) {\tcontinue;\t}\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;\tif (with_result) {\tmtp.clear (out resulthint);",
  "mtp clear out resulthint",
  0
 ],
 [
  "return true;\t} catch (exception ex) {\tsavedexception = ex;\t}\ttry {\tcomsupport.openfile(filename);\treturn true;\t} catch (exception ex) {\tif (savedexception == null) savedexception = ex;\t}",
  "error opening file",
  0
 ],
 [
  "id = getlocalnetworkgatewayresponse.id }, gatewaytype = virtualnetworkgatewaytype.vpn, vpntype = vpntype.routebased, ipconfigurations = new list<virtualnetworkgatewayipconfiguration>() {\tnew virtualnetworkgatewayipconfiguration() {\tname = ipconfigname, privateipallocationmethod = ipallocationmethod.dynamic, publicipaddress = new subresource() {\tid = nic1publicip.id }, subnet = new subresource() {\tid = getsubnetresponse.id }\t}\t}\t};\tvar putvirtualnetworkgatewayresponse = networkmanagementclient.virtualnetworkgateways.createorupdate(resourcegroupname, virtualnetworkgatewayname, virtualnetworkgateway);\tassert.equal(\"succeeded\", putvirtualnetworkgatewayresponse.provisioningstate);",
  "wrappedreader string",
  1
 ],
 [
  "if (diff != null) {\tstring diffhtml = string.empty;\tusing (var writer = new stringwriter ()) {\tstate.output = writer;\tac.compare ();\tdiffhtml = state.output.tostring ();\t}\tif (diffhtml.length > 0) {\tusing (var file = new streamwriter (diff)) {\tif (state.colorize) {",
  "nonbreaking color black",
  0
 ],
 [
  "exc14n = (cryptoconfig.createfromname (\"http: hmacmd5 = (cryptoconfig.createfromname (\"hmacmd5\") != null);\tmerlin ();\tconsole.writeline ();\tphaos ();\t}\tcatch (exception ex) {\tconsole.writeline (ex);\t}\tfinally {\tconsole.writeline ();",
  "a",
  1
 ],
 [
  "}\tvar stopwatch = stopwatch.startnew();\tif (referencesorleans) {\tif (!codegenerator.generatecode(options)) {\t}\t}\telse {\treturn -2;\t}\tstopwatch.stop();",
  "bad command line arguments supplied",
  1
 ],
 [
  "if (finfo.lastwritetime > configuredpackages.lastwritetime) configuredpackages = null;\t}\t}\tif (configuredpackages == null) {\tconfiguredpackages = new configuredpackagesmanager (path);\tpkgmanagertable [path] = new weakreference (configuredpackages);\townerproject.extendedproperties [\"monodevelop.autotools.configuredpackagesmanager\"] = configuredpackages;\t}\t}\t} catch (exception e) {",
  "serialize stack trace",
  1
 ],
 [
  "static void main () {\ttype type = typeof (brushes);\tpropertyinfo[] properties = type.getproperties ();\tint count = 1;\tforeach (propertyinfo property in properties) {\tconsole.writeline(\"\\n\\t\\t\\tbr = brushes.\" + property.name + \";\");\tconsole.writeline(\"\\t\\t\\tsolid = (solidbrush) br;\");",
  "assert areequal color solid color p count",
  0
 ],
 [
  "public static int main () {\tint x = 1;\tint y = 0;\td del = new d (m);\tiasyncresult ar = del.begininvoke (x, out y, null, null);\tif (del.endinvoke (out y, ar) != 2) return 1;\tif (y != 3) return 2;",
  "incorrectly invalid",
  1
 ],
 [
  "public static void main (string [] args) {",
  "eventlog completionstatuschanged caught exception notifying event handlers",
  1
 ],
 [
  "try {\tconfiguration config = configurationmanager.openexeconfiguration (configurationuserlevel.none);\tappsettingssection sect = (appsettingssection)config.getsection(\"appsettings\");\tforeach (string key in sect.settings.allkeys) {\tkeyvalueconfigurationelement e = sect.settings[key];\tconsole.writeline (\"{0} = {1}\", e.key, e.value);\t}\tconsole.writeline (\"lockallelementsexcept = '{0}'\", sect.lockallelementsexcept.attributelist);\t}\tcatch (exception e) {",
  "exception raised",
  0
 ],
 [
  "var etest = e as oledb.test.modulecore.ctestexception;\tif (etest != null) {\tactual = etest.actual;\texpected = etest.expected;\teresult = etest.result;\tswitch (eresult) {\tcase 1: _output.writeline(etest.message);\treturn eresult;\t};\t}",
  "expected",
  0
 ],
 [
  "public void testalreadypresentnullcheckinconditionalternaryexpression2() {",
  "error building project",
  1
 ],
 [
  "public static int test_0_finally_after_try () {\tappdomain.currentdomain.unhandledexception += (obj, sender) => {",
  "unhandled",
  0
 ],
 [
  "public void testdisable() {\tanalyze<redundantunsafecontextanalyzer>(@\" #pragma warning disable \" + csharpdiagnosticids.redundantunsafecontextanalyzerid + @\" unsafe class foo {\tpublic static void main(string[] args) {",
  "principalsearcher checkdisposed accessing disposed object",
  1
 ],
 [
  "static private void help () {",
  "completed did iterations in at rps",
  1
 ],
 [
  "return true;\t}\tapplication app = setupservice.getextensibleapplication (extensiondomain);\tif (app == null) {\treturn false;\t}\tforeach (itaskitem item in addinreferences) {\tstring addinid = item.itemspec.replace (':',',');\taddin addin = app.registry.getaddin (addinid);\tif (addin == null) {",
  "add in not found",
  0
 ],
 [
  "foreach (catchblock block in catchblocks) {\tblock.writeto(output);\t}\tif (faultblock != null) {\toutput.indent();\tfaultblock.writeto(output);\toutput.unindent();\toutput.writeline(\"}\");\t}\tif (finallyblock != null) {",
  "process ps progress",
  1
 ],
 [
  "public static void deletepoolifexistsnothrow(batchserviceclient client, string poolid, itestoutputhelper output) {\ttry {\tclient.pool.delete(poolid);\t}\tcatch (batcherrorexception e) {",
  "pool failed to delete",
  0
 ],
 [
  "public static int main () {\tint [][] i = new int [2][];\tint [,][] j = new int [3,6][];\tblah [] k = new blah [2];\tblah [,][] l = new blah [3,4][];\turi [] uri = new uri [4];",
  "in explicit conversion to int",
  1
 ],
 [
  "public static void usage (string message) {\tif (message != null) {\tconsole.writeline (\"{0}{1}{0}\", environment.newline, message);\t}",
  "protocol only applicable when using stream",
  0
 ],
 [
  "public void opendevices01() {\tdosdevices dosdevices = new dosdevices();\tregex comportnameregex = new regex(@\"com\\d{1,3}\", regexoptions.ignorecase);\tforeach (keyvaluepair<string, string> keyvaluepair in dosdevices) {\tif (!string.isnullorempty(keyvaluepair.key) && !comportnameregex.ismatch(keyvaluepair.key)) {\tusing (serialport com1 = new serialport(keyvaluepair.key)) {",
  "checking exception thrown with key keyvaluepair key",
  0
 ],
 [
  "public void emitsource() {\twriteline();",
  "handle releaseing",
  1
 ],
 [
  "static int test_0_root_keeps_child () {\tfinalizerhelpers.performnopinaction (setuplinks);\tgc.collect ();\tgc.waitforpendingfinalizers ();",
  "error loading standard client configuration file",
  1
 ],
 [
  "public void discardnull_false_flase_default_readbyte() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "failed to add get a value for of type string",
  1
 ],
 [
  "public void emitsource() {\twriteline();",
  "using system reflection",
  0
 ],
 [
  "{\"v|verbose\", \"verbose output\", v => verbose = v!= null }, {\"t|target=\", \"target assembly name\", v => target = v }, {\"c|complist=\",\"licx file to compile\", v => complist = v }, {\"i|load=\", \"reference to load\", v=> {if (v != null) references.add(v);}}, {\"o|outdir=\", \"output directory for the .licenses file\", v=> targetdir = v }, {\"nologo\", \"do not display logo\", v=> nologo = null != v }, {\"h|?|help\", \"show help\", v=>help = v != null }\t};\tlist<string> extra;\ttry {\textra = p.parse(args);\t}\tcatch(optionexception e) {\treturn 1;\t}\tif (!nologo) {",
  "copyright c by remobjects software",
  0
 ],
 [
  "if (context.contexttype != _ctx.contexttype) {\tdebug.assert(this.unpersisted == true);\tthrow new invalidoperationexception(sr.savetomusthavesamecontexttype);\t}\tstorectx originalstorectx = getstorectxtouse();\t_ctx = context;\tstorectx newstorectx = getstorectxtouse();\tdebug.assert(newstorectx != null);\tdebug.assert(originalstorectx != null);\tif (this.unpersisted) {",
  "invalid directive location",
  1
 ],
 [
  "m_xsltarg.addextensionobject(\"myarg2\", i);\tretobj = m_xsltarg.getextensionobject(\"myarg2\");\tif (!i.equals(retobj)) {\tassert.true(false);\t}\tif (i != (int)retobj) assert.true(false);\tboolean bf = (1 == 0);\tm_xsltarg.addextensionobject(\"myarg3\", bf);\tretobj = m_xsltarg.getextensionobject(\"myarg3\");\tif (!bf.equals(retobj)) {",
  "failed to add get a value for of type boolean",
  0
 ],
 [
  "public override string tostring () {\tstringwriter sw = new stringwriter ();",
  "leaving thread",
  1
 ],
 [
  "intptr localpool = intptr.zero;\ttry {\tlocalpool = trystartoperation (monitor);\tintptr array = normalizepaths (localpool, paths);\tintptr commit_info = intptr.zero;\tcommitmessage = message;\tcheckerror (svn.client_commit (ref commit_info, array, false, ctx, localpool));\tunsafe {\tif (commit_info != intptr.zero) {\tmonitor.log.writeline ();",
  "onevent error",
  1
 ],
 [
  "static void main (string[] args) {",
  "hello world",
  0
 ],
 [
  "public void readafterfailedopen() {\tusing (serialport com = new serialport(\"bad_port_name\")) {",
  "verifying read method throws exception with a failed call to open",
  0
 ],
 [
  "datetime start = datetime.now;\ttry {\tif (web) {\tcontent = getwebpage (url);\t}\telse {\tcontent = getstreampage (url);\t}\t}\tcatch (exception e) {",
  "failed",
  0
 ],
 [
  "public override void garbagecollectionstopworldend (uint collection, uint generation, ulong counter) {",
  "uri",
  1
 ],
 [
  "method.body.variables.clear ();\tforeach (var variable in newbody.variables) {\tmbody.variables.add (variable);\t}\t}\tforeach (var instr in method.body.instructions) {\tif (instr.opcode != opcodes.ldstr) continue;\tstring value;\tif (resourcesstrings.trygetvalue ((string)instr.operand, out value)) {\tif (options.verbose) {",
  "exitcode null",
  1
 ],
 [
  "static int parsetestname (string name) {\tfor (int i = 0; i < available_tests.length; ++i) {\tif (available_tests[i].item2 == name) return i;\t}",
  "invalid test name",
  0
 ],
 [
  "public static void threadmethod_waiter_2() {",
  "value in main context",
  1
 ],
 [
  "private safeprocesshandle getprocesshandle(int access, bool throwifexited) {\t#if feature_traceswitch debug.writelineif(_processtracing.traceverbose, \"getprocesshandle(access = 0x\" + access.tostring(\"x8\", cultureinfo.invariantculture) + \", throwifexited = \" + throwifexited + \")\");\t#if debug if (_processtracing.traceverbose) {\tstackframe calledfrom = new stacktrace(true).getframe(0);",
  "bad view hash offset size wrong underlying this",
  1
 ],
 [
  "private static bool callsecondclassoperator() {\tint failcount = 0;\tverify.firstcalled = false;\tdynamic d = new firstclassreturnclass<int>();\tif ((!(((secondclass<int>)d.instanceproperty) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "hi",
  1
 ],
 [
  "break;\treturn 1;\t}\tvar paths = profile.substring (0, p).split (new char [] { '-' });\tstringbuilder sb = new stringbuilder ();\tforeach (string dir in paths){\tif (sb.length != 0) sb.append (\";\");\tsb.append (root_mcs + \"\\\\class\\\\lib\\\\\" + dir);\t}\tenvironment.setenvironmentvariable (\"mono_path\", sb.tostring ());",
  "starting test thread with priority to abovenormal",
  1
 ],
 [
  "using (mockcontext context = mockcontext.start(this.gettype().fullname)) {\tvar resourcesclient = resourcesmanagementtestutilities.getresourcemanagementclientwithhandler(context, handler1);\tvar networkmanagementclient = networkmanagementtestutilities.getnetworkmanagementclientwithhandler(context, handler2);\tvar location = networkmanagementtestutilities.getresourcelocation(resourcesclient, \"microsoft.network/virtualnetworkgateways\");\tstring resourcegroupname = testutilities.generatename(\"csmrg\");\tresourcesclient.resourcegroups.createorupdate(resourcegroupname, new resourcegroup {\tlocation = location });\tstring publicipname = testutilities.generatename();\tstring domainnamelabel = testutilities.generatename();\tvar nic1publicip = testhelper.createdefaultpublicipaddress(publicipname, resourcegroupname, domainnamelabel, location, networkmanagementclient);",
  "publicipaddress gateway ip",
  0
 ],
 [
  "private void unpublishthreadfunc() {\ttry {\tthis.publisher.unpublish(this.wdeprogramnodesingleton);\t}\tcatch (exception e) {",
  "installed into the gac",
  1
 ],
 [
  "static void main (string [] args) {\tif (!file.exists (\"genproj.cs\")) {\tenvironment.exit (1);\t}\tif (args.length == 1 && args [0].tolower ().contains (\"-h\")) {",
  "genproj exe with no arguments is equivalent to genproj exe true false",
  0
 ],
 [
  "private void checkrowversion(datarow dr) {\tconsole.writeline(\"\");",
  "has",
  0
 ],
 [
  "assert.areequal (test, uri.tostring (), \"tostring/\" + test);\t}\t}\t[test]\tpublic void unixlocalpath_wtf () {\tstring path = \"file: uri fileuri = new uri( path );\tassert.areequal (\"/tmp/foo/bar\", fileuri.absolutepath, path);\tstring path2 = \"file: fileuri = new uri (path2);\tassert.areequal (\"file: }\tpublic static void print (uri uri) {",
  "scheme",
  0
 ],
 [
  "static void help (string details) {\tswitch (details) {\tbreak;\tbreak;\tbreak;",
  "hook done",
  1
 ],
 [
  "}\t}\tfor (int i = actions.count - 1; i > 0; i--) {\tint j = rnd.next(0, i);\tvar tmp = actions[i];\tactions[i] = actions[j];\tactions[j] = tmp;\t}\tforeach (var action in actions) {\tif (!action()) {",
  "recursive call at",
  1
 ],
 [
  "private void dumpsqlparam(sqlparameter param) {",
  "scale",
  0
 ],
 [
  "for (int i = celements - 2; i >= 0; i--) {\tadspath.append(pathname.getelement(i));\tadspath.append(\"/\");\t}\tadspath.remove(adspath.length - 1, 1);\tde.path = adspath.tostring();\t}\telse {\tdebug.assert(sidtype == sidtype.realobject);\tde.path = nativemember.adspath;",
  "error",
  1
 ],
 [
  "#endif invocationexpression invocation = expr as invocationexpression;\tif (invocation != null) {\tmemberreferenceexpression fre = invocation.targetobject as memberreferenceexpression;\tif (fre != null) {\tif (fre.membername == \"getstring\") {\tif (invocation.arguments.count > 0) {\tprimitiveexpression p = invocation.arguments[0] as primitiveexpression;\tif (p != null) {\tstring key = p.value as string;\tif (key != null) {",
  "resourcetoolkit icsharpcodecorenrefactoryresourceresolver found key",
  0
 ],
 [
  "dt.columns.add (\"col3\");\tdt.constraints.add (new uniqueconstraint (dt.columns [0]));\tdv.sort = \"col2\";\tdt.columns.remove (\"col3\");\tdv.rowfilter = \"col1 <> 0\";\tdv.rowstatefilter = dataviewrowstate.deleted;\tdv.rowstatefilter = dataviewrowstate.currentrows;\tdt.rows.add (new object [] {1, 3});\tdt.rows.add (new object [] {2, 2});\tdt.rows.add (new object [] {3, 1});",
  "done iterations iterations",
  1
 ],
 [
  "int startpos = 0;\tint readsize = 3;\tint currentsize = 0;\tdatareader.read();\twhile (datareader.read()) {\tcurrentsize = datareader.readcontentasbase64(buffer, startpos, readsize);\tcerror.equals(currentsize, 2, \"size\");\tcerror.equals(buffer[0], (byte)215, \"buffer1\");\tcerror.equals(buffer[1], (byte)109, \"buffer2\");\tif (!(isxpathnavigatorreader() || isxmlnodereader() || isxmlnodereaderdatadoc())) {",
  "lineposition",
  0
 ],
 [
  "static void main(string[] args) {\ttry {\tnamevaluecollection appsettings = configurationmanager.appsettings;\tconfiguration config = configurationmanager.openexeconfiguration (configurationuserlevel.none);\tappsettingssection appsettings = config.appsettings;",
  "external auth using persist security info",
  1
 ],
 [
  "public static void thread() {\tthread.sleep(500);",
  "thread exiting",
  0
 ],
 [
  "public static void testpersistsucurityinfo4() {\tconsole.writeline(\"\\ntestpersistsucurityinfo4 - persist security info=false with password at front\");\toracleconnection con = new oracleconnection(\";password=tiger;data source=palis;user id=scott;persist security info=false\");",
  "connectionstring before open",
  0
 ],
 [
  "public override string tostring () {\tstringwriter sw = new stringwriter ();",
  "usage git command options",
  1
 ],
 [
  "}\tctorparametertypes = interningprovider.internlist(ctorparametertypes);\t}\tbyte[] blob;\ttry {\tblob = attribute.__getblob ();\t} catch (ikvm.reflection.missingmemberexception) {\tblob = new byte[0];\t} catch (exception e) {\tblob = new byte[0];",
  "ikvm error while getting blob",
  0
 ],
 [
  "public static int main () {",
  "hello world",
  0
 ],
 [
  "public void showmethoddef (object sender, methoddefinedeventargs args) {",
  "is in table",
  0
 ],
 [
  "} else {\tcode = value.tostring ();\t}\tbreak;\tcase typecode.char: code = \"'\" + ((char) value).tostring () + \"'\"; break;\tcase typecode.datetime: code = \"new system.datetime (\" + ((datetime) value).ticks + \")\"; break;\tcase typecode.dbnull: code = \"system.dbnull.value\" ; break;\tcase typecode.object: code = null;\tif (value is exception) {\twriter.writeline (tab + \"\\tobject zxf = {0}.{1};\", showname, name);",
  "catch ex",
  0
 ],
 [
  "public void testremovebracesfromelse() {\ttest<removebracesaction>(@\"class testclass {\tvoid test () {\tif (true) {\t} $else {\t}\t}\t}\", @\"class testclass {\tvoid test () {\tif (true) {",
  "fatal error no inputs specified",
  1
 ],
 [
  "private static bool callsecondclassoperator() {\tint failcount = 0;\tdynamic d = new firstclassreturnclass();\tverify.firstcalled = false;\tif ((!(((d + 1)) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "failed xinitthreads the event loop will not function properly",
  1
 ],
 [
  "static void initsilo(string[] args) {\thostwrapper = new orleanshostwrapper(args);\tif (!hostwrapper.run()) {",
  "hello",
  1
 ],
 [
  "break;\tcase \"-b\": notbefore = datetime.parse (args [i++] + \" 23:59:59\", cultureinfo.invariantculture);\tbreak;\tcase \"-cy\": switch (args [i++].tolower ()) {\tcase \"authority\": if (bce == null) bce = new basicconstraintsextension ();\tbce.certificateauthority = true;\tbreak;\tcase \"end\": bce = null;\tbreak;\treturn -1;",
  "unsupported certificate type",
  0
 ],
 [
  "public static void initialize () {\tif (platformservice != null) return;\tobject[] platforms = addinmanager.getextensionobjects (\"/monodevelop/core/platformservice\");\tif (platforms.length > 0) platformservice = (platformservice) platforms [0];\telse {\tplatformservice = new defaultplatformservice ();",
  "couldn t find file",
  1
 ],
 [
  "}\tconsole.writeline (\");\");\tif (c [0] != 'v') console.writeline ($\"\\t*({typetosigtype (c [0])}*)margs->retval = res;\");\tconsole.writeline (\"\\n}\\n\");\t}\tconsole.writeline (\"{\");\tfor (int i = 0; i < cookies.length; ++i) {\tvar c = cookies [i];\tconsole.write (\"\\t\");\tif (i > 0) console.write (\"else \");",
  "if strcmp cookie",
  0
 ],
 [
  "outputline (@\"       \\close to close the connection\");\toutputline (@\"       \\e to execute sql query (select)\");\toutputline (@\"       \\h to show help (all commands).\");\toutputline (@\"       \\defaults to show default variables.\");\toutputline (\"\");\t}\tpublic void showhelp () {\tconsole.writeline (\"\");\tif (!waitforenterkey ()) return;\tif (!waitforenterkey ()) return;",
  "set name value to set an internal variable",
  0
 ],
 [
  "public void performancecounter_createcounter_count0 () {\tassert.areequal (0, a.countersample.rawvalue);\ta.countersample.increment ();\tassert.areequal (1, a.countersample.rawvalue);",
  "stop",
  1
 ],
 [
  "object [] arguments;\targuments = new object [] { };\tif (compare (\"tostring\", mask, ref stateindex, arguments, ref more_states)) {\tcontinue;\t}\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;",
  "positioned on wrong element not on dns",
  1
 ],
 [
  "string value;\tif (colorcache.trygetvalue (key, out color)) return true;\tif (!settings.trygetvalue (key, out value)) {\tcolor = new hslcolor (0, 0, 0);\treturn false;\t}\ttry {\tcolor = hslcolor.parse (value);\tcolorcache = colorcache.setitem (key, color);\t} catch (exception e) {",
  "error while parsing color",
  0
 ],
 [
  "bool one = false, two = false;\ttry {\ttry {\tthrow new exception ();\t} catch (exception e) {\tone = true;\tthrow;\t}\t} catch {\ttwo = true;",
  "verifying write method throws exception after a call to basestream close",
  1
 ],
 [
  "int count = 0;\tc origin = new c();\tdynamic d = origin;\tfor (; d;) {\tif (count == 0) {\tcount++;\tbreak;\t}\telse {\tfailcount++;",
  "failed double",
  1
 ],
 [
  "if (s8.f4 != 4+906) {\treturn 4;\t}\tif (s8.f5 != 5+906) {\treturn 5;\t}\tif (s8.f6 != 6+906) {\treturn 6;\t}\tif (s8.f7 != 7+906) {",
  "abc system console writeline a",
  1
 ],
 [
  "public void writedebugline_showmessage_messagewrittentoconsole() {\tcreatehostuserinterface();\thostui.writedebugline(\"test\");",
  "helloworld",
  1
 ],
 [
  "else throw new argumentexception(sr.getstring(sr.sourcealreadyexists, source, machinename));\t}\tpermissionset permissionset = _unsafegetassertpermset();\tpermissionset.assert();\tregistrykey basekey = null;\tregistrykey eventkey = null;\tregistrykey logkey = null;\tregistrykey sourcelogkey = null;\tregistrykey sourcekey = null;\ttry {",
  "createeventsource getting local machine regkey",
  0
 ],
 [
  "try {\tfile.delete(temppath);\t} catch {}\t} else {\tsd.workbench.getpad(typeof(compilermessageview)).bringpadtofront();\ttaskservice.buildmessageviewcategory.appendtext( stringparser.parse(\"${res:fileutilityservice.errorwhileloading}\") + \"\\r\\n\" + filename + \"\\r\\n\" + e.message + \"\\r\\n\" );\treturn null;\t}\t} catch (fileloadexception e) {\tif (e.message.contains(\"hresult: 0x80131402\")) {",
  "get hresult loading mixed modes asm from disk",
  0
 ],
 [
  "protected override void insertitem (int index, baseitem item) {\tbase.insertitem (index, item);",
  "get at",
  1
 ],
 [
  "public xmlschema loadschema(string path, string baseuri) {\tstring includeuri = path.getfullpath(baseuri);\tstring correcturi = path.getfullpath(path);",
  "cg return",
  1
 ],
 [
  "public void buildstartedhandler (object sender, buildstartedeventargs args) {\tif (isverbositygreaterorequal (loggerverbosity.normal)) {\twriteline (string.empty);",
  "assembly information",
  1
 ],
 [
  "try {\tassemblyname aname = new assemblyname();\taname.codebase = assembly.codebase;\tprogressdialog.updateprogresstext(assembly.codebase);\tguid guid = guid.empty;\tif (assembly.typelibguid.length > 0) {\tguid = new guid(assembly.typelibguid);\ttypelibrary lib = typelibrary.gettypelibopened(guid, assembly.typelibversion);\tstring assyfilename = new uri(assembly.codebase).localpath;\tif (lib == null || !typelibrary.isassycurrent(assyfilename, lib.filename)) {",
  "failure",
  1
 ],
 [
  "public void clear() {",
  "trackedcollection clear",
  0
 ],
 [
  "private static bool callsecondstructinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturnstruct<int>();\tif ((!(bool)(((dynamic)s.instanceproperty).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "program = \"uname\";\tworkingdirectory = \"/does-not-exist\";\t}\tif (isprograminstalled(program)) {\tvar psi = new processstartinfo {\tfilename = program, useshellexecute = false, workingdirectory = workingdirectory };\twin32exception e = assert.throws<win32exception>(() => process.start(psi));\tassert.notequal(0, e.nativeerrorcode);\t}\telse {",
  "program program is not installed on this machine",
  0
 ],
 [
  "}\tbit_array.append (string.format (\"(int) 0x{0:x8}\", numbers [i]));\tif (i != numbers.length - 1) bit_array.append (\", \");\t}\tbit_array.appendline (\"\");\tbit_array.appendline (tabs + \"};\");\tbit_array.appendline (tabs + \"};\");\twritelinenonformat (bit_array.tostring ());\twriteline (\"bitarray bits = new bitarray (answers);\");\twriteline (\"for (int i = 0; i < (int) char.maxvalue; i++)\");",
  "assert areequal bits get i maskedtextprovider isvalidmaskchar char i i tostring",
  0
 ],
 [
  "public void emitsource() {\twriteline();",
  "using system",
  0
 ],
 [
  "public void addparam5() {\tm_xsltarg = new xsltargumentlist();\ttry {\tm_xsltarg.addparam(szinvalid, szempty, \"test1\");\t}\tcatch (system.xml.xmlexception) {\treturn;\t}",
  "system xml xmlexception not thrown for invalid param name",
  0
 ],
 [
  "static void showerrorbox(exception exception, string message, bool mustterminate) {\tif (showingbox) return;\tshowingbox = true;\ttry {\tif (exception != null) {\ttry {\tsd.analyticsmonitor.trackexception(exception);\t} catch (exception ex) {",
  "runruntests waiting for a future w canceled token if we hang something went wrong",
  1
 ],
 [
  "public void openclosenewinstanceopen() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "to compare windiff",
  1
 ],
 [
  "static webconfigurationmanager () {\tvar section_cache_size = default_section_cache_size;\tint section_cache_size_override;\tbool size_overriden = false;\tif (int.tryparse (environment.getenvironmentvariable (cache_size_overriding_key), out section_cache_size_override)) {\tsection_cache_size = section_cache_size_override;\tsize_overriden = true;",
  "overloaded unary operator",
  1
 ],
 [
  "public static void createwhitespacehandlingtestfile(string strfilename) {\tfilepathutil.addstream(strfilename, new memorystream());\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"]>\");",
  "test end",
  1
 ],
 [
  "public void readafterfailedopen() {\tusing (serialport com = new serialport(\"bad_port_name\")) {",
  "verifying read method throws exception with a failed call to open",
  0
 ],
 [
  "static void addmodifiers(entitydeclaration parent, locationsbag.memberlocations location) {\tif (location == null || location.modifiers == null) return;\tforeach (var modifier in location.modifiers) {\tmodifiers mod;\tif (!modifiertable.trygetvalue(modifier.item1, out mod)) {",
  "modifier can t be converted",
  0
 ],
 [
  "try {\txslcompiledtransform xslt = new xslcompiledtransform();\txslt.load(fullfilepath(\"identity.xsl\"));\txslt.transform((ixpathnavigable)null, (xsltargumentlist)null, (stream)null);\t}\tcatch (argumentnullexception) {\treturn;\t}\tcatch (exception e) {\t_output.writeline(e.tostring());",
  "anagram classes",
  1
 ],
 [
  "public static int main () {\ttest (i => probearray (new byte [int.maxvalue - i]));\ttest (i => probearray (new byte [int.maxvalue - i * 100]));",
  "true",
  1
 ],
 [
  "public async task constructor_bad_await() {\ttry {\tint id = random.next();\tibadconstructortestgrain grain = this.grainfactory.getgrain<ibadconstructortestgrain>(id);\tawait grain.dosomething();\tassert.true(false, \"expected throwsomething call to fail as unable to activate grain\");\t}\tcatch (timeoutexception te) {",
  "received timeout",
  0
 ],
 [
  "public override void run() {",
  "failed to add get a value for of type string",
  1
 ],
 [
  "return false;\t}\tint optionalheaderstart = peheaderstart + 4 + 20;\tf.position = optionalheaderstart;\tint dotnetheaderoffset;\tswitch (r.readint16()) {\tcase 0x10b: dotnetheaderoffset = 208;\tbreak;\tcase 0x20b: dotnetheaderoffset = 224;\tbreak;",
  "net detection failed invalid pe magic number",
  0
 ],
 [
  "static void dopostgrestest (idbconnection cnc) {\tidatareader reader;\tobject odatavalue;\ttry {\tdroptable (cnc);\t}\tcatch (pgsqlexception e) {",
  "failed double",
  1
 ],
 [
  "_restrictionerrormsg = null;\tif (basetype != null && basetype != xmlschemacomplextype.anytype && complextype.derivedby == xmlschemaderivationmethod.restriction) {\txmlschemaparticle derivedparticle = cannonicalizepointlessroot(complextype.contenttypeparticle);\txmlschemaparticle baseparticle = cannonicalizepointlessroot(basetype.contenttypeparticle);\tif (!isvalidrestriction(derivedparticle, baseparticle)) {\t#if debug if (complextype.contenttypeparticle != null && basetype.contenttypeparticle != null) {\tstring position = string.empty;\tif (complextype.sourceuri != null) {\tposition = \" in \" + complextype.sourceuri + \"(\" + complextype.linenumber + \", \" + complextype.lineposition + \")\";\t}",
  "typeloadexception",
  1
 ],
 [
  "public void testfieldconstant () {\ttest<introduceconstantaction> (@\"class testclass {\tpublic void hello () {",
  "hello world",
  0
 ],
 [
  "assemblyname an = assemblyname.getassemblyname ( path.combine (dir, assembly_filename));\tdirectory.delete (dir, true);\tif (package != null) {\tstring link_dir = path.combine (libdir, package);\tstring link = path.combine (link_dir, assembly_filename);\ttry {\tfile.delete (link);\t} catch {\t}\tif (directory.getfiles (link_dir).length == 0) {",
  "typelib populatefromregistry",
  1
 ],
 [
  "using (mockcontext context = mockcontext.start(this.gettype().fullname)) {\tvar resourcesclient = resourcesmanagementtestutilities.getresourcemanagementclientwithhandler(context, handler1);\tvar networkmanagementclient = networkmanagementtestutilities.getnetworkmanagementclientwithhandler(context, handler2);\tvar location = networkmanagementtestutilities.getresourcelocation(resourcesclient, \"microsoft.network/connections\");\tstring resourcegroupname = testutilities.generatename(\"csmrg\");\tresourcesclient.resourcegroups.createorupdate(resourcegroupname, new resourcegroup {\tlocation = location });\tstring publicipname = testutilities.generatename();\tstring domainnamelabel = testutilities.generatename();\tvar nic1publicip = testhelper.createdefaultpublicipaddress(publicipname, resourcegroupname, domainnamelabel, location, networkmanagementclient);",
  "publicipaddress gateway ip",
  0
 ],
 [
  "public override void startblock (ulong startcounter, datetime starttime, ulong threadid) {",
  "x certificate v self signed",
  1
 ],
 [
  "int mdiff = (int)tdiff/10000;\ttms += mdiff;\t}\tran++;\tif (result != expected) {\tfailed++;\t}\t}\tif (do_timings) {\t}",
  "executing engine starting at",
  1
 ],
 [
  "protected override void setauthprincipalenablestatus(authenticableprincipal ap, bool enable) {\tdebug.assert(ap.fakeprincipal == false);\tbool acctdisabled;\tdirectoryentry de = (directoryentry)ap.underlyingobject;\tif (de.properties[\"msds-useraccountdisabled\"].count > 0) {\tdebug.assert(de.properties[\"msds-useraccountdisabled\"].count == 1);\tacctdisabled = (bool)de.properties[\"msds-useraccountdisabled\"][0];\t}\telse {",
  "mapped local user config path",
  1
 ],
 [
  "public void failure6 (int j) {\tlock (locker) {\tlock (locker2) {",
  "initialize directorynode",
  1
 ],
 [
  "static void help () {",
  "assert areequal mtp replace out out out maskedtextresulthint out",
  1
 ],
 [
  "public void basictest_accessinstanceproperties_noexceptions() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {",
  "hello world",
  1
 ],
 [
  "for (int j = 0; j < useless.length; j++) {\tif (useless[j] == 'u') console.writeline (\"i have detected an u char\");\t}\ttry {\tforeach (string environmentvariable in environment.getenvironmentvariables ().keys) console.writeline (environmentvariable);\t}\tcatch (system.security.securityexception exception) {\tconsole.writeline (exception.message);\tconsole.writeline (exception);\t}",
  "i will add more useless code",
  0
 ],
 [
  "static void dump(astcontext ctx, parsertargetinfo targetinfo, target target) {\tstring targetfile;\tif (!string.isnullorempty (outputfile)) {\ttargetfile = outputfile;\t} else {\ttargetfile = target.triple;\tif (!string.isnullorempty (outputdir)) targetfile = path.combine (outputdir, targetfile);\ttargetfile += \".h\";\t}\tusing (var writer = new streamwriter(targetfile)) {",
  "stack",
  1
 ],
 [
  "outputline (@\"                  oracle,postgresql,sqlite,sybase,tds)\");\toutputline (@\"       \\open to open the connection\");\toutputline (@\"       \\close to close the connection\");\toutputline (@\"       \\e to execute sql query (select)\");\toutputline (@\"       \\h to show help (all commands).\");\toutputline (@\"       \\defaults to show default variables.\");\toutputline (\"\");\t}\tpublic void showhelp () {\tconsole.writeline (\"\");",
  "oledb sqlclient mysql odbc",
  0
 ],
 [
  "reltask.id = \"jobrelease\";\t}\tunboundjob.commit();\t}\tclient.joboperations.addtask(jobid, new cloudtask(\"forcejobprep\", \"cmd /c echo testomjobreleaseschedulingerror\"));\ttaskstatemonitor tsm = client.utilities.createtaskstatemonitor();\ttsm.waitall( client.joboperations.listtasks(jobid), taskstate.completed, timespan.fromminutes(10), additionalbehaviors: new[]\t{\tnew protocol.requestinterceptor((x) => {\tlist<computenode> allcomputenodes = client.pooloperations.listcomputenodes(this.poolfixture.poolid).tolist();",
  "compute nodes",
  0
 ],
 [
  "public void transformstrstr3(xslinputtype xslinputtype, readertype readertype) {\tstring szfullfilename = fullfilepath(\"fruits.xml\");\tif (loadxsl(\"showparam.xsl\", xslinputtype, readertype) == 1) {\ttry {\txslt.transform(szfullfilename, (string)null);\t}\tcatch (system.argumentexception) {\treturn;\t}\t}",
  "reader movetocontent",
  1
 ],
 [
  "static void main() {",
  "by create category table cs available in the mcs",
  1
 ],
 [
  "}\tfragment = new byte[fragmentlength];\tbuffer.blockcopy(recorddata, position, fragment, 0, fragmentlength);\tif ((this.context.write != null) && (this.context.write.cipher != null)) {\tfragment = this.encryptrecordfragment (contenttype, fragment);\t}\trecord.write((byte)contenttype);\trecord.write(this.context.protocol);\trecord.write((short)fragment.length);\trecord.write(fragment);",
  "record data",
  0
 ],
 [
  "public override xmlparserstate pushchar (char c, ixmlparsercontext context, ref string rollback) {\tvar namedobject = context.nodes.peek () as inamedxobject;\tif (namedobject == null || namedobject.name.prefix != null) throw new invalidoperationexception (\"invalid state\");\tdebug.assert (context.currentstatelength > 1 || isvalidnamestart (c), \"first character pushed to a xmltagnamestate must be a letter.\");\tdebug.assert (context.currentstatelength > 1 || context.keywordbuilder.length == 0, \"keyword builder must be empty when state begins.\");\tif (xmlchar.iswhitespace (c) || c == '<' || c == '>' || c == '/' || c == '=') {\trollback = string.empty;\tif (context.keywordbuilder.length == 0) {",
  "mono version",
  1
 ],
 [
  "}\tbyte[][] tempvalue = (byte[][])value[valuecount];\terror = encodingmultibytearrayhelper(berelement, tempvalue, fmt);\tvaluecount++;\t}\telse {\tdebug.writeline(new string(fmt, 1));\tthrow new argumentexception(string.format(cultureinfo.currentculture, sr.berconverterundefinechar));\t}\tif (error == -1) {",
  "hello world",
  1
 ],
 [
  "public async task getasync_allowautoredirecttrue_redirectfromhttptohttps_statuscodeok() {\thttpclienthandler handler = createhttpclienthandler();\thandler.allowautoredirect = true;\tusing (var client = new httpclient(handler)) {\turi uri = configuration.http.redirecturifordestinationuri( secure: false, statuscode: 302, destinationuri: configuration.http.secureremoteechoserver, hops: 1);",
  "uri",
  0
 ],
 [
  "private void emithandle(recorddef record) {\tstring handlename = $\"{record.name}handle\";\topenscope($\"public partial struct {handlename}\");\topenscope(\"public override bool equals(object obj)\");\twriteline($\"    return _value == (({handlename})obj)._value;\");\twriteline(\"    return _value == ((handle)obj)._value;\");",
  "reader movetoelement",
  1
 ],
 [
  "static bool callsecondstructindexer() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturndynamicstruct<int>();\tif ( (!(bool)(s[1][2])) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public static int errorprocessbody() {",
  "listing os versions",
  1
 ],
 [
  "static bool runtest (methodinfo test) {\tconsole.write (\"running test {0, -25}\", test.name);\ttry {\ttest.invoke (new tester (), null);",
  "analyzing",
  1
 ],
 [
  "private static bool callsecondstructinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturndynamicstruct<int>();\tif ((!(bool)(s.instancemethod().instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "pre",
  1
 ],
 [
  "public androidtzdata (params string[] paths) {\tforeach (var path in paths) if (loaddata (path)) {\ttzdatapath = path;\treturn;\t}",
  "could not register extended response class not found",
  1
 ],
 [
  "public int initreaderpointer() {\tint iretval = test_pass;",
  "unable to load assembly",
  1
 ],
 [
  "array.reverse (allocationstatistics);\tuint totalallocatedbytes = 0;\tforeach (heapsnapshot.allocationstatisticsperclass s in allocationstatistics) {\ttotalallocatedbytes += s.allocatedbytes;\t}\tforeach (heapsnapshot.allocationstatisticsperclass s in allocationstatistics) {\tif (s.allocatedbytes > 0) {\t}\t}\t} else {",
  "no allocation statistics for this collection",
  0
 ],
 [
  "static void displaycertificate (x509certificate x509, bool machine, bool verbose) {\tif (verbose) {\tconsole.writeline (\"  algorithm parameters: {0}\", (x509.keyalgorithmparameters == null) ? \"none\" : cryptoconvert.tohex (x509.keyalgorithmparameters));",
  "generating gui code for project",
  1
 ],
 [
  "info.clear ();\tforeach (var item in menu.items) {\tadditem (info, item);\t}\tif (menu.items.count == 0) {\tinfo.add (new commandinfo (gettextcatalog.getstring (\"no code fixes available\"), false, false), null);\t}\tinfo.notifychanged ();\t} catch (operationcanceledexception) {\t} catch (exception e) {",
  "empty",
  1
 ],
 [
  "if (!string.isnullorwhitespace(var.desc)) {\tsystem.console.writeline(indent + var.desc);\t}\tif (!string.isnullorwhitespace(tse.message)) {\t}\tmodule.skipcount++;\t}\tcatch (exception e) {\tsystem.console.writeline(indent + var.desc);\tsystem.console.writeline(e);",
  "failed",
  0
 ],
 [
  "if (listmode) {\tfailures++;\t}\treturn;\t}\tstring searchstring = getsearchstring (asm_info);\tstring [] directories = directory.getdirectories (asmdir, searchstring);\tif (directories.length == 0) {\tif (listmode) {\tfailures++;",
  "exception",
  1
 ],
 [
  "public void dohelp () {\tshowbanner ();\tconsole.writeline ();\tdousage ();",
  "options",
  0
 ],
 [
  "public void invoke(bool setmember, bool autoinvoke, bool ignoreexception) {",
  "parent sdk version",
  1
 ],
 [
  "int failcount = 0;\tvar a = new[]\t{\t1, 2, 3 }\t;\tc origin = new c(1);\tdynamic d = origin;\tvar q = ( from m in a where (bool)d select m).toarray();\tif (q.length != 0) {\tfailcount++;",
  "test failed conversion result is incorrect",
  0
 ],
 [
  "public void setcurrentnamespace (string ns) {\twriter = namespaces [ns] as stringwriter;\tif (writer == null) {\tindent = 0;\twriter = new stringwriter ();\tnamespaces [ns] = writer;",
  "appear to have accidently closed the reader",
  1
 ],
 [
  "eventlogentry entry = getentrywitholdest(i);\tif (this.synchronizingobject != null && this.synchronizingobject.invokerequired) this.synchronizingobject.begininvoke(this.onentrywrittenhandler, new object[] { this, new entrywritteneventargs(entry) });\telse onentrywrittenhandler(this, new entrywritteneventargs(entry));\ti++;\t}\toldest = oldestentrynumber;\tcount = entrycount + oldest;\t}\t}\tcatch (exception e) {",
  "mdict count is",
  1
 ],
 [
  "static private void help () {",
  "access friend private static method fail",
  1
 ],
 [
  "public void dump (textwriter tw) {\tthis.egraph.dump (tw);\tforeach (symvalue sv in this.unmodifiedsinceentry.elements) tw.write (\"{0} \", sv);\ttw.writeline ();",
  "unmodified locations for fields",
  0
 ],
 [
  "readhandle = null;\t}\tif (writehandle != null) {\ttry {\twritehandle.close();\t}\tcatch (ioexception) {\tthrow sharedutils.createsafewin32exception();\t}\twritehandle = null;",
  "eventlog close closed write handle",
  0
 ],
 [
  "string fixupmethodname = \"fixup_\" + methodname;\tbool anyfixups = writememberfixupbegin(members, fixupmethodname, \"p\");\tif (members.length > 0 && members[0].mapping.isreturnvalue) writer.writeline(\"isreturnvalue = true;\");\tstring checktypehrefsource = (!haswrapperelement && !writeaccessors) ? \"hreflist\" : null;\tif (checktypehrefsource != null) writeinitchecktypehreflist(checktypehrefsource);\twriteparamsread(mappings.length);\tint loopindex = writewhilenotloopstart();\twriter.indent++;\tstring unrecognizedelementsource = checktypehrefsource == null ? \"unknownnode((object)p);\" : \"if (reader.getattribute(\\\"id\\\", null) != null) { readreferencedelement(); } else { unknownnode((object)p); }\";\twritememberelements(members, unrecognizedelementsource, \"unknownnode((object)p);\", null, null, checktypehrefsource);",
  "reader movetocontent",
  0
 ],
 [
  "m_xsltarg.addparam(\"myarg2\", szempty, (uint16)i);\tm_xsltarg.removeparam(\"myarg2\", szempty);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (retobj != null) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg2\", szempty, (int32)i);\tm_xsltarg.removeparam(\"myarg2\", szempty);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (retobj != null) {",
  "failed to remove",
  0
 ],
 [
  "numsecretsinvault += results.count();\tforeach (var m in results) console.out.writeline(\"\\t{0}\", m.identifier.name);\t}\twhile (results != null && !string.isnullorwhitespace(results.nextpagelink)) {\tresults = task.run(() => keyvaultclient.getsecretsnextasync(results.nextpagelink)).configureawait(false).getawaiter().getresult();\tif (results != null) {\tnumsecretsinvault += results.count();\tforeach (var m in results) console.out.writeline(\"\\t{0}\", m.identifier.name);\t}\t}",
  "number of secrets in the vault",
  0
 ],
 [
  "bytes = r.readbytes (bufferlen);\twhile(bytes.length > 0) {\tlob.write (bytes, 0, bytes.length);\tbytes1 = bytearraycombine (bytes1, bytes);\tif (bytes.length < bufferlen) break;\tbytes = r.readbytes (bufferlen);\t}\tr.close();\tfs.close ();\tlob.close ();",
  "the application was terminated by a signal",
  1
 ],
 [
  "object [] arguments;\targuments = new object [] { str, i, j, int32_out, maskedtextresulthint_out };\tif (compare (\"replace\", mask, ref stateindex, arguments, ref more_states)) {\tcontinue;\t}\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;",
  "sdsutils setpassword caught targetinvocationexception with message",
  1
 ],
 [
  "public int transformresolver(string szxmlfile, xmlresolver xr, bool errorcase, transformtype transformtype, doctype doctype) {\tlock (s_outfilememorylock) {\tszxmlfile = fullfilepath(szxmlfile);\tixpathnavigable xd = loadxml(szxmlfile, doctype);",
  "executing transform",
  0
 ],
 [
  "}\tif (generatortype == null) error (generatortypenotfound, typename);\t}\tif (generatortype != null) {\tif (!generatortype.issubclassof (typeof (codedomprovider))) error (generatortypeisnotcodegenerator, typename);\ttry {\tprovider = (codedomprovider) activator.createinstance (generatortype, null);\t} catch (exception ex) {\terror (generatorthrewexception, generatortype.assemblyqualifiedname.tostring () + \" --> \" + ex.message);\t}",
  "loaded custom generator type",
  0
 ],
 [
  "if (peer.isopaque) continue;\tif (peer.isenum) {\tarraylist enum_lines = new arraylist ();\tforeach (string name in peer.enumconstants.keys) {\tenum_lines.add (string.format (\"\\t{0}_{1} = {2}\", peer.name, name, peer.enumconstants[name]\t));\t}\tfile.writeline (\"{0}\\n}};\\n\", join (\",\\n\", enum_lines));\t}\telse {",
  "failed ushort",
  1
 ],
 [
  "compareresult actualvalue;\ttestlibrary.testframework.beginscenario(\"postest1:get the property and verify its fields\");\ttry {\topcode opcode = opcodes.tailcall;\tactualvalue = compareopcode(opcode, \"tail.\", stackbehaviour.pop0, stackbehaviour.push0, operandtype.inlinenone, opcodetype.prefix, 2, (byte)0xfe, (byte)0x14, flowcontrol.meta);\tif (expectedvalue != actualvalue) {\tretval = false;\t}\t}\tcatch (exception e) {",
  "classcache found match for",
  1
 ],
 [
  "retobj = m_xsltarg.getparam(\"myarg\" + i, szempty);\tif (retobj.tostring() != \"test\" + str) {\tassert.true(false);\t}\ti++;\t}\tforeach (string str in szwhitespace) {\tm_xsltarg.addparam(\"myarg\" + i, szempty, \"test\");\tretobj = m_xsltarg.getparam(\"myarg\" + str, szempty);\tif (retobj != null) {",
  "deduplicating",
  1
 ],
 [
  "_log.writeline(\"-- \" + gateway.address.tostring());\t}\tassert.notnull(ipproperties.multicastaddresses);\tforeach (ipaddressinformation multi in ipproperties.multicastaddresses) {\t_log.writeline(\"-- \" + multi.address.tostring());\t}\tassert.notnull(ipproperties.unicastaddresses);\tforeach (unicastipaddressinformation uni in ipproperties.unicastaddresses) {\t_log.writeline(\"-- \" + uni.address.tostring());\tassert.notnull(uni.ipv4mask);",
  "bad command line arguments supplied arg",
  1
 ],
 [
  "public override imessage invoke (imessage request) {\timethodcallmessage call = (imethodcallmessage)request;",
  "verifying discard method after input buffer has been filled",
  1
 ],
 [
  "private static bool test13() {\tmyenum a = myenum.second;\tdynamic b = a;\tb++;\tif (b == myenum.third) return true;",
  "hello world",
  1
 ],
 [
  "private void dumpsqlparam(sqlparameter param) {",
  "size",
  0
 ],
 [
  "static bool callsecondinterfaceindexer() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturndynamicinterface<int>();\tif ( (!(bool)((s + 1)[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "found template for generic method",
  1
 ],
 [
  "static int main (string [] args) {\tif (typeof (int).gettype ().name != \"runtimetype\") {",
  "this must be run on the ms runtime",
  0
 ],
 [
  "}\t}\tpublic void writemoduleheader(moduledefinition module) {\tif (module.hasexportedtypes) {\tforeach (exportedtype exportedtype in module.exportedtypes) {\toutput.write(\".class extern \");\tif (exportedtype.isforwarder) output.write(\"forwarder \");\toutput.write(exportedtype.declaringtype != null ? exportedtype.name : exportedtype.fullname);\topenblock(false);\tif (exportedtype.declaringtype != null) output.writeline(\".class extern {0}\", disassemblerhelpers.escape(exportedtype.declaringtype.fullname));",
  "got but expected",
  1
 ],
 [
  "public static void bug720327_deregisterfromwithinacallbackissafe_synccontexttest() {",
  "this method should complete immediately delay to complete indicates a deadlock failure",
  0
 ],
 [
  "string temp_o = (style != \"windows\") ? \"temp.o\" : \"temp.s.obj\";\tif (compile_only) temp_c = output;\tif (object_out != null) temp_o = object_out;\ttry {\tlist<string> c_bundle_names = new list<string> ();\tlist<string[]> config_names = new list<string[]> ();\tusing (streamwriter ts = new streamwriter (file.create (temp_s))) {\tusing (streamwriter tc = new streamwriter (file.create (temp_c))) {\tstring prog = null;\tif (bundled_header) {",
  "got but expected",
  1
 ],
 [
  "public void testaddbracestolock() {\ttest<addbracesaction>(@\"class testclass {\tvoid test () {",
  "failed ulong",
  1
 ],
 [
  "static private void help () {",
  "usage setreg options feature true false",
  0
 ],
 [
  "using (streamreader sr = new streamreader(filename)) {\tprettyprinteroptions options;\txmlserializer xs = new xmlserializer (typeof (prettyprinteroptions));\toptions = (prettyprinteroptions) xs.deserialize (sr);\tsr.close ();\treturn options;\t}\t}\t}\tcatch (exception exception1) {",
  "couldn t load configuration file cause",
  0
 ],
 [
  "cancellationmre.set();\tinitran();\tbool cancel = false;\ttask cont = continuationmaker(task);\ttry { cont.wait(); }\tcatch (aggregateexception ex) { if (ex.innerexceptions[0] is taskcanceledexception) cancel = true; }\tif (expect != ranvalue() || expect == cancel) {\tassert.true(false, string.format(\"runcontinuewithbase: >> failed: continuation didn't run or get canceled when expected: ran = {0}, cancel = {1}\", ranvalue, cancel));\t}\t}",
  "error test returned an unknown result under ad runtime said and pv fixme",
  1
 ],
 [
  "public void m() {",
  "c a b c d cs",
  0
 ],
 [
  "}\tif (sn2.nested2.f2 != 2+9) {\treturn 2;\t}\tunsafe {\tdouble_array4 sa4;\tsa4.f1[0] = 1;\tsa4.f1[1] = 2;\tsa4 = mono_return_double_array4(sa4, 9);\tif (sa4.f1[0] != 1+9) {",
  "this should not appear since break was supposed to fire",
  1
 ],
 [
  "public override void allocationsummarystart (uint collection, ulong startcounter, datetime starttime) {",
  "allocationsummarystart",
  0
 ],
 [
  "w.writestartelement(\"root\");\tw.writeattributestring(\"xml\", \"lang\", null, \"en-us\");\tw.writeattributestring(\"xml\", \"lang\", null, \"ja\");\t}\tcatch (xmlexception e) {\tcerror.writelineignore(e.tostring());\tcerror.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "exception expected",
  0
 ],
 [
  "public override void added (xelement target, bool wasparentadded) {\tstring name = target.attribute (\"name\").value;\tvar namespacedescription  = $\"{name}: added namespace\";\tstate.logdebugmessage ($\"possible -n value: {namespacedescription}\");\tif (state.ignorenew.any (re => re.ismatch (namespacedescription))) return;",
  "start namespace div",
  0
 ],
 [
  "public static void threadstart (object obj) {\tirunnable runnable = (irunnable)obj;\ttry {\trunnable.run ();\t} catch (appdomainunloadedexception) {",
  "helpviewer trying to set help mode to",
  1
 ],
 [
  "static public void method (int nargs, string arg) {\tint i;",
  "verifying bytestoread with a buffer of",
  1
 ],
 [
  "public void basictest_getipv4interfacestatistics_success() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipv4interfacestatistics stats = nic.getipv4statistics();",
  "outgoingpacketswitherrors",
  0
 ],
 [
  "public htmlwriter (textwriter writer, string tabstring) : base (writer, tabstring) {\tfull_trace = (environment.getenvironmentvariable (\"htmlwriter_fulltrace\") == \"yes\");\tstring file = environment.getenvironmentvariable (\"htmlwriter_file\");\tconsole.writeline (\"file: '{0}' (null? {1})\", file, file == null);\tif (file != null && file != \"\") {\toutput = new streamwriter (new filestream (file, filemode.openorcreate | filemode.append));",
  "loading from main assembly no country match",
  1
 ],
 [
  "public void print (string html) {\tif (html == null) {",
  "load filename to load from file sql commands into sql buffer",
  1
 ],
 [
  "for (int i = 0; i < numberofcalls; i++) statstasks.add(grain.getcallstats());\tawait task.whenall(promises);\tvar responsespersilo = statstasks.select(t => t.result).groupby(s => s.item2);\tforeach (var silogroup in responsespersilo) {\tvar silo = silogroup.key;\thashset<guid> activations = new hashset<guid>();\tforeach (var response in silogroup) {\tif (activations.contains(response.item1)) continue;\tactivations.add(response.item1);\tint count = 1;",
  "unhandled exceptions",
  1
 ],
 [
  "static void printurls (urlscollection col) {\tfor (int i = 0; i < col.count; i++) {\tconfigurationelement e = col [i];\turlconfigelement ue = e as urlconfigelement;\tif (ue != null) {",
  "this must be run on the ms runtime",
  1
 ],
 [
  "public void read_surrogate() {\tusing (serialport com1 = tcsupport.initfirstserialport()) using (serialport com2 = tcsupport.initsecondserialport(com1)) {\tchar[] surrogatechars = { (char)0xdb26, (char)0xdc49 };\tchar[] additionalchars = tcsupport.getrandomchars(32, tcsupport.characteroptions.none);\tchar[] charrcvbuffer = new char[2];",
  "verifying that readchar works correctly when trying to read surrogate characters",
  0
 ],
 [
  "public void linqtosqlobject01() {\tnorthwind db = createdb();\tvar custs = from c in db.customers where c.city == \"marseille\" select c;\tforeach (var cust in custs) foreach (var ord in cust.orders) {",
  "customerid has an orderid",
  0
 ],
 [
  "static int main(string[] args) {\ttry {\tmainclass m = new mainclass();\tint count;\tif (args.length == 0) {\tenvironment.currentdirectory = path.getfullpath(@\"..\\..\\..\\..\\..\");",
  "checking files in src",
  0
 ],
 [
  "public void testsimplestring () {\tstring result = runcontextaction ( new splitstringaction (), \"class testclass\" + environment.newline + \"{\" + environment.newline + \"\tvoid test ()\" + environment.newline + \"\t{\" + environment.newline + \"\t\tsystem.console.writeline (\\\"hello$world\\\");\" + environment.newline + \"\t}\" + environment.newline + \"}\" );",
  "running fuse command",
  1
 ],
 [
  "}\t</script>\");\tif (ac.sourceassembly == ac.targetassembly) {\t} else {\t}\tif (!state.ignorenonbreaking) {\tfile.writeline (\"<a href='javascript: hidenonbreakingchanges (); ' class='hide-nonbreaking'>hide non-breaking changes</a>\");\tfile.writeline (\"<a href='javascript: shownonbreakingchanges (); ' class='restore-nonbreaking' style='display: none;'>show non-breaking changes</a>\");\t}\tfile.write (diffhtml);",
  "inside finally",
  1
 ],
 [
  "static void main(string[] args) {\tpgsqlconnection cnc = new pgsqlconnection ();\tstring connectionstring = \"host=localhost;\" + \"dbname=test;\" + \"user=postgres\";\tcnc.connectionstring =  connectionstring;\tcnc.open();\tdopostgrestest(cnc);",
  "close database connection",
  0
 ],
 [
  "sslclientstream sslstream = new sslclientstream( nstream, host, false, mono.security.protocol.tls.securityprotocoltype.ssl3|mono.security.protocol.tls.securityprotocoltype.tls);\tsslstream.servercertvalidationdelegate += new certificatevalidationcallback(servercertificatevalidation);*/ in_renamed = (system.io.stream) sslstream;\tout_renamed = (system.io.stream) sslstream;*/ }\telse{\tsocket = new system.net.sockets.tcpclient(host, port);\tin_renamed = (system.io.stream) socket.getstream();\tout_renamed = (system.io.stream) socket.getstream();\t}\t}\telse {",
  "connect input out stream specified",
  0
 ],
 [
  "private bool movenextmembersearcher() {\tbool needtoretry = false;\tbool f = false;\tdo {\tf = getnextsearchresult();\tneedtoretry = false;\tif (f) {\tsearchresult currentsr = (searchresult)_membersearchresultsenumerator.current;\tstring memberdn = (string)currentsr.properties[\"distinguishedname\"][0];",
  "addnlinkedattrset movenextmembersearcher got a value from the enumerator",
  0
 ],
 [
  "object [] arguments;\targuments = new object [] { str, i, maskedtextresulthint_out };\tif (compare (\"verifychar\", mask, ref stateindex, arguments, ref more_states)) {\tcontinue;\t}\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;",
  "assert areequal mtp verifychar out maskedtextresulthint out",
  0
 ],
 [
  "public void siloaddress_tofrom_parsablestring() {\tsiloaddress address1 = siloaddressutils.newlocalsiloaddress(12345);\tstring addressstr1 = address1.toparsablestring();\tsiloaddress addressobj1 = siloaddress.fromparsablestring(addressstr1);\tassert.equal(address1, addressobj1);\tconst string addressstr2 = \"127.0.0.1:11111@144611139\";\tsiloaddress addressobj2 = siloaddress.fromparsablestring(addressstr2);\tstring addressstr2out = addressobj2.toparsablestring();",
  "test failed at call result",
  1
 ],
 [
  "public void initializecomponent () {",
  "findreferencesconsistencycheck is done",
  1
 ],
 [
  "case \"deploymentid\": deploymentid = split[1];\tbreak;\treturn false;\t}\t}\telse if (argpos == 1) {\tsiloname = a;\targpos++;\t}\telse {",
  "bytessent",
  1
 ],
 [
  "public bool movenext() {\tcheckdisposed();\tcheckchanged();\tif (_endreached) {\treturn false;\t}\tif (_enumerator == null) {",
  "trackedcollectionenumerator movenext at beginning",
  0
 ],
 [
  "static void help (string details) {\tswitch (details) {",
  "config configuration options",
  0
 ],
 [
  "public void getparam3() {\tm_xsltarg = new xsltargumentlist();\tretobj = m_xsltarg.getparam(szempty, szempty);\tif (retobj != null) {",
  "did not return null for empty string param name",
  0
 ],
 [
  "public virtual bool check() {\tif (front < 0 || front >= array.length || back < 0 || back >= array.length || (front <= back && size != back - front) || (front > back && size != array.length + back - front)) {",
  "bad combination of front back size array length",
  0
 ],
 [
  "byte [] ret = (byte []) codepointindexer.compressarray ( combining, typeof (byte), nutil.combining);\tcout = new streamwriter (\"normalization-tables.h\", true);\tcout.writeline (\"static const guint8 combiningclass [] = {\");\tcsout.writeline (\"public static byte [] combiningclassarr = new byte [] {\");\tfor (int i = 0; i < ret.length; i++) {\tbyte value = ret [i];\tif (value < 10) csout.write (\"{0},\", value);\telse csout.write (\"0x{0:x02},\", value);\tcout.write (\"{0},\", value);\tif (i % 16 == 15) {",
  "cout writeline",
  0
 ],
 [
  "public override void garbagecollectionstopworldstart (uint collection, uint generation, ulong counter) {",
  "options",
  1
 ],
 [
  "public static int test4 (int b, out float f) {\tlong a;",
  "hello world",
  0
 ],
 [
  "public override void renderendtag (htmltextwriter w) {",
  "verifying when dtrenable set to true on remote port",
  1
 ],
 [
  "public int run (string[] args) {\tparseargs (args);\tif (!nologo) {\tconsole.writeline ();\t}\tif (unknownarg != null) {\tconsole.writeline ();\treturn 1;\t}\tif (help) {",
  "expected got",
  1
 ],
 [
  "{\tguid.newguid(), guid.newguid(), default (guid)}\t;\tforeach (bool a1 in boolvalues) {\tforeach (guid a2 in guidvalues) {\tforeach (guid a3 in guidvalues) {\tbool d1 = a1;\tguid d2 = a2;\tdynamic d3 = a3;\tif ((d1 ? d2 : d3) != (a1 ? a2 : a3)) {",
  "failed bool guid guid",
  0
 ],
 [
  "task c4 = c3.continuewith(_ => { mres.waitone(); donecount[4]++; }, cts.token, taskcontinuationoptions.lazycancellation, taskscheduler.default);\ttask c5 = c4.continuewith(_ => { mres.waitone(); donecount[5]++; });\tensurecompletionstatus(c2, true, \"runcontinuewithprecanceltests: c2 should have completed (canceled) upon construction\");\tensurecompletionstatus(c4, false, \"runcontinuewithprecanceltests: c4 should not have completed (canceled) upon construction\");\tensurecompletionstatus(t1, false, \"runcontinuewithprecanceltests: t1 should not have completed before being started\");\tensurecompletionstatus(c1, false, \"runcontinuewithprecanceltests: c1 should not have completed before antecedent completed\");\tensurecompletionstatus(c3, false, \"runcontinuewithprecanceltests: c3 should not have completed before mres was set\");\tensurecompletionstatus(c5, false, \"runcontinuewithprecanceltests: c5 should not have completed before mres was set\");\tensuretaskcanceledexceptionthrown(() => { c2.wait(); }, \"runcontinuewithprecanceltests: expected c2.wait to throw ae/tce\");\tmres.set();",
  "helpviewer configuration successfully loaded",
  1
 ],
 [
  "public static int main() {\tint test = 1;\tint result = interlocked.increment(ref test);\tif (result != 2) {",
  "test failed at conversion result",
  1
 ],
 [
  "public void var6() {\t{\t#pragma warning disable 0618 new xsltransform().load((xmlreader)null, (xmlresolver)null, (evidence)null);\t#pragma warning restore 0618 }\tcatch (argumentnullexception) {\treturn;\t}\tcatch (exception e) {\t_output.writeline(e.tostring());",
  "did not throw argumentnullexception",
  0
 ],
 [
  "private byte[] encryptrecordfragment( contenttype\tcontenttype, byte[]\t\tfragment) {\tbyte[] mac\t= null;\tif (this.context is clientcontext) {\tmac = this.context.write.cipher.computeclientrecordmac(contenttype, fragment);\t}\telse {\tmac = this.context.write.cipher.computeserverrecordmac (contenttype, fragment);\t}",
  "record mac",
  0
 ],
 [
  "using (xmlwriter w = createwriter(doc)) {\ttry {\tw.writestartelement(\"root\");\tw.writeattributestring(\"xmlns\", \"x\", null, \"foo\");\tw.writeattributestring(\"xmlns\", \"x\", null, \"bar\");\t}\tcatch (xmlexception) {\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "private static bool callsecondstructinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tif ((!(bool)(((dynamic)firstclassreturnstruct<int>.staticmethod()).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "for (int i=0; i<100; i++) {\tisequenced<int> inner = new treeset<int>();\tinner.add(i); inner.add(i+1);\touter.add(inner);\t}\tisequenced<int> inner1 = new treeset<int>(), inner2 = new treeset<int>(), inner3 = new treeset<int>();\tinner1.addall<int>(new int[] { 2, 3, 5, 7, 11 });\tinner2.addall(inner1); inner2.add(13);\tinner3.addall(inner1);\touter.add(inner1);",
  "helpviewer help system ist not initialized",
  1
 ],
 [
  "var random = new random(randseed);\tint expectedtotalsize = 0;\tvar list = immutablelist<int>.empty;\tfor (int i = 0; i < 128; i++) {\tint batchsize = random.next(32);\tlist = list.addrange(enumerable.range(expectedtotalsize + 1, batchsize));\tverifybalanced(list);\texpectedtotalsize += batchsize;\t}\tint largebatchsize = random.next(32768) + 32768;",
  "missing argument to repeat command line option",
  1
 ],
 [
  "public static int test_0_main_thread_priority () {\tif (thread.currentthread.managedthreadid != mainthreadid) {\treturn 1;\t}\tvar before = thread.currentthread.priority;\tif (before != threadpriority.normal) return 2;\tthread.currentthread.priority = threadpriority.abovenormal;\tvar after = thread.currentthread.priority;\tif (after != threadpriority.abovenormal) return 3;\tbefore = after;",
  "setting main thread s priority to belownormal",
  0
 ],
 [
  "enumclsids.next(1, out clsid, out numret);\tif (numret == 0) break;\tbasicinfo info = comclassinfo.getclassinfo(clsid);\tif (info != null) _allclasses.add(info, info);\t}\tmarshal.releasecomobject(enumclsids);\tmarshal.releasecomobject(catinfo);\t}\t}\tcatch (exception ex) {",
  "categories failure to read",
  0
 ],
 [
  "static void validate_user (string username, string password) {",
  "before",
  1
 ],
 [
  "private void writehelp() {\tconsole.out.writeline(sr.format(sr.helpdescription));\tconsole.out.writeline(sr.format(sr.helpdevoptions));",
  "force",
  0
 ],
 [
  "if (s5.f2 != 2+9) {\treturn 2;\t}\tif (s5.f3 != 3+9) {\treturn 3;\t}\tif (s5.f4 != 4+9) {\treturn 4;\t}\tif (s5.f5 != 5+9) {",
  "type q to quit",
  1
 ],
 [
  "static bool projectcontainsreference(iproject project, assemblyname referencename) {\tbool isalreadyinreffolder = false;\tforeach (projectitem projectitem in project.items) {\treferenceprojectitem referenceitem = projectitem as referenceprojectitem;\tif (referenceitem != null) {\tif (referenceitem.itemtype == itemtype.reference) {\tif (referenceitem.hintpath.length > 0 && file.exists(referenceitem.filename)) {",
  "found template for type",
  1
 ],
 [
  "s11.f4 = 4;\ts11.f5 = 5;\ts11.f6 = 6;\ts11.f7 = 7;\ts11.f8 = 8;\ts11.f9 = 9;\ts11.f10 = 10;\ts11.f11 = 11;\ts11 = mono_return_sbyte11(s11, 9);\tif (s11.f1 != 1+9) {",
  "adstorectx extensioncachetoldapconverter",
  1
 ],
 [
  "public string[] getvalues (string target) {\tthrow new notimplementedexception ();\tstring[] ldap_values;",
  "calling ldap get values",
  0
 ],
 [
  "thread.sleep(trigering_events_wait_time);\tcom2.dtrenable = true;\tthread.sleep(trigering_events_wait_time);\tcom1.databits = 8;\tcom1.parity = parity.none;\tcom2.basestream.write(new byte[] { 40 }, 0, 1);\tthread.sleep(trigering_events_wait_time);\tcom1.databits = 7;\tcom1.parity = parity.none;\tcom2.basestream.write(new byte[] { 0x01 }, 0, 1);",
  "frameerror triggered",
  0
 ],
 [
  "private void emitwrite(string typename) {\topenscope($\"public static void write(this nativewriter writer, {typename} record)\");\twriteline(\"if (record != null)\");",
  "writer writeunsigned uint record handle offset",
  0
 ],
 [
  "private static void setapplicabilityscope (irule rule, string applicabilityscope) {\tswitch (applicabilityscope) {\tcase \"visible\": rule.applicabilityscope = applicabilityscope.visible;\tbreak;\tcase \"nonvisible\": rule.applicabilityscope = applicabilityscope.nonvisible;\tbreak;\tcase \"all\": rule.applicabilityscope = applicabilityscope.all;\tbreak;",
  "unknown scope value defaulting to all",
  0
 ],
 [
  "public void testdisable() {\tanalyze<stringcompareisculturespecificanalyzer>(@\" class test {\tvoid foo() {",
  "error while reading monodoc file",
  1
 ],
 [
  "static bool test(node inst, string name) {\tif(inst.getstat() == 42) {",
  "server random",
  1
 ],
 [
  "public int testtextreadbinhex_23() {\tif (isroundtrippedreader()) return test_skipped;\tbyte[] buffer = new byte[5000];\tstring strxml = \"<b>\" + new string('a', 5000);\treloadsource(new stringreader(strxml));\tdatareader.positiononelement(\"b\");\tif (checkcanreadbinarycontent()) return test_pass;\ttry {\tdatareader.readelementcontentasbinhex(buffer, 0, 5000);",
  "exception",
  1
 ],
 [
  "private void dumpsqlparam(sqlparameter param) {",
  "error while writing type system cache object",
  1
 ],
 [
  "try {\tw.writestartelement(\"root\");\tw.writestartelement(\"node\", null);\tw.writeattributestring(\"xml\", \"space\", null, \"reserve\");\t}\tcatch (argumentexception) {\ttestlog.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "declaring reflected",
  1
 ],
 [
  "public void testanonymousmethodsubscription_validcase() {\ttestwrongcontext<staticeventsubscriptionissue>(@\" using system;\tclass foo {\tpublic static event eventhandler foobar;\tpublic static void test () {\tfoobar += delegate {",
  "hello",
  0
 ],
 [
  "public void getversioninfo_textfile () {\tstring file = path.combine (tempdir, \"lib.dll\");\tusing (streamwriter sw = new streamwriter (file, false, encoding.utf8)) {",
  "backtracking to code position",
  1
 ],
 [
  "cancellationtokensource disposedcts = new cancellationtokensource();\tcancellationtoken disposedtoken = disposedcts.token;\tdisposedcts.dispose();\tassert.throws<argumentoutofrangeexception>( () => { task.delay(-2); });\tassert.throws<argumentoutofrangeexception>( () => { task.delay(new timespan(1000, 0, 0, 0)); });\tcancellationtokensource cts = new cancellationtokensource();\tcancellationtoken token = cts.token;\tcts.cancel();\ttask task5 = task.delay(0, token);\ttask task6 = task.delay(new timespan(0), token);",
  "rundelaytests waiting for delayed canceled tasks to complete if we hang something went wrong",
  0
 ],
 [
  "public static void writetotals (streamwriter sw, int failed, int passed, int run) {\tsw.writeline (@\"        <tr class='tabletotal'>\");\tsw.writeline (@\"            <td style='width: 17px'></td>\");",
  "failed to initialize orleans silo",
  1
 ],
 [
  "static iprojectcontent tryreadfromcache(string cachefilename) {\tif (cachefilename == null || !file.exists(cachefilename)) return null;\ttry {\tusing (filestream fs = new filestream(cachefilename, filemode.open, fileaccess.read, fileshare.read | fileshare.delete, 4096, fileoptions.sequentialscan)) {\tusing (binaryreader reader = new binaryreaderwith7bitencodedints(fs)) {\tif (reader.readint32() != cachemagicnumber) {",
  "failed byte",
  1
 ],
 [
  "public static int main() {",
  "waitsubsystemtests doublesetoneventwithtimedoutwaitershouldnotstayinwaiterslist",
  0
 ],
 [
  "public void pasteverbatimstringbug2() {\tvar indent = createengine(\"\\nclass foo\\n{\\n\\tvoid bar ()\\n\\t{\\n\\t\\t$\\n\\t}\\n}\");\titextpastehandler handler = new textpasteindentengine(indent, createinvariantoptions (), formattingoptionsfactory.createmono());\tvar text = handler.formatplaintext(indent.offset, \"if (true)\\nconsole.writeline (@\\\"hello\\n world!\\\");\\n\", null);",
  "if true console writeline",
  0
 ],
 [
  "if (s17.f5 != 5+9) {\treturn 5;\t}\tif (s17.f6 != 6+9) {\treturn 6;\t}\tif (s17.f7 != 7+9) {\treturn 7;\t}\tif (s17.f8 != 8+9) {",
  "verifying random parityreplace with readto string",
  1
 ],
 [
  "return 4;\t}\tint5 s5;\ts5.f1 = 1;\ts5.f2 = 2;\ts5.f3 = 3;\ts5.f4 = 4;\ts5.f5 = 5;\ts5 = mono_return_int5(s5, 906);\tif (s5.f1 != 1+906) {",
  "found dispose check at",
  1
 ],
 [
  "public override appresult text (string text, bool exact) {\tif (resultobject is nstableview) {\tvar control = (nstableview)resultobject;\tfor (int i = 0; i < control.columncount;i ++) {\tvar cell = control.getcell (i, index);\tvar possvalues = getpossiblenscellvalues (cell);",
  "couldn t load assembly",
  1
 ],
 [
  "parentdirectory.copyfilehere(other, effect == dragdropeffects.move);\tother = parentdirectory.allnodes.oftype<filenode>().singleordefault(n => fileutility.isequalfilename(path.getfilename(n.filename), otherfilename));\t}\tif (other != null) {\tother.remove();\t((fileprojectitem)other.projectitem).dependentupon = path.getfilename(this.filename);\tother.filenodestatus = filenodestatus.behindfile;\tother.insertsorted(this);\tprojectservice.savesolution();\t} else {",
  "error unable to load provider factory check your machine config to see if the provider is listed under section system data and dbproviderfactories and that your provider assembly is in the gac your provider may not support ado net factory and other features yet",
  1
 ],
 [
  "static void run() {\tprocess proc = new process();\tbool ret;\tproc.startinfo.filename=\"wibble\";\tproc.startinfo.arguments=\"arg1    arg2\\targ3 \\\"arg4a arg4b\\\"\";\tproc.startinfo.useshellexecute=false;\tret=proc.start();",
  "load",
  1
 ],
 [
  "public void forceloadfrom (string assmpath) {",
  "loading from assmpath into appdomain currentdomain",
  0
 ],
 [
  "public override void writeto(itextoutput output) {\tif (this.values != null) {\tforeach (int i in this.values) {\t}\t} else {",
  "default",
  0
 ],
 [
  "public static void unindexedcollectionevents() {\ticollection<int> coll = new arraylist<int>();\ticollection<int> bag1 = new hashbag<int>();\tbag1.addall(new int[] { 3, 2, 5, 5, 7, 7, 5, 3, 7, 7 });\tcoll.collectionchanged += delegate(object c)  {\t};\tcoll.collectioncleared += delegate(object c, clearedeventargs args) {\t};\tcoll.itemsadded += delegate(object c, itemcounteventargs<int> args) {",
  "item added",
  0
 ],
 [
  "public void printbanner () {",
  "send your suggestions to foo domain com",
  0
 ],
 [
  "public static void thread() {\tthread.sleep(500);\tthread.sleep(500);",
  "expected exception",
  1
 ],
 [
  "public void performancecounter_createcounter_count0 () {",
  "performancecounter createcounter start",
  0
 ],
 [
  "help (true);\t}\taction = action.list;\tbreak;\tcase \"-port\": if (port != 0) {\thelp (true);\t}\ttry {\tport = convert.touint16 (args [++i]);\t} catch (indexoutofrangeexception) {",
  "error reading manifest resource from assembly required for exception template exception has been thrown",
  1
 ],
 [
  "private void thread_func() {\tlocaldatastoreslot namedslot=thread.getnameddataslot(\"data-slot\");\tthread thr=thread.currentthread;\tthr.name=\"wobble\";\tthread otherthr=thread.currentthread;\tthread.setdata(slot, thr);\tthread storedthr=(thread)thread.getdata(slot);",
  "contract applyclientbehavior",
  1
 ],
 [
  "for (int i = 0; i < typeset.length; i++) writeline($\"    {member.name}.handletype == handletype.{typeset[i]}\" + ((i == typeset.length - 1) ? \");\" : \" ||\"));\t}\t}\t}\tclosescope(\"save\");\topenscope($\"internal static {record.name}handle ashandle({record.name} record)\");\twriteline(\"if (record == null)\");\twriteline(\"{\");\twriteline(\"}\");\twriteline(\"{\");",
  "return record handle",
  0
 ],
 [
  "foreach (var v in q2) objectdumper.write(v);\tconsole.readkey();\tconsole.clear();\tvar q3 = from c in db.customers from o in c.orders where c.city == \"london\" select new { c, o };\tforeach (var v in q3) objectdumper.write(v);\tconsole.readkey();\tconsole.clear();\tconsole.writeline(\"from p in db.products where p.productid == 7 select p;\");\tvar q4 = from p in db.products where p.productid == 7 select p;\tforeach (var v in q4) objectdumper.write(v);",
  "got but expected",
  1
 ],
 [
  "public void generateserializers (textwriter writer) {\t_writer = writer;\t_results = new generationresult [_xmlmaps.length];",
  "verifying write method throws exception with a failed call to open",
  1
 ],
 [
  "private static bool test5() {\tdynamic a = myenum.second;\tmyenum b = ~a;\tif (b == ~myenum.second) return true;",
  "could not recognize option as the mode",
  1
 ],
 [
  "public override bool select () {\tif (resultobject is nstableview) {\tvar control = (nstableview)resultobject;\tif (index >= 0) {",
  "did not throw exception",
  1
 ],
 [
  "dlgmsgservice.dialogsynchronizeinvoke = sd.mainthread.synchronizingobject;\tdlgmsgservice.dialogowner = workbench.mainwin32window;\t}\tvar applicationstateinfoservice = sd.getservice<applicationstateinfoservice>();\tif (applicationstateinfoservice != null) {\tapplicationstateinfoservice.registerstategetter(activecontentstate, delegate { return sd.workbench.activecontent; });\t}\tworkbenchsingleton.onworkbenchcreated();\tnavigationservice.initializeservice();\tworkbench.activecontentchanged += delegate {",
  "exception not thrown for method not found",
  1
 ],
 [
  "string outfile = path.combine (path.getdirectoryname (args[0]), \"assemblyinfo.cs\");\txelement el = xdocument.load (args[0]).element (\"addin\");\tif (el == null) {\tenvironment.exit (1);\t}\tvar maps = new dictionary<string,string> () {\t{\"name\", \"assemblytitle\"}, {\"description\", \"assemblydescription\"}, {\"version\", \"assemblyversion\"}, {\"copyright\", \"assemblycopyright\"}\t};\tusing (textwriter writer = new streamwriter (outfile)) {\twriter.writeline ();",
  "state is proxy",
  1
 ],
 [
  "public void testaddbracestodowhile() {\ttest<addbracescoderefactoringprovider>(@\"class testclass {\tvoid test() {",
  "helpviewer displayhelponmsdn calls",
  1
 ],
 [
  "rand.nextbytes(data);\tmemorystream ms = new memorystream(data, false);\tcmd.commandtext = \"insert into #blobs (id, blob) values (1, @blob)\";\tcmd.parameters.add(\"@blob\", sqldbtype.varbinary, datasize);\tcmd.parameters[\"@blob\"].direction = parameterdirection.input;\tcmd.parameters[\"@blob\"].value = ms;\ttask t = cmd.executenonqueryasync(cts.token);\tif (!t.iscompleted) cts.cancel();\ttry {\tt.wait();",
  "t status",
  0
 ],
 [
  "public void addtypecontainer (typecontainer current_container, typedefinition tc) {\tif (current_container == tc){",
  "is viable",
  1
 ],
 [
  "private static bool callsecondclassinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturnclass();\tif ((!(bool)(((dynamic)s.instancemethod()).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public void testaddbracestoif() {\ttest<addbracesaction>(@\"class testclass {\tvoid test () {",
  "null next pointer at node",
  1
 ],
 [
  "public void readafterfailedopen() {\tusing (serialport com = new serialport(\"bad_port_name\")) {",
  "verifying read method throws exception with a failed call to open",
  0
 ],
 [
  "if (referenceitem != null) {\tif (referenceitem.itemtype == itemtype.reference) {\tif (referenceitem.hintpath.length > 0 && file.exists(referenceitem.filename)) {\tassemblyname assemblyname = getassemblyname(referenceitem.filename);\tif (assemblyname != null && assemblyname.fullname == referencename.fullname) {\tisalreadyinreffolder = true;\tbreak;\t}\t} else {\tif (referenceitem.include == referencename.fullname || referenceitem.include == referencename.name) {",
  "minimumpage",
  1
 ],
 [
  "}\tct.throwifcancellationrequested ();\tsystemrename (tempfile, cachefile);\tdeletetempfile = false;\treturn true;\t} finally {\tif (deletetempfile) {\ttry {\tfile.delete (tempfile);\t} catch (exception ex) {",
  "finalizetest passed",
  1
 ],
 [
  "const int foo = 10;\tint j = blah.i;\tif (j != 5) return 1;\tif (foo != 10) return 1;\tfor (int i = 0; i < 5; ++i){\tconst int bar = 15;\tconsole.writeline (bar);\tconsole.writeline (foo);\t}\tif ((aaa + bbb) != 3) return 2;",
  "constant emission test okay",
  0
 ],
 [
  "static void trylldb (int pid, processdata data) {\tstring filename = path.gettempfilename ();\tusing (streamwriter sw = new streamwriter (new filestream (filename, filemode.open, fileaccess.write))) {",
  "detach",
  0
 ],
 [
  "private static keybundle updatekey(string keyname) {\tvar vaultaddress = inputvalidator.getvaultaddress();\tkeyname = (keyname == string.empty) ? inputvalidator.getkeyid() : keyname;\tvar keyattributes = inputvalidator.getupdatekeyattribute();\tvar updatedkey = task.run(() => keyvaultclient.updatekeyasync(vaultaddress, keyname, attributes: keyattributes)).configureawait(false).getawaiter().getresult();",
  "warning this test code is outdated use test system xml xmlconf exe instead",
  1
 ],
 [
  "public static int main () {\tx [] x = { new x (40), f (10) };\tif (x [0].value != 40) return 1;\tif (x [1].value != 10) return 2;",
  "onprompt",
  1
 ],
 [
  "private void stop(object source, workflowruntimeeventargs e) {",
  "wde debugcontroller servicecontainerstopped",
  0
 ],
 [
  "node node = startsentinel.next, prev = startsentinel;\t#if hashindex int taggroupsize = 0, oldtaggroupsize = losize + 1, seentaggroups = 0;\ttaggroup oldtg = null;\tif (underlying == null) {\ttaggroup tg = startsentinel.taggroup;\tif (tg.count != 0 || tg.first != null || tg.last != null || tg.tag != int.minvalue) {\tretval = false;\t}\ttg = endsentinel.taggroup;\tif (tg.count != 0 || tg.first != null || tg.last != null || tg.tag != int.maxvalue) {",
  "chars markup yyy chars",
  1
 ],
 [
  "public datatable getschematable () {",
  "press enter to continue",
  1
 ],
 [
  "protected internal override void rendercontents (htmltextwriter writer) {\tif (items.count == 0) return;\trepeatinfo ri = new repeatinfo ();\tri.repeatcolumns = repeatcolumns;\tri.repeatdirection = repeatdirection;\tri.repeatlayout = repeatlayout;\tri.captionalign = captionalign;\tri.caption = caption;\tri.useaccessibleheader = useaccessibleheader;",
  "repeatdirection",
  0
 ],
 [
  "public static int main (string[] args) {\tint c = 0;\ttry {\ttry {\tc = 0;\t}\tcatch (exception e) {\t}\tfinally {",
  "test failed at conversion result",
  1
 ],
 [
  "btn.buttonpressed += handlebuttonpressed;\tbtn.buttonreleased += handlebuttonreleased;\tbtn.clicked += (sender, e) => {\tresbtn.text = \"button clicked\";\t};\tpackstart (canvas);\tpackstart (rescanvas);\tcanvas.mouseentered += (sender, e) =>  {\tinsidecanvas = true;\tapplication.timeoutinvoke (100, checkmouseovercanvas);",
  "invoking",
  1
 ],
 [
  "string expected = a.caught.stacktrace.tostring ();\tfor (int i = 0; i < 1000; ++i) {\tthread t = new thread (delegate () {\ttt ();\t});\tt.start ();\tt.join ();\tgc.collect ();\tgc.waitforpendingfinalizers ();\tif (a.caught.stacktrace != expected) {",
  "failed",
  0
 ],
 [
  "private static bool testandopwithdifftype() {\tclearflags();\tdynamic d1 = new myopclasswithdifftype();\tdynamic d2 = 10;\ttry {\tdynamic dr = d1 && d2;",
  "failed didn t get runtimebinderexception",
  0
 ],
 [
  "public static void checkimporterrors (wsdlimporter importer, testlabel label) {\tbool founderrors = false;\tforeach (var error in importer.errors) {",
  "warning",
  0
 ],
 [
  "private void emitwritearray(string typename) {\topenscope($\"public static void write(this nativewriter writer, list<{typename}> values)\");\twriteline(\"if (values == null)\");\twriteline(\"{\");\twriteline(\"}\");",
  "foreach typename value in values",
  0
 ],
 [
  "public void testaddbracestolock() {\ttest<addbracescoderefactoringprovider>(@\"class testclass {\tvoid test() {\t}\t}\", @\"class testclass {\tvoid test() {\tlock (this) {",
  "hello",
  0
 ],
 [
  "cloudtask task = new cloudtask(\"bug1965363wat7osversionfeaturesquickjobwithautopooltask\", \"cmd /c echo bug1965363\");\tcloudjob boundjob = batchcli.joboperations.getjob(jobid);\tboundjob.addtask(task);\tcloudpool boundpool = batchcli.pooloperations.getpool(boundjob.executioninformation.poolid);\ttaskstatemonitor tsm = batchcli.utilities.createtaskstatemonitor();\todatamonitorcontrol odcontrol = new odatamonitorcontrol();\todcontrol.delaybetweendatafetch = timespan.fromseconds(5);\ttsm.waitall( boundjob.listtasks(), taskstate.completed, timespan.fromminutes(15), odcontrol, new[] {\tnew microsoft.azure.batch.protocol.requestinterceptor((x) => {\tlist<computenode> allcomputenodes = boundpool.listcomputenodes().tolist();",
  "verifying read method with non zero timeout that resizes serialport s buffer",
  1
 ],
 [
  "public static int main () {\tint v;\tobject o = null;\tif (o == null || false) o = 1;\telse o = 2;",
  "v",
  0
 ],
 [
  "object [] arguments;\targuments = new object [] { str, i, j, int32_out, maskedtextresulthint_out };\tif (compare (\"replace\", mask, ref stateindex, arguments, ref more_states)) {\tcontinue;\t}\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;",
  "label",
  1
 ],
 [
  "public static int main (string[] args) {\tint c = 0;\ttry {\tthrow new exception(\"test exception\");\t}\tcatch (exception e) {",
  "exception",
  0
 ],
 [
  "s10.f6 = 6;\ts10.f7 = 7;\ts10.f8 = 8;\ts10.f9 = 9;\ts10.f10 = 10;\ts10 = mono_return_sbyte10(s10, 9);\tif (s10.f1 != 1+9) {\treturn 1;\t}\tif (s10.f2 != 2+9) {",
  "serial port being used",
  1
 ],
 [
  "public void outbufferfilled_discard_multiple() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {",
  "orleansazureweb onstart",
  1
 ],
 [
  "sb = new stringbuilder ();\tsr = new streamreader (ms, encoding.utf8);\tline = sr.readline ();\twhile (line != null) {\tsb.append (line);\tsb.append (\"\\r\\n\");\tline = sr.readline ();\t}\t}\tsw = new stringwriter ();",
  "riptions",
  1
 ],
 [
  "public longconstructorwithreadonlyfields () {\tfoo = 5;\tbar = \"mystring\";\tbaz = new object ();",
  "i m writting a test and i will fill a screen with some useless code",
  0
 ],
 [
  "m_xsltarg.addparam(\"myarg1\", szempty, \"test9\");\tretobj = m_xsltarg.getparam(\"myarg1\", \"http: if (retobj != null) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg2\", \"http: retobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (retobj != null) {\tassert.true(false);\t}\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (retobj != null) {",
  "did not retrieve a null value for non existent uri",
  0
 ],
 [
  "public static int main () {\tint workerthreads;\tint completionportthreads;\tint runs = 10;\tthreadpool.getmaxthreads (out workerthreads, out completionportthreads);\tthreadpool.getavailablethreads (out workerthreads, out completionportthreads);",
  "warningtotal",
  1
 ],
 [
  "private static bool verifyreadwrite(serialport com1, serialport com2) {\ttry {\tcom1.readtimeout = 1000;\tcom2.readtimeout = 1000;\tcom1.writetimeout = 1000;\tcom2.writetimeout = 1000;\tif (\"ping\" != com2.readline()) {\treturn false;\t}",
  "response",
  0
 ],
 [
  "public void elemnamespace_22(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"pre\", \"test\", string.empty);\tw.writeendelement();\t}\tcatch (argumentexception e) {",
  "exception",
  0
 ],
 [
  "cmd2.commandtext = \"drop table mono_oracle_test\";\tcmd2.executenonquery ();\t}\tcatch (oracleexception) {\t}\toraclecommand cmd = null;\tcmd = new oraclecommand();\tcmd.connection = con;\tcmd.commandtext = \"create table mono_oracle_test ( \" + \" varchar2_value varchar2(32),  \" + \" long_value long, \" + \" number_whole_value number(18), \" + \" number_scaled_value number(18,2), \" + \" number_integer_value integer, \" + \" float_value float, \" + \" date_value date, \" + \" char_value char(32), \" + \" clob_value clob, \" + \" blob_value blob, \" + \" clob_empty_value clob, \" + \" blob_empty_value blob, \" + \" varchar2_null_value varchar2(32),  \" + \" number_whole_null_value number(18), \" + \" number_scaled_null_value number(18,2), \" + \" number_integer_null_value integer, \" + \" float_null_value float, \" + \" date_null_value date, \" + \" char_null_value char(32), \" + \" clob_null_value clob, \" + \" blob_null_value blob \" + \")\";\tcmd.executenonquery();",
  "initialize threw exception",
  1
 ],
 [
  "j += 2;\t} else if ((args [j] == \"--test\") || (args [j] == \"-t\")) {\tif (args [j + 1] == \"static\") testindex = -1;\telse if (args [j + 1] == \"tp\") tploadgenerator = true;\telse testindex = parsetestname (testname = args [j + 1]);\tj += 2;\t} else \tif ((args [j] == \"--thread-count\") || (args [j] == \"-tc\")) {\tthreadcount = int32.parse (args [j + 1]);\tj += 2;\t}else {",
  "unknown argument",
  0
 ],
 [
  "public void setupsilentmode (string[] parms) {\tif (parms.length != 2) {\treturn;\t}\tstring parm = parms[1].toupper ();\tif (parm.equals (\"true\")) silent = true;\telse if (parm.equals (\"false\")) silent = false;\t}\tpublic void setinternalvariable(string[] parms) {\tif (parms.length < 2) {",
  "imports system class testclass sub test param as string some comment console writeline param end sub end class imports system class testclass sub test param as string if param is nothing then throw new system argumentnullexception nameof param end if some comment console writeline param end sub end class",
  1
 ],
 [
  "public void os10(object param0, object param1) {\tinit(param0.tostring(), param1.tostring());\t_xsl.load(_xslfile);\txmlwritersettings os = _xsl.outputsettings;\tassert.equal(os.omitxmldeclaration, true);\tassert.equal(os.indent, true);",
  "thisisaverylongcommandnameinordertoinducewrapping",
  1
 ],
 [
  "foreach (object value in list) {\tconsole.write (value);\tconsole.write (environment.newline);\t}\tint x = 0;\tfor (int i = 0; i < 100; i++) x++;\tconsole.writeline (x);\tstring useless = \"useless string\";\tif (useless.equals (\"other useless\")) {\tuseless = string.empty;",
  "server random",
  1
 ],
 [
  "public override void allocationsummaryend (uint collection, ulong endcounter, datetime endtime) {",
  "allocationsummaryend",
  0
 ],
 [
  "public static void createxmlspacetestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));",
  "persona dromio of syracuse persona",
  0
 ],
 [
  "public int v18() {\tstring type = curvariation.params[0].tostring();\treloadsource(new stringreader(_xmlstr));\tswitch (type) {\tcase \"nns\": datareader.readtodescendant(\"elem\");\tif (datareader.hasattributes) {",
  "principalsearcher entering findone",
  1
 ],
 [
  "if (s.startswith (\"-d:\")) destpath = s.substring (3);\telse if (s.startswith (\"-f:\")) formatname = s.substring (3);\telse if (s.startswith (\"-p:\")) projects.add (s.substring (3));\telse if (s == \"-l\") formatlist = true;\telse if (projectfile != null) {\treturn 1;\t}\telse projectfile = s;\t}\tif (projectfile == null) {",
  "project or solution file name not provided",
  0
 ],
 [
  "public void endwriteafterclose() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {",
  "chunk size",
  1
 ],
 [
  "protected virtual void oninstalledpackagesread (task<ienumerable<packagereference>> task, cancellationtokensource tokensource) {\ttry {\tif (task.isfaulted) {",
  "monobundledassembly assembly",
  1
 ],
 [
  "public void stuff() {\tstring myldappath = \"ldap: try {\tmono.directory.ldap.ldap ld = new mono.directory.ldap.ldap (myldappath);\tldapmessage res, entry;\tstring[] attrs = { \"+\", null };\tld.search (\"\" /* root dse */, searchscope.base, \"(objectclass=*)\", attrs, false, timespan.fromseconds(10), 0 /* no size limit */, out res);\tif (res == null) {",
  "the search failed",
  0
 ],
 [
  "if (!double.ispositiveinfinity((double)retobj)) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg2\", szempty, d2);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (!double.isnegativeinfinity((double)retobj)) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg3\", szempty, d3);\tretobj = m_xsltarg.getparam(\"myarg3\", szempty);",
  "added value retrieved value",
  0
 ],
 [
  "return;\t}\twriteline (\"\");\twriteline (string.format (\"ob = ({0}) activator.createinstance(typeof({0}), true);\", typemap.typedata.csharpfullname));\t}\twriteline (\"\");\twriteline (\"\");\tgeneratereadmembers (typemap, (classmap)typemap.objectmap, \"ob\", false, false);\twriteline (\"\");\tgenerateendhook ();",
  "return ob",
  0
 ],
 [
  "private void dispose(bool disposing) {\t#if debug && finalization_watch if (!disposing && _nativegraphics != intptr.zero) {",
  "system drawing graphics object disposed through finalization",
  0
 ],
 [
  "private static void anotherthreadproc () {\toracleconnection[] connections = null;\tint maxcon = max_connections;\tint i = 0;\tconnections = new oracleconnection[maxcon];\tfor (i = 0; i < maxcon; i++) {\tconnections[i] = new oracleconnection(constr);\tconnections[i].open ();\t}",
  "test failed",
  1
 ],
 [
  "output.write(\">\");\tif (showlinenumbers) {\toutput.write(\"<span\");\twritestyle(output, linenumberstyle);\toutput.write('>');\toutput.write(linenumber.tostring().padleft(longestnumberlength));\toutput.write(\":  \");\toutput.write(\"</span>\");\t}\tprintwords(output, line);",
  "pre",
  0
 ],
 [
  "var posargs = att.constructorarguments;\tif (posargs.length == 0) return childrenasproperties;\tif (posargs.length > 0) {\tvar expr = posargs [0];\tif (expr.isnull) {\treturn false;\t}\tif (expr.value is bool) {\tchildrenasproperties = (bool)expr.value;\t} else {",
  "file has creation time",
  1
 ],
 [
  "}\tif (failed_tests.count == 0) continue;\tsw.writeline (@\"        <tr id='el{0}' class='errorlist' style='display: none'>\", assembly);\tsw.writeline (@\"            <td colspan='4'>\");\tsw.writeline (@\"                <table cellpadding='2' cellspacing='0' width='100%'>\");\tint test_num = 0;\tforeach (failedtest ft in failed_tests.values) {\tsw.writeline (\"                    <tr onclick=\\\"toggle('as{0}ed{1}')\\\" onmouseover='highlight(this)' onmouseout='unhighlight(this)'>\", assembly, test_num);\tsw.writeline (@\"                        <td style='width: 17px'><img src='media/bullet.png' /></td>\");\tsw.writeline (@\"                    <tr id='as{0}ed{1}' class='errordetail' style='display: none'>\", assembly, test_num);",
  "test failed at call result",
  1
 ],
 [
  "public void testnewline() {\tstringwriter writer = new stringwriter();\twriter.newline = \"\\n\\r\";\tassert.areequal (\"\\n\\r\", writer.newline, \"newline 1\");\tassert.areequal (\"first\\n\\r\", writer.tostring(), \"newline 2\");\twriter.newline = \"\\n\";\tassert.areequal (\"first\\n\\r\", writer.tostring(), \"newline 3\");",
  "assert areequal maskedtextresulthint out",
  1
 ],
 [
  "}\tschedule sched = curwi.schedule;\tif (null == sched) {\t}\telse {\t}\tjobschedulestatistics stats = curwi.statistics;\tif (null == stats) {\t}\telse {",
  "symgraph changed due to join of abstract values of prev new join",
  1
 ],
 [
  "public static void main (string[] args) {\tfoo f = new foo();\tbar b = new bar();",
  "mydynamictype instantiated",
  1
 ],
 [
  "public void generateserializers (textwriter writer) {\t_writer = writer;\t_results = new generationresult [_xmlmaps.length];",
  "the timer test failed the periodic timer has not fired",
  1
 ],
 [
  "public void readafterclose() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {",
  "verifying read method throws exception after a call to cloes",
  0
 ],
 [
  "private static bool getstrategyargs<t>(string[] args, func<string, t> strategyparser, out t strategy, out int? interfaceid) {\tif (args.length < 1 || args.length > 2) {\tprintusage();\tstrategy = default(t);\tinterfaceid = null;\treturn true;\t}\tstrategy = strategyparser(args[0]);\tif (strategy == null) {",
  "removing",
  1
 ],
 [
  "if (s15.f12 != 12+9) {\treturn 12;\t}\tif (s15.f13 != 13+9) {\treturn 13;\t}\tif (s15.f14 != 14+9) {\treturn 14;\t}\tif (s15.f15 != 15+9) {",
  "thread running",
  1
 ],
 [
  "private bool hasreferentialpropertiesset() {\tif (_qbefilter == null) return false;\tdebug.assert(_qbefilter.unpersisted == true);\ttype t = _qbefilter.gettype();",
  "principalsearcher hasreferentialpropertiesset using type",
  0
 ],
 [
  "closescope();\tclosescope(\"handle\");\twritelineifneeded();\tforeach (var member in record.members) {\tif ((member.flags & memberdefflags.notpersisted) != 0) continue;\tstring fieldtype = member.getmembertype(membertypekind.writerfield);\tif ((member.flags & (memberdefflags.list | memberdefflags.map)) != 0) {\twriteline($\"public {fieldtype} {member.name} = new {fieldtype}();\");\t}\telse {",
  "public fieldtype member name",
  0
 ],
 [
  "static void refcursortest2(oracleconnection con) {",
  "ref cursor test using call begin",
  0
 ],
 [
  "private list<int> workwithlocalstate(int i, parallelloopstate state, list<int> threadlocalvalue) {",
  "workwithlocalstate int on index startindex real index",
  0
 ],
 [
  "protected virtual void processmessage (message message) {\tswitch (message.messagetype) {\tcase messagetype.sessionconnected: onsessionconnected ();\tbreak;",
  "unprocessed vstest message message",
  0
 ],
 [
  "public void testmemberaccessexpression1() {",
  "imports system class somedata public property name as string end class class testclass public sub testmethod dim data as new somedata console writeline data name end sub end class imports system class somedata public property name as string end class class testclass public sub testmethod dim data as new somedata if data name isnot nothing then console writeline data name end if end sub end class",
  0
 ],
 [
  "bitmapdata data = bmp.lockbits (new rectangle (0, 0, bmp.width, bmp.height), imagelockmode.readonly, pixelformat.format24bpprgb);\ttry {\tassert.areequal (bmp.height, data.height, \"height\");\tassert.areequal (bmp.width, data.width, \"width\");\tassert.areequal (pixelformat.format24bpprgb, data.pixelformat, \"pixelformat\");\tassert.areequal (300, data.stride, \"stride\");\tint size = data.height * data.stride;\tunsafe {\tbyte* scan = (byte*) data.scan0;\t#if false for (int p = 0; p < size; p += 1009) {",
  "bad command line arguments supplied",
  1
 ],
 [
  "public virtual iasyncresult begintryreceiverequest (timespan timeout, asynccallback callback, object state) {\tiasyncresult result = null;\tif (try_recv_delegate == null) try_recv_delegate = new tryreceivedelegate (delegate (timespan tout, out requestcontext ctx) {\tlock (async_result_lock) {\tif (currentasyncresults.contains (result)) currentasyncthreads.add (thread.currentthread);\t}\ttry {\treturn tryreceiverequest (tout, out ctx);\t} catch (xmlexception ex) {\t} catch (socketexception ex) {",
  "generating proxies",
  1
 ],
 [
  "public void stopbits_0() {",
  "test failed conversion result is incorrect",
  1
 ],
 [
  "v = result[identification[i].name];\t}\tif (v == null) {\tv = string.empty;\t}\tmatch m = identification[i].getmatch(v);\tif (identification[i].ismatchsuccessful(m) == false) {\t#endif return false;\t}\telse {",
  "typedef struct compressed data",
  1
 ],
 [
  "public void foo () {",
  "foo",
  0
 ],
 [
  "file.appendalltext(babysitterxmllist, fullxmlpath + environment.newline);\t} catch (exception e) {\t}\t}\t}\tif (verbose) {\tconsole.writeline ();\tconsole.writeline ();\t} else {\tconsole.writeline ();",
  "namespace",
  1
 ],
 [
  "static void thread_start () {\tfor (int i = 0; i < domains; ++i) {\tappdomain appdomain = appdomain.createdomain(\"test-\" + i);\tappdomain.docallback (new crossappdomaindelegate (worker));\ttry {\tappdomain.unload (appdomain);\t} catch {\tinterlocked.increment (ref errors);\t}\t}",
  "tests done",
  1
 ],
 [
  "str.writeline (\"{\");\tvar dict = new dictionary<string, string> ();\tforeach (var entry in txtstrings) {\tvar value = tocsharpstring (entry.item2);\tstring found;\tif (dict.trygetvalue (entry.item1, out found)) {\tif (found == value) continue;\tdict.add (entry.item1, value);\t}\tstr.write ($\"\\tpublic const string {entry.item1} = \\\"{value}\\\";\");",
  "error navigating to",
  1
 ],
 [
  "{ \"h|help\", \"show this help\", v => showhelp = true }, { \"d|diff=\", \"html diff file out output (omit for stdout)\", v => diff = v }, { \"i|ignore=\", \"ignore new, added, and removed members whose description matches a given c# regular expression (see below).\", v => {\tvar r = new regex (v);\tstate.ignoreadded.add (r);\tstate.ignoreremoved.add (r);\tstate.ignorenew.add (r);\t}\t}, { \"a|ignore-added=\", \"ignore added members whose description matches a given c# regular expression (see below).\", v => state.ignoreadded.add (new regex (v)) }, { \"r|ignore-removed=\", \"ignore removed members whose description matches a given c# regular expression (see below).\", v => state.ignoreremoved.add (new regex (v)) }, { \"n|ignore-new=\", \"ignore new namespaces and types whose description matches a given c# regular expression (see below).\", v => state.ignorenew.add (new regex (v)) }, { \"ignore-changes-parameter-names\", \"ignore changes to parameter names for identically prototyped methods.\", v => state.ignoreparameternamechanges   = v != null }, { \"ignore-changes-property-setters\", \"ignore adding setters to properties.\", v => state.ignoreaddedpropertysetters = v != null }, { \"ignore-changes-virtual\", \"ignore changing non-`virtual` to `virtual` or adding `override`.\", v => state.ignorevirtualchanges = v != null }, { \"c|colorize:\", \"colorize html output\", v => state.colorize = string.isnullorempty (v) ? true : bool.parse (v) }, { \"x|lax\", \"ignore duplicate xml entries\", v => state.lax = true }, { \"ignore-nonbreaking\", \"ignore all nonbreaking changes\", v => state.ignorenonbreaking = true }, { \"v|verbose:\", \"verbosity level; when set, will print debug messages\", (int? v) => state.verbosity = v ?? (state.verbosity + 1)}, new responsefilesource (), };\ttry {\textra = options.parse (args);\t} catch (optionexception e) {",
  "option error",
  0
 ],
 [
  "public mockbootstrapprovider() {",
  "other useless string",
  1
 ],
 [
  "list<string> objectclasses = new list<string>();\tusing (searchresultcollection searchrescollection = dirsearcher.findall()) {\tforeach (searchresult res in searchrescollection) {\tif (null == res.properties[\"ldapdisplayname\"]) {\tthrow new principaloperationexception(sr.adamstoreunabletopopulateschemalist);\t}\tobjectclasses.add(res.properties[\"ldapdisplayname\"][0].tostring());\t}\t}\tobjectclasses.add(auxclassname);",
  "adamstorectx populatauxobjectlist adding",
  0
 ],
 [
  "if (detailed) {\t}\twriteline ();\twriteline (\"-?\");\twriteline ();\tif (!detailed) return;\twriteline ();\twriteline ();\twriteline ();\twriteline ();",
  "test failed at call result",
  1
 ],
 [
  "if (ce is solutionfolder) makefile.append (\"dist-local: dist-local-recursive\\n\");\telse makefile.append (\"include $(top_srcdir)/rules.make\\n\");\t}\tctx.addgeneratedfile (outpath);\t}\tstreamwriter writer = new streamwriter (outpath);\tmakefile.write ( writer );\twriter.close ();\t}\telse {",
  "project skipped",
  0
 ],
 [
  "if (!ispublished) return;\ttry {\tthread unpublisherthread = new thread(unpublishthreadfunc);\tunpublisherthread.setapartmentstate(apartmentstate.mta);\tunpublisherthread.isbackground = true;\tunpublisherthread.start();\tunpublisherthread.join();\t}\tcatch (exception e) {\t}",
  "wde programpublisher unpublish done",
  0
 ],
 [
  "public void testsingleexpression() {",
  "source code you can browse the latest source code https",
  1
 ],
 [
  "private unsafe bool fillcolortable(intptr hdc, intptr hpal, ref nativemethods.bitmapinfo_flat pbmi) {\tbyte[] aj = new byte[sizeof(nativemethods.paletteentry) * 256];\tfixed (byte* pcolors = pbmi.bmicolors) {\tfixed (byte* ppal = aj) {\tnativemethods.rgbquad* prgb = (nativemethods.rgbquad*)pcolors;\tnativemethods.paletteentry* lppe = (nativemethods.paletteentry*)ppal;\tint ccolors = 1 << pbmi.bmiheader_bibitcount;\tif (ccolors <= 256) {",
  "bit or less",
  0
 ],
 [
  "protected override void insertitem (int index, baseitem item) {\tbase.insertitem (index, item);",
  "item inserted at index",
  0
 ],
 [
  "private static bool callsecondclassinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturnclass<int>();\tif ((!(bool)(((dynamic)s[1]).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "verifying baudrate",
  1
 ],
 [
  "parameters.compileroptions = compileroptions;\tstring file = path.getfilenamewithoutextension (asm.location) + \".xmlserializers.dll\";\tif (outdir == null) outdir = path.getdirectoryname (asm.location);\tparameters.outputassembly = path.combine (outdir, file);\tif (file.exists (parameters.outputassembly) && !force) {\tconsole.writeline ();\treturn 1;\t}\txmlserializer.generateserializer ( (type[]) usertypes.toarray (typeof(type)), (xmltypemapping[]) maps.toarray (typeof(xmltypemapping)), parameters);\tif (!silent) {",
  "for the incredible foo bar program",
  1
 ],
 [
  "public void applyclientbehavior (serviceendpoint endpoint, clientruntime clientruntime) {",
  "iendpointbehavior applyclientbehavior",
  0
 ],
 [
  "public void transformstrstr10(xslinputtype xslinputtype, readertype readertype) {\tif (loadxsl(\"showparam.xsl\", xslinputtype, readertype) == 1) {\ttry {\txslt.transform(\"fruits.xml\", \"http: }\tcatch (system.exception e) {\t_output.writeline(e.tostring());\treturn;\t}\t}",
  "exception not generated for invalid output destination",
  0
 ],
 [
  "public b (ulong value) : base (4) {",
  "ulong",
  0
 ],
 [
  "bmp = new bitmap (image.width, image.height);\tfor (int w = 0; w < image.width; w++) {\tfor (int h = 0; h < image.height; h++) {\tbmp.setpixel (w, h, color.fromargb (pixels [h * image.width + w]));\t}\t}\t}\t}\txplatuix11.xcursorimagesdestroy (images_ptr);\t} catch (dllnotfoundexception ex) {",
  "test passed",
  1
 ],
 [
  "static string geticon (string filename) {\ttry {\ticon = ideapp.services.projectservice.fileformats.getfileformats (filename, typeof(solution)).length > 0 ? \"md-solution\" : \"md-workspace\"; */ return system.io.path.getextension (filename) != \".mdw\" ? \"md-solution\" : \"md-workspace\";\t} catch (system.io.ioexception ex) {",
  "rowsaffected after read",
  1
 ],
 [
  "protected override void onbuttonreleased (buttoneventargs args) {",
  "release",
  0
 ],
 [
  "try {\tunchecked {\td2 -= d;\t}\t}\tcatch (system.overflowexception) {\texception = false;\t}\tfinally {\tif (exception) rez++;",
  "case bytestowritesuccessive verifying bytestowrite with successive calls to write",
  1
 ],
 [
  "private async task serverasyncsslhelper( sslprotocols clientsslprotocols, sslprotocols serversslprotocols, bool expectedtofail = false) {",
  "server client expectedtofail",
  0
 ],
 [
  "static int main (string[] args) {\ttry {\tprocessarguments (args);\t} catch (indexoutofrangeexception) {",
  "threadabortexception finally",
  1
 ],
 [
  "string xmloutput = createxmloutput( result );\tif (options.xmlconsole) {\tconsole.writeline(xmloutput);\t}\telse {\ttry {\txmlresulttransform xform = new xmlresulttransform( transformreader );\txform.transform( new stringreader( xmloutput ), console.out );\t}\tcatch( exception ex ) {",
  "error",
  0
 ],
 [
  "} else {\tcode = value.tostring ();\t}\tbreak;\tcase typecode.char: code = \"'\" + ((char) value).tostring () + \"'\"; break;\tcase typecode.datetime: code = \"new system.datetime (\" + ((datetime) value).ticks + \")\"; break;\tcase typecode.dbnull: code = \"system.dbnull.value\" ; break;\tcase typecode.object: code = null;\tif (value is exception) {\twriter.writeline (tab + \"\\tobject zxf = {0}.{1};\", showname, name);",
  "missing argument to expected exit code command line option",
  1
 ],
 [
  "public static int main() {",
  "unable to load assembly needed to retrieve an exception template resource exception has been thrown",
  1
 ],
 [
  "if (members.length > 0 && members[0].mapping.isreturnvalue) writer.writeline(\"isreturnvalue = true;\");\tstring checktypehrefsource = (!haswrapperelement && !writeaccessors) ? \"hreflist\" : null;\tif (checktypehrefsource != null) writeinitchecktypehreflist(checktypehrefsource);\twriteparamsread(mappings.length);\tint loopindex = writewhilenotloopstart();\twriter.indent++;\tstring unrecognizedelementsource = checktypehrefsource == null ? \"unknownnode((object)p);\" : \"if (reader.getattribute(\\\"id\\\", null) != null) { readreferencedelement(); } else { unknownnode((object)p); }\";\twritememberelements(members, unrecognizedelementsource, \"unknownnode((object)p);\", null, null, checktypehrefsource);\twritewhileloopend(loopindex);\tif (checktypehrefsource != null) writehandlehreflist(members, checktypehrefsource);",
  "failed guid",
  1
 ],
 [
  "public void testaddbracestoelse() {\ttest<addbracescoderefactoringprovider>(@\"class testclass {\tvoid test() {\tif (true) {",
  "called from line",
  1
 ],
 [
  "static void addp12 (string path, string filename, string password, ushort port) {\tx509certificate2 x509 = null;\ttry {\tx509 = new x509certificate2 (filename, password);\t} catch (exception e) {",
  "error loading certificate",
  0
 ],
 [
  "public void readafterclose() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {",
  "verifying read method throws exception after a call to cloes",
  0
 ],
 [
  "public void readtimeout_0_readline_afteropen() {",
  "verifying zero readtimeout after open with readline",
  0
 ],
 [
  "static void main (string[] args) {\tif (args.length != 2) {",
  "mono nunitreport exe input directory output file",
  0
 ],
 [
  "xmldocument doc = new xmldocument();\tdoc.load(path.combine(propertyservice.configdirectory, \"sidebarconfig.xml\"));\tif (doc.documentelement.getattribute(\"version\") != \"1.0\") {\tgeneratestandardsidebar();\t} else {\tloadsidebarconfig(doc.documentelement[\"sidebar\"]);\t}\t} catch (filenotfoundexception) {\tgeneratestandardsidebar();\t} catch (exception ex) {",
  "error loading sidebarconfig xml",
  0
 ],
 [
  "static private void help () {\tconsole.writeline ();",
  "principal save context move back failed",
  1
 ],
 [
  "dynamic d = origin;\ttry {\tc2 result = d;\tfailcount++;\t}\tcatch (microsoft.csharp.runtimebinder.runtimebinderexception e) {\tif (!errorverifier.verify(errormessageid.noimplicitconv, e.message, \"c\", \"c2\")) failcount++;\t}\tcatch (exception e) {\tfailcount++;",
  "test failed catch an unknown exception",
  0
 ],
 [
  "public static void createlbnormalizationtestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<?xml version=\\\"1.0\\\" standalone=\\\"no\\\"?>\");\ttw.writeline(\"[\");",
  "pe",
  0
 ],
 [
  "public override bool check() {\tbool retval = true;\tif (size > array.length) {\treturn false;\t}\tfor (int i = 0; i < size; i++) {\tif ((object)(array[i]) == null) {",
  "virtual network gatewaysubnet id",
  1
 ],
 [
  "getgraincommand.parameters.add(\"graintype\", typeof(imanagementgrain));\tgetgraincommand.parameters.add(\"longkey\", (long)0);\tgetgraincommand.parameters.add(\"client\", client);\t_ps.commands.addcommand(getgraincommand);\tvar results = _ps.invoke<imanagementgrain>();\tassert.single(results);\t_ps.commands.clear();\tvar mgmtgrain = results[0];\tdictionary<siloaddress, silostatus> statuses = mgmtgrain.gethosts(onlyactive: true).result;\tforeach (var pair in statuses) {",
  "silo status",
  0
 ],
 [
  "static void writeheader(streamwriter html, string title) {\thtml.writeline(\"  <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"listing.css\\\">\");\thtml.writeline(\"  <meta name=\\\"generator\\\" value=\\\"buildaddindocumentation\\\">\");\thtml.writeline(\"<h1>\" + title + \"</h1>\");\thtml.writeline(\"<p class=\\\"notice\\\">this file was generated by the tool 'buildaddindocumentation'.\");",
  "it is based on sharpdevelop p",
  0
 ],
 [
  "static void main (string[] args) {\tsymboltable syms;\tif (args.length != 2) {",
  "failure",
  1
 ],
 [
  "if ( param.typename == \"decimal\" || param.typename == \"numeric\") {\tcomm.append ((param.precision !=0 ) ? param.precision : precision);\tcomm.append (param.scale);\tif (param.value != null && param.value != dbnull.value && ((decimal)param.value) != decimal.maxvalue && ((decimal)param.value) != decimal.minvalue && ((decimal)param.value) != long.maxvalue && ((decimal)param.value) != long.minvalue && ((decimal)param.value) != ulong.maxvalue && ((decimal)param.value) != ulong.minvalue) {\tlong expo = (long)new decimal (system.math.pow (10, (double)param.scale));\tlong pval = (long)(((decimal)param.value) * expo);\tparam.value = pval;\t}\t}\tif (collation != null) {",
  "no focused element",
  1
 ],
 [
  "public void showmethoddef (object sender, methoddefinedeventargs args) {",
  "in a thread",
  1
 ],
 [
  "private static async task staysubscribed(icalculatorgrain grain, icalculatorobserver observer, cancellationtoken token) {\twhile (!token.iscancellationrequested) {\ttry {\tawait task.delay(timespan.fromseconds(5), token);\tawait grain.subscribe(observer);\t}\tcatch (exception exception) {",
  "exception while trying to subscribe for updates exception",
  0
 ],
 [
  "private static bool callsecondinterfaceinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tif ((!(bool)(firstclassreturndynamicinterface<int>.staticmethod().instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "mode encryption decryption",
  1
 ],
 [
  "assert.areequal (test, uri.tostring (), \"tostring/\" + test);\t}\t}\t[test]\tpublic void unixlocalpath_wtf () {\tstring path = \"file: uri fileuri = new uri( path );\tassert.areequal (\"/tmp/foo/bar\", fileuri.absolutepath, path);\tstring path2 = \"file: fileuri = new uri (path2);\tassert.areequal (\"file: }\tpublic static void print (uri uri) {",
  "certificates mxr source format",
  1
 ],
 [
  "timer.begintiming ();\tvar dir = path.getdirectoryname (typeof(macplatformservice).assembly.location);\tif (objcruntime.dlfcn.dlopen (path.combine (dir, \"libxammac.dylib\"), 0) == intptr.zero) loggingservice.logfatalerror (\"unable to load libxammac\");\tmimemap = new lazy<dictionary<string, string>> (loadmimemapasync);\tcarbon.setprocessname (brandingservice.applicationname);\tcheckgtkversion (2, 24, 14);\txwt.toolkit.currentengine.registerbackend<iextendedtitlebarwindowbackend,extendedtitlebarwindowbackend> ();\txwt.toolkit.currentengine.registerbackend<iextendedtitlebardialogbackend,extendedtitlebardialogbackend> ();\tvar description = xammacbuildinfo.value;\tif (string.isnullorempty (description)) {",
  "failed to parse version of xamarin mac used at runtime",
  0
 ],
 [
  "public static void restorecomenvironment() {\tif (_typelibs.count == 0) return;\tprogressdialog progressdialog = new progressdialog();\tprogressdialog.setup(\"loading remembered activex files\", \"please wait while i load the previously \" + \"opened activex files.\", _typelibs.count, progressdialog.has_progress_text, progressdialog.final);\tprogressdialog.showifnotdone();",
  "expected",
  1
 ],
 [
  "public void listallusers_tostring () {\ttry {",
  "listing all users",
  0
 ],
 [
  "public async task closeasync_serverinitiatedclose_success(uri server) {\tconst string closewebsocketmetacommand = \".close\";\tusing (clientwebsocket cws = await websockethelper.getconnectedwebsocket(server, timeoutmilliseconds, _output)) {\tvar cts = new cancellationtokensource(timeoutmilliseconds);",
  "sendasync starting",
  0
 ],
 [
  "if (s16.f11 != 11+9) {\treturn 11;\t}\tif (s16.f12 != 12+9) {\treturn 12;\t}\tif (s16.f13 != 13+9) {\treturn 13;\t}\tif (s16.f14 != 14+9) {",
  "got but expected",
  0
 ],
 [
  "static void writeunhandledexception (appdomain appdomain, exception exception) {",
  "error in background work item",
  0
 ],
 [
  "if (f.name == formatname) format = f;\t}\tif (format == null) {\treturn 1;\t}\t}\tif (destpath == null) destpath = path.getdirectoryname (projectfile);\tdestpath = fileservice.getfullpath (destpath);\tstring ofile = await services.projectservice.export (monitor, projectfile, itemstoexport, destpath, format);\tif (ofile != null) {",
  "saved file",
  0
 ],
 [
  "input = compile (input, out compiled);\tif (input != null) return input;\tif (compiled == null) return null;\tobject retval = typeof (quitvalue);\ttry {\tinvoke_thread = system.threading.thread.currentthread;\tinvoking = true;\tcompiled (ref retval);\t#if mono_feature_thread_abort } catch (threadabortexception e){\tthread.resetabort ();",
  "fill dataset via data adapter",
  1
 ],
 [
  "public void siloaddress_tofrom_parsablestring() {\tsiloaddress address1 = siloaddressutils.newlocalsiloaddress(12345);\tstring addressstr1 = address1.toparsablestring();\tsiloaddress addressobj1 = siloaddress.fromparsablestring(addressstr1);",
  "verifying length property throws exception after a call to open",
  1
 ],
 [
  "public static void false(bool condition) {\tif (!condition) return;",
  "testing task runsynchronously buggy scheduler",
  1
 ],
 [
  "public static void error(testresult result, object actual, object expected, string source, string message, string stack, string filename, int lineno) {\tif (internal != null) {\tinternal.error(result, testlogflags.text, stringex.format(actual), stringex.format(expected), source, message, stack, filename, lineno );\t}\telse {",
  "test exceptions in taskfactory continuewhenany task task tresult tresult tresult",
  1
 ],
 [
  "public void testremovebracesfromdowhile() {\ttest<removebracesaction>(@\"class testclass {\tvoid test () {\t$do {\t} while (true);\t}\t}\", @\"class testclass {\tvoid test () {",
  "hello",
  0
 ],
 [
  "public pointf (float a, float b) {\tfa = a;\tfb = b;",
  "chunk size",
  1
 ],
 [
  "xmlreader datareader = getreader(pbase64xml);\tpositiononelement(datareader, st_elem_name1);\tdatareader.read();\tif (!datareader.canreadbinarycontent) return true;\ttry {\tdatareader.readcontentasbase64(buffer, iindex, icount);\t}\tcatch (exception e) {\tbpassed = (e.gettype().tostring() == exceptiontype.tostring());\tif (!bpassed) {",
  "expected exception",
  0
 ],
 [
  "private static bool checkreferencedassemblies (assemblyname an) {\ttry {\tassembly a = reflectiononlyloadfrom (an.codebase);\tassemblyname corlib = getcorlibname ();\tforeach (assemblyname ref_an in a.getreferencedassemblies ()) {\tif (ref_an.name == corlib.name) continue;\tbyte [] pt = ref_an.getpublickeytoken ();\tif (pt == null || pt.length == 0) {",
  "assembly is not strong named",
  0
 ],
 [
  "}\tif ((mod & gdk.modifiertype.controlmask) != 0) {\toutmod |= nseventmodifiermask.controlkeymask;\tmod ^= gdk.modifiertype.controlmask;\t}\tif ((mod & gdk.modifiertype.metamask) != 0) {\toutmod |= nseventmodifiermask.commandkeymask;\tmod ^= gdk.modifiertype.metamask;\t}\tif (mod != 0) {",
  "writer writeunsigned uint values length",
  1
 ],
 [
  "public void initialize () {\ttry {\tinitializedefaultcredentialprovider ();\t} catch (exception ex) {",
  "failed to initialize packagemanagementcredentialservice",
  0
 ],
 [
  "output.writeline();\toutput.unindent();\t}\toutput.writeline(\"{\");\toutput.indent();\tbool oldisintype = isintype;\tisintype = true;\twriteattributes(type.customattributes);\twritesecuritydeclarations(type);\tif (type.haslayoutinfo) {",
  "pack",
  0
 ],
 [
  "public void openclose_writemethods() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {",
  "verifying calling write methods after calling open and basestream close",
  0
 ],
 [
  "public override bool onstart() {",
  "copy bytes from to",
  1
 ],
 [
  "for (int i = 0; i < direntrycount; i++) {\ticondirentry ide;\tide.width = reader.readbyte ();\tide.height = reader.readbyte ();\tide.colorcount = reader.readbyte ();\tide.reserved = reader.readbyte ();\tide.planes = reader.readuint16 ();\tide.bitcount = reader.readuint16 ();\tide.bytesinres = reader.readuint32 ();\tide.imageoffset = reader.readuint32 ();",
  "ide bitcount",
  0
 ],
 [
  "const string newjobmanagercommandline = \"ping 127.0.0.1 -n 150\";\tboundjobschedule.jobspecification.jobmanagertask.commandline = newjobmanagercommandline;\tboundjobschedule.commit();\tassertjobschedulecorrectness(batchcli.jobscheduleoperations, boundjobschedule, this.poolfixture.poolid, newjobschedulepriority, jobmanagerid, newjobmanagercommandline, recurrenceinterval, metadata);\tconst string newpoolid = \"testpool\";\tboundjobschedule.jobspecification.poolinformation = new poolinformation() { poolid = newpoolid };\tboundjobschedule.commit();\tassertjobschedulecorrectness( batchcli.jobscheduleoperations, boundjobschedule, newpoolid, newjobschedulepriority, jobmanagerid, newjobmanagercommandline, recurrenceinterval, metadata);\tilist<metadataitem> newmetadata = new list<metadataitem> { new metadataitem(\"object\", \"model\") };\tboundjobschedule.metadata = newmetadata;",
  "selecting",
  1
 ],
 [
  "static private void help () {\tconsole.writeline ();",
  "put copy a certificate crl or ctl from a store to a file",
  0
 ],
 [
  "public static void main (string[] args) {\tif (args.length == 0) {\tconsole.writeline ();\tconsole.writeline ();",
  "readsubtree doesn t throw invalidop exception on attribute node type",
  1
 ],
 [
  "private void dumpsqlparam(sqlparameter param) {",
  "direction",
  0
 ],
 [
  "w.writestartdocument();\tw.writestartelement(\"root\");\tw.writeendelement();\tw.writesurrogatecharentity('\\udf41', '\\ud920');\t}\tcatch (invalidoperationexception e) {\tcerror.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "static void writehelp () {",
  "usage disco options url",
  0
 ],
 [
  "public void bytestowrite() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tasyncwriterndstr asyncwriterndstr = new asyncwriterndstr(com, s_string_size_bytes_to_write);\tvar t = new task(asyncwriterndstr.writerndstr);",
  "verifying bytestowrite with one call to write",
  0
 ],
 [
  "private static bool nouserdefinedimplicitconversionbutexistexplicitconversion() {\tint failcount = 0;\tc origin = new c(22);\tdynamic d = origin;\ttry {\tc2 result = (c2)d;\tif (result.f1 != origin.f1) {\tfailcount++;",
  "test failed at conversion result",
  0
 ],
 [
  "public void writenode_xmlreader26(xmlwriterutils utils) {\txmlreader xr = createreaderignorews(\"xmlreader.xml\");\twhile (xr.read()) {\tif (xr.localname == \"commentnode\") {\txr.read();\tbreak;\t}\t}\tif (xr.nodetype != xmlnodetype.comment) {",
  "reader positioned on",
  0
 ],
 [
  "stringbuilder sb = new stringbuilder();\tfor (int i = 0; i < 1000000; i++) sb.append(i);\tcmd.commandtext = \"insert into #blobs (id, blob) values (1, @blob)\";\tcmd.parameters.add(\"@blob\", sqldbtype.varchar, -1);\tcmd.parameters[\"@blob\"].direction = parameterdirection.input;\tcmd.parameters[\"@blob\"].value = new stringreader(sb.tostring());\ttask t = cmd.executenonqueryasync(cts.token);\tif (!t.iscompleted) cts.cancel();\ttry {\tt.wait();",
  "workwithnolocalstate int on index startindex real index",
  1
 ],
 [
  "private void checkdisposed() {\tif (_disposed) {",
  "principalsearchresult checkdisposed accessing disposed object",
  0
 ],
 [
  "protected sealed override async task<bool> onaddtoproject (cancellationtoken token) {\tint trycount = 1;\tbool keeptrying = true;\twhile (keeptrying) {\ttry {\tif (trycount > 1) {",
  "retrying to add code dependency",
  0
 ],
 [
  "}\tstr = shortcut.substring (i, j - i);\tif ((mod = modifiermask (str)) == gdk.modifiertype.none) {\tif (str.length > 1) {\tif (!gdk.key.tryparse (str, out key)) {\treturn null;\t}\t}\telse if (str[0] >= 'a' && str[0] <= 'z') key = (gdk.key) str[0] - 32;\telse key = (gdk.key) str[0];",
  "warning trailing data after gdk key portion of shortcut",
  0
 ],
 [
  "userdefaultpolicies = null;\ttry {\tif (directory.exists (policiesfolder)) {\tforeach (var file in directory.getfiles (policiesfolder, \"*.mdpolicy.mdpolicy.xml\")) file.delete (file);\tforeach (var file in directory.getfiles (policiesfolder, \"*.mdpolicy.mdpolicy.xml.previous\")) file.delete (file);\tif (file.exists (policiesfolder.combine (\"default.mdpolicy.xml\")) && file.exists (policiesfolder.combine (\"userdefault.mdpolicy.xml\"))) file.delete (policiesfolder.combine (\"default.mdpolicy.xml\"));\tforeach (var file in directory.getfiles (policiesfolder, \"*.mdpolicy.xml\")) {\ttry {\tloadpolicy (file);\t} catch (exception ex) {",
  "principalcollectionenumerator entering movenext",
  1
 ],
 [
  "static void readdata(idatareader rdr) {\tint results = 0;\tif(rdr == null) {",
  "error",
  1
 ],
 [
  "var alloc = allocation;\tusing (var cr = cairohelper.create (evnt.window)) {\tcr.translate (alloc.x, alloc.y);\tcr.translate (xexpandedoffset * (1 - scale), yexpandedoffset * (1 - scale));\tvar scalex = (alloc.width / userspacearea.width - 1) * scale + 1;\tvar scaley = (alloc.height / userspacearea.height - 1) * scale + 1;\tcr.scale (scalex, scaley);\tdraw (cr, userspacearea);\t}\t} catch (exception e) {",
  "exception in animation",
  0
 ],
 [
  "public override object instantiate () {",
  "rxevent triggered",
  1
 ],
 [
  "string[] attrs = { \"+\", null };\tld.search (\"\" /* root dse */, searchscope.base, \"(objectclass=*)\", attrs, false, timespan.fromseconds(10), 0 /* no size limit */, out res);\tif (res == null) {\t}\tentry = res.firstentry();\tif (entry == null) console.writeline (\"null returned from res.firstentry\");\tstring[] extensions = entry.getvalues (\"supportedextension\");\tif (extensions != null) {\t}\telse {",
  "null returned from entry getvalues",
  0
 ],
 [
  "}\twhile (transactionsinflight.count == concurrenttransactionstransactions);\t}\tlist<transactioninfo> empty = new list<transactioninfo>();\twhile (transactionsinflight.count != 0) {\ttuple<int, int> results = await commitandcount(tms, empty, transactionsinflight);\tsuccess += results.item1;\tfailed += results.item2;\t}\tsw.stop();",
  "verifying that read byte int int will read characters that have been received after the call to read was made",
  1
 ],
 [
  "if (issuntest) dirs =  new directoryinfo [] {new directoryinfo (basepath)};\telse dirs = new directoryinfo (basepath).getdirectories ();\tforeach (directoryinfo di in dirs) {\tforeach (fileinfo fi in di.getfiles (\"*.xml\")) {\ttry {\txmltextreader xtr = new xmltextreader (fi.fullname);\txtr.namespaces = false;\txtr.normalization = true;\twhile (!xtr.eof) xtr.read ();\t} catch (exception ex) {",
  "error while touching cache directory",
  1
 ],
 [
  "}\tvar codenamespace = new codenamespace(designerclass.namespace);\tcodenamespace.types.add(codeclass);\tvar codeunit = new codecompileunit();\tcodeunit.namespaces.add(codenamespace);\t#if debug if ((control.modifierkeys & keys.control) == keys.control) {\tcodedomverboseoutputgenerator outputgenerator = new codedomverboseoutputgenerator();\toutputgenerator.generatecodefrommember(codemethod, console.out, null);\tthis.codedomprovider.generatecodefromcompileunit(codeunit, console.out, null);\t}",
  "retrieved",
  1
 ],
 [
  "private void unloadonthread() {\tbool shadowcopy = domain.shadowcopyfiles;\tstring cachepath = domain.setupinformation.cachepath;\tstring domainname = domain.friendlyname;\ttry {\tappdomain.unload(domain);\t}\tcatch (exception ex) {",
  "breadth first",
  1
 ],
 [
  "protected virtual string loadfile (string path) {\tif (!file.exists (path)) {",
  "file not found required for exception template",
  0
 ],
 [
  "do {\tstring cf = path.combine (dir, \"changelog\");\tif (file.exists (cf)) return cf;\tdir = path.getdirectoryname (dir);\t} while (dir.length >= basecommitpath.length);\treturn null;\t}\tcase changelogupdatemode.projectroot: return path.combine (parententry.basedirectory, \"changelog\");\tcase changelogupdatemode.directory: string filedir = path.getdirectoryname (file);\treturn path.combine (filedir, \"changelog\");",
  "get hresult loading mixed modes asm from disk",
  1
 ],
 [
  "if (service is servicecreatorcallback) {\tservice = ((servicecreatorcallback)service)(this, servicetype);\tdebug.writelineif(s_traceservice.traceverbose, $\"callback return object: {(service == null ? \"(null)\" : service.tostring())}\");\tif (service != null && !service.gettype().iscomobject && !servicetype.isinstanceoftype(service)) {\tdebug.fail($\"object {service.gettype().name} was returned from a service creator callback but it does not implement the registered type of {servicetype.name}\");\tservice = null;\t}\tservices[servicetype] = service;\t}\tif (service == null && _parentprovider != null) {",
  "got but expected",
  1
 ],
 [
  "public void listnodeagentskus() {\taction test = () => {\tusing (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {\tvar nas = batchcli.pooloperations.listnodeagentskus().tolist();\tassert.true(nas.count > 0);\tforeach (nodeagentsku curnas in nas) {\tforeach (imagereference verifiedimagereference in curnas.verifiedimagereferences) {",
  "getprocessinfos found a non idle process with id ignoring",
  1
 ],
 [
  "private void usercontrol_loaded(object sender, routedeventargs e) {\ttextui.writeheader(this.writer);\ttextui.writeruntimeenvironment(this.writer);",
  "actual exception",
  1
 ],
 [
  "public void testcase5() {\ttest<stringcompareisculturespecificissue>(@\" class test {\tvoid foo () {\t}\t}\", @\" class test {\tvoid foo () {",
  "foo bar",
  0
 ],
 [
  "static private void help () {",
  "secutil array",
  0
 ],
 [
  "public void outlinetype () {\tbool first, ns = !string.isnullorempty (t.namespace);\tif (ns){",
  "namespace",
  0
 ],
 [
  "file.writealltext (temppath, contents);\tfileservice.systemrename (temppath, path);\tgtk.application.invoke ((o, args) => {\tfileservice.notifyfilechanged (path);\t});\twrittencount++;\t} catch (ioexception ex) {\tif (monitor != null) monitor.reporterror (gettextcatalog.getstring (\"failed to write file '{0}'.\", path), ex);\t} catch (exception ex) {\tif (monitor != null) monitor.reporterror (gettextcatalog.getstring (\"failed to generate code for file '{0}'.\", path), ex);",
  "codebehindwriter failed",
  0
 ],
 [
  "public static int main () {\ts s = new s ();\ts.test ();\ts.t ();\tif (s.f == 10) return 0;",
  "workflowdisplaybinding got exception",
  1
 ],
 [
  "public static int main () {\tif (2.test () != 11) return 1;\tif (1.test (b : 2) != 5) return 2;\tif (foo (\"n\", a : 4) != \"n\") return 3;\tif (foo (t : \"x\", a : 4) != \"x\") return 4;\tlambda (a : (a) => 1);\tint var = 8;\tlambda (a : (a) => var);",
  "ok",
  0
 ],
 [
  "public static blah operator ~ (blah i) {",
  "overloaded operator",
  0
 ],
 [
  "try {\tchecked {\tuint rez3 = d2 - d;\t}\t}\tcatch (system.overflowexception) {\texception = true;\t}\tfinally {\tif (exception) rez++;",
  "test failed",
  0
 ],
 [
  "public void emitsource() {\twriteline();",
  "using system collections generic",
  0
 ],
 [
  "if (index >= 0) {\tlinelayout.layout.indextolinex (index, true, out l, out x1);\t} else {\tl = x1 = 0;\t}\tindex = result.offset - line.offset - 1 + result.length;\tif (index >= 0) {\tlinelayout.layout.indextolinex (index, true, out l, out x2);\t} else {\tx2 = 0;",
  "wrong case",
  1
 ],
 [
  "writeline(\"return _value == handle._value;\");\tclosescope(\"equals\");\topenscope(\"public override int gethashcode()\");\tclosescope(\"gethashcode\");\twritelineifneeded();\topenscope($\"internal {handlename}(handle handle) : this(handle._value)\");\tclosescope();\topenscope($\"internal {handlename}(int value)\");\twriteline(\"handletype htype = (handletype)(value >> 24);\");\twriteline($\"if (!(htype == 0 || htype == handletype.{record.name} || htype == handletype.null))\");",
  "throw new argumentexception",
  0
 ],
 [
  "static void showinfo() {",
  "nested got but expected",
  1
 ],
 [
  "return string.empty;\t}\t}\ttry {\tstream st = asm.getmanifestresourcestream (resourcename);\tif (st == null) {\treturn string.empty;\t}\tusing (streamreader sr = new streamreader (st)) return sr.readtoend ();\t} catch (exception ex) {",
  "error reading manifest resource from assembly required for exception template exception has been thrown",
  0
 ],
 [
  "try {\tchecked {\tint rez2 = d + d2;\t}\t}\tcatch (system.overflowexception) {\texception = true;\t}\tfinally {\tif (exception) rez++;",
  "innerexceptionset",
  1
 ],
 [
  "public void resume () {\tif (state == state.idle) {\tcommandmanager.keypressed += handlecommandmanagerkeypressed;\tcommandmanager.commandactivated += handlecommandmanagercommandactivated;\tstate = state.recording;",
  "exception during replace",
  1
 ],
 [
  "astnode selectednode = null;\tilist<astnode> commentsblanklines;\tvar parsedcu = parsedocument(editor, out commentsblanklines);\tif (parsedcu == null)\treturn;\tisegment oldselection = new textsegment { startoffset = editor.selectionstart, length = editor.selectionlength };\tselection extendedselection = extendselection(editor, parsedcu, commentsblanklines, out selectednode, new type[] { typeof(astnode) });\tselecttext(extendedselection, editor);\tif (previousselections.count == 0 || !(previousselections.peek().offset == oldselection.offset && previousselections.peek().endoffset == oldselection.endoffset)) {\tpreviousselections.push(oldselection);\t} else {",
  "not accepted",
  0
 ],
 [
  "public static ienumerable<string> yieldreturnwithnestedtryfinally(bool breakinmiddle) {\tyield return \"start of method\";\ttry {\tyield return \"within outer try\";\ttry {\tyield return \"within inner try\";\tif (breakinmiddle) yield break;\tyield return \"end of inner try\";\t} finally {\t}",
  "end of outer try",
  0
 ],
 [
  "string compiler;\tif (!getoption (\"compiler\", args, true, out compiler)) {\tusage ();\treturn 1;\t}\titester tester;\ttry {\ttester = new reflectiontester (assembly.loadfile (compiler));\t} catch (exception) {\tif (!file.exists (compiler)) {",
  "error tested compiler was not found",
  0
 ],
 [
  "private static void staticcompletioncallback(object context, bool wassignaled) {\tloglisteninginfo info = (loglisteninginfo)context;\tif (info == null) return;\teventloginternal[] interestedcomponents;\tlock (internalsyncobject) {\tinterestedcomponents = (eventloginternal[])info.listeningcomponents.toarray(typeof(eventloginternal));\t}",
  "assembly",
  1
 ],
 [
  "byte[] aj = new byte[sizeof(nativemethods.paletteentry) * 256];\tfixed (byte* pcolors = pbmi.bmicolors) {\tfixed (byte* ppal = aj) {\tnativemethods.rgbquad* prgb = (nativemethods.rgbquad*)pcolors;\tnativemethods.paletteentry* lppe = (nativemethods.paletteentry*)ppal;\tint ccolors = 1 << pbmi.bmiheader_bibitcount;\tif (ccolors <= 256) {\tuint palret;\tintptr palhalftone = intptr.zero;\tif (hpal == intptr.zero) {",
  "using halftone palette",
  0
 ],
 [
  "public void testnullabletype() {",
  "there is no stylesheet element in the file",
  1
 ],
 [
  "public void getassemblyname_assemblyfile_badimage () {\tstring file = path.combine (tempdir, \"badimage.dll\");\tusing (streamwriter sw = file.createtext (file)) {",
  "hello world",
  1
 ],
 [
  "int explen = (strexpected == null ? 0 : strexpected.length);\tint actlen = (stractual == null ? 0 : stractual.length);\tint minlen = (explen < actlen ? explen : actlen);\tint i, j = 0;\tfor (i = 0; i < actlen; i++) {\tif (j >= explen) {\treturn false;\t}\tif (strexpected[j] != stractual[i]) {\tif (strexpected[j] != prefix_char) {",
  "try",
  1
 ],
 [
  "public static void createeventsource(eventsourcecreationdata sourcedata) {\tif (sourcedata == null) throw new argumentnullexception(nameof(sourcedata));\tstring logname = sourcedata.logname;\tstring source = sourcedata.source;\tstring machinename = sourcedata.machinename;",
  "createeventsource checking arguments",
  0
 ],
 [
  "public void linqtosqlconversion04() {\tnorthwind db = createdb();\tvar q = from p in db.products where p.unitsinstock <= p.reorderlevel && !convert.toboolean(p.discontinued) select p;\tvar qdictionary = q.todictionary(p => p.productid);\tassert.isfalse(qdictionary == null);\tif (qdictionary.count == 0) assert.ignore(\"please check this test validity\");\tforeach (var key in qdictionary.keys) {",
  "noprojecttype",
  1
 ],
 [
  "public static void save (textwriter writer, editortheme theme) {\twriter.writeline (\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\");\twriter.writeline (\"<!doctype plist public \\\"- writer.writeline (\"<plist version=\\\"1.0\\\">\");\tforeach (var setting in theme.settings) {",
  "dict",
  0
 ],
 [
  "public static int test () {\texpression<func<t?, bool>> e = (t? o) => o == null;\tif (!e.compile ().invoke (null)) return 1;\tif (e.compile ().invoke (default (t))) return 2;",
  "ok",
  0
 ],
 [
  "static void usage () {",
  "mono compiler tester c novell inc compiler tester mode pos neg compiler file files file list options compiler file the file which will be used to compiler tests compiler options options add global compiler options il il file xml file with expected il details for each test issues file the list of expected failures log file writes any output also to the file help lists all options mode pos neg specifies compiler test mode safe execution runs compiled executables in separate app domain update il updates il file to match compiler output verbose prints more details during testing",
  0
 ],
 [
  "static void main (string [] args) {\ttypenames.addrange (args [0].split (','));\tfor (int i = 1; i < args.length; i++) {\tassemblies.add (assemblydefinition.readassembly (args [i]));\t}\tif (typenames.count == 1) {",
  "looking for type",
  0
 ],
 [
  "else concurrency = int32.parse (args [i + 1]);\ti += 2;\t} else if (args [i] == \"--timeout\") {\tif (i + 1 >= args.length) {\treturn 1;\t}\ttimeout = int32.parse (args [i + 1]);\ti += 2;\t} else if (args [i] == \"--disabled\") {\tif (i + 1 >= args.length) {",
  "missing argument to disabled command line option",
  0
 ],
 [
  "static void printclassallocationdata (textwriter writer, profilereventhandler data, loadedclass c, ulong totalallocatedbytes) {\tdouble allocatedbytesperclass = (double)c.allocatedbytes;",
  "bytes",
  0
 ],
 [
  "private delegate void readmethoddelegate(serialport com, int buffersize);\t#region test cases [conditionalfact(nameof(hasoneserialport))]\tpublic void bytestoread_default() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "verifying default bytestoread",
  0
 ],
 [
  "static void threadproc() {\twhile (!stoptracing) {\tthread.sleep(20000);\twritelogfile();",
  "threadtrace saved",
  0
 ],
 [
  "var jobs = batchcli.joboperations.listjobs().tolist();\tassert.true(interceptorcount > prelistjobscount);\tint prelistpoolscount = interceptorcount;\tvar pools = batchcli.pooloperations.listpools().tolist();\tassert.true(interceptorcount > prelistpoolscount);\tprotocol.batchrequestmodificationintercepthandler yieldinjectioninterceptor = baserequest => {\tvar request = (jobgetbatchrequest)baserequest;\trequest.servicerequestfunc = (token) => { return request.restclient.job.getwithhttpmessagesasync(bug1959324jobid, request.options, cancellationtoken: token); };\t};\tcloudjob boundjob = batchcli.joboperations.getjob( \"test value that can't possibly be found as a job id\", additionalbehaviors: new[] { new protocol.requestinterceptor(yieldinjectioninterceptor) });",
  "missing",
  1
 ],
 [
  "public void stopbits_neg1() {",
  "verifying stopbits",
  0
 ],
 [
  "m_xsltarg.addparam(\"myarg2\", szempty, i);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (!i.equals(retobj)) {\tassert.true(false);\t}\tif (i.gettype() != j.gettype()) assert.true(false);\tboolean bf = (1 == 0);\tm_xsltarg.addparam(\"myarg3\", szempty, bf);\tretobj = m_xsltarg.getparam(\"myarg3\", szempty);\tif (!bf.equals(retobj)) {",
  "failed to add get a value for of type boolean",
  0
 ],
 [
  "public void tempfiles3() {\ttry {\tstring xsl = \"<root xmlns:ns=\\\"testing\\\">\" + \"<xsl:stylesheet version=\\\"1.0\\\" xmlns:xsl=\\\"http: + \"<xsl:template match=\\\"/\\\">\" + \"<xsl:value-of select=\\\"ns:test\\\" />\" + \"</xsl:template>\" + \"</xsl:stylesheet>\" + \"</root>\";\txmlreader r = xmlreader.create(new stringreader(xsl));\twhile (r.nodetype != xmlnodetype.element || r.localname != \"stylesheet\") {\tif (!r.read()) {",
  "there is no stylesheet element in the file",
  0
 ],
 [
  "#endif }\tcon.connectionstring = constr;\ttry {\tcon.open();\t}\tcatch(sqlexception se) {\tforeach(sqlerror error in se.errors) {\t}\texception ie = se.innerexception;\tif(ie != null) {",
  "message",
  0
 ],
 [
  "public static void save (textwriter writer, editortheme theme) {\twriter.writeline (\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\");\twriter.writeline (\"<!doctype plist public \\\"- writer.writeline (\"<plist version=\\\"1.0\\\">\");",
  "key name key",
  0
 ],
 [
  "public void testremovebracesfromif() {\ttest<removebracesaction>(@\"class testclass {\tvoid test () {\t$if (true) {",
  "hello",
  0
 ],
 [
  "static void createversionindex () {\tstring rules_index = string.format (\"{0}{1}{2}{1}gendarme.rules({2}).md\", outputdir, path.directoryseparatorchar, version);\tusing (textwriter writer = file.createtext (rules_index)) {",
  "text",
  1
 ],
 [
  "private void checkparticlederivation(xmlschemacomplextype complextype) {\txmlschemacomplextype basetype = complextype.basexmlschematype as xmlschemacomplextype;\tif (basetype != null && basetype != xmlschemacomplextype.anytype && complextype.derivedby == xmlschemaderivationmethod.restriction) {\tif (!isvalidrestriction(complextype.contenttypeparticle, basetype.contenttypeparticle)) {\t#if debug if (complextype.contenttypeparticle != null && basetype.contenttypeparticle != null) {\tstring position = string.empty;\tif (complextype.sourceuri != null) {\tposition = \" in \" + complextype.sourceuri + \"(\" + complextype.linenumber + \", \" + complextype.lineposition + \")\";\t}",
  "codelabeledstatement",
  1
 ],
 [
  "private static bool dynamicobjectinsecondoperandandfirstisnull() {\tint failcount = 0;\tbyte origin = 24;\tdynamic d = origin;\tlong? first = null;\tif ((long)(first ?? d) != 24) {\tfailcount++;",
  "test failed conversion result is incorrect",
  0
 ],
 [
  "public static void main (string[] args) {\tfoo f = new foo();\tbar b = new bar();\tb.test(f);",
  "waited",
  1
 ],
 [
  "s8.f1 = 1;\ts8.f2 = 2;\ts8.f3 = 3;\ts8.f4 = 4;\ts8.f5 = 5;\ts8.f6 = 6;\ts8.f7 = 7;\ts8.f8 = 8;\ts8 = mono_return_float8(s8, 906);\tif (s8.f1 != 1+906) {",
  "got but expected",
  0
 ],
 [
  "x509_ptr = x509.handle.stealhandle ();\treturn 1;\t} else {\tx509_ptr = intptr.zero;\treturn 0;\t}\t} finally {\tif (name_handle != null) name_handle.dispose ();\t}\t} catch (exception ex) {",
  "lookup method get by subject ex",
  0
 ],
 [
  "static void outparmtest6 (oracleconnection con) {\toraclecommand cmd2 = con.createcommand();\tcmd2.commandtext = \"create or replace function sf_testoutparm6(parm1 in timestamp, parm2 out timestamp, parm3 in out timestamp) return timestamp \" + \"is \" + \"   returnvalue timestamp := to_timestamp('2001-07-01 15:32:52', 'yyyy-mm-dd hh24:mi:ss');\" + \"begin \" + \"   if parm1 is null then \" + \"      parm2 := to_timestamp('1900-12-31', 'yyyy-mm-dd'); \" + \"      parm3 := to_timestamp('1900-12-31', 'yyyy-mm-dd'); \" + \"   elsif parm1 = to_timestamp('1979-11-25','yyyy-mm-dd') then \" + \"      parm2 := null;\" + \"      parm3 := null;\" + \"      returnvalue := null;\"+ \"   elsif parm3 is null then \" + \"      parm2 := to_timestamp('2008-08-08', 'yyyy-mm-dd');\" + \"      parm3 := to_timestamp('2000-01-01', 'yyyy-mm-dd');\" + \"   else \" + \"      -- add 3 days to date\\n \" + \"\t   parm2 := parm1 + 3; \" + \"      parm3 := parm3 + 5; \" + \"   end if; \" + \"   return returnvalue;\" + \"end;\";\tcmd2.executenonquery();\tcmd2.commandtext = \"commit\";\tcmd2.executenonquery();",
  "call stored function sf with parameters",
  0
 ],
 [
  "public override void writestyleattribute (string name, string value, bool fencode) {",
  "writestyleattribute",
  0
 ],
 [
  "public static void main (string[] args) {\tcompositepoker poker;\tpoker = new compositepoker ();\tconsole.writeline (\"--------\");\ttry { poker.databind(); } catch (exception e) { console.writeline (e);}\tpoker = new compositepoker ();",
  "render",
  0
 ],
 [
  "public void stuff() {\tstring myldappath = \"ldap: string username = \"cn=manager,dc=toshok,dc=org\", passwd = \"evotest\";\ttry {\tmono.directory.ldap.ldap ld = new mono.directory.ldap.ldap (myldappath);\tld.bindsimple (username, passwd);\t}\tcatch(exception e) {",
  "exception",
  0
 ],
 [
  "}\telse if (args [ppos] == \"-ap\" || args [ppos] == \"--addinspath\") {\tif (ppos + 1 >= args.length) {\treturn 1;\t}\taddinspath = args [ppos + 1];\tppos += 2;\t}\telse if (args [ppos] == \"-cp\" || args [ppos] == \"--cachepath\") {\tif (ppos + 1 >= args.length) {",
  "count",
  1
 ],
 [
  "dataobject.stringdata = rowkey;\tvar promise = manager.upserttableentryasync(dataobject);\tpromises.add(promise);\tif ((i % batchsize) == 0 && i > 0) {\ttask.whenall(promises).waitwiththrow(azuretabledefaultpolicies.tablecreationtimeout);\tpromises.clear();\t}\t}\ttask.whenall(promises).waitwiththrow(azuretabledefaultpolicies.tablecreationtimeout);\tsw.stop();",
  "designerloader onendload error",
  1
 ],
 [
  "public override void writeentry (string [] replacementstrings, eventlogentrytype type, uint instanceid, short category, byte [] rawdata) {\tlock (lockobject) {\tstring logdir = findlogstore (coreeventlog.log);\tint index = getlatestindex () + 1;\tstring logpath = path.combine (logdir, index.tostring (cultureinfo.invariantculture) + \".log\");\ttry {\tusing (textwriter w = file.createtext (logpath)) {",
  "ms other tasks",
  1
 ],
 [
  "location = location, tags = originaltagsdictionary };\tvar createtopicresponse = this.eventgridmanagementclient.topics.createorupdate(resourcegroup, topicname, topic);\tassert.notnull(createtopicresponse);\tassert.equal(createtopicresponse.name, topicname);\ttestutilities.wait(timespan.fromseconds(60));\ttopicsharedaccesskeys keys = this.eventgridmanagementclient.topics.listsharedaccesskeys(resourcegroup, topicname);\tstring topichostname = new uri(createtopicresponse.endpoint).host;\ttopiccredentials topiccredentials = new topiccredentials(keys.key1);\teventgridclient client =  eventgridmanagementhelper.geteventgridclient( context, topiccredentials, new recordeddelegatinghandler { statuscodetoreturn = httpstatuscode.ok });\tclient.publisheventsasync(topichostname, geteventslist()).getawaiter().getresult();",
  "foo",
  1
 ],
 [
  "public int transform(string szxmlfile, outputtype outputtype, navtype navtype, bool errorcase) {\tszxmlfile = fullfilepath(szxmlfile);",
  "usage cert sync quiet user system ca bundle crt",
  1
 ],
 [
  "public void indent_29(xmlwriterutils utils) {\tint i;\tfor (i = 0; i < 2; i++) {\txmlwritersettings wsettings = new xmlwritersettings();\twsettings.omitxmldeclaration = false;\twsettings.indent = true;\twsettings.conformancelevel = (i % 2) == 0 ? conformancelevel.auto : conformancelevel.document;",
  "conformancelevel",
  0
 ],
 [
  "if (!templateinfos.trygetvalue (template.templateid, out templateinfo)) {\tcontinue;\t}\tnewprojecttemplates.add (new microsofttemplateenginesolutiontemplate (template, templateinfo));\t}\tprojecttemplates = newprojecttemplates;\tvar newitemtemplates = new list<microsofttemplateengineitemtemplate> ();\tforeach (var template in itemtemplatenodes) {\titemplateinfo templateinfo;\tif (!templateinfos.trygetvalue (template.templateid, out templateinfo)) {",
  "context model build",
  1
 ],
 [
  "public async task getasync_allowautoredirecttrue_redirecttouriwithparams_requestmsguriset() {\thttpclienthandler handler = createhttpclienthandler();\thandler.allowautoredirect = true;\turi targeturi = configuration.http.basicauthuriforcreds(secure: false, username: username, password: password);\tusing (var client = new httpclient(handler)) {\turi uri = configuration.http.redirecturifordestinationuri( secure: false, statuscode: 302, destinationuri: targeturi, hops: 1);",
  "uri",
  0
 ],
 [
  "private static bool verifyclientcertificate (object sender, x509certificate certificate, x509chain chain, sslpolicyerrors certificateerrors) {\tif (certificate != null) {\tconsole.writeline (certificate.tostring (true));\t} else {\t}\tconsole.writeline (chain);",
  "error",
  0
 ],
 [
  "public static void main (string[] args) {\tprintersettings.stringcollection col = system.drawing.printing.printersettings.installedprinters;\tfor (int i = 0; i < col.count; i++) {\tconsole.writeline (\"--- {0}\", col[i]);\tprintersettings ps = new printersettings ();\tps.printername = col[i];",
  "frompage",
  0
 ],
 [
  "static bool callsecondstructindexer() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturndynamicstruct<int>();\tif ( (!(bool)(s.instanceproperty[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "if (gateway == null) {\tawait createandconfiguregateway(client, gatewaytwo);\tgateway = await client.gateway.getasync(resourcegroup, gatewaytwo, gatewayexpandoption.status);\t}\tvar node = await createnode(client, gateway, string.empty, string.empty);\tassert.notnull(node);\tnode = await client.node.getasync(resourcegroup, nodename);\tassert.notnull(node);\tassert.equal(nodename, node.name);\tassert.equal(nodename, node.connectionname);",
  "listing nodes",
  0
 ],
 [
  "for (int j = 0; j < useless.length; j++) {\tif (useless[j] == 'u') console.writeline (\"i have detected an u char\");\t}\ttry {\tforeach (string environmentvariable in environment.getenvironmentvariables ().keys) console.writeline (environmentvariable);\t}\tcatch (system.security.securityexception exception) {\tconsole.writeline (exception.message);\tconsole.writeline (exception);\t}",
  "i will add more useless code",
  0
 ],
 [
  "client[i] = this.multicluster.newclient(clustername, 0, clientwrapper.factory);\t}\toutput.writeline(\"clusters and clients are ready (elapsed = {0})\", stopwatch.elapsed);\tmulticluster.waitforlivenesstostabilizeasync().waitwiththrow(timespan.fromminutes(1));\tclient[0].injectclusterconfiguration(cluster);\tmulticluster.waitformulticlustergossiptostabilizeasync(false).waitwiththrow(timespan.fromminutes(system.diagnostics.debugger.isattached ? 60 : 1));\tstopwatch.stop();\toutput.writeline(\"multicluster is ready (elapsed = {0}).\", stopwatch.elapsed);\t}\telse {",
  "done connection pooling test",
  1
 ],
 [
  "protected override void generatetypeconstructor(codetypeconstructor e) {\tif (!(iscurrentclass || iscurrentstruct)) return;\tif (e.customattributes.count > 0) {\toutputattributes(e.customattributes, false);\t}\tindent++;\tgeneratevbstatements(e.statements);\tindent--;",
  "end sub",
  0
 ],
 [
  "if (!string.isnullorwhitespace(var.desc)) {\tsystem.console.writeline(indent + var.desc);\t}\tif (!string.isnullorwhitespace(tse.message)) {\t}\tmodule.skipcount++;\t}\tcatch (exception e) {\tsystem.console.writeline(indent + var.desc);\tsystem.console.writeline(e);",
  "compiler said value is",
  1
 ],
 [
  "public void emitsource() {\twriteline();",
  "cwl under oom should not print",
  1
 ],
 [
  "if (s7.f1 != 1+9) {\treturn 1;\t}\tif (s7.f2 != 2+9) {\treturn 2;\t}\tif (s7.f3 != 3+9) {\treturn 3;\t}\tif (s7.f4 != 4+9) {",
  "t target target name of the target build or clean",
  1
 ],
 [
  "thread1.join();\tthread thread2 = new thread(() => {\tfor (int i = 0; i < 1000; i++) {\tint idx = -1;\ttry {\tidx = waithandle.waitany (mutexes);\t} finally {\tif (idx != -1) mutexes [idx].releasemutex();\t}\t}",
  "calling application run",
  1
 ],
 [
  "setupcommand cmd = findcommand (parms [0]);\tif (cmd != null) {\tconsole.writeline (\"{0}: {1}\", cmd.commanddesc, cmd.description);\tconsole.writeline ();\tconsole.writeline ();\ttextformatter fm = new textformatter ();\tfm.wrap = wrappingtype.word;\tfm.append (cmd.longdescription);\tconsole.writeline (fm.tostring ());\t}",
  "unknown command",
  0
 ],
 [
  "if (language == null || language == \"\") throw new invalidoperationexception (gettextcatalog.getstring (\"language not defined in codedom based template.\"));\tcodedomprovider provider = getcodedomprovider (language);\tif (tempsubstitutedcontent == null) throw new exception (gettextcatalog.getstring (\"expected modifytags to be called before createcontent\"));\tcodecompileunit ccu;\tusing (stringreader sr = new stringreader (tempsubstitutedcontent)) {\ttry {\tccu = parserprovider.parse (sr);\t} catch (notimplementedexception) {\tthrow new invalidoperationexception (gettextcatalog.getstring (\"invalid code translation template: the codedomprovider of the source language '{0}' has not implemented the parse method.\", language));\t} catch (exception ex) {",
  "unparseable template",
  0
 ],
 [
  "for (int idx = 0; idx < defaults.length; idx++) {\tif (servicetype.isequivalentto(defaults[idx])) {\tservice = this;\tbreak;\t}\t}\tif (service == null) {\tservices.trygetvalue(servicetype, out service);\t}\tif (service is servicecreatorcallback) {",
  "encountered a callback invoking it",
  0
 ],
 [
  "using (var chain = new x509chain()) {\tif (!chain.build(cert)) {\tforeach (x509chainstatus chainstatus in chain.chainstatus) {\t}\t}\telse {\t}\t}\t}\tcatch (exception e) {",
  "verify exception testname e",
  0
 ],
 [
  "private void writeusings(codewriter writer, generationcontext context) {\twriter.writeusingnamespace(\"system\");\twriter.writeusingnamespace(\"system.data\");\twriter.writeusingnamespace(\"system.data.linq.mapping\");\twriter.writeusingnamespace(\"system.diagnostics\");\twriter.writeusingnamespace(\"system.reflection\");\t#if mono_strict writer.writeusingnamespace(\"system.data.linq\");\twriter.writeusingnamespace(\"system.data.linq\");\twriter.writeusingnamespace(\"dblinq.vendor\");",
  "endif endif foreach var implementation in context implementations implementation writeheader writer context",
  0
 ],
 [
  "static int test_0_child_goes_away () {\tfinalizerhelpers.performnopinaction (setuplinks2);\tgc.collect ();\tgc.waitforpendingfinalizers ();\tconsole.writeline (\"a is null {0}\", a == null);\tconsole.writeline (\"b is null {0}\", b == null);\tif (a == null || b != null) return 1;",
  "a test",
  0
 ],
 [
  "using (directorysearcher dirsearcher = new directorysearcher(descn)) {\tdirsearcher.filter = \"(&(objectclass=classschema)(systemauxiliaryclass=\" + auxclassname + \"))\";\tdirsearcher.propertiestoload.add(\"ldapdisplayname\");\tlist<string> objectclasses = new list<string>();\tusing (searchresultcollection searchrescollection = dirsearcher.findall()) {\tforeach (searchresult res in searchrescollection) {\tif (null == res.properties[\"ldapdisplayname\"]) {\tthrow new principaloperationexception(sr.adamstoreunabletopopulateschemalist);\t}\tobjectclasses.add(res.properties[\"ldapdisplayname\"][0].tostring());",
  "did not throw exception",
  1
 ],
 [
  "static void createautosave (string filename, itextsource content) {\tif (!autosaveenabled) return;\ttry {\tvar autosavefilename = getautosavefilename (filename);\tif (file.exists (autosavefilename)) file.delete (autosavefilename);\tcontent.writetextto (autosavefilename);\tcounters.autosavedfiles++;\t} catch (exception e) {",
  "test failed at call result",
  1
 ],
 [
  "public void definefilterbodywithtypenotnull () {\tdefinebasicmethod ();\til_gen.beginexceptionblock ();\til_gen.beginexceptfilterblock ();",
  "could not get compilation object",
  1
 ],
 [
  "public void testinvalidcase4() {\tanalyze<stringcompareisculturespecificanalyzer>(@\" class test {\tvoid foo () {",
  "indent",
  1
 ],
 [
  "public static void testpersistsucurityinfo5() {\tconsole.writeline(\"\\ntestpersistsucurityinfo5 - persist security info=false\");\toracleconnection con = new oracleconnection(\"data source=palis;user id=scott;password=tiger;persist security info=false\");\tcon.open();\toracleconnection con2 = (oracleconnection) ((icloneable) con).clone();",
  "connectionstate for",
  0
 ],
 [
  "current_test_counter = 0;\ttotal_skipped_counter += skipped_test_counter;\tskipped_test_counter = 0;\tcurrent_test_name = testname;\tcurrent_test_method_init = method_init;\tconsole.write (\"writing \" + testname + \"... \");\t}\tstatic void writetestfooter () {\ttab--;\twritelinenonformat (\"}\");",
  "ok",
  1
 ],
 [
  "xrtemp.entityhandling = entityhandling.expandentities;\txrtemp.dispose();\ttry {\txslt.load(xrtemp);\t}\tcatch (system.xml.xsl.xsltcompileexception e) {\tif (platformdetection.isfullframework) checkexpectederror(e.innerexception, \"system.data.sqlxml\", \"xslt_wrongstylesheetelement\", new string[] { \"\" });\telse checkexpectederror(e.innerexception, \"system.xml\", \"xslt_wrongstylesheetelement\", new string[] { \"\" });\treturn;\t}",
  "try get b",
  1
 ],
 [
  "public void addextobject13() {\tmyobject obj = new myobject(13, _output);\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addextensionobject(szdefaultns, obj);\ttry {\tm_xsltarg.addextensionobject(szdefaultns, obj);\t}\tcatch (system.argumentexception) {\treturn;\t}",
  "xmlschemadataobject did not find element in the schema",
  1
 ],
 [
  "oracleconnection[] connections = null;\tint maxcon = max_connections + 1;\tint i = 0;\ttry {\tconnections = new oracleconnection[maxcon];\tfor (i = 0; i < maxcon; i++) {\tconnections[i] = new oracleconnection(constr);\tconnections[i].open ();\t}\t} catch (invalidoperationexception e) {",
  "done",
  1
 ],
 [
  "fielddefinition field;\tif (method.hasbody && opcodeengine.getbitmask (method).intersect (loadstorefields)) {\tforeach (instruction ins in method.body.instructions) {\tswitch (ins.opcode.code) {\tcase code.stfld: case code.stsfld: field = ins.getfield ();\tif (field == null) continue;\tif (checkfornullassignment (ins)) {\tsetfields.add (field);\t} else {\tnullfields.remove (field);",
  "is set at",
  0
 ],
 [
  "assert.throws<platformnotsupportedexception>(() => multi.istransient);\t}\tassert.notnull(ipproperties.unicastaddresses);\tforeach (unicastipaddressinformation uni in ipproperties.unicastaddresses) {\t_log.writeline(\"-- \" + uni.address.tostring());\tassert.throws<platformnotsupportedexception>(() => uni.addresspreferredlifetime);\tassert.throws<platformnotsupportedexception>(() => uni.addressvalidlifetime);\tassert.throws<platformnotsupportedexception>(() => uni.dhcpleaselifetime);\tassert.throws<platformnotsupportedexception>(() => uni.duplicateaddressdetectionstate);\tassert.notnull(uni.ipv4mask);",
  "ok",
  1
 ],
 [
  "public override xmlparserstate pushchar (char c, ixmlparsercontext context, ref string rollback) {\txelement element = context.nodes.peek () as xelement;\tif (element == null || element.iscomplete) {\tvar parent = element;\telement = new xelement (context.locationminus (2));\telement.parent = parent;\tcontext.nodes.push (element);\t}\tif (c == '<') {\tif (element.isnamed) {",
  "test failed at call result",
  1
 ],
 [
  "static void printhelp() {",
  "got but expected",
  1
 ],
 [
  "public static void createlinenumbertestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<?xml version=\\\"1.0\\\" ?>\");",
  "principalsearcher hasreferentialpropertiesset found ref property",
  1
 ],
 [
  "static void testoutput (string input, string expectedmarkup, string syntaxmode) {\tstring markup = getmarkup (input, syntaxmode);\tif (markup != expectedmarkup){",
  "attributes",
  1
 ],
 [
  "public void processstart_useshellexecute_onlinux_throwsifnoprograminstalled() {\tif (!s_allowedprogramstorun.any(program => isprograminstalled(program))) {",
  "entrytype",
  1
 ],
 [
  "private void emitcollection(string collectiontypename, string elementtypename) {\topenscope($\"public partial struct {collectiontypename}\");\topenscope($\"internal {collectiontypename}(nativereader reader, uint offset)\");\twriteline(\"_offset = offset;\");\twriteline(\"_reader = reader;\");\tclosescope();\topenscope(\"public int count\");\topenscope(\"get\");",
  "uint count",
  0
 ],
 [
  "public void site_invalidchars () {\tsiteidentitypermission sip = new siteidentitypermission (permissionstate.none);\tfor (int i=0; i < 256; i++) {\ttry {\tsip.site = string.empty + (char) i;\t}\tcatch (argumentexception) {",
  "is bad",
  0
 ],
 [
  "console.outputencoding = encoding.utf8;\tvar writer = console.out;\tforeach (var c in all) {\tif (c.lcid == cultureinfo.invariantculture.lcid) continue;\tvar df = c.datetimeformat;\tdump (writer, df.abbreviateddaynames, \"abbreviateddaynames\");\tdump (writer, df.abbreviatedmonthgenitivenames, \"abbreviatedmonthgenitivenames\");\tdump (writer, df.abbreviatedmonthnames, \"abbreviatedmonthnames\");\tdump (writer, df.daynames, \"daynames\");\tdump (writer, df.getalldatetimepatterns (), \"getalldatetimepatterns\");",
  "longdatepattern",
  0
 ],
 [
  "s11.f10 = 10;\ts11.f11 = 11;\ts11 = mono_return_sbyte11(s11, 9);\tif (s11.f1 != 1+9) {\treturn 1;\t}\tif (s11.f2 != 2+9) {\treturn 2;\t}\tif (s11.f3 != 3+9) {",
  "got but expected",
  0
 ],
 [
  "bool bpassed = false;\tbyte[] buffer = new byte[ibuffersize];\treloadsource(ereader_type.base64_test);\tdatareader.positiononelement(st_elem_name1);\tdatareader.read();\tif (checkcanreadbinarycontent()) return true;\ttry {\tdatareader.readcontentasbase64(buffer, iindex, icount);\t}\tcatch (exception e) {",
  "has",
  1
 ],
 [
  "public static void main (string[] args) {\tif (args.length != 2) {\tenvironment.exit (1);\t}\tstring infile = args [0];\tstring outfile = args [1];\tif (infile == outfile) {",
  "bad command line arguments supplied",
  1
 ],
 [
  "ucomimoniker moniker = monikers[0];\tobject obj;\trot.getobject(moniker, out obj);\tstring monikername;\tmoniker.getdisplayname(bc, null, out monikername);\tcomobjectinfo comobjinfo;\tobject runobj = runninghash[obj];\tif (runobj != null) {\tcomobjinfo = (comobjectinfo) objectinfo.getobjectinfo(obj);\tif (monikername.equals(comobjinfo._monikername)) {",
  "error already connected",
  1
 ],
 [
  "xmlreadersettings rs = (xmlreadersettings)options[readerfactory.ht_readersettings];\tstream stream = (stream)options[readerfactory.ht_stream];\tstring filename = (string)options[readerfactory.ht_filename];\tobject readertype = options[readerfactory.ht_readertype];\tobject vt = options[readerfactory.ht_validationtype];\tstring fragment = (string)options[readerfactory.ht_fragment];\tstringreader sr = (stringreader)options[readerfactory.ht_stringreader];\tif (rs == null) rs = new xmlreadersettings();\trs.dtdprocessing = dtdprocessing.ignore;\tif (sr != null) {",
  "wrappedreader string",
  0
 ],
 [
  "private void checkrowversion(datarow dr) {",
  "begin transaction",
  1
 ],
 [
  "{\"v|verbose\", \"verbose output\", v => verbose = v!= null }, {\"t|target=\", \"target assembly name\", v => target = v }, {\"c|complist=\",\"licx file to compile\", v => complist = v }, {\"i|load=\", \"reference to load\", v=> {if (v != null) references.add(v);}}, {\"o|outdir=\", \"output directory for the .licenses file\", v=> targetdir = v }, {\"nologo\", \"do not display logo\", v=> nologo = null != v }, {\"h|?|help\", \"show help\", v=>help = v != null }\t};\tlist<string> extra;\ttry {\textra = p.parse(args);\t}\tcatch(optionexception e) {\treturn 1;\t}\tif (!nologo) {",
  "couldn t timestamp file will retry in ms",
  1
 ],
 [
  "var methodinfo = this as imethodinfo;\tstring method = (methodinfo != null) ? string.format (\"({0})\", this.subroutinefacade.metadataprovider.fullname (methodinfo.method)) : null;\ttw.writeline (\"-------------\");\tforeach (blockwithlabels<label> block in this.blocks) {\ttw.write (\"block {0} ({1})\", block.index, block.reversepostorderindex);\telse tw.writeline ();\ttw.write (\"  predecessors: \");\tforeach (var edge in block.subroutine.predecessoredges [block]) tw.write (\"({0}, {1}) \", edge.key, edge.value.index);\ttw.writeline ();\tprinthandlers (tw, block);",
  "unhandled type in process",
  1
 ],
 [
  "public  defaultservicecontainer () {\tservicecontainer = new servicecontainer();",
  "init servicecontaier",
  0
 ],
 [
  "if (traceutil.if(this, tracelevel.verbose)) {\tif (fieldpropvalue != null) trace.writeline(\"  fieldpropval: \" + fieldpropvalue);\tif (parametervalues != null) {\t}\t}\tswitch (_objmemberinfo.membertype) {\tcase membertypes.method: {\tmethodinfo m = (methodinfo)_objmemberinfo;\tsetobject(m.invoke(parent._obj, parametervalues));\tif (traceutil.if(this, tracelevel.verbose)) {",
  "try",
  1
 ],
 [
  "cloudtask mycompletedtask = new list<cloudtask>(boundjob.listtasks(null))[0];\tstring stdout = mycompletedtask.getnodefile(constants.standardoutfilename).readasstring();\tstring stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();\tthis.testoutputhelper.writeline(stdout);\tthis.testoutputhelper.writeline(\"\");\tthis.testoutputhelper.writeline(stderr);\tthis.testoutputhelper.writeline(\"\");\ttaskconstraints comptc = mycompletedtask.constraints;\tassert.notnull(comptc);\tif (null == comptc) {",
  "null",
  0
 ],
 [
  "public void writemessage (byte type, binarymessage msg) {\tmsg.readcustomdata ();\tlock (listeners) {",
  "server xs rp ms",
  0
 ],
 [
  "public void test(foo f) {",
  "doing other generic stuff",
  1
 ],
 [
  "public static ienumerable<string> yieldreturnwithtwononnestedfinallyblocks(ienumerable<string> input) {\tforeach (string line in input) {\ttry {\tyield return line;\t} finally {",
  "mode encryption decryption",
  1
 ],
 [
  "public static void threadmethod_blocker() {\tthread.sleep(5000);",
  "thread c setting the event",
  0
 ],
 [
  "public static void method(int value) {",
  "using system class testclass object foo void test console writeline foo",
  1
 ],
 [
  "protected void recreatehandle() {\tif (!ishandlecreated) return;\t#endif setisrecreating ();\tif (ishandlecreated) {\t#endif destroyhandle();\t} else {",
  "handle is not created creating it",
  0
 ],
 [
  "} else {\tresult = new symgraph<tfunc, tadomain> (commontail);\tmergestate = new mergeinfo<tfunc, tadomain> (result, egraph, that, widen);\tmergestate.replayeliminations (commontail);\tmergestate.addmapping (egraph.const_root, that.const_root, result.const_root);\tmergestate.joinsymbolicvalue (egraph.const_root, that.const_root, result.const_root);\tmergestate.commit ();\t}\tmergeinfo = mergestate;\tif (debugoptions.debug) {",
  "incorrect results",
  1
 ],
 [
  "if (detailed) {\t}\twriteline ();\tif (detailed) {\t}\twriteline ();\tif (detailed) {\twriteline (\"\\t<assembly_display_name> is the name of the assembly (partial or\\n\" + \"\\tfully qualified) to remove from the global assembly cache. if a \\n\" + \"\\tpartial name is specified all matching assemblies will be uninstalled.\\n\" + \"\\texample: -u mydll,version=1.2.1.0\");\t}\twriteline ();",
  "f equals b failed error",
  1
 ],
 [
  "private void writeunhandledexceptionmessage (exception e) {\tconsole.writeline ();\tconsole.writeline (\"an uncaught exception occured. please fill a bug report at https: if (currentrule != null) console.writeline (\"rule:\\t{0}\", currentrule);\tif (currenttarget != null) console.writeline (\"target:\\t{0}\", currenttarget);",
  "stack trace",
  0
 ],
 [
  "public static ienumerable<string> yieldreturnwithnestedtryfinally(bool breakinmiddle) {\tyield return \"start of method\";",
  "start of method",
  0
 ],
 [
  "public static int main (string[] args) {\tint result = addabunchofints (__arglist ( 2, 3, 4 ));",
  "could not recognize option as the mode",
  1
 ],
 [
  "public static void teststyles(streamwriter file, control control, string name) {\tstring[] results;\tresults = getstyles(control);",
  "if checktype",
  1
 ],
 [
  "public void receivedevent_charseof() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (serialport com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\treceivedeventhandler rcveventhandler = new receivedeventhandler(com1);\tbyte[] xmitbytes = new byte[3];",
  "verifying eofreceived event",
  0
 ],
 [
  "private static bool test5() {\tbool[] boolvalues = new bool[]\t{\ttrue, false }\t;\tforeach (bool a1 in boolvalues) {\tforeach (bool a2 in boolvalues) {\tdynamic d1 = a1;\tdynamic d2 = a2;\tif ((d1 ^ d2) != (a1 ^ a2)) {",
  "failed bool bool",
  0
 ],
 [
  "private void generatecompileunitstart(codecompileunit e) {\tif (e.startdirectives.count > 0) {\tgeneratedirectives(e.startdirectives);\t}\toutput.write(\" output.write(sr.autogen_comment_line3);\toutput.writeline(environment.version.tostring());",
  "stats",
  1
 ],
 [
  "static void refcursortest2(oracleconnection con) {\toraclecommand cmd = new oraclecommand();\tcmd.connection = con;\tcmd.commandtext = \"call curspkg_join.open_join_cursor1(:n_empno,:io_cursor)\";",
  "create parameters",
  0
 ],
 [
  "public static void threadmethod_waiter_1() {\te.waitone();",
  "assert areequal mtp removeat",
  1
 ],
 [
  "public void basictest_getipinterfacestatistics_success() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfacestatistics stats = nic.getipstatistics();",
  "unicastpacketssent",
  0
 ],
 [
  "}\ts = d[o, x];\tif (s != 'b' || target.status != 5) ret = 1;\ttry {\td[x, x] = 'a';\t}\tcatch (microsoft.csharp.runtimebinder.runtimebinderexception ex) {\tb = errorverifier.verify(errormessageid.ambigcall, ex.message, \"target.this[int, object]\", \"target.this[object, int]\");\tif (!b) {\tret = 1;",
  "number",
  1
 ],
 [
  "if (s_prefixtonamespacedesk.trygetvalue(deskprefix, out deskns)) {\tif (s_prefixtonamespacecoreclr.trygetvalue(coreclrprefix, out coreclrns)) {\tif (deskns.equals(coreclrns)) {\tif (0 == string.compare(deskelemvalue.substring(deskprefix.length), coreclrelemvalue.substring(coreclrprefix.length))) return true;\t}\t}\t}\t}\treturn false;\t}",
  "test failed at call result",
  1
 ],
 [
  "xmlschemaattribute attribute = (xmlschemaattribute)derivedtype.attributeuses[attributebase.qualifiedname];\tif (attribute == null) {\tderivedtype.attributeuses.add(attributebase.qualifiedname, attributebase);\t}\telse {\tif (attributebase.use == xmlschemause.prohibited && attribute.use != xmlschemause.prohibited) {\t#if debug string position = string.empty;\tif (derivedtype.sourceuri != null) {\tposition = \" in \" + derivedtype.sourceuri + \"(\" + derivedtype.linenumber + \", \" + derivedtype.lineposition + \")\";\t}",
  "base",
  0
 ],
 [
  "public async task preferlocalplacementgrain_shouldnotmigratewhenothersilokilled(string value) {\tawait hostedcluster.waitforlivenesstostabilizeasync();",
  "starting test",
  0
 ],
 [
  "case \"-?\": help ();\treturn 0;\t}\t}\tif (!file.exists (tbsfilename)) {\treturn 1;\t}\tif (sign) {\trsa rsa = getprivatekey (pvkfilename, csp);\tif (rsa == null) {",
  "no private key available to sign the assembly",
  0
 ],
 [
  "public static void dumpcodeinfo (imagecodecinfo codec) {",
  "flags",
  0
 ],
 [
  "public static void displaypools(itestoutputhelper testoutputhelper, ienumerable<cloudpool> poolsenumerable) {\tlist<cloudpool> pools = new list<cloudpool>(poolsenumerable);\tint numpools = (null != pools) ? pools.count : 0;\ttestoutputhelper.writeline(\"\");\ttestoutputhelper.writeline(\"\");\tforeach (cloudpool curpool in pools) {\ttestoutputhelper.writeline(curpool.id + \":\");\tif (curpool.statistics != null) {",
  "aggregate",
  1
 ],
 [
  "public void basictest_getipv4interfacestatistics_success_linux() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipv4interfacestatistics stats = nic.getipv4statistics();",
  "runtime environment",
  1
 ],
 [
  "protected override bool isinputchar (char charcode) {\tif (testing_callstack) console.write (\"isinputchar[\");\tif (current_state == state.isinputchar) {",
  "true",
  0
 ],
 [
  "state.ignorenew.add (new regex (\".*\"));\tstate.ignoreadded.add (new regex (\".*\"));\t}\tif (showhelp || extra == null || extra.count < 2 || extra.count > 3) {\tconsole.writeline ();\toptions.writeoptiondescriptions (console.out);\tconsole.writeline ();\tconsole.writeline ();\tconsole.writeline ();\tconsole.writeline ();",
  "the regular expressions will match any member description ending with",
  0
 ],
 [
  "public string getencryptionalgorithm() {\tvar tag = \"-algo\";\tvar algorithm = getargumentvalue( tag );\tif ( algorithm == string.empty ) {\talgorithm = jsonwebkeyencryptionalgorithm.rsaoaep;",
  "rr",
  1
 ],
 [
  "console.write (test);\tassembly a = assembly.loadfrom (test);\tmethodinfo mi = a.entrypoint;\tif (mi == null) {\treturn;\t}\ttry {\tmi.invoke (null, null);\t}\tcatch (targetinvocationexception ex) {",
  "test",
  1
 ],
 [
  "public static void main (string [] args) {\ttry {\trun (args);\t} catch (exception ex) {",
  "error",
  0
 ],
 [
  "m_xsltarg.addparam(\"myarg2\", szempty, i);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (!i.equals(retobj)) {\tassert.true(false);\t}\tif (i.gettype() != j.gettype()) assert.true(false);\tboolean bf = (1 == 0);\tm_xsltarg.addparam(\"myarg3\", szempty, bf);\tretobj = m_xsltarg.getparam(\"myarg3\", szempty);\tif (!bf.equals(retobj)) {",
  "retrieved",
  0
 ],
 [
  "private static void immediatecanceltext() {",
  "close",
  1
 ],
 [
  "if (_tasktype != tasktype.future) {\ttry {\t_task = createtaskhelper();\t_task.start(tm);\tassert.true(false, string.format(\"able to pass {0} taskmanager to start() on {1}, when expecting exception\", tminvalidmessage, _tasktype));\t}\tcatch (argumentnullexception) {\telse throw;\t}\tcatch (invalidoperationexception) {",
  "else",
  1
 ],
 [
  "static void processarguments (string [] args) {\tfor (int i = 0; i < args.length; i++){\tstring arg = args [i];\tswitch (arg){\tcase \"-add\": if (action != action.none) {",
  "this grain is activated on await grain getruntimeidentity",
  1
 ],
 [
  "private void thread_func() {\tlocaldatastoreslot namedslot=thread.getnameddataslot(\"data-slot\");\tthread thr=thread.currentthread;\tthr.name=\"wobble\";\tthread otherthr=thread.currentthread;\tthread.setdata(slot, thr);\tthread storedthr=(thread)thread.getdata(slot);\tthread.setdata(namedslot, thr);\tstoredthr=(thread)thread.getdata(namedslot);",
  "locking thr for",
  0
 ],
 [
  "public void transfer([nonnull] node node, [nonnull] object infact, [nonnull] object outfact, bool warn) {\tbasicblock bb = (basicblock)node;\tif(bb.isexit || bb.isexception) return;\tnullderefframe outframe = (nullderefframe)outfact;\tvariabledefinitioncollection vars = method.body.variables;\tif (verbose) {\ttrace.writeline (string.empty);",
  "input frame",
  0
 ],
 [
  "public void sendchangecipherspec(stream recordstream) {",
  "reading schemas from",
  1
 ],
 [
  "while (cursor.movenext()) {\texception ex;\tmessagecount++;\tibatchcontainer batch = cursor.getcurrent(out ex);\tassert.true(batch.sequencetoken.compareto(lasttoken) >= 0, $\"order check for event {messagecount}\");\tlasttoken = batch.sequencetoken;\tif (messagecount == 10) {\ttenthincache = batch.sequencetoken;\t}\t}",
  "on queue we received a total of message on stream",
  0
 ],
 [
  "public override bool execute () {\tif (sourcefiles.length == 0) return true;\ttry {\tlist <itaskitem> temporarycopiedfiles = new list <itaskitem> ();\tif (sourcefiles != null && destinationfiles != null && sourcefiles.length != destinationfiles.length) {\treturn false;\t}\tif (destinationfiles != null && destinationfolder != null) {",
  "you must specify only one attribute from destinationfiles and destinationfolder",
  0
 ],
 [
  "counter++;\t}\t}\tcatch (nullreferenceexception) {\tcounter++;\t}\ttry {\tthrow new exception(\"testing filter\");\t}\tcatch (exception e) when (e.message == \"testing filter\" && counter++ > 0) {",
  "exception",
  1
 ],
 [
  "public void testextraend () {",
  "m unimplemented option",
  1
 ],
 [
  "if (_endreached) return false;\tbool needtoretry;\tbool f;\tdo {\tneedtoretry = false;\tf = _currentenumerator.movenext();\tif (f) {\t_currentresult = _currentenumerator.current;\t}\telse {",
  "rangeretriever movenext retrieving next range",
  0
 ],
 [
  "private void refreshoriginalthumbprintlist() {",
  "did not throw argumentnullexception",
  1
 ],
 [
  "protected override void onpaint(activitydesignerpainteventargs e) {\tgraphics graphics = e.graphics;\tactivitydesignertheme designertheme = e.designertheme;\tambienttheme ambienttheme = e.ambienttheme;\t#if debug try {\t#endif this.rootdesignerlayout.onpaint(graphics, designertheme, ambienttheme);\tthis.paintcontaineddesigners(e);\t#if debug }\tcatch (exception exception) {",
  "unhandled exception in onpaint",
  0
 ],
 [
  "public void m() {\t#line 40 console.writeline(4);\t#line hidden console.writeline();",
  "c a b cs",
  0
 ],
 [
  "private void buildmethod(instantiatedmethod method) {",
  "dynamically allocating new method instantiation for",
  0
 ],
 [
  "closescope();\topenscope($\"internal {handlename}(int value)\");\twriteline(\"handletype htype = (handletype)(value >> 24);\");\twriteline($\"if (!(htype == 0 || htype == handletype.{record.name} || htype == handletype.null))\");\twriteline($\"_value = (value & 0x00ffffff) | (((int)handletype.{record.name}) << 24);\");\tclosescope();\topenscope($\"public static implicit operator  handle({handlename} handle)\");\tclosescope(\"handle\");\topenscope(\"internal int offset\");\topenscope(\"get\");",
  "exception not thrown for ns not found",
  1
 ],
 [
  "}\tdatatablecollection tables = dataset.tables;\tint index = tables.indexof(datasettable);\tif ((0 <= index) && (index < tables.count)) {\t#if debug if (adapterswitches.dataschema.traceinfo) {\t}\t#endif return tables[index];\t}\tswitch (schemaaction) {\tcase missingschemaaction.add: case missingschemaaction.addwithkey: #if debug if (adapterswitches.dataschema.traceinfo) {",
  "expected string",
  1
 ],
 [
  "bool nologo = false;\tbool help = false;\toptionset p = new optionset() {\t{\"v|verbose\", \"verbose output\", v => verbose = v!= null }, {\"t|target=\", \"target assembly name\", v => target = v }, {\"c|complist=\",\"licx file to compile\", v => complist = v }, {\"i|load=\", \"reference to load\", v=> {if (v != null) references.add(v);}}, {\"o|outdir=\", \"output directory for the .licenses file\", v=> targetdir = v }, {\"nologo\", \"do not display logo\", v=> nologo = null != v }, {\"h|?|help\", \"show help\", v=>help = v != null }\t};\tlist<string> extra;\ttry {\textra = p.parse(args);\t}\tcatch(optionexception e) {",
  "list ignore the file listing ignored defects entries for your project",
  1
 ],
 [
  "static void dataadaptertest (oracleconnection connection) {\toraclecommand command = connection.createcommand ();\tcommand.commandtext = \"select * from scott.emp\";\toracledataadapter adapter = new oracledataadapter (command);\tdataset dataset = new dataset (\"emp\");\tadapter.fill (dataset);\tdatatable table = dataset.tables [0];\tint rowcount = 0;\tforeach (datarow row in table.rows) {",
  "secutil h",
  1
 ],
 [
  "icollection<icollection<char>> anagrams = new hashset<icollection<char>>();\tint count = 0;\tforeach (string word in words) {\tif (word != \"\") {\tcount++;\thashbag<char> anagram = new hashbag<char>();\tanagram.addall<char>(word.tochararray());\tanagrams.add(anagram);\t}\t}",
  "found anagrams",
  0
 ],
 [
  "foreach (string f in files) {\tif (services.projectservice.isworkspaceitemfile (f)) {\tfile = f;\tbreak;\t}\t}\tif (file == null) {\treturn 1;\t}\t} else if (!services.projectservice.isworkspaceitemfile (file)) {",
  "file is not a project or solution",
  0
 ],
 [
  "case \"summary\": case \"example\": break;\tcase \"attribute\": if (!lastwasattribute) {\tlastwasattribute = true;\thtml.writeline(\"    <tr><td colspan=3><hr><h3>attributes:</h3></td></tr>\");\t}\tif (sub.hasattribute(\"use\")) {\thtml.writeline(\"       <td class=\\\"userequired\\\">\" + sub.getattribute(\"use\") + \"</td>\");\t} else {\thtml.writeline(\"       <th colspan=2>\" + sub.getattribute(\"name\") + \":</td>\");\t}",
  "tr",
  0
 ],
 [
  "if(rdr == null) {\t}\telse {\tdo {\tdatatable dt = rdr.getschematable();\tif(rdr.recordsaffected != -1) {\t}\telse if(dt == null) console.writeline(\"result is from a sql command not (insert,update,delete).   records affected: \" + rdr.recordsaffected);\telse {\tresults++;",
  "total success",
  1
 ],
 [
  "try {\tappdomain.currentdomain.assemblyload += assemblyloaded;\tforeach (assembly a in appdomain.currentdomain.getassemblies ()) {\tif (a.getname ().name != \"mscorlib\" && a.getname ().name != \"system.core\" && a.getname ().name != \"system\") evaluator.referenceassembly (a);\t}\trunrepl (s);\t} finally {\tappdomain.currentdomain.assemblyload -= assemblyloaded;\tclient.close ();\tinterrupt_client.close ();",
  "test",
  1
 ],
 [
  "show_gui = false;\tif (v != null) mergeconfigfile = v;\telse {\terror (\"missing config file for --merge-changes.\");\tr = 1;\t}\t} }, { \"remote-mode\", \"accept crefs from stdin to display in the browser.\\n\" + \"for monodevelop integration.\", v => remote_mode = v != null }, { \"about|version\", \"write version information and exit.\", v => show_version = v != null }, { \"h|?|help\", \"show this message and exit.\", v => show_help = v != null }, };\tlist<string> topics = p.parse (args);\tif (basedir == null) basedir = directory.getparent (system.reflection.assembly.getexecutingassembly ().location).fullname;\tif (show_version) {",
  "mono documentation browser",
  0
 ],
 [
  "public virtual bool check() {\tbool retval = true;\tif (size > array.length) {\treturn false;\t}\tfor (int i = 0; i < size; i++) {\tif ((object)(array[i]) == null) {",
  "verifying discard method throws exception after a call to cloes",
  1
 ],
 [
  "protected virtual bool writedatacontextctor(codewriter writer, database schema, type contextbasetype, parameterdefinition[] parameters, string[] basecallparameternames, type[] basecallparametertypes, generationcontext context) {\tif (contextbasetype != null) {\tvar ctor = contextbasetype.getconstructor(basecallparametertypes);\tif (ctor == null) return false;\t}\tusing (writer.writector(specificationdefinition.public, schema.class, parameters, basecallparameternames)) {",
  "catch exception ex",
  1
 ],
 [
  "layout.setmarkup (tooltipinformation.signaturemarkup);\tint w, h;\tlayout.getpixelsize (out w, out h);\tif (w >= size.width - 10) {\ttooltipinformation = await data.createtooltipinformation (true, canceltoken);\t}\t}\tif (canceltoken.iscancellationrequested) return;\taddoverload (tooltipinformation);\t} catch (exception e) {",
  "orleansazureweb onstart",
  1
 ],
 [
  "public static int test_0_main_thread_priority () {\tif (thread.currentthread.managedthreadid != mainthreadid) {\treturn 1;\t}\tvar before = thread.currentthread.priority;",
  "priority",
  0
 ],
 [
  "protected virtual void build () {",
  "database",
  1
 ],
 [
  "var properties = (from d in copy let sel = d.selector where sel.startswith (\"set\") && sel.endswith (\":\") && count (sel, ':') == 1 let getter1 = char.tolower (sel [3]) + sel.substring (4).trim (':') let getter2 = \"is\" + sel.substring (3).trim (':') let getter = hasgetter (getter1, getter2) where getter != null let r = remove (sel) select getter).tolist ();\tforeach (var d in decls){\tif (ignore.contains (d.selector) || properties.contains (d.selector)) continue;\tif (extraattribute != null) gencs.writeline (\"\\t\\t[{0}]\", extraattribute);\tgencs.writeline (\"\\t\\t{0} {1} ({2});\", d.retval, trivialparser.asmethod (trivialparser.cleanselector (d.selector)), d.parameters);\tgencs.writeline ();\t}\tvar decl = (from x in decls where x.selector == d select x).firstordefault ();\tvar sel = decl.selector;\tif (sel.startswith (\"is\")) sel = char.tolower (sel [2]) + sel.substring (3);",
  "static",
  0
 ],
 [
  "public void m() {",
  "comobjectinfo found default i f",
  1
 ],
 [
  "private bool verifyinvalidreadbinhex(int ibuffersize, int iindex, int icount, type exceptiontype) {\tbool bpassed = false;\tbyte[] buffer = new byte[ibuffersize];\treloadsource(ereader_type.binhex_test);\tdatareader.positiononelement(st_elem_name1);\tif (checkcanreadbinarycontent()) return true;\ttry {\tdatareader.readelementcontentasbinhex(buffer, iindex, icount);\t}\tcatch (exception e) {",
  "actual exception",
  0
 ],
 [
  "list<resourcefile> resfiles = new list<resourcefile>();\t}\telse {\t}\ttaskconstraints tc = ijm.constraints;\tif (null == tc) {\t}\telse {\t}\tif (ijm.useridentity != null) {",
  "writefile called",
  1
 ],
 [
  "protected override void generatevariabledeclarationstatement(codevariabledeclarationstatement e) {",
  "creating node",
  1
 ],
 [
  "return 1;\t}\tin_tree = args [++i];\tbreak;\tcase \"--managed-linker\": if (i+1 == top) {\treturn 1;\t}\tmanaged_linker_path = args [++i];\tbreak;\tcase \"--cil-strip\": if (i+1 == top) {",
  "usage cil strip path to exe",
  0
 ],
 [
  "tw.writeline(\"<attribute2 a1='a1value' />\");\ttw.writeline(\"<attribute3 a1='a1value' a2='a2value' a3='a3value' />\");\ttw.writeline(\"<attribute4 a1='' />\");\ttw.writeline(string.format(\"<attribute5 crlf='x{0}x' cr='x{0}x' lf='x\\nx' ms='x     x' tab='x\\tx' />\", environment.newline));\ttw.writeline(\"<skip1 /><afterskip1 />\");\ttw.writeline(\"<skip2></skip2><afterskip2 />\");\ttw.writeline(\"<chars1>0123456789</chars1>\");\ttw.flush();\ttw.writeline(\"<isdefault a1='a1value' />\");\ttw.writeline(\"<boolean3>1</boolean3>\");",
  "integer integer",
  0
 ],
 [
  "s15.f14 = 14;\ts15.f15 = 15;\ts15 = mono_return_sbyte15(s15, 9);\tif (s15.f1 != 1+9) {\treturn 1;\t}\tif (s15.f2 != 2+9) {\treturn 2;\t}\tif (s15.f3 != 3+9) {",
  "got but expected",
  0
 ],
 [
  "public override void onstop() {",
  "c a b c cs",
  1
 ],
 [
  "public void basictest_getipv4interfacestatistics_success_osx() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipv4interfacestatistics stats = nic.getipv4statistics();",
  "trackedcollection found value to remove on inserted",
  1
 ],
 [
  "static void main (string[] args) {",
  "hello world",
  0
 ],
 [
  "private static void printhelp() {\tconsole.writeline();\tconsole.writeline();\tconsole.writeline();\tconsole.writeline();\tconsole.writeline();\tconsole.writeline();",
  "threads n number of threads to use",
  0
 ],
 [
  "writer.write (rule.problem);\twriter.writeline ();\tif (defect.location != defect.target) writer.writeline (\"* location: {0}\", defect.location);\tstring source = defect.source;\twriter.writeline ();\tbegincolor (consolecolor.darkgreen);\twriter.write (\"solution: \");\tendcolor ();\twriter.write (rule.solution);\twriter.writeline ();",
  "more info available at",
  0
 ],
 [
  "public void databits_8_afteropen() {",
  "verifying databits after open",
  0
 ],
 [
  "public void showhelp () {",
  "usage stresstest options",
  0
 ],
 [
  "protected override codecompileunit parse() {",
  "end",
  1
 ],
 [
  "public static void createxsltstylesheetwcopytestfile(string strfilename) {\tstream s = new memorystream();\ttextwriter tw = new streamwriter(s);\ttw.writeline(\"<xsl:stylesheet version=\\\"1.0\\\" xmlns:xsl=\\\"http: tw.writeline(\"<xsl:template match=\\\"/\\\">\");\ttw.writeline(\"<xsl:copy-of select=\\\"/\\\" />\");",
  "xsl stylesheet",
  0
 ],
 [
  "var ruleslist = from rule in rulesindex orderby rule select rule;\tstring assembly_index = string.format (\"{0}{1}{2}{1}{3}({2}).md\", outputdir, path.directoryseparatorchar, version, assembly);\tusing (textwriter writer = file.createtext (assembly_index)) {\twriter.writeline ();\twriter.writeline ();\tforeach (var rule in ruleslist) {\twriter.writeline (\"* [[{0}|{1}.{0}({2})]]  \", rule, assembly, version);\t}\tif (version == \"git\") {\twriter.writeline ();",
  "exception thrown and caught",
  1
 ],
 [
  "task copyoutput = process.standardoutput.basestream.copytoasync(outputstream);\ttask copyerror = process.standarderror.basestream.copytoasync(errorstream);\tbool completed = process.waitforexit(timeout);\tcopyoutput.wait(timeout);\tcopyerror.wait(timeout);\tif (completed) {\texitcode = process.exitcode;\t}\telse {\t}",
  "invalid node is",
  1
 ],
 [
  "public void transformstrstr2(xslinputtype xslinputtype, readertype readertype) {\tif (loadxsl(\"showparam.xsl\", xslinputtype, readertype) == 1) {\ttry {\txslt.transform(null, _stroutfile);\t}\tcatch (system.argumentexception) { return; }\t}",
  "exception not generated for null input filename",
  0
 ],
 [
  "public static int main () {\tfoo (a : -9);\tb b = new b ();\tb [8] = 5;\tif (b.index != 9) return 1;",
  "ok",
  0
 ],
 [
  "public static extern int getversionex2 (ref osversioninfo2 osvi);\t}\tpublic class test {\tpublic static int main() {\tosversioninfo osvi = new osversioninfo();\tosvi.a = 1;\tosvi.b = 2;\tif (libwrap.getversionex (osvi) != 5) return 1;\tif (osvi.a != 2) return 2;\tif (osvi.b != 3) return 3;",
  "keyboard layout not recognized using default layout",
  1
 ],
 [
  "public bool oncreatenewwindow () {\tbool ret = false;\t#if debug ongeneric (\"oncreatenewwindow\");",
  "error while reading monodoc file",
  1
 ],
 [
  "foreach (object child in children) {\tctestcase tc = child as ctestcase;\tif (tc != null) {\tif (cmodinfo.istestcaseselected(tc.name)) {\ttc.init();\ttc.execute();\t}\t}\t}\t}",
  "pass fail skip",
  0
 ],
 [
  "static bool callsecondstructoperator() {\tint failcount = 0; verify.firstcalled = false;\tif ( (!(bool)(((dynamic)firstclassreturnstruct<int>.staticmethod()) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "else {\tmetadata.convertschemastreamtocodesourcestream (wrappedproxy, outputdirectory, schemastream, writtenfiles, null, null);\tmetadata.convertcodesourcestreamtoassemblyfile (writtenfiles, outputassembly, strongnamefile);\tforeach (string file in writtenfiles) file.delete (file);\twrittenfiles.clear ();\t}\twrittenfiles.add (outputassembly);\t}\t}\tcatch (exception ex) {",
  "ok",
  1
 ],
 [
  "public void dispose () {",
  "onclientdomkeydown",
  1
 ],
 [
  "public static void creategenerictestfile(string strfilename) {\tfilepathutil.addstream(strfilename, new memorystream());\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"no\\\"?>\");\ttw.writeline(\"<!-- comment1 -->\");\ttw.writeline(\"<?pi1a?>\");\ttw.writeline(\"<?pi1b?>\");\ttw.writeline(\"<?pi1c?>\");\ttw.writeline(\"]>\");",
  "failed to marshal filter functions",
  1
 ],
 [
  "output.write(\".assembly extern \");\tif (aref.iswindowsruntime) output.write(\"windowsruntime \");\toutput.write(disassemblerhelpers.escape(aref.name));\topenblock(false);\tif (aref.publickeytoken != null) {\toutput.write(\".publickeytoken = \");\twriteblob(aref.publickeytoken);\toutput.writeline();\t}\tif (aref.version != null) {",
  "ver",
  0
 ],
 [
  "} catch (exception) {\t}\ttry {\tmethodinfo method = typeof (driver).getmethod (\"structtest\");\tmethodinfo generic_method = method.makegenericmethod (typeof (int));\tgeneric_method.invoke (null, new object [] { new genericstruct<int>() });\tmethod = typeof (driver).getmethod (\"referencetest\");\tgeneric_method = method.makegenericmethod (typeof (int));\tgeneric_method.invoke (null, new object [] { new genericclass<int>() });\t} catch (exception e) {",
  "profler is logging into profileroptions mlpdoutputpath",
  1
 ],
 [
  "public void test() {",
  "test",
  0
 ],
 [
  "public void methodpreprocessmessage () {\tbool testing_callstack = false;\tmycontrol c = new mycontrol ();\tmessage m = new message ();\tm.hwnd = c.handle;\tm.msg = wm_keydown;\tm.wparam = (intptr)keys.down;\tm.lparam = intptr.zero;\tassert.areequal (false, c.preprocessmessage (ref m), \"a1\");\tc.setstate (state.onpreviewkeydown);",
  "visual studio",
  1
 ],
 [
  "public void emitsource() {",
  "expected",
  1
 ],
 [
  "static bool callsecondclassoperator() {\tint failcount = 0; verify.firstcalled = false;\tif ( (!(bool)(firstclassreturndynamicclass<int>.staticmethod() + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "}\tcatch (exception ex) {\tassert.true(false, \"samplewithfilesandpool probably can ignore this if its pool not found: \" + ex.tostring());\t}\t}) });\tlist<cloudtask> tasks = boundjob.listtasks().tolist();\tcloudtask mycompletedtask = tasks.single();\tforeach (cloudtask curtask in tasks) {\t}\tboundpool.refresh();",
  "null",
  1
 ],
 [
  "static void run (string [] args) {\tif (args.length < 1) {",
  "trackedcollectionenumerator movenext nothing more to enumerate",
  1
 ],
 [
  "public static int main () {\tint a;\tint *b;\tint **c;\ta = 42;\tb = &a;\tc = &b;\tconsole.writeline (\"*c == b : {0}\", *c == b);\tconsole.writeline (\"**c == a : {0}\", **c == a);\tif (*c == b && **c == a) {",
  "mono register config for assembly assembly config",
  1
 ],
 [
  "static void refcursortest1(oracleconnection con) {",
  "unknown key store for issuer",
  1
 ],
 [
  "static listreplicasrequest() {\ttry {\tldapextendedresponse.register(replicationconstants.list_replicas_res, system.type.gettype(\"novell.directory.ldap.extensions.listreplicasresponse\"));\t}\tcatch (system.exception e) {",
  "using system",
  1
 ],
 [
  "targetfile = outputfile;\t} else {\ttargetfile = target.triple;\tif (!string.isnullorempty (outputdir)) targetfile = path.combine (outputdir, targetfile);\ttargetfile += \".h\";\t}\tusing (var writer = new streamwriter(targetfile)) {\tdumpaligns(writer, targetinfo);\tdumpsizes(writer, targetinfo);\tdumpmetadataoffsets(writer, ctx, target);",
  "access friend internal method ok",
  1
 ],
 [
  "private static void showhelp (bool detailed) {",
  "donotrunafter null",
  1
 ],
 [
  "protected task removenode(servermanagementclient client, string nodename) {\ttry {",
  "uri",
  1
 ],
 [
  "public void addparam12(object param, xslinputtype xslinputtype, readertype readertype, outputtype outputtype, navtype navtype) {\tstring baseline = path.combine(\"baseline\", (string)param);\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(\"myarg1\", szempty, \"test1\");\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);\tif (retobj.tostring() != \"test1\") assert.true(false);\tm_xsltarg.addparam(\"myarg1\", \"http: retobj = m_xsltarg.getparam(\"myarg1\", \"http: _output.writeline(\"added value:{0}\\nretrieved value: {1}\", \"test2\", retobj);\tif (retobj.tostring() != \"test2\") assert.true(false);\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);",
  "sqlclient diagnostictest executenonqueryerrortest command executed",
  1
 ],
 [
  "public void openstylesheetcommand () {\tif (!string.isnullorempty (stylesheetfilename)) {\ttry {\tideapp.workbench.opendocument (stylesheetfilename, documentcontext.project);\t} catch (exception ex) {",
  "could not open document",
  0
 ],
 [
  "public void openclosenewinstanceopen() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "calling close after calling open then create a new instance of serialport and call open again",
  0
 ],
 [
  "public fraction(int wholenumber) {",
  "did not throw exception",
  1
 ],
 [
  "private static void verifyreader(string tag, sqldatareader dr, string expectedtypename, string expectedbasetypename) {\tdr.read();\tstring actualtypename = dr.getsqlvalue(0).gettype().tostring();\tstring actualbasetypename = dr.getstring(1);\tconsole.writeline(\"{0,-40} -> {1}:{2}\", tag, actualtypename, actualbasetypename);\tif (!actualtypename.equals(expectedtypename)) {",
  "error expected type does not match actual type",
  0
 ],
 [
  "private static bool callsecondstructinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturndynamicstruct<int>();\tif ((!(bool)((s + 1).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public dummy copyblock (label pc, source destaddress, source srcaddress, source len, textwriter data) {",
  "define mono aot mode normal",
  1
 ],
 [
  "static void help () {",
  "usage mozroots import machine sync ask ask add ask remove",
  0
 ],
 [
  "public static void initialise () {\tif (schemas != null) return;\tschemas = new dictionary<string, htmlschema> ();\tforeach (doctypeextensionnode node in mono.addins.addinmanager.getextensionnodes (\"/monodevelop/html/doctypes\")) {",
  "did not find web server",
  1
 ],
 [
  "for (int i = 0; i < direntrycount; i++) {\ticondirentry ide;\tide.width = reader.readbyte ();\tide.height = reader.readbyte ();\tide.colorcount = reader.readbyte ();\tide.reserved = reader.readbyte ();\tide.planes = reader.readuint16 ();\tide.bitcount = reader.readuint16 ();\tide.bytesinres = reader.readuint32 ();\tide.imageoffset = reader.readuint32 ();",
  "ide height",
  0
 ],
 [
  "public static int main (string[] args) {\tvar options = new cmdoptions ();\tvar p = new optionset () {\t{ \"r|resourcestrings=\", \"file with string resource in key=value format\", v => options.resourcesstrings.add (v) }, { \"h|help\",  \"display available options\", v => options.showhelp = v != null }, { \"v|verbose\",  \"use verbose output\", v => options.verbose = v != null }, { \"ilreplace=\", \"file with il code to be used instead\", v => options.ilfile = v }, };\tlist<string> extra;\ttry {\textra = p.parse (args);\t}\tcatch (optionexception e) {\tconsole.writeline (e.message);",
  "delete tables delete all the data in all the tables and exits",
  1
 ],
 [
  "public async task<int> run (string[] arguments) {\tforeach (string s in arguments) readargument (s);\tif (help) {\tconsole.writeline ();",
  "screen validating intersection",
  1
 ],
 [
  "static void initialize () {\tif (initialized) return;\ttry {\tdoinitialize ();\t} catch (exception ex) {",
  "verifying true rtsenable after setting handshake to xonxoff",
  1
 ],
 [
  "public void definefilterbodywithtypenotnull () {\tdefinebasicmethod ();\til_gen.beginexceptionblock ();\til_gen.beginexceptfilterblock ();\til_gen.begincatchblock (typeof (exception));",
  "in filter body",
  0
 ],
 [
  "private void read(string filename) {\txmlserializer ser=new xmlserializer(typeof(xmlnode));\tfilestream fs=new filestream(filename, filemode.open);\txmlnode node;\tnode=(xmlnode)ser.deserialize(fs);\tfs.close();",
  "ok",
  1
 ],
 [
  "public static bool verifynode(xmlreader r, xmlnodetype eexpnodetype, string strexpname, string strexpvalue) {\tbool bpassed = true;\tif (r.nodetype != eexpnodetype) {\tbpassed = false;\t}\tif (r.name != strexpname) {\tbpassed = false;\t}\tif (r.value != strexpvalue) {",
  "sealed class",
  1
 ],
 [
  "public void showhelp () {\tconsole.writeline ();",
  "repeatdirection",
  1
 ],
 [
  "public void pastemultilineatfirstcolumncorrection() {\tsourcetext sourcetext;\tvar indent = createengine(\"class foo\\n{\\n$\\n}\", out sourcetext);\titextpastehandler handler = createtextpasteindentengine(indent, formattingoptionsfactory.createmono());\tvar text = handler.formatplaintext(sourcetext, indent.offset, \"void bar ()\\n{\\n\\tsystem.console.writeline ();\\n}\", null);",
  "currencysymbol",
  1
 ],
 [
  "writeline ();\tif (detailed) {\t}\twriteline ();\tif (detailed) {\t}\twriteline ();\twriteline (\"-?\");\twriteline ();\tif (!detailed) return;",
  "node name",
  1
 ],
 [
  "var enumerator = genericmethodtemplateshashtable.lookup(hashcode);\tnativeparser entryparser;\twhile (!(entryparser = enumerator.getnext()).isnull) {\tvar methodsignatureparser = new nativeparser(nativelayoutreader, externalfixupstable.getexternalnativelayoutoffset(entryparser.getunsigned()));\tvar candidatetemplate = (instantiatedmethod)context.getmethod(ref methodsignatureparser);\tdebug.assert(candidatetemplate.instantiation.length > 0);\tif (canonform == candidatetemplate.getcanonmethodtarget(kind)) {\tnativelayoutinfomodule = moduleinfo;\tnativelayoutinfotoken = (uint)externalfixupstable.getexternalnativelayoutoffset(entryparser.getunsigned());\tif (nativelayoutinfotoken == badtokenfixupvalue) {",
  "out",
  1
 ],
 [
  "oracleparameter parm6 = cmd.parameters.add (\":p6\", oracletype.datetime);\toracleparameter parm7 = cmd.parameters.add (\":p7\", oracletype.blob);\toracleparameter parm8 = cmd.parameters.add (\":p8\", oracletype.blob);\toracleparameter parm9 = cmd.parameters.add (\":p9\", oracletype.clob);\toracleparameter parm10 = cmd.parameters.add (\":p10\", oracletype.clob);\tstring s = \"mono\";\tdecimal d = 123456789012345.678m;\tdatetime dt = datetime.now;\tstring clob = \"clob\";\tbyte[] blob = new byte[] { 0x31, 0x32, 0x33, 0x34, 0x35 };",
  "arguments filename arguments will be read and processed from this file",
  1
 ],
 [
  "public void extendselection() {\tastnode selectednode = null;\tilist<astnode> commentsblanklines;\tvar parsedcu = parsedocument(editor, out commentsblanklines);\tif (parsedcu == null)\treturn;\tisegment oldselection = new textsegment { startoffset = editor.selectionstart, length = editor.selectionlength };\tselection extendedselection = extendselection(editor, parsedcu, commentsblanklines, out selectednode, new type[] { typeof(astnode) });\tselecttext(extendedselection, editor);\tif (previousselections.count == 0 || !(previousselections.peek().offset == oldselection.offset && previousselections.peek().endoffset == oldselection.endoffset)) {\tpreviousselections.push(oldselection);",
  "pushed",
  0
 ],
 [
  "dump (writer, df.monthnames, \"monthnames\");\tdump (writer, df.shortestdaynames, \"shortestdaynames\");\tvar ti = c.textinfo;\tvar nf = c.numberformat;\tdump (writer, nf.currencygroupsizes, \"currencygroupsizes\");\tdump (writer, nf.nativedigits, \"nativedigits\");\tdump (writer, nf.numbergroupsizes, \"numbergroupsizes\");\tdump (writer, nf.percentgroupsizes, \"percentgroupsizes\");\tif (!c.isneutralculture) {\tvar ri = new regioninfo (c.lcid);",
  "currencysymbol",
  0
 ],
 [
  "string windowssdkheaderpath = path.combine (winkitincludedir, \"um\", \"windows.h\");\tif (file.exists (windowssdkheaderpath)) windowssdks.add (new installedsdkinfo (\"windowssdk\", winkitrootversion, winkitrootdir, false));\tstring cruntimesdkheaderpath = path.combine (winkitincludedir, \"ucrt\", \"stdlib.h\");\tif (file.exists (cruntimesdkheaderpath)) cruntimesdks.add (new installedsdkinfo (\"cruntimesdk\", winkitrootversion, winkitrootdir, false));\t}\twindowssdks = windowssdks.orderbydescending (p => p.version.tostring (), new stringversioncomparer ()).tolist ();\tcruntimesdks = cruntimesdks.orderbydescending (p => p.version.tostring (), new stringversioncomparer ()).tolist ();\tinstalledwindowssdks = windowssdks;\tinstalledcruntimesdks = cruntimesdks;\tif (!quiet && installedwindowssdks != null) {",
  "windows sdk s",
  0
 ],
 [
  "protected override void generatetrycatchfinallystatement(codetrycatchfinallystatement e) {",
  "try",
  0
 ],
 [
  "string jobid = boundjob.id;\tcloudtask mytask = new cloudtask(taskid, \"cmd /c echo hello world\");\tboundjob.addtask(mytask);\tcloudtask boundtask = batchcli.joboperations.gettask(jobid, taskid);\ttaskstatemonitor statemonitor = batchcli.utilities.createtaskstatemonitor();\tstatemonitor.waitall(new list<cloudtask> { boundtask }, taskstate.completed, timespan.fromminutes(2));\tboundjobschedule.refresh();\tboundjobschedule.refresh();\tboundjob.refresh();\tboundjob.refresh();",
  "failed",
  1
 ],
 [
  "static void help () {",
  "in the finally block",
  1
 ],
 [
  "public static void main () {",
  "dialogfont",
  0
 ],
 [
  "public static int main ( string[] args )   {\ttry {\tint[] arr = throwanexception ();",
  "test failed really",
  0
 ],
 [
  "var bridge = new bridge ();\tlist.add (bridge);\t}\tvar r = new random (100);\tfor (int i = 0; i < obj_count; ++i) {\tvar n = list [i];\tfor (int j = 0; j < link_count; ++j) n.links.add (list [r.next (obj_count)]);\tfor (int j = 0; j < extras_count; ++j) n.links.add (j);\tif (r.nextdouble () <= survival_rate) n.__test = 1;\t}",
  "setup done",
  0
 ],
 [
  "com1.parity = parity.none;\tcom2.basestream.write(new byte[] { 26 }, 0, 1);\tthread.sleep(trigering_events_wait_time);\tcom2.breakstate = true;\tthread.sleep(trigering_events_wait_time);\tbool threadfound = true;\tstopwatch sw = stopwatch.startnew();\twhile (threadfound && sw.elapsedmilliseconds < max_time_wait) {\tthreadfound = false;\tfor (int i = 0; i < max_time_wait / iterationwaittime; ++i) {",
  "chain of length at",
  1
 ],
 [
  "foreach (xmlschemaattribute attribute in derivedtype.attributeuses.values) {\txmlschemaattribute attributebase = (xmlschemaattribute)basetype.attributeuses[attribute.qualifiedname];\tif (attributebase != null) {\tcontinue;\t}\tif (baseattributewildcard == null || !baseattributewildcard.allows(attribute.qualifiedname)) {\t#if debug string position = string.empty;\tif (derivedtype.sourceuri != null) {\tposition = \" in \" + derivedtype.sourceuri + \"(\" + derivedtype.linenumber + \", \" + derivedtype.lineposition + \")\";\t}",
  "base",
  0
 ],
 [
  "public void showhelp () {\tconsole.writeline ();",
  "monoframeworkpath",
  1
 ],
 [
  "static void setupmypackage(oracleconnection con) {",
  "error making search index",
  1
 ],
 [
  "public static void createwhitespacehandlingtestfile(string strfilename) {\tstream s = new memorystream();\ttextwriter tw = new streamwriter(s);\ttw.writeline(\"]>\");",
  "elem",
  0
 ],
 [
  "protected override void initialize() {\tcodedomlocalizationmodel model = formsdesigner.gui.optionpanels.localizationmodeloptionspanel.defaultlocalizationmodel;\tif (formsdesigner.gui.optionpanels.localizationmodeloptionspanel.keeplocalizationmodel) {\tcodedomlocalizationmodel existingmodel = this.getcurrentlocalizationmodelfromdesignedfile();\tif (existingmodel != codedomlocalizationmodel.none) {",
  "determined existing localization model using that",
  0
 ],
 [
  "static void readoraclescalar (oracleconnection con, string selectsql) {\toraclecommand cmd = null;\tcmd = con.createcommand();\tcmd.commandtext = selectsql;\tobject o = cmd.executeoraclescalar ();\tstring datatype = o.gettype ().tostring ();\tif (datatype.equals(\"system.data.oracleclient.oraclelob\")) o = ((oraclelob) o).value;\tif (o.gettype ().tostring ().equals (\"system.byte[]\")) o = gethexstring ((byte[])o);",
  "did not throw exception of type",
  1
 ],
 [
  "static int run (string dotnetcorepath, string monopath) {\tvar filename = typeof (mainclass).assembly.location;\tvar args = new [] { filename, \"--setuid\", dotnetcorepath };\tvar flags = authorizationflags.extendrights | authorizationflags.interactionallowed | authorizationflags.preauthorize;\tusing (var auth = authorization.create (null, null, flags)) {\tint result = auth.executewithprivileges ( monopath, authorizationflags.defaults, args);\tif (result != 0) {\tif (enum.tryparse (result.tostring (), out authorizationstatus authstatus)) {\tif (authstatus == authorizationstatus.canceled) {",
  "appearance",
  1
 ],
 [
  "protected static void writeheader (streamwriter s, string assembly, bool noconfig) {\tif (!noconfig) {",
  "isdirectory",
  1
 ],
 [
  "public static async task<bool> rename (isymbol symbol, string newname) {\tif (symbol == null) throw new argumentnullexception (\"symbol\");\tif (newname == null) throw new argumentnullexception (\"newname\");\ttry {\tawait new renamerefactoring ().performchangesasync (symbol, new renameproperties () { newname = newname });\treturn true;\t} catch (aggregateexception ae) {\treturn false;\t} catch (exception e) {",
  "removing service servicetype name promote promote tostring",
  1
 ],
 [
  "if (changednode.isexpanded) {\tforeach (t node in getvisiblechildren(changednode.children)) {\tbase.insert(index++, node);\t}\t} else {\tint visiblechildren = changednode.children.sum(c => c.visibleelementcount);\tfor (int i = visiblechildren - 1; i >= 0; i--) {\tbase.removeat(index + i);\t}\t}",
  "equals",
  1
 ],
 [
  "static asymmetricalgorithm privatekeyselection (x509certificate certificate, string targethost) {",
  "did not throw exception",
  1
 ],
 [
  "public static void threadmethod_waiter_2() {\te.waitone();",
  "hello",
  1
 ],
 [
  "publisher = account;\tlist<chirpermessage> chirps = await account.getreceivedmessages(10);\tforeach (chirpermessage c in chirps) {\tthis.newchirparrived(c);\t}\tif (snapshot) {\tconsole.readkey();\t}\telse {\tviewer = await grainclient.grainfactory.createobjectreference<ichirperviewer>(this);",
  "writeline",
  1
 ],
 [
  "private void dochecktimeout() {\tint currentmillis = environment.tickcount;\tif (currentmillis < timeoutoccursat) return;\tif (0 > timeoutoccursat && 0 < currentmillis) return;\t#if dbg if (runregex.debug) {\tdebug.writeline(\"\");",
  "regex match timeout occurred",
  0
 ],
 [
  "protected override void generatetypeconstructor(codetypeconstructor e) {\tif (!(iscurrentclass || iscurrentstruct)) return;\tif (e.customattributes.count > 0) {\toutputattributes(e.customattributes, false);\t}",
  "shared sub new",
  0
 ],
 [
  "public static int main () {\tint i = foo (null);\tif (i == 1) {",
  "exception",
  1
 ],
 [
  "if (s15.f3 != 3+9) {\treturn 3;\t}\tif (s15.f4 != 4+9) {\treturn 4;\t}\tif (s15.f5 != 5+9) {\treturn 5;\t}\tif (s15.f6 != 6+9) {",
  "async callback",
  1
 ],
 [
  "public void tracetest01() {\tvar texttl = new testtexttracelistener();\ttrace.listeners.add(texttl);\ttrace.indentlevel = 0;",
  "within outer try",
  1
 ],
 [
  "case \"textwriter\": streamwriter tw = new streamwriter(writerstream, wsettings.encoding);\tw = writerhelper.create(tw, wsettings, overrideasync: true, async: utils.async);\tbreak;\t}\tbool bresult = false;\ttry {\tw.writestartdocument();\tw.writestartdocument();\t}\tcatch (exception e) {",
  "exception",
  0
 ],
 [
  "break;\tcase \"writebinhex\": w.writebinhex(bytebuffer, iindex, icount);\tbreak;\tcase \"writechars\": w.writechars(charbuffer, iindex, icount);\tbreak;\tdefault: cerror.compare(false, \"unexpected method name \" + methodname);\tbreak;\t}\t}\tcatch (exception e) {",
  "failed to launch browser because process exited before server started listening",
  1
 ],
 [
  "static private void help () {",
  "usage secutil options filename",
  0
 ],
 [
  "public void testcase2() {\ttest<stringcompareisculturespecificissue>(@\" class test {\tvoid foo () {",
  "foo bar",
  0
 ],
 [
  "private static bool dynamicobjectinsecondandthirdoperandandconditionisfalse() {\tint failcount = 0;\tbyte origin = 24;\tdynamic d1 = origin;\tdynamic d2 = 33;\tbool cond = false;\tif ((int)(cond ? d1 : d2) != 33) {\tfailcount++;",
  "test failed conversion result is incorrect",
  0
 ],
 [
  "private static bool nullableinttypewithnumbericconversionfromshortinassignment() {\tint failcount = 0;\tshort? origin = short.maxvalue;\tdynamic d = origin;\tint? result = d;\tif (result != origin) {\tfailcount++;",
  "test failed at conversion result",
  0
 ],
 [
  "oldest = oldestentrynumber;\tcount = entrycount + oldest;\t}\t}\tcatch (exception e) {\t}\ttry {\tint newcount = entrycount + oldestentrynumber;\tif (i > newcount) lastseencount = newcount;\telse lastseencount = i;",
  "codeentrypointmethod",
  1
 ],
 [
  "public void defaultcolumnnameaddlistchangedtest() {\tstring result = @\"setting table... ---- onlistchanged propertydescriptorchanged,0,0 ---- onlistchanged reset,-1,-1 table was set. ---- onlistchanged propertydescriptoradded,0,0 default named column added. ---- onlistchanged propertydescriptoradded,0,0 non-default named column added. ---- onlistchanged propertydescriptoradded,0,0 another default named column added (column2). ---- onlistchanged propertydescriptoradded,0,0 add a column with the same name as the default columnnames. ---- onlistchanged propertydescriptoradded,0,0 add a column with a null name. ---- onlistchanged propertydescriptoradded,0,0 add a column with an empty name. \";\t_eventwriter = new stringwriter();\tdatatable dt = new datatable(\"table\");\tcomplexeventsequence1view dv = new complexeventsequence1view(dt, _eventwriter);\tdt.columns.add();\tdt.columns.add(\"non-defaultnamedcolumn\");\tdatacolumn c = dt.columns.add();\tdt.columns.add(\"column3\");\tdt.columns.add((string)null);",
  "add a column with a null name",
  0
 ],
 [
  "asynccallback ac = new asynccallback (async_callback);\tstring state1 = \"state1\";\tiasyncresult ar1 = d.begininvoke (1, ac, state1);\twhile (cb_state == 0) thread.sleep (0);\ttry {\td.endinvoke (ar1);\treturn 1;\t} catch (asyncexception) {\treturn 0;\t} catch (exception e) {",
  "verifying infinite readtimeout with readbyte",
  1
 ],
 [
  "private void removeplugchildwhenunrealised (object sender, eventargs e) {\tplug plug = (gtk.plug) sender;",
  "plug unrealised removing child before it gets destroyed",
  0
 ],
 [
  "if (!string.isnullorempty (document.info.masterpagetypename)) {\tmastertypename = document.info.masterpagetypename;\t} else if (!string.isnullorempty (document.info.masterpagetypevpath)) {\ttry {\tvar ext = project.getservice<aspnetappprojectflavor> ();\tprojectfile resolvedmaster = ext.resolvevirtualpath (document.info.masterpagetypevpath, document.filename);\twebformsparseddocument masterparseddocument = null;\tif (resolvedmaster != null) masterparseddocument = typesystemservice.parsefile (project, resolvedmaster.filepath).result as webformsparseddocument;\tif (masterparseddocument != null && !string.isnullorempty (masterparseddocument.info.inheritedclass)) mastertypename = masterparseddocument.info.inheritedclass;\t} catch (exception ex) {",
  "failed decimal decimal",
  1
 ],
 [
  "private static storagebundle getstorageaccount(string storageaccountname) {\tvar vaultaddress = inputvalidator.getvaultaddress();\tvar storageaccount = task.run( () => userkeyvaultclient.getstorageaccountasync(vaultaddress, storageaccountname)) .configureawait(false).getawaiter().getresult();",
  "resourcetoolkit bclnrefactoryresourceresolver found assignment to property",
  1
 ],
 [
  "if (next != 3) throw new exception (\"expected state 3, got \" + next.tostring ());\tnext = 4;\t});\td.begininvoke (dispatcherpriority.normal, (action) delegate {\tif (next != 4) throw new exception (\"expected state 4, got \" + next.tostring ());\tnext = 5;\t});\td.begininvoke (dispatcherpriority.send, (action) delegate {\tif (next != 1) throw new exception (\"expected state 1, got \" + next.tostring ());\tnext = 2;",
  "high priority",
  0
 ],
 [
  "int optionalheaderstart = peheaderstart + 4 + 20;\tf.position = optionalheaderstart;\tswitch (r.readint16()) {\tcase 0x10b: break;\treturn true;\treturn false;\t}\tf.position = peheaderstart + 4 + 16;\tushort sizeofoptionalheader = r.readuint16();\tif (sizeofoptionalheader < 216) {",
  "bit detection failed optional header too short this can t be a net image",
  0
 ],
 [
  "public static xmlnode getnodefromurl (string url, roottree tree) {\tstring [] usplit = parseediturl (url);",
  "results are",
  0
 ],
 [
  "if (s12.f7 != 7+9) {\treturn 7;\t}\tif (s12.f8 != 8+9) {\treturn 8;\t}\tif (s12.f9 != 9+9) {\treturn 9;\t}\tif (s12.f10 != 10+9) {",
  "principalcollection add removing from removedvaluespending",
  1
 ],
 [
  "public static int main () {\tint[] int_array = new int [] { 0, 1 };\tienumerable<int> e;\te = from int i in int_array where i > 0 select i;\tif (e.tolist ()[0] != 1) return 1;\te = from int i in int_array where i == 0 select i + 1;\tif (e.tolist ()[0] != 1) return 2;",
  "write alert null",
  1
 ],
 [
  "font.family = (int)rtf.minor;\tbreak;\t}\tcase major.charattr: {\tswitch(rtf.minor) {\tcase minor.fontnum: {\tfont.num = rtf.param;\tbreak;\t}\tdefault: {",
  "calling printname",
  1
 ],
 [
  "var t = counters.parserservice.objectserialized.begintiming (path);\ttry {\tusing (var fs = new filestream (path, system.io.filemode.create, fileaccess.write)) {\tusing (var writer = new binarywriterwith7bitencodedints (fs)) {\tlock (sharedserializer) {\tsharedserializer.serialize (writer, obj);\t}\t}\t}\t} catch (exception e) {",
  "assert areequal ex message",
  1
 ],
 [
  "}\ttry {\tt2.wait();\tassert.true(false, string.format(\"    > failed.  no exception thrown from wait().\"));\t}\tcatch (aggregateexception ae) {\tif (!(ae.innerexceptions[0] is taskschedulerexception)) {\tassert.true(false, string.format(\"    > failed.  wrong inner exception thrown from wait(): {0}\", ae.innerexceptions[0].gettype().name));\t}\t}",
  "testing task factory startnew buggy scheduler",
  0
 ],
 [
  "static void dosqltest (idbconnection cnc) {\tidatareader reader;\tobject odatavalue;\ttry {\tdroptable (cnc);",
  "ok",
  0
 ],
 [
  "for (int i=0; i<100; i++) {\tisequenced<int> inner = new treeset<int>();\tinner.add(i); inner.add(i+1);\touter.add(inner);\t}\tipersistentsorted<int> inner1 = new treeset<int>(), inner2 = new treeset<int>(), inner3 = new treeset<int>();\tinner1.addall<int>(new int[] { 2, 3, 5, 7, 11 });\tinner2.addall(inner1); inner2.add(13);\tinner3.addall(inner1);\touter.add(inner1.snapshot());",
  "exception not generated for invalid output destination",
  1
 ],
 [
  "static void createautosave (string filename, itextsource content) {\tif (!autosaveenabled) return;\ttry {\tvar autosavefilename = getautosavefilename (filename);\tif (file.exists (autosavefilename)) file.delete (autosavefilename);\tcontent.writetextto (autosavefilename);\tcounters.autosavedfiles++;\t} catch (exception e) {",
  "error in auto save while creating disableing auto save",
  0
 ],
 [
  "public void listnodeagentskus() {\taction test = () => {\tusing (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {\tvar nas = batchcli.pooloperations.listnodeagentskus().tolist();\tassert.true(nas.count > 0);\tforeach (nodeagentsku curnas in nas) {",
  "ostype",
  0
 ],
 [
  "protected override void onbuttonpressed (buttoneventargs args) {",
  "element any",
  1
 ],
 [
  "try {\tw.writestartelement(\"root\");\tw.writequalifiedname(\"bar\", \"foo\");\tw.writeendelement();\t}\tcatch (argumentexception) {\ttestlog.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "msbuild error msbuild",
  1
 ],
 [
  "cerror.writelineignore(e.tostring());\tutils.checkelementstate(w.writestate);\treturn;\t}\tcatch (xmlexception e) {\tcerror.writelineignore(e.tostring());\tutils.checkelementstate(w.writestate);\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "render (res, node, url);\tcurrenttab.history.appendhistory (new linkpagevisit (this, url));\treturn;\t}\t} catch (exception e){\tconsole.writeline(\"#########\");\tconsole.writeline(\"#########\");\tconsole.writeline(e);\t}\tconsole.error.writeline (\"+----------------------------------------------+\");",
  "urls are not very useful to locate types",
  0
 ],
 [
  "private static bool callsecondinterfaceindexer() {\tint failcount = 0;\tverify.firstcalled = false;\tdynamic d = new firstclassreturninterface<int>();\tif ((!(((d + 1))[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public internalclass (char @public) {",
  "internalclass public",
  0
 ],
 [
  "public static ienumerable<string> yieldreturnwithtwononnestedfinallyblocks(ienumerable<string> input) {\tforeach (string line in input) {\ttry {\tyield return line;\t} finally {",
  "processed",
  0
 ],
 [
  "x x = new x ();\tx.test (1);\tif (x.sbyte_selected){\treturn 1;\t} else {\t}\tx y = new x ();\tsbyte s = 10;\ty.test (s);\tif (y.sbyte_selected){",
  "ok sbyte selected for sbyte argument",
  0
 ],
 [
  "public static int main () {",
  "hello world",
  0
 ],
 [
  "private void writehelp() {\tconsole.out.writeline(sr.format(sr.helpdescription));\tconsole.out.writeline(sr.format(sr.helpdevoptions));",
  "start of method",
  1
 ],
 [
  "threadpriority before = testthread.priority;\ttestthread.priority = threadpriority.abovenormal;\ttestthread.name = \"testmethod\";\ttestthread.start();\tthreadpriority after = testthread.priority;\tif (before != threadpriority.normal) res = 1;\telse if (after != threadpriority.abovenormal) res = 2;\telse {\ttestthread.priority = threadpriority.normal;\tafter = testthread.priority;",
  "setting test thread priority to normal",
  0
 ],
 [
  "s9.f2 = 2;\ts9.f3 = 3;\ts9.f4 = 4;\ts9.f5 = 5;\ts9.f6 = 6;\ts9.f7 = 7;\ts9.f8 = 8;\ts9.f9 = 9;\ts9 = mono_return_short9(s9, 90);\tif (s9.f1 != 1+90) {",
  "got but expected",
  0
 ],
 [
  "break;\tcase \"-deadlockdetection\": if (bool.parse(args[++i])) {\tdeadlockdetection.enable();\t}\tbreak;\tdefault: s_mode = runmode.help;\tbreak;\t}\t}\tif (testfinder.assemblyname != null) {",
  "warning",
  1
 ],
 [
  "}\terror = wldap32.ber_printf_int(berelement, new string(fmt, 1), (int)value[valuecount]);\tvaluecount++;\t}\telse if (fmt == 'b') {\tif (valuecount >= value.length) {\tdebug.writeline(\"value argument is not valid, valuecount >= value.length\\n\");\tthrow new argumentexception(string.format(cultureinfo.currentculture, sr.berconverternotmatch));\t}\tif (!(value[valuecount] is bool)) {",
  "type should be boolean",
  0
 ],
 [
  "layoutint nongcdatasize = layoutint.zero;\tlayoutint gcdatasize = layoutint.zero;\tlayoutint threaddatasize = layoutint.zero;\ttypebuilderstate state = type.getorcreatetypebuilderstate();\tnativeparser typeinfoparser = state.getparserfornativelayoutinfo();\tbagelementkind kind;\twhile ((kind = typeinfoparser.getbagelementkind()) != bagelementkind.end) {\tswitch (kind) {\tnongcdatasize = new layoutint(checked((int)typeinfoparser.getunsigned()));\tbreak;",
  "found bagelementkind gcstaticdatasize",
  0
 ],
 [
  "public leaf () {",
  "created leaf in",
  0
 ],
 [
  "icount++;\t}\ttry {\txslt.transform(\"\\\\\\\\\", _stroutfile);\t}\tcatch (system.exception) {\ticount++;\t}\t}\tif (icount.equals(3)) return;",
  "package creation failed",
  1
 ],
 [
  "public void trycatchmultiplehandlers() {\ttry {",
  "got",
  1
 ],
 [
  "strarrdel sad = gs.newstrdel ();\tstrarrdel sad2 = (strarrdel)delegate.createdelegate (typeof (strarrdel), null, mistr);\tif (oad.method != miobj) {\tif (oad.method == mistr) console.writeline (\"object method is string\");\treturn 1;\t}\tif (sad.method != mistr) {\tif (sad.method == miobj) console.writeline (\"string method is object\");\telse return 1;\t} else {",
  "right string method",
  0
 ],
 [
  "static bool callsecondstructoperator() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturnstruct<int>();\tif ( (!(bool)(((dynamic)s.instanceproperty) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "protected override ienumerable<versioninfo> ongetversioninfo (ienumerable<filepath> paths, bool getremotestatus) {\ttry {\treturn getdirectoryversioninfo (filepath.null, paths, getremotestatus, false);\t} catch (exception e) {",
  "access internal class public ctor ok",
  1
 ],
 [
  "public bool trygetgenericvirtualtargetfortypeandslot(runtimetypehandle targethandle, ref runtimetypehandle declaringtype, runtimetypehandle[] genericarguments, ref string methodname, ref runtimesignature methodsignature, out intptr methodpointer, out intptr dictionarypointer, out bool slotupdated) {\tmethodnameandsignature methodnameandsignature = new methodnameandsignature(methodname, methodsignature);",
  "onmessageevent raised",
  1
 ],
 [
  "writelineuni (\"}\");\twritelineuni (\"}\");\twriteline (\"\");\twritelineind (\"if (readmethods == null) {\");\twriteline (\"readmethods = new system.collections.hashtable ();\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twriteline (\"\");",
  "public override system collections hashtable writemethods",
  0
 ],
 [
  "public static void c(int i) {\tif (i==0) {",
  "bad element null at base index",
  1
 ],
 [
  "static void help () {",
  "console show defects on the console even if log xml or html are specified",
  0
 ],
 [
  "irule rule = defect.rule;\tbegincolor ( (severity.critical == defect.severity || severity.high == defect.severity) ? consolecolor.darkred : consolecolor.darkyellow);\twriter.writeline (\"{0}. {1}\", index, rule.name);\twriter.writeline ();\tendcolor ();\tbegincolor (consolecolor.darkred);\twriter.write (\"problem: \");\tendcolor ();\twriter.write (rule.problem);\twriter.writeline ();",
  "target",
  0
 ],
 [
  "if (retobj.tostring() != \"0.00\") {\tassert.true(false);\t}\tint i = 8;\tm_xsltarg.addparam(\"myarg2\", szempty, i);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tassert.equal(retobj.gettype(), i.gettype());\tboolean bf = (1 == 0);\tm_xsltarg.addparam(\"myarg3\", szempty, bf);\tretobj = m_xsltarg.getparam(\"myarg3\", szempty);",
  "added value retrieved value",
  0
 ],
 [
  "public void consistentringprovider_test2() {\tsiloaddress silo1 = siloaddressutils.newlocalsiloaddress(0);\tvirtualbucketsringprovider ring = new virtualbucketsringprovider(silo1, nullloggerfactory.instance, 30);\tfor (int i = 1; i <= 10; i++) {\tring.silostatuschangenotification(siloaddressutils.newlocalsiloaddress(i), silostatus.active);\tvar range = rangefactory.createequallydividedmultirange(ring.getmyrange(), 5);",
  "range the whole ring with silos is",
  0
 ],
 [
  "private int handleerror (intptr display, ref xerrorevent error_event) {\tif (errorexceptions) throw new x11exception (error_event.display, error_event.resourceid, error_event.serial, error_event.error_code, error_event.request_code, error_event.minor_code);",
  "dns enabled",
  1
 ],
 [
  "public void load() {\tstring currentlanguage = service.currentlanguage;\tstring logmessage = \"loading resources \" + baseresourcename + \".\" + currentlanguage + \": \";\tresourcemanager manager = null;\tif (assembly.getmanifestresourceinfo(baseresourcename + \".\" + currentlanguage + \".resources\") != null) {",
  "jobschedulestatistics usercputime",
  1
 ],
 [
  "private void dochecktimeout() {\tint currentmillis = environment.tickcount;\tif (currentmillis < timeoutoccursat) return;\tif (0 > timeoutoccursat && 0 < currentmillis) return;\t#if dbg if (runregex.debug) {\tdebug.writeline(\"\");",
  "cold run",
  1
 ],
 [
  "public static int main () {\tblah b = new blah ();\tb.connect ();\tb.button1.onclick (2, 3);\tb.disconnect ();",
  "now calling onclick again",
  0
 ],
 [
  "#if trace trace.writeline (string.format (\"type converter: '{0}' (to string: {1}; from {2}: {3})\", converter, converter != null ? converter.canconvertto (typeof (string)) : false, t, converter != null ? converter.canconvertfrom (t) : false));\t#endif if (converter == null || converter.gettype () == typeof (typeconverter) || !converter.canconvertto (typeof (string)) || !converter.canconvertfrom (typeof (string))) fmt = binaryobjectformatter;\telse {\ttypeconverterformatter.converter = converter;\tfmt = typeconverterformatter;\t}\t}\t}\t#endif fmt.write (w, o, ctx);\t#if trace trace.unindent ();",
  "threadabortexception finally",
  1
 ],
 [
  "static void readdata(idatareader rdr) {\tint results = 0;\tif(rdr == null) {",
  "idatareader has a null reference",
  0
 ],
 [
  "static bool loadconfig (bool quiet) {\tmethodinfo config = typeof (system.environment).getmethod (\"getmachineconfigpath\", bindingflags.static|bindingflags.nonpublic);\tif (config != null) {\tstring path = (string) config.invoke (null, null);\tbool exist = file.exists (path);\tstrongnamemanager.loadconfig (path);\treturn exist;\t}",
  "added",
  1
 ],
 [
  "public static void createlinenumbertestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<?xml version=\\\"1.0\\\" ?>\");\ttw.writeline(\" <element a0='a0&e1;v' a1='a1value' a2='a2&e1;v'><embedded /></element>\");\ttw.writeline(\"<?pi1?>\");\ttw.writeline(\"<base64>9f6hju++</base64>\");",
  "test failed",
  1
 ],
 [
  "public void rewritemdbfile (string inputfile) {",
  "should not throw error loading stylesheet with include import when resolver property is set to null",
  1
 ],
 [
  "public void condition (int x) {\tif (x == 0) {\t}",
  "of course",
  0
 ],
 [
  "break;\tdefault: cerror.compare(false, \"unexpected method name \" + methodname);\tbreak;\t}\t}\tcatch (exception e) {\tif (exceptiontype.fullname.equals(e.gettype().fullname)) {\treturn;\t}\telse {",
  "hello world",
  1
 ],
 [
  "if (s14.f2 != 2+9) {\treturn 2;\t}\tif (s14.f3 != 3+9) {\treturn 3;\t}\tif (s14.f4 != 4+9) {\treturn 4;\t}\tif (s14.f5 != 5+9) {",
  "possible file",
  1
 ],
 [
  "scanaclforchangepasswordright(adssecurity, out denyselffound, out denyworldfound, out allowselffound, out allowworldfound);\tbool usercannotchangepassword;\tif (denyselffound || denyworldfound) {\tusercannotchangepassword = true;\t}\telse if ((!denyselffound && !denyworldfound) && (allowselffound || allowworldfound)) {\tusercannotchangepassword = false;\t}\telse {\tusercannotchangepassword = false;",
  "adstorectx cannotchangepwdfromldapconverter fallback assume user can change pwd",
  0
 ],
 [
  "private static bool callsecondstructindexer() {\tint failcount = 0;\tverify.firstcalled = false;\tdynamic d = new firstclassreturnstruct<int>();\tif ((!(((secondstruct<int>)d.instancemethod())[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "calling the derived class with double excellent",
  1
 ],
 [
  "public void pi_7(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writeprocessinginstruction(\"xml\", \"text\");\tw.writeendelement();\tw.dispose();\t}\tcatch (argumentexception e) {",
  "exception",
  0
 ],
 [
  "smalllist.images.add(sd.resourceservice.getbitmap(\"icons.32x32.emptyprojecticon\"));\timglist.images.add(sd.resourceservice.getbitmap(\"icons.32x32.emptyprojecticon\"));\tint i = 0;\tforeach (iimage icon in icons.keys.toarray()) {\tbitmap bitmap = icon.bitmap;\tif (bitmap != null) {\tsmalllist.images.add(bitmap);\timglist.images.add(bitmap);\ticons[icon] = ++i;\t} else {",
  "done",
  1
 ],
 [
  "public void writestring_15(xmlwriterutils utils) {\tchar[] invalidxml = { '\\udf20', 'b', 'c' };\tstring invxml = new string(invalidxml);\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writestring(invxml);\t}\tcatch (argumentexception e) {",
  "exception",
  0
 ],
 [
  "public void parity_mark_afteropen() {",
  "verifying mark parity after open",
  0
 ],
 [
  "public void setmessage (string msg) {",
  "process ps msg",
  0
 ],
 [
  "public static int main () {\tx x = new x ();\tx.p = 5;\tint result = x.test ();\tif (result != 0) console.writeline (\"error: {0}\", result);",
  "div end namespace",
  1
 ],
 [
  "protected internal override void render (htmltextwriter writer) {\tif (supportspartialrendering) {\twriter.writeline (\"<script type=\\\"text/javascript\\\">\");",
  "usage cil options output file",
  1
 ],
 [
  "dynamic d = new target();\tint x = 3;\tbool ret = true;\ttry {\tchar s = d[x, x];\td[x, x] = 'a';\t}\tcatch (microsoft.csharp.runtimebinder.runtimebinderexception ex) {\tret = errorverifier.verify(errormessageid.ambigcall, ex.message, \"target.this[int, float]\", \"target.this[float, int]\");\tif (ret) return 0;",
  "publicclass internalstaticmethod",
  1
 ],
 [
  "runtest();\tconsole.out.flush();\tconsole.out.dispose();\tstreamwriter standardoutput = new streamwriter(console.openstandardoutput());\tstandardoutput.autoflush = true;\tconsole.setout(standardoutput);\tvar comparisonresult = finddifffrombaseline(baselinepath, outputpath);\tif (string.isnullorempty(comparisonresult)) {\treturn true;\t}",
  "comparison results",
  0
 ],
 [
  "public cswriter(string filename) {\t_writer = new streamwriter(filename);",
  "breadth first",
  1
 ],
 [
  "public bool onclientactivate () {\t#if debug ongeneric (\"onclientactivate\");",
  "test failed at conversion result",
  1
 ],
 [
  "public void dump (symboltable table) {",
  "principal save context move back failed",
  1
 ],
 [
  "private void attachtimercallback(object state) {",
  "wde debugcontroller attachtimercallback",
  0
 ],
 [
  "public void read_partial() {\tusing (serialport com1 = tcsupport.initfirstserialport()) using (serialport com2 = tcsupport.initsecondserialport(com1)) {\tchar utf32char = (char)0x254b;\tbyte[] utf32charbytes = encoding.utf32.getbytes(new[] { utf32char });\tchar[] charrcvbuffer = new char[3];\tint result;",
  "verifying that read char int int works when reading partial characters",
  0
 ],
 [
  "try {\tchecked {\tushort rez2 = (ushort)-d;\t}\t}\tcatch (system.overflowexception) {\texception = true;\t}\tfinally {\tif (exception) rez++;",
  "test failed",
  0
 ],
 [
  "console.writeline ();\tif (showmsg != null) {\tconsole.writeline (showmsg);\tconsole.writeline ();\t}\treturn;\t}\tcheckresults results = checker.check (options);\tconsole.writeline ();\tif (results.anyerrors) {",
  "error",
  0
 ],
 [
  "if (isbinaryreader()) datareader.read();\ttry {\tdatareader.readtodescendant(null);\t}\tcatch (argumentnullexception) {\t}\ttry {\tdatareader.readtodescendant(\"b\", null);\t}\tcatch (argumentnullexception) {",
  "namespace",
  1
 ],
 [
  "public bool onclientdomkeyup (keyinfo keyinfo, modifierkeys modifiers, nsidomnode target) {\t#if debug ongeneric (\"onclientdomkeyup\");",
  "svn client could not be initialized",
  1
 ],
 [
  "static int main () {\ttest t1 = new test ();\tobjref myref = remotingservices.marshal (t1, \"/test\");\tstring url = \"simple: string uri;\tsimplechannel chnl = new simplechannel (8000);\tchannelservices.registerchannel (chnl);\ttest tp = (test)remotingservices.connect (typeof (test), url);\tint res = tp.test_function (4, true);",
  "result",
  0
 ],
 [
  "if (this.graph1.termmap.keys2count (sv1) < this.graph2.termmap.keys2count (sv2)) {\tfunctions = this.graph2.termmap.keys2 (sv2);\tchanged = true;\t} else functions = this.graph1.termmap.keys2 (sv1);\t}\tforeach (tfunc function in functions) {\tsymvalue v1 = this.graph1.lookupwithoutmanifesting (sv1, function);\tsymvalue v2 = this.graph2.lookupwithoutmanifesting (sv2, function);\tif (v1 == null) {\tif (!this.widen && function.manifestfield) {",
  "symgraph changed due to manifestation of a top edge in",
  0
 ],
 [
  "console.writeline (\"advanced converter = {0}\", propcvt.gettype());\tconsole.writeline (\"\");\tif (null == propcvt.getproperties(props[2].getvalue (col))) console.writeline (\"null properties\");\tconsole.writeline (\"advanced converter = {0}/{1}/{2}\", propcvt.getpropertiessupported (), propcvt.getstandardvaluessupported (), propcvt.getcreateinstancesupported ());\tconsole.writeline (\"advanced localizable = {0}\", props[2].islocalizable);\tconsole.writeline (\"advanced readonly = {0}\", props[2].isreadonly);\tconsole.writeline (\"advanced type = {0}\", props[2].propertytype);\tconsole.writeline (\"advanced category = {0}\", props[2].category);\tconsole.writeline (\"advanced description = {0}\", props[2].description);\tconsole.writeline (\"advanced displaynem = {0}\", props[2].displayname);",
  "advanced has attributes",
  0
 ],
 [
  "public override void garbagecollectionresize (uint collection, ulong newsize) {",
  "got but expected",
  1
 ],
 [
  "xmlreader datareader = getreader(pbinhexxml);\tpositiononelement(datareader, st_elem_name1);\tdatareader.read();\tif (!datareader.canreadbinarycontent) return true;\ttry {\tdatareader.readcontentasbinhex(buffer, iindex, icount);\t}\tcatch (exception e) {\tbpassed = (e.gettype().tostring() == exceptiontype.tostring());\tif (!bpassed) {",
  "test",
  1
 ],
 [
  "this.context.clientwritekey = keyblock.readbytes(this.keymaterialsize);\tthis.context.serverwritekey = keyblock.readbytes(this.keymaterialsize);\tif (this.ivsize != 0) {\tthis.context.clientwriteiv = keyblock.readbytes(this.ivsize);\tthis.context.serverwriteiv = keyblock.readbytes(this.ivsize);\t}\telse {\tthis.context.clientwriteiv = ciphersuite.emptyarray;\tthis.context.serverwriteiv = ciphersuite.emptyarray;\t}",
  "clientwritemac",
  0
 ],
 [
  "public int v16() {\treloadsource(new stringreader(\"<root><e/></root>\"));\tdatareader.read();\ttry {\tdatareader.readtonextsibling(null);\t}\tcatch (argumentnullexception) {",
  "caught for single param",
  0
 ],
 [
  "public static string canonicalizebinding (string binding) {\tgdk.modifiertype chordmod, mod;\tstring accel, chord = null;\tuint chordkey, key;\tif (string.isnullorempty (binding)) return null;\tif (isshortcutformat (binding)) return shortcuttobinding (binding);\tif (!bindingtokeys (binding, out chordkey, out chordmod, out key, out mod)) {",
  "test",
  1
 ],
 [
  "public void performancecounter_createcounter_count0 () {\tassert.areequal (0, a.countersample.rawvalue);\ta.countersample.increment ();\tassert.areequal (1, a.countersample.rawvalue);",
  "performancecounter createcounter end",
  0
 ],
 [
  "public void testunsafeclass() {\tanalyze<redundantunsafecontextanalyzer>(@\"$unsafe$ class foo {\tpublic static void main(string[] args) {",
  "did not throw argumentnullexception",
  1
 ],
 [
  "if (s6.f3 != 3+9) {\treturn 3;\t}\tif (s6.f4 != 4+9) {\treturn 4;\t}\tif (s6.f5 != 5+9) {\treturn 5;\t}\tif (s6.f6 != 6+9) {",
  "font size points",
  1
 ],
 [
  "return 4;\t}\tshort5 s5;\ts5.f1 = 1;\ts5.f2 = 2;\ts5.f3 = 3;\ts5.f4 = 4;\ts5.f5 = 5;\ts5 = mono_return_short5(s5, 90);\tif (s5.f1 != 1+90) {",
  "waithandle has a limit of handles so you cannot process urls",
  1
 ],
 [
  "private async task clientasyncsslhelper( encryptionpolicy encryptionpolicy, sslprotocols clientsslprotocols, sslprotocols serversslprotocols) {\tipendpoint endpoint = new ipendpoint(ipaddress.ipv6loopback, 0);\tusing (var server = new dummytcpserver(endpoint, encryptionpolicy)) using (var client = new tcpclient(addressfamily.internetworkv6)) {\tserver.sslprotocols = serversslprotocols;\tawait client.connectasync(server.remoteendpoint.address, server.remoteendpoint.port);\tusing (sslstream sslstream = new sslstream(client.getstream(), false, allowanyservercertificate, null)) {\ttask clientauthtask = sslstream.authenticateasclientasync(\"localhost\", null, clientsslprotocols, false);\tawait clientauthtask.timeoutafter(testconfiguration.passingtesttimeoutmilliseconds);",
  "unknown command",
  1
 ],
 [
  "xmlschemaattribute attribute = (xmlschemaattribute)derivedtype.attributeuses[attributebase.qualifiedname];\tif (attribute == null) {\tderivedtype.attributeuses.add(attributebase.qualifiedname, attributebase);\t}\telse {\tif (attributebase.use == xmlschemause.prohibited && attribute.use != xmlschemause.prohibited) {\t#if debug string position = string.empty;\tif (derivedtype.sourceuri != null) {\tposition = \" in \" + derivedtype.sourceuri + \"(\" + derivedtype.linenumber + \", \" + derivedtype.lineposition + \")\";\t}",
  "derived",
  0
 ],
 [
  "private async task<ipage<noderesource>> listnodesinsubscription(servermanagementclient client) {\tvar nodes = await client.node.listasync();\tassert.notnull(nodes);\tvar found = false;\tforeach (var n in nodes) {\tfound = true;",
  "nugetpackagemanager",
  1
 ],
 [
  "return;\t}\tforeach (xmlschemacompletiondata d in list) {\tif (d.namespaceuri == data.namespaceuri) {\treturn;\t}\t}\tdata.readonly = readonly;\tlist.add (data);\t} catch (exception ex) {",
  "xmlschemamanager is unable to read schema because of the following error",
  0
 ],
 [
  "private void checkrowversion(datarow dr) {\tconsole.writeline(\"\");",
  "did not throw expected exception",
  1
 ],
 [
  "static bool addcodegroup (string[] args, ref int i) {\tstring name = args [++i];\tpolicylevel pl = null;\tcodegroup parent = null;\tcodegroup cg = findcodegroup (name, ref parent, ref pl);\tif ((pl == null) || (parent == null) || (cg == null)) return false;\tunioncodegroup child = new unioncodegroup ( new allmembershipcondition (), new policystatement (new permissionset (permissionstate.unrestricted)));\tif (!processcodegroup (child, args, ref i)) return false;\tcg.addchild (child);\tsecuritymanager.savepolicylevel (pl);",
  "codegroup added in policy level",
  0
 ],
 [
  "retval = checkviews() && retval;\t#if hashindex if (!retval) return false;\tif (underlying == null) {\tif (size != dict.count) {\tconsole.writeline(\"list.size ({0}) != dict.count ({1})\", size, dict.count);\tretval = false;\t}\tnode n = startsentinel.next, n2;\twhile (n != endsentinel) {\tif (!dict.find(n.item, out n2)) {",
  "sw writeline",
  1
 ],
 [
  "s3.f2 = 2;\ts3.f3 = 3;\ts3 = mono_return_float3(s3, 906);\tif (s3.f1 != 1+906) {\treturn 1;\t}\tif (s3.f2 != 2+906) {\treturn 2;\t}\tif (s3.f3 != 3+906) {",
  "got but expected",
  0
 ],
 [
  "public static int main() {\twaitsubsystemtests.doublesetoneventwithtimedoutwaitershouldnotstayinwaiterslist();\twaitsubsystemtests.manualreseteventtest();",
  "verifying default parityreplace byte with a parity error on the last byte",
  1
 ],
 [
  "streamreader sr = new streamreader (s, encoding.utf8);\twhile (sr.peek () > 0) {\tsr.readline ();\tstring uristring = sr.readline ();\ttextwriter sw = console.out;\tsw.writeline (\"-------------------------\");\tsw.writeline (uristring);\tif (uristring == null || uristring.length == 0) break;\ttry {\turi uri = baseuri == null ? new uri (uristring) : new uri (baseuri, uristring);",
  "warning couldn t not find who signed this certificate",
  1
 ],
 [
  "public async void twoawaitswithdifferentawaitertypes() {\tif (await this.simplebooltaskmethod()) {\tawait task.delay(timespan.fromseconds(1.0));\t}",
  "key key",
  1
 ],
 [
  "console.writeline (e.message);\treturn;\t}\tif (show_help) {\tp.writeoptiondescriptions (console.out);\treturn;\t}\tforeach (var m in (from k in macros.keys orderby k select k)) {\tconsole.writeline (\"\\t{0}={1}\", m, macros [m] ?? \"<null>\");\t}",
  "list",
  0
 ],
 [
  "}\tbreak;\tcase wm_activate: {\tif (((int)wparam & 0xffff) != wa_inactive) {\tcanceleventargs args = new canceleventargs();\tsafefireevent<canceleventargs>(windowactivating, args);\tif (args.cancel) {\tif (lparam != intptr.zero) {\tsetactivewindow(lparam);\t}",
  "cancelled activation",
  0
 ],
 [
  "static int main() {\tint ms, ms2, ms3;\tunsafe {\tms = sizeof (mystruct);\tms2 = sizeof (mystruct2);\tms3 = sizeof (mystruct3);\t}",
  "timer fired at mm ss ffffff",
  1
 ],
 [
  "if (pattern.indexof ('*') == -1){\tprocessfile (spec);\treturn;\t}\tstring [] files = null;\ttry {\tfiles = directory.getfiles (path, pattern);\t} catch (system.io.directorynotfoundexception) {\treturn;\t} catch (system.io.ioexception){",
  "source file could not be found",
  0
 ],
 [
  "public void basictest_accessinstanceproperties_noexceptions_linux() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {",
  "nodeinserted",
  1
 ],
 [
  "private void emithandle(recorddef record) {\tstring handlename = $\"{record.name}handle\";\topenscope($\"public partial struct {handlename}\");\topenscope(\"public override bool equals(object obj)\");\twriteline($\"    return _value == (({handlename})obj)._value;\");\twriteline(\"    return _value == ((handle)obj)._value;\");",
  "got but expected",
  1
 ],
 [
  "const int taskcount = 407;\thashset<string> taskidsexpectedtofail = new hashset<string>();\tfunc<addtaskresult, cancellationtoken, addtaskresultstatus> resulthandlerfunc = (result, token) => {\t++count;\tif (taskidsexpectedtofail.contains(result.taskid)) {\treturn addtaskresultstatus.retry;\t}\telse {\tif (count >= counttofailat) {\ttaskidsexpectedtofail.add(result.taskid);",
  "forcing a failure",
  0
 ],
 [
  "static void main () {\twhile (true) {\ttry {",
  "verifying maxvalue baudrate",
  1
 ],
 [
  "public override bool onstart() {",
  "vf assembly verify the specified assembly signature even if disabled",
  1
 ],
 [
  "public override bool execute () {\tstring cachedirectory = getcachedirectory (\"mdbuild\");\tforeach (var taskitem in downloads) {\tstring url = taskitem.itemspec;\turi uriobj;\tif (!uri.trycreate (url, urikind.absolute, out uriobj)) {",
  "download has invalid url",
  0
 ],
 [
  "public void suitestarted(testname testname) {\tif ( level++ == 0 ) {\tmessages = new stringcollection();\ttestruncount = 0;\ttestignorecount = 0;\tfailurecount = 0;",
  "secutil help",
  1
 ],
 [
  "m_xsltarg.addparam(\"myarg4\", szempty, d4);\tm_xsltarg.removeparam(\"myarg4\", szempty);\tretobj = m_xsltarg.getparam(\"myarg4\", szempty);\tif (retobj != null) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg5\", szempty, d5);\tm_xsltarg.removeparam(\"myarg5\", szempty);\tretobj = m_xsltarg.getparam(\"myarg5\", szempty);\tif (retobj != null) {",
  "tipo attributo",
  1
 ],
 [
  "retobj = m_xsltarg.getextensionobject(\"urn:my-object\");\tif (((myobject)retobj).myvalue() != obj.myvalue()) {\tassert.true(false);\t}\tretobj = m_xsltarg.getextensionobject(\"urn:my-object\");\tif (retobj != null) {\tassert.true(false);\t}\tretobj = m_xsltarg.getextensionobject(\"urn:my-object\");\tif (retobj != null) {",
  "error reading registration info from file",
  1
 ],
 [
  "public void setcustomservicesettings (peerservicesettingsinfo info) {",
  "other useless string",
  1
 ],
 [
  "foreach (object child in children) {\tctestcase tc = child as ctestcase;\tif (tc != null) {\tif (cmodinfo.istestcaseselected(tc.name)) {\ttc.init();\ttc.execute();\t}\t}\t}\t}",
  "error",
  1
 ],
 [
  "public classb () {",
  "in b",
  0
 ],
 [
  "string [] components = argument.split (':');\tif (components.length == 2) {\tswitch (components [0]) {\tcase \"runtime\": monoruntime = components [1];\tbreak;\tcase \"gtc\": generatetestconfigurations = parseargumentvalue (components [1]);\tbreak;\tthrow new applicationexception (\"invalid argument \" + argument);\t}\t} else {",
  "took to cancel task",
  1
 ],
 [
  "dump (writer, df.monthnames, \"monthnames\");\tdump (writer, df.shortestdaynames, \"shortestdaynames\");\tvar ti = c.textinfo;\tvar nf = c.numberformat;\tdump (writer, nf.currencygroupsizes, \"currencygroupsizes\");\tdump (writer, nf.nativedigits, \"nativedigits\");\tdump (writer, nf.numbergroupsizes, \"numbergroupsizes\");\tdump (writer, nf.percentgroupsizes, \"percentgroupsizes\");\tif (!c.isneutralculture) {\tvar ri = new regioninfo (c.lcid);",
  "ok",
  1
 ],
 [
  "public bool istoolboxitem(object serializedobject) {",
  "gggggg",
  0
 ],
 [
  "public void ipinfotest_accessallipv4properties_noerrors() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {",
  "nic",
  0
 ],
 [
  "public void element_4(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(string.empty);\t}\tcatch (argumentexception e) {\tcerror.compare(w.writestate, (utils.writertype == writertype.charcheckingwriter) ? writestate.start : writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "public void testsimplemethodcall () {\tstring result = runcontextaction ( new createfieldaction (), \"using system;\" + environment.newline + \"class testclass\" + environment.newline + \"{\" + environment.newline + \"\tvoid test ()\" + environment.newline + \"\t{\" + environment.newline + \"\t\tconsole.writeline ($foo);\" + environment.newline + \"\t}\" + environment.newline + \"}\" );\tconsole.writeline (result);",
  "using system class testclass object foo void test console writeline foo",
  0
 ],
 [
  "simulateduser u = new simulateduser(user);\tu.shouldrechirprate = this.shouldrechirprate;\tu.chirppublishtimebase = this.chirppublishtimebase;\tu.chirppublishtimerandom = this.chirppublishtimerandom;\tu.verbose = this.verbose;\tlock (activeusers) {\tactiveusers.add(u);\t}\tu.start();\t});",
  "explicit filtering of sourcecolumn sourcecolumn",
  1
 ],
 [
  "public static int testsharedgenerics() {",
  "testing generic dictionaries can be folded properly",
  0
 ],
 [
  "var latestmodel = await latestdocument.getsemanticmodelasync (cancellationtoken).configureawait (false);\tvar latestroot = await latestdocument.getsyntaxrootasync (cancellationtoken).configureawait (false);\tawait runtime.runinmainthread (async delegate {\ttry {\tvar node = latestroot.findnode (token.value.parent.span, false, false);\tif (node == null) return;\tvar info = latestmodel.getsymbolinfo (node);\tvar sym = info.symbol ?? latestmodel.getdeclaredsymbol (node);\tif (sym != null) await new monodevelop.refactoring.rename.renamerefactoring ().rename (sym);\t} catch (exception ex) {",
  "error while renaming",
  0
 ],
 [
  "cloudtask boundtask = batchcli.joboperations.gettask(jobid, taskid);\ttaskstatemonitor statemonitor = batchcli.utilities.createtaskstatemonitor();\tstatemonitor.waitall(new list<cloudtask> { boundtask }, taskstate.completed, timespan.fromminutes(2));\tboundjobschedule.refresh();\tboundjobschedule.refresh();\tboundjob.refresh();\tboundjob.refresh();\tboundtask.refresh();\tboundtask.refresh();\tnodefile nodefile = boundtask.getnodefile(\"stdout.txt\");",
  "refreshing task file",
  0
 ],
 [
  "}\t}\tms.flush ();\tms.position = 0;\tstring statusline = null;\tusing (streamreader sr = new streamreader (ms, encoding.utf8)) {\tstatusline = sr.readline ();\t}\tstringwriter sw = new stringwriter ();\tif (statusline.startswith (\"post /original/\")) {",
  "writeline",
  1
 ],
 [
  "private void emitmetadatareader() {\topenscope(\"public partial class metadatareader\");\tforeach (var record in schemadef.recordschema) {\topenscope($\"public {record.name} get{record.name}({record.name}handle handle)\");\tif (record.name == \"constantstringvalue\") {\t}",
  "record name record",
  0
 ],
 [
  "static void unlock_user (string username) {",
  "start",
  1
 ],
 [
  "public void removewebusernameandpassword (uri uri) {\tvar diddelete = removecredential (uri.host);\tif (diddelete) return;\tvar lasterror = (errorcode)marshal.getlastwin32error ();\tswitch (lasterror) {\tbreak;\tbreak;",
  "t",
  1
 ],
 [
  "int x = 0;\tfor (int i = 0; i < 100; i++) x++;\tconsole.writeline (x);\tstring useless = \"useless string\";\tif (useless.equals (\"other useless\")) {\tuseless = string.empty;\t}\tuseless = string.concat (useless,\" 1\");\tfor (int j = 0; j < useless.length; j++) {\tif (useless[j] == 'u') console.writeline (\"i have detected an u char\");",
  "found file",
  1
 ],
 [
  "public override void teardown () {\tforeach (methoddefinition caller in anonymous_entry_points) {\tforeach (instruction ins in caller.body.instructions) {\tswitch (ins.opcode.code) {\tcase code.call: case code.callvirt: methoddefinition target = ((methodreference) ins.operand).resolve ();\tif (target != null) {\tthreadmodel targetmodel = target.threadingmodel ();\tif (targetmodel == threadmodel.mainthread) {\tstring mesg = string.format (cultureinfo.invariantculture, \"an anonymous thread entry point cannot call mainthread {0}.\", target.name);\t++defectcount;",
  "defect",
  0
 ],
 [
  "thread otherthr=thread.currentthread;\tthread.setdata(slot, thr);\tthread storedthr=(thread)thread.getdata(slot);\tthread.setdata(namedslot, thr);\tstoredthr=(thread)thread.getdata(namedslot);\tlock(thr) {\tthread.sleep(1500);\t}\tlock(thr) {\tmonitor.wait(thr);",
  "thread signalled",
  0
 ],
 [
  "public void printbanner () {",
  "trackedcollectionenumerator entering movenext",
  1
 ],
 [
  "}\twsettings.closeoutput = closeoutput;\txmlwriter w = writerhelper.create(\"writer.out\", wsettings, overrideasync: true, async: utils.async);\tw.writestartelement(\"root\");\tw.writeendelement();\tw.dispose();\tstream fs = null;\ttry {\tfs = filepathutil.getstream(\"writer.out\");/*new filestream(\"writer.out\", filemode.open, fileaccess.readwrite);*/ }\tcatch (exception e) {",
  "uri stream is not closed by writer",
  0
 ],
 [
  "if (location == null || !file.exists (path.combine (location, \"bin\", \"libgtk-win32-2.0-0.dll\"))) {\treturn;\t}\tvar path = path.combine (location, @\"bin\");\ttry {\tif (setdlldirectory (path)) {\treturn;\t}\t} catch (entrypointnotfoundexception) {\t}",
  "unable to set gtk dll directory",
  0
 ],
 [
  "private void registerorremoveplugin(object sender, pluginregistereventargs e) {\tif (e.register) {\t}\telse {",
  "waiting for exit",
  1
 ],
 [
  "w.writestartelement(\"root\");\tw.writestring(invxml);\tw.dispose();\tdoc.save(new memorystream());\t}\tcatch (argumentexception) {\tcheckclosedstate(w.writestate);\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "}\tmarshal.freehglobal (buf);\t}\t}\tgdiplusstartupinput input = gdiplusstartupinput.makegdiplusstartupinput();\tgdiplusstartupoutput output = gdiplusstartupoutput.makegdiplusstartupoutput();\ttry {\tgdiplusstartup (ref gdiplustoken, ref input, ref output);\t}\tcatch (typeinitializationexception) {",
  "actual",
  1
 ],
 [
  "private static bool callsecondstructindexer() {\tint failcount = 0;\tverify.firstcalled = false;\tdynamic d = new firstclassreturnstruct<int>();\tif ((!(((secondstruct<int>)d.instanceproperty)[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "response seq in sw elapsed",
  1
 ],
 [
  "}\t};\tworkbenchsettings workbenchsettings = new workbenchsettings();\tworkbenchsettings.runonnewthread = false;\tfor (int i = 0; i < filelist.length; i++) {\tworkbenchsettings.initialfilelist.add(filelist[i]);\t}\tsdtracelistener.install();\thost.runworkbench(workbenchsettings);\t} finally {",
  "leaving runapplication",
  0
 ],
 [
  "public void targetstartedhandler (object sender, targetstartedeventargs args) {\tif (isverbositygreaterorequal (loggerverbosity.normal)) {\tindent++;\tsetcolor (eventcolor);\twriteline (string.empty);",
  "section is not protected",
  1
 ],
 [
  "public void transformstrstr9() {\txslt = new xslcompiledtransform();\tsetexpectederror(\"xslt_nostylesheetloaded\");\ttry {\txslt.transform(fullfilepath(\"fruits.xml\"), _stroutfile);\t}\tcatch (system.invalidoperationexception e) {\tcheckexpectederror(e, \"system.xml\", \"xslt_nostylesheetloaded\", new string[] { \"\" });\treturn;\t}",
  "done executing task",
  1
 ],
 [
  "public void readtimeout_default_readbyte() {",
  "verifying default readtimeout with readbyte",
  0
 ],
 [
  "md5.initialize();\ttemp = md5.computehash(this.context.randomsc, 0, this.context.randomsc.length);\tthis.context.serverwriteiv = new byte[this.ivsize];\tbuffer.blockcopy(temp, 0, this.context.serverwriteiv, 0, this.ivsize);\t}\telse {\tthis.context.clientwriteiv = ciphersuite.emptyarray;\tthis.context.serverwriteiv = ciphersuite.emptyarray;\t}\t}",
  "serverwritemac",
  0
 ],
 [
  "switch (r.readint16()) {\tcase 0x10b: dotnetheaderoffset = 208;\tbreak;\tcase 0x20b: dotnetheaderoffset = 224;\tbreak;\treturn false;\t}\tf.position = peheaderstart + 4 + 16;\tushort sizeofoptionalheader = r.readuint16();\tif (sizeofoptionalheader < dotnetheaderoffset + 8) {",
  "got correct exception",
  1
 ],
 [
  "int id = -1;\taction action = () => {\tid = task.currentid.hasvalue ? (int)task.currentid : -1;\tlogcontext(\"sub-task \" + id + \" n=\" + n);\tint k = n;\tthread.sleep(100);\tn = k + 1;\t};\ttask.factory.startnew(action).continuewith(tsk => {\tlogcontext(\"sub-task \" + id + \"-continuewith\");",
  "sub task done",
  0
 ],
 [
  "public void emitsource() {\twriteline();",
  "using internal nativeformat",
  0
 ],
 [
  "public static void main (string [] args) {\tif (args.length == 2) {\tstring [] tmp = new string [4];\ttmp [0] = args [0] + \"-utf8.txt\";\ttmp [1] = \"65001\";\ttmp [2] = args [1];\ttmp [3] = args [0] + \"-\" + args [1] + \".txt\";\targs = tmp;\t}\tif (args.length < 4) {",
  "evaluated node in ms result cached",
  1
 ],
 [
  "if (expr.isnull || !(expr.value is string)) {\treturn false;\t}\tdefaultproperty = (string)expr.value;\t}\tvar namedargs = att.namedarguments;\tif (namedargs.length > 0) {\tif (namedargs.any (p => p.key == \"childrenasproperties\")) {\tvar expr = namedargs.first (p => p.key == \"childrenasproperties\").value;\tif (expr.isnull) {",
  "unknown expression type in iattribute parameter",
  0
 ],
 [
  "public nulltransform (null algo, bool encryption, byte[] key, byte[] iv) : base (algo, encryption, iv) {\t_block = 0;\t_debug = (environment.getenvironmentvariable (\"mono_debug\") != null);\tif (_debug) {",
  "starting role entry point",
  1
 ],
 [
  "string line = console.readline();\twhile ( line != null && line.tolower().trim() != \"quit\") {\tclient.publishmessage(line).wait();\tconsole.write(\"enter a comment: \");\tline = console.readline();\t}\tenvironment.exit(0);\t}\trun.wait();\tif (run.isfaulted) {",
  "ok",
  1
 ],
 [
  "private void checkparticlederivation(xmlschemacomplextype complextype) {\txmlschemacomplextype basetype = complextype.basexmlschematype as xmlschemacomplextype;\tif (basetype != null && basetype != xmlschemacomplextype.anytype && complextype.derivedby == xmlschemaderivationmethod.restriction) {\tif (!isvalidrestriction(complextype.contenttypeparticle, basetype.contenttypeparticle)) {\t#if debug if (complextype.contenttypeparticle != null && basetype.contenttypeparticle != null) {\tstring position = string.empty;\tif (complextype.sourceuri != null) {\tposition = \" in \" + complextype.sourceuri + \"(\" + complextype.linenumber + \", \" + complextype.lineposition + \")\";\t}",
  "derived",
  0
 ],
 [
  "return 1;\t}\tshort2 s2;\ts2.f1 = 1;\ts2.f2 = 2;\ts2 = mono_return_short2(s2, 90);\tif (s2.f1 != 1+90) {\treturn 1;\t}\tif (s2.f2 != 2+90) {",
  "endglobal",
  1
 ],
 [
  "private static void checkpath(string path, func<string, bool> condition, string what) {\tif (condition(path)) return;\tvar errmsg = string.format(\"bad path {0} reason = {1}\", path, what);",
  "codegen error",
  0
 ],
 [
  "exception exception = null;\ttry {\tc2.wait();\tassert.true(false, string.format(\"runcontinuewithprecanceltests_state:  expected c2.wait to throw ae/tce\"));\t}\tcatch (exception ex) {\texception = ex;\t}\tensureexceptionisaeoftce(exception, \"runcontinuewithprecanceltests_state:  expected c2.wait to throw ae/tce\");\tmres.set();",
  "runcontinuewithprecanceltests state waiting for tasks to complete if we hang here something went wrong",
  0
 ],
 [
  "generatecomment (new codecomment (\"     this code was generated by a tool.\"));\tgeneratecomment (new codecomment (\"     mono runtime version: \" + system.environment.version));\tgeneratecomment (new codecomment (\"\"));\tgeneratecomment (new codecomment (\"     changes to this file may cause incorrect behavior and will be lost if \"));\tgeneratecomment (new codecomment (\"     the code is regenerated.\"));\tgeneratecomment (new codecomment (\" </autogenerated>\"));\tgeneratecomment (new codecomment (\"------------------------------------------------------------------------------\"));\toutput.writeline ();\tif (asbool(compileunit.userdata[\"allowlatebound\"])) {\t} else {",
  "option strict on",
  0
 ],
 [
  "public void addstringpair (string entry, string key, string value) {\tvar kbytes = encoding.utf8.getbytes (key);\tvar vbytes = encoding.utf8.getbytes (value);",
  "adding to",
  0
 ],
 [
  "public static void main (string[] args) {",
  "hello world",
  0
 ],
 [
  "if (!eval(!directory.exists(mounteddirname), \"err_462xtc! directory {0} still exist: {1}\", mounteddirname, directory.exists(mounteddirname))) {\tmounthelper.unmount(mounteddirname);\tdeletedir(mounteddirname, true);\t}\t}\tfile.appendalltext(debugfilename, string.format(\"completed scenario {0}\", environment.newline));\t}\t}\tcatch (exception ex) {\ts_pass = false;",
  "err exception caught in scenario",
  0
 ],
 [
  "ulong origin = 100;\tdynamic d = origin;\ttry {\tint result = (int)d;\tif ((ulong)result != origin) {\tfailcount++;\t}\t}\tcatch (exception e) {\tfailcount++;",
  "test failed catch an unknown exception",
  0
 ],
 [
  "private static bool callsecondstructinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturndynamicstruct();\tif ((!(bool)((s + 1).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "bad command line arguments supplied",
  1
 ],
 [
  "public static int main (string[] args) {\tint result = addabunchofints (__arglist ( 2, 3, 4 ));\tif (result != 9) return 1;\tresult = addasecondbunchofints (16, __arglist ( 2, 3, 4 ));\tif (result != 9) return 2;\tclass1 s = new class1 ();\tresult = s.instaddabunchofints (__arglist ( 2, 3, 4, 5 ));\tif (result != 14) return 3;\tresult = s.instaddasecondbunchofints (16, __arglist ( 2, 3, 4, 5, 6 ));",
  "waitsubsystemtests autoreseteventtest",
  1
 ],
 [
  "if (s6.f2 != 2+90) {\treturn 2;\t}\tif (s6.f3 != 3+90) {\treturn 3;\t}\tif (s6.f4 != 4+90) {\treturn 4;\t}\tif (s6.f5 != 5+90) {",
  "got but expected",
  0
 ],
 [
  "private static bool callsecondinterfaceinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturndynamicinterface();\tif ((!(bool)(s.instancemethod().instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public async task serverrequireencryption_clientallownoencryption_connectwithencryption() {\tusing (var serverrequireencryption = new dummytcpserver( new ipendpoint(ipaddress.loopback, 0), encryptionpolicy.requireencryption)) using (var client = new tcpclient()) {\tawait client.connectasync(serverrequireencryption.remoteendpoint.address, serverrequireencryption.remoteendpoint.port);\tusing (var sslstream = new sslstream(client.getstream(), false, allowanyservercertificate, null, encryptionpolicy.allownoencryption)) {\tawait sslstream.authenticateasclientasync(\"localhost\", null, sslprotocolsupport.defaultsslprotocols, false);",
  "client authenticated to server with encryption cipher bit strength",
  0
 ],
 [
  "private static bool callsecondstructinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturnstruct<int>();\tif ((!(bool)(((dynamic)s[1]).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "floc at locations floc x",
  1
 ],
 [
  "static void displaycertificate (x509certificate x509, bool machine, bool verbose) {\tif (verbose) {",
  "key algorithm",
  0
 ],
 [
  "output.write (evaluator.getusing ());\toutput.flush ();\t}\tstatic public timespan time (action a) {\tdatetime start = datetime.now;\ta ();\treturn datetime.now - start;\t}\tstatic public void loadpackage (string pkg) {\tif (pkg == null){",
  "asynccompleted socketasynceventargs with manual event error",
  1
 ],
 [
  "private void displaycontent(isignature sigtorender) {\t_signaturetextbuffer.properties[signaturehelpparameterboldingclassfier.useprettyprintedcontentkey] = false;\t_signaturetextbuffer.replace(new span(0, _signaturetextbuffer.currentsnapshot.length), sigtorender.content);\tvar classifierspans = platformcatalog.instance.classifieraggregatorservice.getclassifier(_signaturetextbuffer)?.getclassificationspans(new snapshotspan(_signaturetextbuffer.currentsnapshot, 0, _signaturetextbuffer.currentsnapshot.length));\tif (classifierspans != null && classifierspans.count > 0) _signaturewpftextview.markup = mdutils.classificationstomarkup(_signaturetextbuffer.currentsnapshot, classifierspans, sigtorender.currentparameter);\telse {\t_signaturewpftextview.markup = monodevelop.ide.typesystem.ambience.escapetext(_signaturetextbuffer.currentsnapshot.gettext());",
  "throwing applicationexception in different thread",
  1
 ],
 [
  "public bool ismemberof(principalcontext context, identitytype identitytype, string identityvalue) {\tcheckdisposedordeleted();\tif (context == null) throw new argumentnullexception(\"context\");\tif (identityvalue == null) throw new argumentnullexception(\"identityvalue\");\tgroupprincipal g = groupprincipal.findbyidentity(context, identitytype, identityvalue);\tif (g != null) {\treturn ismemberof(g);\t}\telse {",
  "no data returned or either no permission to read data",
  1
 ],
 [
  "private static byte[] timeouthandler (socket socket) {\tsocket.receive (new byte[4096]);\tthread.sleep (three_seconds_in_milliseconds * 2);\tvar sw = new stringwriter ();",
  "certificate",
  1
 ],
 [
  "private static bool test1() {\tsbyte a = 10;\tdynamic b = a;\tb--;\tif (b == 9) return true;",
  "failed sbyte",
  0
 ],
 [
  "tw.writeline(\"<entity4 att1='xxx&lt;xxx&#65;xxx&#x43;xxxe1fooxxx'>xxx&gt;xxx&#66;xxx&#x44;xxxe1fooxxx</entity4>\");\ttw.writeline(\"<entity5>e1foo e3bzee </entity5>\");\ttw.writeline(\"<attribute1 />\");\ttw.writeline(\"<attribute2 a1='a1value' />\");\ttw.writeline(\"<attribute3 a1='a1value' a2='a2value' a3='a3value' />\");\ttw.writeline(\"<attribute4 a1='' />\");\ttw.writeline(string.format(\"<attribute5 crlf='x{0}x' cr='x{0}x' lf='x\\nx' ms='x     x' tab='x\\tx' />\", environment.newline));\ttw.writeline(\"<skip1 /><afterskip1 />\");\ttw.writeline(\"<skip2></skip2><afterskip2 />\");\ttw.writeline(\"<chars1>0123456789</chars1>\");",
  "chars markup yyy chars",
  0
 ],
 [
  "public void getparam17() {\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(\"myarg1\", szempty, \"test17\");\tretobj = m_xsltarg.getparam(\"myarg3\", szdefaultns);\tif (retobj != null) {",
  "return a non null value when retrieving param with namespace",
  0
 ],
 [
  "outputline (@\"                  oracle,postgresql,sqlite,sybase,tds)\");\toutputline (@\"       \\open to open the connection\");\toutputline (@\"       \\close to close the connection\");\toutputline (@\"       \\e to execute sql query (select)\");\toutputline (@\"       \\h to show help (all commands).\");\toutputline (@\"       \\defaults to show default variables.\");\toutputline (\"\");\t}\tpublic void showhelp () {\tconsole.writeline (\"\");",
  "stacktrace",
  1
 ],
 [
  "public void pinchangedevent_dsrchanged() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (serialport com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\tpinchangedeventhandler eventhandler = new pinchangedeventhandler(com1);\teventhandler.eventfilter = eventtype => eventtype != serialpinchange.cdchanged;\tcom1.pinchanged += eventhandler.handleevent;\tcom1.open();\tcom2.open();\tfor (int i = 0; i < num_trys; i++) {",
  "port these files to a new net version",
  1
 ],
 [
  "timespan duration = endtime.subtract(starttime);\ttaskcompletionsource.setresult(duration);\t});\tcancellationduration = await taskcompletionsource.task;\ttoken.throwifcancellationrequested();\treturn new azureoperationresponse<protocol.models.cloudjob, protocol.models.jobgetheaders>() { body = new protocol.models.cloudjob() };\t};\t});\tawait assert.throwsasync<operationcanceledexception>(async () => await client.joboperations.getjobasync(\"dummy\", additionalbehaviors: new list<batchclientbehavior> { requestinterceptor }));\t}",
  "debug",
  1
 ],
 [
  "public override readwritecontext startreading (stream input) {\tvar settings = new xmlreadersettings () {\tcloseinput = true, dtdprocessing = dtdprocessing.ignore, xmlresolver = null, };\txmlreader reader = null;\tinput.seek (0, seekorigin.begin);\ttry {\treader = xmlreader.create (input, settings);\treader.readtodescendant (\"plist\");\twhile (reader.read () && reader.nodetype != xmlnodetype.element) ;\t} catch (exception ex) {",
  "pairwise",
  1
 ],
 [
  "jobspecification jobspec = curwi.jobspecification;\tif (null == jobspec) {\t}\telse {\ttestoutputhelper.writeline(\"\");\tjobconstraints jobcon = jobspec.constraints;\tif (null == jobcon) {\t}\telse {\ttestoutputhelper.writeline(\"\");",
  "maxtaskretrycount null",
  0
 ],
 [
  "int samplecount = 0;\tienumerable<jsonsampleinfo> samples = jsonsamplecommon.getjsonsamplesfromtype<tsample>();\tforeach (jsonsampleinfo sampleinfo in samples) {\tstring samplename = sampleinfo.name;\tstring serializedjson = string.empty;\tsamplecount++;\ttry {\ttestjsonsample<tresource>(sampleinfo);\t}\tcatch (exception ex) {",
  "failed exception json",
  0
 ],
 [
  "public abstract void mounttempdirectory (progressmonitor monitor, filecopyconfiguration copyconfig, string temppath);\tprotected void runfusecommand (progressmonitor monitor, string command, string args) {",
  "exception not generated for empty string input file",
  1
 ],
 [
  "thread.sleep(100);\tn = k + 1;\t}) .continuewith(tsk => {\tlogcontext(\"sub-task \" + id + \"-continuewith\");\t});\t}\t};\ttask t = new task(action);\tt.start(scheduler);\tthread.sleep(timespan.fromseconds(2));",
  "main task awake",
  0
 ],
 [
  "static void printglobalinfo () {",
  "security",
  0
 ],
 [
  "static bool removepermissionset (string psname) {\tbool confirmed = false;\tforeach (policylevel pl in levels) {\tpermissionset ps = pl.getnamedpermissionset (psname);\tif (ps == null) {\treturn false;\t} else if (confirmed || confirm ()) {\tconfirmed = true;\tpl.removenamedpermissionset (psname);\tsecuritymanager.savepolicylevel (pl);",
  "usage is macpack options assembly n appname appname appname application name o output output output output directory a assembly assembly to pack i file icon file icon filename r additional files to bundle m winforms cocoa console the mode for the application",
  1
 ],
 [
  "public void errorevent_rxparity() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (serialport com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\terroreventhandler erreventhandler = new erroreventhandler(com1);",
  "verifying rxparity event",
  0
 ],
 [
  "public async task<bool> removefromproject () {\tif (!this.getisaddedtoproject()) {",
  "console writeline",
  1
 ],
 [
  "public void printtree (streamwriter msw) {\tfor (int i = 0; i < faxisarray.count; ++i) {\tforwardaxis axis = (forwardaxis)faxisarray[i];\tmsw.writeline(\"<tree isdss=\\\"{0}\\\" isattribute=\\\"{1}\\\">\", axis.isdss, axis.isattribute);\tdoublelinkaxis printaxis = axis.topnode;\twhile ( printaxis != null ) {",
  "list key versions",
  1
 ],
 [
  "static void guardfromeh1 () {\ttry {\tinnerfromeh1 ();\t} catch (exception e) {\tresult |= 0x8;",
  "caught a while on",
  0
 ],
 [
  "private static bool parseargumentvalue (string value) {\tif ((value.length == 1)) {\tswitch (value [0]) {\tcase 't': return true;\tcase 'f': return false;",
  "invalid argument value",
  0
 ],
 [
  "} else {\tcode = value.tostring ();\t}\tbreak;\tcase typecode.char: code = \"'\" + ((char) value).tostring () + \"'\"; break;\tcase typecode.datetime: code = \"new system.datetime (\" + ((datetime) value).ticks + \")\"; break;\tcase typecode.dbnull: code = \"system.dbnull.value\" ; break;\tcase typecode.object: code = null;\tif (value is exception) {\twriter.writeline (tab + \"\\tobject zxf = {0}.{1};\", showname, name);",
  "assert fail ex gettype fullname",
  0
 ],
 [
  "if (values.count < 3) return ruleresult.success;\t#if debug log.writeline (this);\tlog.writeline (this, \"------------------------------------\");\tlog.writeline (this, type);\t#endif int numflags = 0;\tint nummasks = 0;\tforeach (ulong value in values) {\tif (ispoweroftwo (value)) ++numflags;\telse if (isbitmask (value)) ++nummasks;\t}",
  "numflags",
  0
 ],
 [
  "public override void applicationdomainunloaded (ulong threadid,uint id,  ulong startcounter, ulong endcounter, string name) {",
  "applicationdomainunloaded",
  0
 ],
 [
  "public static void main(string[] args) {",
  "this works",
  0
 ],
 [
  "if (s17.f6 != 6+9) {\treturn 6;\t}\tif (s17.f7 != 7+9) {\treturn 7;\t}\tif (s17.f8 != 8+9) {\treturn 8;\t}\tif (s17.f9 != 9+9) {",
  "then",
  1
 ],
 [
  "public int read16() {\tstring filename = path.combine(testdata, \"common\", \"bug_62766.xml\");\ttry {\treloadsource(filename);\twhile (datareader.read()) ;\tif (isxmltextreader()) return test_pass;\telse {",
  "accepted invalid entity",
  0
 ],
 [
  "}\toutput.writeline();\tif (!c.isinterface && (e.attributes & memberattributes.scopemask) != memberattributes.abstract) {\tindent++;\tif (e.hasget) {\tif (!iscurrentinterface) {\tindent++;\tgeneratevbstatements(e.getstatements);\te.name = propname;\tindent--;",
  "null reference exception caught",
  1
 ],
 [
  "public static void main (string[] args) {\tif (args.length != 1) {",
  "assert areequal scan",
  1
 ],
 [
  "public static int main () {\tfillsingle ();\tfilldouble ();\tfillobject ();\tfilldoubleobject ();\tif (testsingle () != 0) return 1;\tif (testdouble () != 0) return 2;\tif (testobjectsingle () != 0) return 3;\tif (testobjectdouble () != 0) return 4;",
  "test passes",
  0
 ],
 [
  "}\tcatch (argumentexception ae) {\t}\tif (!runonlydatarecordtest) {\ttry {\tparam.value = new tvprestartablereader(createlistofrecords(tvpperm, basevalues));\texecuteandverify(cmd, tvpperm, basevalues, null);\t}\tcatch (argumentexception ae) {\t}",
  "casts",
  1
 ],
 [
  "public static int mainmethod(string[] args) {\tdynamic d = new derived();\tint s = +d;\tif (s == short.maxvalue) return 0;",
  "failed",
  0
 ],
 [
  "private void attributeidentityconstraints(string name, string ns, object obj, string sobj, schemaattdef attdef) {\tfor (int ci = this.startidconstraint; ci < this.validationstack.length; ci ++) {\tif (((validationstate)(this.validationstack[ci])).constr == null) {\tcontinue;\t}\tconstraintstruct[] constraints = ((validationstate)this.validationstack[ci]).constr;\tfor (int i = 0; i < constraints.length; ++i) {\tfor (int j = 0; j < constraints[i].axisfields.count; ++j) {\tlocatedactiveaxis laxis = (locatedactiveaxis)constraints[i].axisfields[j];\tif (laxis.movetoattribute(name, ns)) {",
  "name uri value",
  0
 ],
 [
  "schemas.add (node.name, new htmlschema (node.name, node.fullname, node.completiondoctypename));\t}\t}\tif (!schemas.containskey (defaultdoctypename)) {\thtmlschema defaultsubstprovider = schemas[\"xhtml 1.0 transitional\"];\tixmlcompletionprovider provider;\tif (defaultsubstprovider != null) {\tloadschema (defaultsubstprovider, true);\tprovider = defaultsubstprovider.completionprovider;\t} else {",
  "completion schema for default html doctype not found",
  0
 ],
 [
  "_bodytext = bodytext;\t_maxvalue = maxvalue;\t_hasprogresstext = hasprogresstext;\t_final = final;\tif (controls.count > 0) {\t_done = false;\t_textbox.text = _bodytext;\t_progress.value = 0;\t_progress.maximum = _maxvalue;\tif (_label != null) _label.text = \"\";",
  "using existing controls",
  0
 ],
 [
  "if (node == null) throw new argumentnullexception (\"node\");\tname = node.attributes [\"name\"].value;\tversion = node.attributes  [\"version\"].value;\txmlnode atts = node.firstchild;\tattributes = new xmlattributes ();\tif (atts.name == \"attributes\") {\tattributes.loaddata (atts);\tatts = atts.nextsibling;\t}\tif (atts == null || atts.name != \"namespaces\") {",
  "warning no namespaces found",
  0
 ],
 [
  "public int loadxsl(string _strxslfile, xslinputtype xslinputtype, readertype readertype, xmlresolver xr) {\t_strxslfile = fullfilepath(_strxslfile);\txslt = new xslcompiledtransform();\txmlreadersettings xrs = null;\tswitch (xslinputtype) {",
  "loading style sheet as uri",
  0
 ],
 [
  "a.legs= new legdto[] { new legdto() };\ta.notes= new notedto[] { new notedto() };\ta.payperiodevents= new payperiodeventdto[] { new payperiodeventdto() };\ta.payrollcategories= new payrollcategorydto[] { new payrollcategorydto() };\ta.payrolls= new payrolldto[] { new payrolldto() };\ta.performances= new performancedto[] { new performancedto() };\ta.positions= new positiondto[] { new positiondto() };\ta.reglatoryoperationtypes= new reglatoryoperationtypedto[] { new reglatoryoperationtypedto() };\ta.trips= new tripdto[] { new tripdto() };\ta.usersettings= new usersettingdto[] { new usersettingdto() };",
  "empty",
  1
 ],
 [
  "assert.true(interceptorcount > prelistnodefilescount);\tint prelistjobscount = interceptorcount;\tvar jobs = batchcli.joboperations.listjobs().tolist();\tassert.true(interceptorcount > prelistjobscount);\tint prelistpoolscount = interceptorcount;\tvar pools = batchcli.pooloperations.listpools().tolist();\tassert.true(interceptorcount > prelistpoolscount);\tprotocol.batchrequestmodificationintercepthandler yieldinjectioninterceptor = baserequest => {\tvar request = (jobgetbatchrequest)baserequest;\trequest.servicerequestfunc = (token) => { return request.restclient.job.getwithhttpmessagesasync(bug1959324jobid, request.options, cancellationtoken: token); };",
  "total assemblies",
  1
 ],
 [
  "public static extern int getversionex ([in, out] osversioninfo osvi);\t[dllimport (\"libtest\")]\tpublic static extern int buggetversionex (int a, int b, int c, int d, int e, int f, int g, int h, [in, out] osversioninfo osvi);\t[dllimport (\"libtest\", entrypoint=\"mygetversionex\")]\tpublic static extern int getversionex2 (ref osversioninfo2 osvi);\t}\tpublic class test {\tpublic static int main() {",
  "verifying default parityreplace byte with a parity errro on the last byte",
  1
 ],
 [
  "public static int main () {\tif (ctx == null) return 1;\tbool b = ctx != null;\tif (!b) return 2;\tif (s2 != null) return 3;\ts3 = new s3 ();\tdecimal d = s3.value == null;\tif (d != 1) return 4;",
  "hello world",
  1
 ],
 [
  "public static int main () {\tint total = 0;\tforeach (int i in getit (new int [] { 1, 2, 3})){\ttotal += i;\t}\tif (total != 6) return 1;\ttotal = 0;\tforeach (int i in getmulti (new int [,] { { 10, 20 }, { 30, 40}})){",
  "passwordinfo expirepasswordnow sending request",
  1
 ],
 [
  "tenthincache = batch.sequencetoken;\t}\t}\tassert.equal(numbatches / 2, messagecount);\tassert.notnull(tenthincache);\tcursor = qcache.getcachecursor(streamguid, tenthincache);\tmessagecount = 0;\twhile (cursor.movenext()) {\tmessagecount++;\t}",
  "on queue we received a total of message on stream",
  0
 ],
 [
  "public void testomjobspecandrelease() {\taction test = () => {\tstagingstorageaccount stagingcreds = testutilities.getstoragecredentialsfromenvironment();\tusing (batchclient client = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {\tstring jsid = \"jobprepandrelease-\" + /* \"om-static-c\" */ \"dynamic-\" + crafttimestring() + \"-\" + testutilities.getmyname();\ttry {\tprotocol.requestinterceptor increasetimeoutinterceptor = new protocol.requestinterceptor((x) => {",
  "inverse fan done",
  1
 ],
 [
  "if (s17.f4 != 4+9) {\treturn 4;\t}\tif (s17.f5 != 5+9) {\treturn 5;\t}\tif (s17.f6 != 6+9) {\treturn 6;\t}\tif (s17.f7 != 7+9) {",
  "nested got but expected",
  1
 ],
 [
  "return;\t}\tvar oldheapshot = heapshots[heapshots.count - 2];\tvar diffcounter = new list<tuple<long, int>> ();\tforeach (var classinfoid in newheapshot.classinfos.keys) {\tif (!oldheapshot.objectsperclasscounter.trygetvalue (classinfoid, out int oldcount)) oldcount = 0;\tif (!newheapshot.objectsperclasscounter.trygetvalue (classinfoid, out int newcount)) newcount = 0;\tif (newcount - oldcount != 0) diffcounter.add (tuple.create (classinfoid, newcount - oldcount));\t}\tforeach (var diff in diffcounter.orderbydescending (d => d.item2)) {",
  "verifying infinite readtimeout with readline",
  1
 ],
 [
  "public void failedtaskcanbereactivated() {\taction test = () => {\tusing (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {\tstring jobid = constants.defaultconvenienceprefix + testutilities.getmyname() + guid.newguid();\ttry {\tcloudjob cloudjob = batchcli.joboperations.createjob(jobid, new poolinformation());\tcloudjob.poolinformation = new poolinformation() { poolid = this.poolfixture.poolid };\tcloudjob.commit();\tconst string taskid = \"t1\";\tcloudtask tasktoadd = new cloudtask(taskid, \"cmd /c \\\"ping 127.0.0.1 -n 20 > nul && exit /b 3\\\"\");",
  "msbuild",
  1
 ],
 [
  "static void dumpsignedxml (signedxml s) {",
  "test",
  1
 ],
 [
  "public static void createxsltstylesheetwcopytestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<xsl:stylesheet version=\\\"1.0\\\" xmlns:xsl=\\\"http: tw.writeline(\"<xsl:template match=\\\"/\\\">\");\ttw.writeline(\"<xsl:copy-of select=\\\"/\\\" />\");",
  "addnew invoked",
  1
 ],
 [
  "private delegate void readmethoddelegate(serialport com, int buffersize);\t#region test cases [conditionalfact(nameof(hasoneserialport))]\tpublic void bytestoread_default() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "principalcollection containsnativetest clear pending",
  1
 ],
 [
  "public void testaddbracestofor() {\ttest<addbracescoderefactoringprovider>(@\"class testclass {\tvoid test() {",
  "retrieved",
  1
 ],
 [
  "xtr.close ();\t}\tforeach (fileinfo inst in di.getfiles (\"*.xml\")) {\ttry {\trelaxngvalidatingreader vr = new relaxngvalidatingreader (new xmltextreader (inst.fullname), p);\tif (skip_error) vr.invalidnodefound += relaxngvalidatingreader.ignoreerror;\twhile (!vr.eof) vr.read ();\tif (inst.name.indexof (\"i.\") >= 0 && !skip_error) console.writeline (\"incorrectly validated instance: \" + di.name + \"/\" + inst.name);\t} catch (relaxngexception ex) {\tstring path = di.name + \"/\" + inst.name;",
  "test",
  1
 ],
 [
  "public void testaddbracestoforeach() {\ttest<addbracescoderefactoringprovider>(@\"class testclass {\tvoid test() {",
  "hello",
  0
 ],
 [
  "protected void log(string text, params object[] args) {\tif (eventlog != null) {",
  "tdsparser",
  0
 ],
 [
  "var formatter = codeformatterservice.getformatter (desktopservice.getmimetypeforuri (path));\tif (formatter != null && mdproject != null) {\tformattedtext = formatter.formattext (mdproject.policies, text.tostring ());\t} else {\tformattedtext = text.tostring ();\t}\tvar textsource = new stringtextsource (formattedtext, text.encoding ?? system.text.encoding.utf8);\ttry {\ttextsource.writetextto (path);\t} catch (exception e) {",
  "exception while saving file to",
  0
 ],
 [
  "public static void testpersistsucurityinfo2() {\tconsole.writeline(\"\\ntestpersistsucurityinfo2 - persist security info=true\");\toracleconnection con = new oracleconnection(\"data source=palis;user id=scott;password=tiger;persist security info=true\");\tcon.open();",
  "thread running",
  1
 ],
 [
  "sw.writeline (@\"            <td><img src='media/pass.png' /></td>\");\t}\tif (failed_tests.count == 0) continue;\tsw.writeline (@\"        <tr id='el{0}' class='errorlist' style='display: none'>\", assembly);\tsw.writeline (@\"            <td colspan='4'>\");\tsw.writeline (@\"                <table cellpadding='2' cellspacing='0' width='100%'>\");\tint test_num = 0;\tforeach (failedtest ft in failed_tests.values) {\tsw.writeline (\"                    <tr onclick=\\\"toggle('as{0}ed{1}')\\\" onmouseover='highlight(this)' onmouseout='unhighlight(this)'>\", assembly, test_num);\tsw.writeline (@\"                        <td style='width: 17px'><img src='media/bullet.png' /></td>\");",
  "get clientcert aspx",
  1
 ],
 [
  "tw.writeline(\"<entity4 att1='xxx&lt;xxx&#65;xxx&#x43;xxxe1fooxxx'>xxx&gt;xxx&#66;xxx&#x44;xxxe1fooxxx</entity4>\");\ttw.writeline(\"<entity5>e1foo e3bzee </entity5>\");\ttw.writeline(\"<attribute1 />\");\ttw.writeline(\"<attribute2 a1='a1value' />\");\ttw.writeline(\"<attribute3 a1='a1value' a2='a2value' a3='a3value' />\");\ttw.writeline(\"<attribute4 a1='' />\");\ttw.writeline(string.format(\"<attribute5 crlf='x{0}x' cr='x{0}x' lf='x\\nx' ms='x     x' tab='x\\tx' />\", environment.newline));\ttw.writeline(\"<skip1 /><afterskip1 />\");\ttw.writeline(\"<skip2></skip2><afterskip2 />\");\ttw.writeline(\"<chars1>0123456789</chars1>\");",
  "edge count",
  1
 ],
 [
  "private void copydictionaryfromtypetoappropriateslotinderivedtype(typedesc basetype, typebuilderstate derivedtypestate) {\tvar basetypestate = basetype.getorcreatetypebuilderstate();\tif (basetypestate.hasdictionaryinvtable) {\truntimetypehandle basetypehandle = getruntimetypehandle(basetype);\tintptr dictionaryentry = basetypestate.halfbakeddictionary;\tif (dictionaryentry == intptr.zero) dictionaryentry = basetypehandle.getdictionary();\tdebug.assert(dictionaryentry != intptr.zero);\tint dictionaryslot = eetypecreator.getdictionaryslotinvtable(basetype);\tdebug.assert(dictionaryslot >= 0);\tderivedtypestate.halfbakedruntimetypehandle.setdictionary(dictionaryslot, dictionaryentry);",
  "setting basetype dictionary on type",
  0
 ],
 [
  "else if (usecontinuewhenany) {\tc1 = task.factory.continuewhenany(new task[] { t1 }, _ => { mres1.set(); mres2.wait(); }, cts.token, options, taskscheduler.default);\t}\telse {\tc1 = task.factory.continuewhenall(new task[] { t1 }, _ => { mres1.set(); mres2.wait(); }, cts.token, options, taskscheduler.default);\t}\tt1.start();\tmres1.wait();\tcts.cancel();\tmres2.set();",
  "about to wait on",
  0
 ],
 [
  "private static bool test2() {\tbyte a = 10;\tdynamic b = a;\t--b;\tif (b == 9) return true;",
  "exception not generated for null parameter name",
  1
 ],
 [
  "case callconversionoperation.opcode.signextend_x_bytes_from_localblock_y_pointer_z_to_offset_w_in_transition_block: {\tvoid* psrc = locals.getlocalblock(op.y).getrawmemorypointer()[op.z].topointer();\tvoid* pdst = locals.transitionblockptr + op.w;\tcallconverterthunk.signextend(psrc, pdst, op.x);\t#endif }\tbreak;\tcase callconversionoperation.opcode.zeroextend_x_bytes_from_localblock_y_pointer_z_to_offset_w_in_transition_block: {\tvoid* psrc = locals.getlocalblock(op.y).getrawmemorypointer()[op.z].topointer();\tvoid* pdst = locals.transitionblockptr + op.w;\tcallconverterthunk.zeroextend(psrc, pdst, op.x);",
  "readsubtree doesn t throw invalidop exception on attribute node type",
  1
 ],
 [
  "public void verifynametableadd(object objactual, string str, char[] ach, int offset, int length) {\tobject objexpected = null;\tif (nametablever == enametable_ver.verify_with_addstr) {\tobjexpected = datareader.nametable.add(ach, offset, length);\tcerror.compare(objactual, objexpected, \"verifynametablewaddstr\");\t}\telse if (nametablever == enametable_ver.verify_with_addchar) {\tobjexpected = datareader.nametable.add(str);",
  "invalid complextype attributes restriction",
  1
 ],
 [
  "public static void main (string[] args) {\tusing (var w = new streamwriter (console.openstandardoutput ())) {\tw.writeline ();\tw.writeline (\"public struct foostruct { public int i, j; public static bool operator == (foostruct f1, foostruct f2) { return f1.i == f2.i && f1.j == f2.j; } public static bool operator != (foostruct f1, foostruct f2) { return f1.i != f2.i || f1.j != f2.j; } public override bool equals (object obj) { return this == (foostruct)obj; } public override int gethashcode () { return 0; } }\");\tw.writeline (\"public struct foostruct2 { public long i; public static bool operator == (foostruct2 f1, foostruct2 f2) { return f1.i == f2.i; } public static bool operator != (foostruct2 f1, foostruct2 f2) { return f1.i != f2.i; } public override bool equals (object obj) { return this == (foostruct2)obj; } public override int gethashcode () { return 0; } }\");\tw.writeline (\"public struct foostruct3 { public bool i, j; public static bool operator == (foostruct3 f1, foostruct3 f2) { return f1.i == f2.i && f1.j == f2.j; } public static bool operator != (foostruct3 f1, foostruct3 f2) { return f1.i != f2.i || f1.j != f2.j; } public override bool equals (object obj) { return this == (foostruct3)obj; } public override int gethashcode () { return 0; } }\");",
  "resourceassembly is null",
  1
 ],
 [
  "static bool callsecondclassoperator() {\tint failcount = 0; verify.firstcalled = false;\tif ( (!(bool)(firstclassreturndynamicclass<int>.staticmethod() + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "once upon a time",
  1
 ],
 [
  "task cont = continuationmaker(task);\tmre.set();\ttry { task.wait(); }\tcatch (aggregateexception) { /*swallow(ouch)*/ }\ttry { cont.wait(); }\tcatch (aggregateexception ex) { if (ex.innerexceptions[0] is taskcanceledexception) cancel = true; }\tif (expect != ranvalue() || expect == cancel) {\tassert.true(false, string.format(\"runcontinuewithbase: >> failed: continuation didn't run or get canceled when expected: ran = {0}, cancel = {1}\", ranvalue(), cancel));\t}\t}",
  "renderbeforetag",
  1
 ],
 [
  "}\ttry {\tthread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();\t} finally {\t}\ttry {\t} catch(threadabortexception) {\tthread.resetabort();",
  "abort reset",
  0
 ],
 [
  "public override imessage invoke (imessage request) {\timethodcallmessage call = (imethodcallmessage)request;",
  "invoke",
  0
 ],
 [
  "public static void main(string[] args) {\tfor (int i = 0; i < mutexes.length; i++) {\tmutexes [i] = new mutex();\t}\tthread thread1 = new thread(() => {\tfor (int i = 0; i < 1; i++) {\tint idx = -1;\ttry {\tidx = waithandle.waitany (mutexes);",
  "thread iter i with mutex idx",
  0
 ],
 [
  "public void read_datareceivedbeforetimeout() {\tusing (serialport com1 = tcsupport.initfirstserialport()) using (serialport com2 = tcsupport.initsecondserialport(com1)) {\tbyte[] bytexmitbuffer = tcsupport.getrandombytes(512);\tbyte[] bytercvbuffer = new byte[bytexmitbuffer.length];\tasyncread asyncread = new asyncread(com1);\tvar asyncreadtask = new task(asyncread.read);",
  "error loading template for language",
  1
 ],
 [
  "public static int main () {\tint v = 1;\tobject foo = (v + a.a);\tobject foo2 = (1 + a.a);\tif (foo.gettype ().tostring () != \"x+a\"){\treturn 1;\t}\tif (foo2.gettype ().tostring () != \"x+a\"){",
  "trying to get all screens",
  1
 ],
 [
  "private void dochecktimeout() {\tif (--_timeoutcheckstoskip != 0) return;\t_timeoutcheckstoskip = timeoutcheckfrequency;\tint currentmillis = environment.tickcount;\tif (currentmillis < _timeoutoccursat) return;\tif (0 > _timeoutoccursat && 0 < currentmillis) return;\t#if debug if (runregex.debug) {\tdebug.writeline(\"\");",
  "promoting to container",
  1
 ],
 [
  "private static bool dynamicobjectdoesntimplementidisposable() {\tint failcount = 0;\tdynamic d = new c1();\ttry {\tusing (d) {",
  "test failed conversion result is incorrect",
  0
 ],
 [
  "b2.image = new imageview (gtk.stock.reverttosaved, iconsize.button);\tb2.clicked += delegate {\ttry {\tvar content = autosave.loadandremoveautosave (filename);\ttexteditor.grabfocus ();\tview.load (filename);\tview.replacecontent (filename, content.text, view.sourceencoding);\tview.workbenchwindow.document.reparsedocument ();\tview.isdirty = true;\t} catch (exception ex) {",
  "could not remove the autosave file",
  0
 ],
 [
  "public void trycatchfinally() {\ttry {\t}\tcatch (exception ex) {\tconsole.writeline(ex.message);\t}\tfinally {",
  "finally",
  0
 ],
 [
  "public virtual void dispose() {\tif (!_disposed) {",
  "principalsearcher dispose disposing",
  0
 ],
 [
  "if (compare (\"clear\", mask, ref stateindex, arguments, ref more_states)) {\tcontinue;\t}\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;\tif (with_result) {\tmtp.clear (out resulthint);",
  "pack",
  1
 ],
 [
  "public void testglobaldata () {\tassemblybuilder ab = genassembly ();\tstring resfile = path.combine (tempdir, \"res\");\tusing (streamwriter sw = new streamwriter (resfile)) {",
  "foo",
  0
 ],
 [
  "public static void resolvecallback(iasyncresult ar) {",
  "resolvecallback",
  0
 ],
 [
  "static async task executeasync () {\tvar t = thread.currentthread;",
  "started",
  0
 ],
 [
  "public void writeexceptions() {\tconsole.writeline();",
  "unhandled exceptions",
  0
 ],
 [
  "public bufferedgraphics allocate(intptr targetdc, rectangle targetrectangle) {\tif (shouldusetempmanager(targetrectangle)) {",
  "too big of buffer requested x allocating temp buffer manager",
  0
 ],
 [
  "if (startsentinel != null && startsentinel.next != endsentinel) {\tconsole.writeline(\"size == 0 but startsentinel.next != endsentinel\");\tretval = false;\t}\tif (endsentinel != null && endsentinel.prev != startsentinel) {\tconsole.writeline(\"size == 0 but endsentinel.prev != startsentinel\");\tretval = false;\t}\t}\tif (startsentinel == null) {",
  "insert values for all known types",
  1
 ],
 [
  "render (res, node, url);\tcurrenttab.history.appendhistory (new linkpagevisit (this, url));\treturn;\t}\t} catch (exception e){\tconsole.writeline(\"#########\");\tconsole.writeline(\"#########\");\tconsole.writeline(e);\t}\tconsole.error.writeline (\"+----------------------------------------------+\");",
  "maybe having a locator interface the short",
  0
 ],
 [
  "settings.validationeventhandler += new validationeventhandler(validationcallback);\tsettings.validationtype = validationtype.schema;\tsettings.schemas = set;\txmlreader reader = xmlreader.create(xmlfile, settings);\twhile (reader.read()) { }\tcerror.compare(bwarningcallback, false, \"warning count mismatch\");\tcerror.compare(berrorcallback, true, \"error count mismatch\");\tif (isimport == true) set.remove(((xmlschemaexternal)mainschema.includes[0]).schema);\txmlschema reparsedinclude = loadschema(include2, include1);\t((xmlschemaexternal)mainschema.includes[0]).schema = reparsedinclude;",
  "calling reprocess",
  0
 ],
 [
  "public int transform_arglist(string szxmlfile, outputtype outputtype, navtype navtype, bool errorcase) {\tszxmlfile = fullfilepath(szxmlfile);\tixpathnavigable xd = loadxml(szxmlfile, navtype);",
  "classendunload",
  1
 ],
 [
  "public fixture() {\ttry {\tsqlserverstorage = relationalstoragefortesting.setupinstance(adonetinvariants.invariantnamesqlserver, testdatabasename).getawaiter().getresult();\t}\tcatch (exception ex) {",
  "warning is not safe for this usage",
  1
 ],
 [
  "\"usage: git [--version] ... <command> [<args>]\", \"\", \"common options:\", { \"version\", \"show version info\", v => showversion = v != null }, { \"help\", \"show this message and exit\", v => showhelp = v != null }, \"\", \"these are common git commands used in various situations:\", \"\", \"start a working area (see also: git help tutorial)\", new command (\"clone\", \"clone a repository into a new directory\"), new command (\"init\",  \"create an empty git repository or reinitialize an existing one\"), new command (\"thisisaverylongcommandnameinordertoinducewrapping\", \"create an empty git repository or reinitialize an existing one. let's make this really long to cause a line wrap, shall we?\"), };\tvar expectedhelp = new stringwriter ();\texpectedhelp.writeline (\"\");\texpectedhelp.writeline (\"\");\texpectedhelp.writeline (\"\");\tassert.areequal (0, git.run (new [] { \"help\" }));\tassert.areequal (expectedhelp.tostring (), o.tostring ());\tvar expectedhelphelp    = new stringwriter ();\texpectedhelphelp.writeline ();\texpectedhelphelp.writeline ();",
  "test failed at call result",
  1
 ],
 [
  "}\tif (s2.f2 != 2+906) {\treturn 2;\t}\tfloat3 s3;\ts3.f1 = 1;\ts3.f2 = 2;\ts3.f3 = 3;\ts3 = mono_return_float3(s3, 906);\tif (s3.f1 != 1+906) {",
  "re setting include",
  1
 ],
 [
  "public static void printbinaryform(byte[] binaryform) {\tconsole.writeline();\tif (binaryform != null) {\tfor (int i = 0; i < binaryform.length; i++) {\tconsole.writeline(\"{0}\", binaryform[i]);\t}\tconsole.writeline();\t}",
  "orleans codegen generated file written outputfilename",
  1
 ],
 [
  "public void listnodeagentskus() {\taction test = () => {\tusing (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {\tvar nas = batchcli.pooloperations.listnodeagentskus().tolist();\tassert.true(nas.count > 0);\tforeach (nodeagentsku curnas in nas) {\tforeach (imagereference verifiedimagereference in curnas.verifiedimagereferences) {",
  "verifiedimagerefs offer",
  0
 ],
 [
  "static bool isgeneratedresourceclass(itypedefinition type) {\tvar generatedcodeattributetype = type.compilation.findtype(typeof(system.codedom.compiler.generatedcodeattribute));\tif (generatedcodeattributetype.kind == typekind.unknown) {",
  "could not find the class for system codedom compiler generatedcodeattribute",
  0
 ],
 [
  "public void read_datareceivedbeforetimeout() {\tusing (serialport com1 = tcsupport.initfirstserialport()) using (serialport com2 = tcsupport.initsecondserialport(com1)) {\tchar[] charxmitbuffer = tcsupport.getrandomchars(512, tcsupport.characteroptions.none);\tchar[] charrcvbuffer = new char[charxmitbuffer.length];\tasyncread asyncread = new asyncread(com1);\tvar asyncreadtask = new task(asyncread.read);",
  "collection cleared",
  1
 ],
 [
  "string a = args[i];\tif (a.startswith(\"-\") || a.startswith(\"/\")) {\tswitch (a.tolowerinvariant()) {\tcase \"/?\": case \"/help\": case \"-?\": case \"-help\": return false;\treturn false;\t}\t}\telse if (a.contains(\"=\")) {\tstring[] split = a.split('=');\tif (string.isnullorempty(split[1])) {",
  "bad command line arguments supplied",
  0
 ],
 [
  "public void onassembly (object sender, runnereventargs e) {\tforeach (moduledefinition module in e.currentassembly.modules) {\tif (lookforthreadmodelattribute (module.getalltypes ())) {",
  "assembly defines threadmodelattribute",
  0
 ],
 [
  "public static bool operator false (blah i) {",
  "overloaded false operator",
  0
 ],
 [
  "private static void list (string name, string gacdir) {",
  "test failed at conversion result",
  1
 ],
 [
  "retrievedkey = task.run(() => keyvaultclient.getkeyasync(vaultaddress, keyname, keyversion)).configureawait(false).getawaiter().getresult();\t}\telse {\tretrievedkey = task.run(() => keyvaultclient.getkeyasync(vaultaddress, keyname)).configureawait(false).getawaiter().getresult();\t}\t}\telse {\tvar keyid = (key != null) ? key.key.kid : inputvalidator.getkeyid();\tretrievedkey = task.run(() => keyvaultclient.getkeyasync(keyid)).configureawait(false).getawaiter().getresult();\t}",
  "retrived key",
  0
 ],
 [
  "public static void main() {\tappdomain domain = appdomain.currentdomain;\tdomain.unhandledexception += new unhandledexceptioneventhandler(myhandler);\ttry {\ttry {\tthrow new exception();\t} finally {\t}\t} finally {\t}",
  "actual value",
  1
 ],
 [
  "filepath xsppath = cmd.targetruntime.gettoolpath (cmd.targetframework, xspname);\tif (xsppath.isnullorempty && cmd.clrversion == clrversion.net_1_1) xsppath = cmd.targetruntime.gettoolpath (cmd.targetframework, \"xsp\");\tif (xsppath.isnullorempty) {\tfilepath addinpath = typeof (aspnetexecutionhandler).assembly.location;\txsppath = addinpath.parentdirectory.combine (xspname + \".exe\");\t}\tif (file.exists (xsppath)) return xsppath;\tfilepath rootexe = system.reflection.assembly.getentryassembly ().location;\txsppath = rootexe.parentdirectory.combine (xspname + \".exe\");\tif (file.exists (xsppath)) return xsppath;",
  "one",
  1
 ],
 [
  "return false;\t}\t}\t}\tattnames.add(actname);\tattscopes.add(scope);\t}\tj++;\t}\tif (j != explen) {",
  "test failed at call result",
  1
 ],
 [
  "public static int main() {\ttestclass ts = new testclass ();\tts.conditionalmethod ();",
  "expected got",
  1
 ],
 [
  "public void basictest_accessinstanceproperties_noexceptions() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {",
  "did not retrieve a null value for non existent uri",
  1
 ],
 [
  "public static void usage (string message) {\tif (message != null) {\tconsole.writeline (\"{0}{1}{0}\", environment.newline, message);\t}",
  "usage",
  0
 ],
 [
  "static async task checkupdates (progressmonitor monitor, object[] handlers, bool automatic) {\tusing (monitor) {\tif (handlers.length == 0) return;\ttry {\tiupdatehandler uh = (iupdatehandler) handlers [handlers.length - 1];\tawait uh.checkupdates (monitor, automatic);\t} catch (exception ex) {",
  "updates check failed for handler of type",
  0
 ],
 [
  "for (int i = 1; i < 27; i++) {\tallocationsizes.add(8 * (1<<i) + 24);\t}\tconsole.writeline(findperfecthash(allocationsizes.toarray(), 32));\tallocationsizes.clear();\tallocationsizes.add(3 * 4 + 4);\tfor (int i = 64; i <= 1024 * 1024; i *= 2) {\tallocationsizes.add(12 * i);\t}\tconsole.writeline(findperfecthash(allocationsizes, 16));",
  "main",
  1
 ],
 [
  "public void ipinfotest_accessallipv4properties_noerrors() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {",
  "nic",
  0
 ],
 [
  "clob.write (bytes, 0, bytes.length);\tclob.close ();\toraclelob blob = reader.getoraclelob (1);\tbytes = new byte[6] { 0x31, 0x32, 0x33, 0x34, 0x35, 0x036 };\tblob.write (bytes, 0, bytes.length);\tblob.close ();\ttrans.commit ();\treadsimpletest(con, \"select * from mono_oracle_test\");\tstring varchar2_value = (string) readscalar (con,\"select max(varchar2_value) from mono_oracle_test\");\tdecimal number_whole_value = (decimal) readscalar (con,\"select max(number_whole_value) from mono_oracle_test\");",
  "read scalar number scaled value",
  0
 ],
 [
  "public void loadurl2(readertype readertype) {\ttry {\tloadxsl(szempty, xslinputtype.uri, readertype, new xmlurlresolver());\t}\tcatch (system.argumentexception) {\treturn;\t}",
  "exception not generated for an empty string filename",
  0
 ],
 [
  "public void suitefinished(testresult suiteresult) {\tif ( --level == 0) {\ttrace.writeline( \"############################################################################\" );\tif (messages.count == 0) {\t}\telse {",
  "f a i l u r e s",
  0
 ],
 [
  "private seqpointinfo getorcreateseqpointinfo (string aotid) {\tif (seqpointinfos.containskey (aotid)) return seqpointinfos[aotid];\tvar aotiddir = path.combine (msymdir, aotid);\tif (!directory.exists (aotiddir)) {",
  "unexpected exception message",
  1
 ],
 [
  "int results = 0;\tif(rdr == null) {\t}\telse {\tdo {\tdatatable dt = rdr.getschematable();\tif(rdr.recordsaffected != -1) {\t}\telse if(dt == null) console.writeline(\"result is from a sql command not (insert,update,delete).   records affected: \" + rdr.recordsaffected);\telse {",
  "result is from a select sql query records affected",
  0
 ],
 [
  "public static void initializelocalestore(string productcode, string productversion, string locale, string brandingpackage) {\tif (help3environment.islocalstoreinitialized) { return; }\tif (string.isnullorempty(productcode)) { throw new argumentnullexception(\"productcode\"); }\tif (string.isnullorempty(productversion)) { throw new argumentnullexception(\"productversion\"); }\tif (string.isnullorempty(locale)) { throw new argumentnullexception(\"locale\"); }\tif (!regex.ismatch(productversion, @\"^\\d{3}$\", regexoptions.cultureinvariant | regexoptions.ignorecase)) { throw new argumentoutofrangeexception(\"productversion\"); }\tif (!regex.ismatch(locale, @\"^\\w{2}-\\w{2}\", regexoptions.cultureinvariant | regexoptions.ignorecase)) { throw new argumentoutofrangeexception(\"locale\"); }\tstring brandingswitch = (!string.isnullorempty(brandingpackage)) ? string.format(\"/brandingpackage \\\"{0}\\\"\", brandingpackage):\"\";\tstring arguments = string.format(\"/product {0} /version {1} /locale {2} /content \\\"{3}\\\" {4}\", productcode, productversion, locale, help3environment.buildlocalstorefolder, brandingswitch);",
  "helpviewer initializing local store with",
  0
 ],
 [
  "task join = null;\ttask wrapper = new task(() => {\ttask1 = task<int>.factory.startnew(() => {\tassert.equal(scheduler, taskscheduler.current);\tpause1.waitone();\treturn 1;\t});\ttask2 = task<int>.factory.startnew(() => {\tassert.equal(scheduler, taskscheduler.current);\tpause2.waitone();",
  "missing argument to repeat command line option",
  1
 ],
 [
  "public static void print(xmltypemapping tm) {",
  "typename",
  0
 ],
 [
  "public static int main (string[] args) {\tint c = 0;\ttry {\ttry {\tc = 0;\t}\tcatch (exception e) {",
  "exception",
  0
 ],
 [
  "protected static string extensioncacheconverter(filterbase filter, string suggestedadproperty) {\tstringbuilder query = new stringbuilder();\tif (filter.value != null) {\textensioncache ec = (extensioncache)filter.value;\tforeach (keyvaluepair<string, extensioncachevalue> kvp in ec.properties) {\ttype type = kvp.value.type == null ? kvp.value.value.gettype() : kvp.value.type;\tif (kvp.value.value is icollection) {",
  "expected true",
  1
 ],
 [
  "protected virtual void teardown () {\tint c = application.openforms.count;\tif (c > 0) {",
  "hey you created form s and you didn t dispose of them",
  0
 ],
 [
  "static int f (int a) {",
  "test f from delegate",
  0
 ],
 [
  "cmd.connection.open();\tobject obj = cmd.executescalar();\t#endif string dbserver = environment.getenvironmentvariable(\"dblinqserver\") ?? \"localhost\";\tstring connstr = string.format(\"server={0};user id={1}; password={2}; database={3}\" , dbserver, \"linquser\", \"linq2\", \"northwind\");\tnorthwind db = new northwind(new mysqlconnection(connstr));\t#if use_stored_procs int is2;\tobject xx = db.sp_selorders(\"zz\", out is2);\tstring reply0 = db.hello0();\tstring reply1 = db.hello1(\"pigafetta\");\t#endif #if use_alltypes #endif console.clear();",
  "from p in db products orderby p productname select p",
  0
 ],
 [
  "private static bool callsecondclassinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturndynamicclass<int>();\tif ((!(bool)(s.instanceproperty.instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "lastsymbolid",
  1
 ],
 [
  "public void loadurlresolver3(inputtype inputtype, readertype readertype) {\ttry {\tloadxsl_resolver(null, new xmlurlresolver(), inputtype, readertype);\t}\tcatch (system.argumentexception) {\treturn;\t}",
  "did not throw an exception for null argument",
  0
 ],
 [
  "public e (e e) : base (10) {",
  "e",
  0
 ],
 [
  "}\telse if (argpos == 1) {\tsiloname = a;\targpos++;\t}\telse if (argpos == 2) {\tconfigfilename = a;\targpos++;\t}\telse {",
  "too many command line arguments supplied",
  0
 ],
 [
  "static private void help () {\tconsole.writeline ();",
  "c add del put certificates",
  0
 ],
 [
  "public static void main (string[] args) {\tfoo f = new foo();\tbar b = new bar();",
  "b equals b ok",
  0
 ],
 [
  "this.expectedresult = expectedresult;\tstring [] configurationflags = configuration.split (',');\tforeach (string configurationflag in configurationflags) {\tstring [] components = configurationflag.split (':');\tif (components.length == 2) {\tswitch (components [0]) {\tcase \"use20\": use20runtime = parseargumentvalue (components [1]);\tbreak;\tcase \"rcil\": rootconfigurationislegacy = parseargumentvalue (components [1]);\tbreak;",
  "even pools",
  1
 ],
 [
  "public int xmlexceptionandxmltextreaderlinenumbershouldbesameafterexceptionisthrown() {\tstring filename = path.combine(testdata, \"common\", \"invalid-ucs4.xml\");\tif (!iscustomreader()) {\ttry {\treloadsource(filename);\twhile (datareader.read()) ;\treturn test_fail;\t}\tcatch (xmlexception e) {\tcerror.writeline(e.message);",
  "rewrites all occurences of string keys with their values from string resource file",
  1
 ],
 [
  "private static void addlistenercomponent(eventloginternal component, string compmachinename, string complogname) {\tlock (internalsyncobject) {",
  "eventlog addlistenercomponent",
  0
 ],
 [
  "private void utf32encoding() {",
  "verifying write method with",
  1
 ],
 [
  "public static void usage (string message) {\tif (message != null) {\tconsole.writeline (\"{0}{1}{0}\", environment.newline, message);\t}",
  "open file",
  1
 ],
 [
  "public void consistentringprovider_test1() {\tsiloaddress silo1 = siloaddressutils.newlocalsiloaddress(0);\tconsistentringprovider ring = new consistentringprovider(silo1, nullloggerfactory.instance);\tring.addserver(siloaddressutils.newlocalsiloaddress(1));",
  "thread c sleeping for",
  1
 ],
 [
  "public void addcreator(toolboxitemcreatorcallback creator, string format, idesignerhost host) {",
  "defaulttoolboxservice addcreator",
  0
 ],
 [
  "private void emitwriteprimitivearray(string typename) {\topenscope($\"public static void write(this nativewriter writer, {typename}[] values)\");\twriteline(\"if (values == null)\");\twriteline(\"{\");",
  "world",
  1
 ],
 [
  "public void parity_odd_afteropen() {",
  "verifying odd parity after open",
  0
 ],
 [
  "public static void printbinaryform(byte[] binaryform) {\tconsole.writeline();\tif (binaryform != null) {",
  "debug mode message",
  1
 ],
 [
  "return 1;\t}\tif (extra.count > 0) {\treturn 1;\t}\tif (target == null || complist == null){\treturn 1;\t}\ttry {\tif (!file.exists(complist)) {",
  "could not find file",
  0
 ],
 [
  "public void getparam16() {\tm_xsltarg = new xsltargumentlist();\tint i = 0;\tm_xsltarg.addparam(\"myarg1\", szempty, \"test16\");\tfor (i = 0; i < 200; i++) {\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);\tif (retobj.tostring() != \"test16\") {",
  "added value retrieved value",
  0
 ],
 [
  "static bool callsecondstructoperator() {\tint failcount = 0; verify.firstcalled = false;\tif ( (!(bool)(firstclassreturndynamicstruct<int>.staticmethod() + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  1
 ],
 [
  "if (s12.f8 != 8+9) {\treturn 8;\t}\tif (s12.f9 != 9+9) {\treturn 9;\t}\tif (s12.f10 != 10+9) {\treturn 10;\t}\tif (s12.f11 != 11+9) {",
  "got but expected",
  0
 ],
 [
  "writer.writeline(writer.getreturnstatement(storage));\t}\tusing (writer.writepropertyset()) {\tvar entitymember = writer.getmemberexpression(parent.storage, \"entity\");\tusing (writer.writeif(writer.getdifferentexpression(writer.getpropertysetvalueexpression(), entitymember))) {\tvar otherassociation = schema.getreverseassociation(parent);\tusing (writer.writeif(writer.getdifferentexpression(entitymember, writer.getnullexpression()))) {\tvar previousentityrefname = \"previous\" + parent.type;\twriter.writeline(writer.getstatement( writer.getvariabledeclarationinitialization(parent.type, previousentityrefname, entitymember) ));\twriter.writeline(writer.getstatement( writer.getassignmentexpression(entitymember, writer.getnullexpression()) ));",
  "remove",
  0
 ],
 [
  "public unusedresourcekeysviewcontent(icollection<resourceitem> unusedkeys) {",
  "resourcetoolkit creating new unusedresourcekeysviewcontent",
  0
 ],
 [
  "}\tstring otherfilename = path.getfilename(other.filename);\tparentdirectory.copyfilehere(other, effect == dragdropeffects.move);\tother = parentdirectory.allnodes.oftype<filenode>().singleordefault(n => fileutility.isequalfilename(path.getfilename(n.filename), otherfilename));\t}\tif (other != null) {\tother.remove();\t((fileprojectitem)other.projectitem).dependentupon = path.getfilename(this.filename);\tother.filenodestatus = filenodestatus.behindfile;\tother.insertsorted(this);",
  "async func from delegate",
  1
 ],
 [
  "public void performsearchindexcreation () {\tfiresearchindexcreationevent (true);\ttry {\troottree.makesearchindex ();\t} catch (exception e) {\t}\ttry {\troottree.makeindex ();\t} catch (exception e) {",
  "error making normal index",
  0
 ],
 [
  "isequenced<int> inner = new treeset<int>();\tinner.add(i); inner.add(i+1);\touter.add(inner);\t}\tipersistentsorted<int> inner1 = new treeset<int>(), inner2 = new treeset<int>(), inner3 = new treeset<int>();\tinner1.addall<int>(new int[] { 2, 3, 5, 7, 11 });\tinner2.addall(inner1); inner2.add(13);\tinner3.addall(inner1);\touter.add(inner1.snapshot());\tinner1.add(13);",
  "outer count",
  0
 ],
 [
  "dump (writer, df.monthnames, \"monthnames\");\tdump (writer, df.shortestdaynames, \"shortestdaynames\");\tvar ti = c.textinfo;\tvar nf = c.numberformat;\tdump (writer, nf.currencygroupsizes, \"currencygroupsizes\");\tdump (writer, nf.nativedigits, \"nativedigits\");\tdump (writer, nf.numbergroupsizes, \"numbergroupsizes\");\tdump (writer, nf.percentgroupsizes, \"percentgroupsizes\");\tif (!c.isneutralculture) {\tvar ri = new regioninfo (c.lcid);",
  "interrupted",
  1
 ],
 [
  "rsa = new rsacryptoserviceprovider (csp);\tif (! resign (filename, rsa, quiet)) return 1;\tbreak;\tcase \"-t\": sn = new strongname (readfromfile (args [i]));\tbreak;\tcase \"-tp\": sn = new strongname (readfromfile (args [i]));\tbreak;\tcase \"-t\": an = assemblyname.getassemblyname (args [i++]);\tbyte [] pkt = an.getpublickeytoken ();\tif (pkt == null) {",
  "head body",
  1
 ],
 [
  "static bool changepermissionset (string[] args, ref int i) {\tstring xmlfile = args [++i];\tpermissionset ps = loadpermissions (xmlfile);\tif (ps == null) return false;\tbool confirmed = false;\tstring psname = args [++i];\tforeach (policylevel pl in levels) {\tif (pl.getnamedpermissionset (psname) == null) {",
  "couldn t find permission set in policy",
  0
 ],
 [
  "public bool checkvalidationresult (servicepoint sp, x509certificate certificate, webrequest request, int error) {\tif (error != 0) {\tconsole.writeline (certificate.tostring (true));",
  "else",
  1
 ],
 [
  "public override void visitspan(span span) {",
  "span gettype",
  0
 ],
 [
  "public static void assertisbatchexceptionandhascorrectazureerrorcode(exception ex, string correctcode, itestoutputhelper outputhelper) {\texception theoneinner = ex;\tif (ex is aggregateexception) {\taggregateexception ae = (aggregateexception)ex;\tassert.equal<int>(1, ae.innerexceptions.count);\ttheoneinner = ae.innerexceptions[0];\t}\tif (!(theoneinner is microsoft.azure.batch.common.batchexception)) {",
  "grainplacementtests constructor",
  1
 ],
 [
  "}\tmapindexes = codepointindexer.compressarray (mapindexes, typeof (ushort), nutil.composite) as ushort [];\tcout.writeline (\"static const guint16 mapidxtocomposite [] = {\");\tcsout.writeline (\"static ushort [] mapidxtocompositearr = new ushort [] {\");\tfor (int i = 0; i < mapindexes.length; i++) {\tushort value = (ushort) mapindexes [i];\tif (value < 10) csout.write (\"{0},\", value);\telse csout.write (\"0x{0:x04},\", value);\tcout.write (\"{0},\", value);\tif (i % 16 == 15) {",
  "cout writeline",
  0
 ],
 [
  "static void change_question_answer (string username, string pwd, string question, string answer) {",
  "orleansazureweb run",
  1
 ],
 [
  "static void testnonqueryusingexecutereader(oracleconnection con) {\toracledatareader reader = null;\toracletransaction trans = null;",
  "drop table mono adapter test",
  0
 ],
 [
  "jobspecification jobspec = curwi.jobspecification;\tif (null == jobspec) {\t}\telse {\ttestoutputhelper.writeline(\"\");\tjobconstraints jobcon = jobspec.constraints;\tif (null == jobcon) {\t}\telse {\ttestoutputhelper.writeline(\"\");",
  "end externalsource",
  1
 ],
 [
  "public dummy initobj (label pc, typenode type, source ptr, textwriter data) {",
  "initobj",
  0
 ],
 [
  "public static void createxmlspacetestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));",
  "persona dromio of ephesus persona",
  0
 ],
 [
  "private static bool callsecondclassoperator() {\tint failcount = 0;\tverify.firstcalled = false;\tdynamic d = new firstclassreturnclass<int>();\tif ((!(((secondclass<int>)d.instancemethod()) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public static int main() {\ttype t = typeof (system.console);\ttype[] p= {typeof(string)};\tmethodinfo m = t.getmethod (\"writeline\", p);\tif (typeof(void) != m.returntype) {",
  "type mismatch",
  0
 ],
 [
  "if(locations.isdefault) {\treturn;\t}\tforeach (var loc in locations) {\tswitch (loc) {\tbreak;\tbreak;\tbreak;\tbreak;\tbreak;",
  "nested got but expected",
  1
 ],
 [
  "public virtual void dispose() {\tif (!_disposed) {\tif ((this.underlyingobject != null) && (this.underlyingobject is idisposable)) {",
  "principal dispose disposing underlying object",
  0
 ],
 [
  "public static int main (string[] args) {\ttry {\tif (args.length != 1) {\treturn 1;\t}\tstring charset = args[0];\tencoding encoding;\ttry {\tencoding = encoding.getencoding(charset);\t} catch (notsupportedexception e) {",
  "handled",
  1
 ],
 [
  "addassembly (a);\treturn;\t} catch (filenotfoundexception ff) {\ttotal_log += ff.fusionlog;\tcontinue;\t}\t}\t} catch (badimageformatexception f) {\t} catch (fileloadexception f){\t} catch (argumentnullexception){",
  "cannot load assembly null argument",
  0
 ],
 [
  "break;\t}\t}\telse if (argpos == 0) {\tlong id = 0;\tok = !string.isnullorwhitespace(a) && long.tryparse(a, out id);\tthis.userid = id;\targpos++;\t}\telse {",
  "error unknown command line argument",
  0
 ],
 [
  "private void dumpproparray (int [] array, int count, bool getcp) {\tif (array.length < count) throw new argumentoutofrangeexception (\"count\");\tfor (int i = 0; i < count; i++) {\tuint value = (uint) array [i];\tif (value < 10) csout.write (\"{0}, \", value);\telse csout.write (\"0x{0:x}, \", value);\tcout.write (\"{0},\", value);\tif (i % 16 == 15) {\tint l = getcp ? nutil.propcp (i) : i;",
  "cout writeline",
  0
 ],
 [
  "public void printusage() {\tusing (stringwriter usagestr = new stringwriter()) {",
  "inputs",
  1
 ],
 [
  "static void async_callback (iasyncresult ar) {",
  "async callback",
  0
 ],
 [
  "protected override xslflags visitcalltemplate(xslnode node) {\txslflags result = xslflags.none;\ttemplate target;\tif (!_compiler.namedtemplates.trygetvalue(node.name, out target)) {",
  "unknown template error",
  0
 ],
 [
  "continue;\t}\tconstraintstruct[] constraintstructures = ((validationstate)_validationstack[i]).constr;\tfor (int j = 0; j < constraintstructures.length; ++j) {\tif (constraintstructures[j].axisselector.movetostartelement(localname, namespaceuri)) {\tconstraintstructures[j].axisselector.pushks(_positioninfo.linenumber, _positioninfo.lineposition);\t}\tfor (int k = 0; k < constraintstructures[j].axisfields.count; ++k) {\tlocatedactiveaxis laxis = (locatedactiveaxis)constraintstructures[j].axisfields[k];\tif (laxis.movetostartelement(localname, namespaceuri)) {",
  "created pool",
  1
 ],
 [
  "public static void print(xmlmembermapping mm) {",
  "verifying default parityreplace byte with a parity errro on the last byte",
  1
 ],
 [
  "public override void help() {\tconsole.writeline();\tconsole.writeline();\tconsole.writeline();\tconsole.writeline();\tbase.help();\tconsole.writeline();",
  "options that take values may use an equal sign a colon",
  0
 ],
 [
  "static void main(string[] args) {",
  "hello world",
  0
 ],
 [
  "thread.setdata(namedslot, thr);\tstoredthr=(thread)thread.getdata(namedslot);\tlock(thr) {\tthread.sleep(1500);\t}\tlock(thr) {\tmonitor.wait(thr);\t}\tthread.sleep(10000);\tthread storedthr2=(thread)thread.getdata(slot);",
  "did not throw argumentnullexception",
  1
 ],
 [
  "static int main () {\tassembly ass = assembly.loadfrom (\"event-il.exe\");\ttype t = ass.gettype (\"t\");\teventinfo ev = t.getevent (\"mydo\");\tconsole.writeline (ev.getaddmethod ());\tmethodinfo[] others = ev.getothermethods ();\tfor (int i = 0; i < others.length; ++i) {\tconsole.writeline (others [i]);\t}\tif (others.length != 1) return 1;",
  "now with non public too",
  0
 ],
 [
  "public int getextnobject1(object args) {\tobject retobj;\tfor (int i = 1; i <= 100; i++) {\tretobj = xsltarg1.getextensionobject(((object[])args)[1].tostring());",
  "getextensionobject thread iteration value returned",
  0
 ],
 [
  "public void disassemble(methodbody body, methoddebugsymbols debugsymbols) {\tmethoddefinition method = body.method;",
  "test failed catch an unknown exception",
  1
 ],
 [
  "public type getunderlyingsearchertype() {",
  "file is",
  1
 ],
 [
  "string showmsg = null;\tvar optionset = new optionset {\t{ \"help\", \"show this help.\", v => showoptions = v != null }, { \"debug\", \"use mdb or pdb debug information (default=true).\", v => options.debug = v != null }, { \"level=\", \"instrumentation level, 0 - 4 (default=4).\", (int var) => options.level = var}, { \"writepdbfile\", \"write mdb or pdb file (default=true).\", v => options.writepdbfile = v != null }, { \"rewrite\", \"rewrite the assembly (default=true).\", v => options.rewrite = v != null }, { \"assembly=\", \"assembly to rewrite.\", v => options.assembly = v }, { \"breakintodebugger|break\", \"break into debugger on contract failure.\", v => options.breakintodebugger = v != null }, { \"throwonfailure|throw\", \"throw contractexception on contract failure.\", v => options.throwonfailure = v != null }, { \"output|out=\", \"output filename of rewritten file.\", v => options.outputfile = v }, };\ttry {\toptionset.parse (args);\t} catch (optionexception e) {\tshowoptions = true;\tshowmsg = e.message;\t}\tif (showoptions) {",
  "ccrewrite",
  0
 ],
 [
  "public void testaddbracestousing() {\ttest<addbracescoderefactoringprovider>(@\"class testclass {\tvoid test() {\t$using (var a = new a ()) console.writeline(\"\"hello\"\");\t}\t}\", @\"class testclass {\tvoid test() {\tusing (var a = new a ()) {",
  "policy load failed",
  1
 ],
 [
  "continue;\t}\tconstraintstruct[] constraints = ((validationstate)_validationstack[i]).constr;\tfor (int j = 0; j < constraints.length; ++j) {\tif (constraints[j].axisselector.movetostartelement(reader.localname, reader.namespaceuri)) {\tconstraints[j].axisselector.pushks(positioninfo.linenumber, positioninfo.lineposition);\t}\tfor (int k = 0; k < constraints[j].axisfields.count; ++k) {\tlocatedactiveaxis laxis = (locatedactiveaxis)constraints[j].axisfields[k];\tif (laxis.movetostartelement(reader.localname, reader.namespaceuri)) {",
  "element field match",
  0
 ],
 [
  "m_xsltarg = new xsltargumentlist();\tm_xsltarg.addextensionobject(szdefaultns, obj);\tif ((loadxsl(\"myobject_notfound.xsl\", xslinputtype, readertype) == 1)) {\ttry {\ttransform_arglist(\"fruits.xml\", outputtype, navtype, true);\t}\tcatch (system.xml.xsl.xsltexception) {\treturn;\t}\t}",
  "exception not thrown for method not found",
  0
 ],
 [
  "_currentforeignprincipal = unknownprincipal;\t_foreignmemberstoreturn.removeat(0);\treturn true;\t}\t_foreignmemberstoreturn.removeat(0);\tneedtoretry = true;\tcontinue;\t}\tsidtype sidtype = utils.classifysid(foreignsid.psid);\tif (sidtype == sidtype.realobjectfakedomain) {",
  "x",
  1
 ],
 [
  "public static void main (string[] args) {\tfoo f = new foo();\tbar b = new bar();",
  "incomingunknownprotocolpackets",
  1
 ],
 [
  "private void writeservicepoint (string label, servicepoint sp) {\tconsole.writeline (\"\\n\" + label);",
  "supportspipelining",
  0
 ],
 [
  "class testclass {\t[methodimpl (methodimploptions.synchronized)]\tvoid testmethod () {\t}\t}\";\tvar output = @\" using system.runtime.compilerservices;\tclass testclass {\tobject locker = new object ();\tvoid testmethod () {\tlock (locker) {",
  "foo",
  0
 ],
 [
  "private bool verifyinvalidreadbase64(int ibuffersize, int iindex, int icount, type exceptiontype) {\tbool bpassed = false;\tbyte[] buffer = new byte[ibuffersize];\treloadsource(ereader_type.base64_test);\tdatareader.positiononelement(st_elem_name1);\tif (checkcanreadbinarycontent()) return true;\ttry {\tdatareader.readcontentasbase64(buffer, iindex, icount);\t}\tcatch (exception e) {",
  "expected exception",
  0
 ],
 [
  "private static bool datetimetypewithidentityconversioninassignment() {\tint failcount = 0;\tdatetime origin = datetime.now;\tdynamic d = origin;\tdatetime result = d;\tif (result != origin) {\tfailcount++;",
  "loading style sheet as xmlnodereader",
  1
 ],
 [
  "serportprop.setallpropertiestoopendefaults();\t}\tif (throwat.open == throwat) serportprop.setproperty(\"portname\", portname);\telse serportprop.setproperty(\"portname\", tcsupport.localmachineserialinfo.firstavailableportname);\ttry {\tcom.portname = portname;\tif (throwat.open == throwat) com.open();\tif (null != expectedexceptions && 0 < expectedexceptions.length) {\tfail(\"error!!! expected open() to throw \");\tfor (int i = 0; i < expectedexceptions.length; ++i) console.write(expectedexceptions[i] + \" \");",
  "and nothing was thrown",
  0
 ],
 [
  "thread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();\t} finally {\t}\ttry {\tthread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();\t} finally {",
  "threadabortexception finally",
  0
 ],
 [
  "public void var7() {\ttry {\t#pragma warning disable 0618 new xsltransform().transform((ixpathnavigable)null, (xsltargumentlist)null);\t#pragma warning restore 0618 }\tcatch (argumentnullexception) {\treturn;\t}\tcatch (exception e) {\t_output.writeline(e.tostring());",
  "did not throw argumentnullexception",
  0
 ],
 [
  "private void openforwrite(string currentmachinename) {\tif (this.boolflags[flag_disposed]) throw new objectdisposedexception(gettype().name);",
  "serverwriteiv",
  1
 ],
 [
  "writelineuni (\"}\");\twritelineuni (\"}\");\twriteline (\"\");\twritelineind (\"if (readmethods == null) {\");\twriteline (\"readmethods = new system.collections.hashtable ();\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twriteline (\"\");",
  "thread running",
  1
 ],
 [
  "task join = null;\ttask wrapper = new task(() => {\ttask1 = task.run(() => {\tassert.notequal(scheduler, taskscheduler.current);\ttask.delay(1);\tassert.notequal(scheduler, taskscheduler.current);\tpause1.waitone();\treturn 1;\t});\ttask2 = task.run(() => {",
  "task started",
  0
 ],
 [
  "public void addwebusernameandpassword (uri url, string username, string password) {\tvar didwrite = writecredential (url.host, username, password);\tif (didwrite) return;\tvar lasterror = (errorcode)marshal.getlastwin32error ();\tswitch (lasterror) {\tbreak;",
  "tried saving credentials but got invalid flags set on credential",
  0
 ],
 [
  "public static void assertiscoercion(unaryexpression u, string opname, type expected) {",
  "convert",
  0
 ],
 [
  "public void stop () {\tstopping = true;\ttry {\tif (communicationmanager != null) {\tcommunicationmanager.stopserver ();\tcommunicationmanager = null;\t}\t} catch (exception ex) {",
  "testplatformcommunicationmanager stop error",
  0
 ],
 [
  "public void pinchangedevent_break() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (serialport com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\tpinchangedeventhandler eventhandler = new pinchangedeventhandler(com1);\tcom1.pinchanged += eventhandler.handleevent;\tcom1.open();\tcom2.open();\tfor (int i = 0; i < num_trys; i++) {",
  "verifying when break set to true on remote port try",
  0
 ],
 [
  "processwrapper processwrapper;\tif (tool.useoutputpad) processwrapper = runtime.processservice.startprocess (commandtool, argumentstool, initialdirectorytool, progressmonitor.log, progressmonitor.log, null);\telse processwrapper = runtime.processservice.startprocess (commandtool, argumentstool, initialdirectorytool, null);\tstring processname = system.io.path.getfilename (commandtool);\ttry {\tprocessname = processwrapper.processname;\t} catch (systemexception) {\t}\tprocesswrapper.waitforoutput ();\tif (processwrapper.exitcode == 0) {",
  "process has completed succesfully",
  0
 ],
 [
  "if (data.remainder >= 1024) {\tdata.savedprogress += data.remainder / 1024;\tdata.remainder = data.remainder % 1024;\t}\tdata.kbytes = data.savedprogress + currentprogress / 1024;\tif (data.logtimer.enabled) return;\tdata.logtimer.interval = 1000;\tdata.logtimer.elapsed += delegate {\tdata.seconds += 1;\truntime.runinmainthread (() => {",
  "ifndef",
  1
 ],
 [
  "private static bool callsecondclassinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tif ((!(bool)(((dynamic)firstclassreturnclass<int>.staticmethod()).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "create stored function sf to test date parameters",
  1
 ],
 [
  "schemanamingcontext = (string)deroot.properties[\"schemanamingcontext\"].value;\t}\tusing (directoryentry descn = new directoryentry(\"ldap: {\tusing (directorysearcher dirsearcher = new directorysearcher(descn)) {\tdirsearcher.filter = \"(&(objectclass=classschema)(systemauxiliaryclass=\" + auxclassname + \"))\";\tdirsearcher.propertiestoload.add(\"ldapdisplayname\");\tlist<string> objectclasses = new list<string>();\tusing (searchresultcollection searchrescollection = dirsearcher.findall()) {\tforeach (searchresult res in searchrescollection) {\tif (null == res.properties[\"ldapdisplayname\"]) {",
  "adamstorectx populatauxobjectlist unable to read ldapdisplayname from",
  0
 ],
 [
  "if (element.issoap) {\tif (!haswrapperelement && !writeaccessors) {\twriter.write(\"if (plength > \");\twriter.write(mapping.members.length.tostring(cultureinfo.invariantculture));\twriter.writeline(\") {\");\twriter.indent++;\twriteextramembers(mapping.members.length.tostring(cultureinfo.invariantculture), \"plength\");\twriter.indent--;\twriter.writeline(\"}\");\t}",
  "failed to load style sheet",
  1
 ],
 [
  "if (!string.isnullorempty (inputfile)) {\tforeach (string l in file.readalllines (inputfile)) {\tfor (int r = 0; r < repeat; ++r) tests.add (l);\t}\t} else {\tfor (int j = i; j < args.length; ++j) if (!disabled.containskey (args [j])) {\tfor (int r = 0; r < repeat; ++r) tests.add (args [j]);\t}\t}\tif (!tests.any ()) {",
  "failed silent success",
  1
 ],
 [
  "private static void teststruct() {",
  "testing structs",
  0
 ],
 [
  "internal type figureoutclass() {\t_interfaces = new arraylist();\tintptr unkptr = marshal.getiunknownforobject(_obj);\tmarshal.addref(unkptr);\tforeach (cominterfaceinfo intinfo in _typelib.interfaces) {\tguid tempguid = intinfo._guid;\tintptr implptr;\tmarshal.queryinterface(unkptr, ref tempguid, out implptr);\tif (implptr != intptr.zero) {\tif (traceutil.if(this, tracelevel.info)) {",
  "designerloader write called",
  1
 ],
 [
  "public static void printunhandledexception (string caller, object sender, unhandledexceptioneventargs e) {\texception ex = (exception)e.exceptionobject;",
  "isterminating is set to",
  0
 ],
 [
  "public int loadxsl_resolver(string _strxslfile, xslinputtype xslinputtype, readertype readertype, xmlresolver xr) {\t_strxslfile = fullfilepath(_strxslfile);\txslt = new xslcompiledtransform();\txmlreadersettings xrs = null;\tswitch (xslinputtype) {\txslt.load(_strxslfile, xsltsettings.trustedxslt, xr);\tbreak;\tcase xslinputtype.reader: switch (readertype) {\tcase readertype.xmltextreader: xmltextreader trtemp = new xmltextreader(_strxslfile);\ttry {",
  "loading style sheet as xmltextreader",
  0
 ],
 [
  "}\tthrow;\t}\tbyte[] mac = null;\tif (this.context is clientcontext) {\tmac = this.context.read.cipher.computeserverrecordmac(contenttype, dcrfragment);\t}\telse {\tmac = this.context.read.cipher.computeclientrecordmac (contenttype, dcrfragment);\t}",
  "getbytes received unexpected type",
  1
 ],
 [
  "try {\tw.writestartelement(\"root\");\tw.writestartattribute(\"attr1\");\tw.writestartattribute(\"attr1\");\t}\tcatch (xmlexception e) {\tcerror.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "var filename = path.getfilename(assembly);\tconsole.writeline(\"\\t{0} => {1}\", filename, assembly);\tif (filename != null && filename.equals(codegenerator.orleansassemblyfilename)) referencesorleans = true;\t}\tvar stopwatch = stopwatch.startnew();\tif (referencesorleans) {\tif (!codegenerator.generatecode(options)) {\t}\t}\telse {",
  "error orleans codegen the input assembly does not reference orleans and therefore code can not be generated",
  0
 ],
 [
  "string.empty, \"abc\", null }\t;\tobject[] objectvalues = new object[]\t{\tnull, 10, 10l, \"10\", myenum.first }\t;\tforeach (string a1 in stringvalues) {\tforeach (object a2 in objectvalues) {\tdynamic d2 = a2;\tif ((a1 + d2) != (a1 + a2)) {",
  "failed string object",
  0
 ],
 [
  "w.writestartelement(\"root\");\tw.writeattributestring(\"xmlns\", \"foo\", \"bar\", \"\");\tw.writeendelement();\t}\tcatch (argumentexception e) {\tcerror.writelineignore(e.tostring());\tcerror.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "assert areequal mtp true false",
  1
 ],
 [
  "await teststorage.dropdatabaseasync(testdatabasename);\t}\tawait teststorage.createdatabaseasync(testdatabasename);\tteststorage = teststorage.copyinstance(testdatabasename);\tvar setupscript = string.empty;\tforeach (var filename in teststorage.setupsqlscriptfilenames) {\tsetupscript += file.readalltext(filename);\tsetupscript += \"\\r\\n\";\t}\tawait teststorage.executesetupscript(setupscript, testdatabasename);",
  "initializing relational databases done",
  0
 ],
 [
  "if (s8.f1 != 1+906) {\treturn 1;\t}\tif (s8.f2 != 2+906) {\treturn 2;\t}\tif (s8.f3 != 3+906) {\treturn 3;\t}\tif (s8.f4 != 4+906) {",
  "got but expected",
  0
 ],
 [
  "int nameoffset = name.lastindexof(\"::\");\tif(nameoffset != -1) name = name.substring(nameoffset + 2);\tif(type.equals(\"method\")) {\tstring prefix = name.substring(0, 4);\tif(prefix.equals(\"get_\") || prefix.equals(\"set_\")) {\tname = name.substring(4);\ttype = \"property\";\t}\t}\tif(n == nullity.null) {",
  "null deref at",
  0
 ],
 [
  "if (str != \"list\") {\twhere = \"list - '\" + str + \"'\";\tclient.close ();\treturn;\t}\twriter.flush ();\tsocket data_cnc = data.accept ();\tbyte [] dontcare = encoding.ascii.getbytes (\"drwxr-xr-x    2 ftp      ftp          4096 oct 27 20:17 tests\");\tdata_cnc.send (dontcare, 1, socketflags.none);\tdata_cnc.close ();",
  "main start",
  1
 ],
 [
  "public override void setvalue(object component, object value) {\t#if debug if (propdescusageswitch.traceverbose) {\tstring compname = \"(null)\";\tstring valname  = \"(null)\";\tif (component != null) compname = component.tostring();\tif (value != null) valname = value.tostring();",
  "main reply locked",
  1
 ],
 [
  "try {\tif (intptr.size == 8) {\tthread.sleep(timeout.infinite);\t}\telse while (this.runthread);\t}\tcatch (threadabortexception) {\tthrow;\t}\tcatch {",
  "wde debugcontrollerthread expressionevaluationfunction other exception",
  0
 ],
 [
  "return 1;\t}\tshort2 s2;\ts2.f1 = 1;\ts2.f2 = 2;\ts2 = mono_return_short2(s2, 90);\tif (s2.f1 != 1+90) {\treturn 1;\t}\tif (s2.f2 != 2+90) {",
  "got but expected",
  0
 ],
 [
  "private static void accepttypedref(typedreference tr) {",
  "doctype root",
  1
 ],
 [
  "bool expectedresult = (bool)param4;\tbool actualresult = false;\txmlreader xmlreader = xmlreader.create(xmlfile);\tixpathnavigable navigator = null;\trandom randgenerator = new random(unchecked((int)datetime.now.ticks));\tswitch (randgenerator.next(2)) {\txmldocument xmldoc = new xmldocument();\txmldoc.load(xmlfile);\tnavigator = xmldoc.createnavigator();\tbreak;",
  "number of attributes differ expected number of attributes are actual number of attributes are",
  1
 ],
 [
  "public void at8_readguidfromvarbinary() {",
  "trackedcollectionenumerator entering movenext",
  1
 ],
 [
  "public void testunsafeclass () {\ttest<redundantunsafecontextissue>(@\" unsafe class foo {\tpublic static void main (string[] args) {",
  "hello",
  0
 ],
 [
  "private static bool callsecondclassinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tif ((!(bool)(firstclassreturndynamicclass.staticmethod().instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "failed to initialize orleans silo",
  1
 ],
 [
  "public static int main () {\tenum e = foo.bar;\ticonvertible convertible = (iconvertible) e;\ticomparable comparable = (icomparable) e;\tiformattable formattable = (iformattable) e;",
  "exception in ongettypedisplaydata",
  1
 ],
 [
  "if (retobj.tostring() != (obj + i)) {\t_output.writeline(\"{0} : {1}\", retobj, obj + i);\tassert.true(false);\t}\tm_xsltarg.clear();\t}\tfor (int i = 0; i < 200; i++) {\tm_xsltarg.addparam(\"myarg\" + i, szempty, obj + i);\tretobj = m_xsltarg.getparam(\"myarg\" + i, szempty);\tif (retobj.tostring() != (obj + i)) {",
  "failed in part to add remove iteration",
  0
 ],
 [
  "class testclass {\tpublic void testmethod(ienumerable<string> list) {\tif ($list.contains(\"\"bla\"\")) {\t}\t}\t}\", @\" using system;\tusing system.collections.generic;\tclass testclass {\tpublic void testmethod(ienumerable<string> list) {\tif ((list != null) && list.contains(\"\"bla\"\")) {",
  "pack",
  1
 ],
 [
  "static void oncatalogsupdated(eventargs e) {",
  "ok",
  1
 ],
 [
  "static void importtostore (x509certificatecollection roots, x509store store) {\tx509certificatecollection trusted = store.certificates;\tint additions = 0;\tforeach (x509certificate root in roots) {\tif (!trusted.contains (root)) {\ttry {\tstore.import (root);\tadditions++;\t} catch (exception e) {",
  "warning could not import",
  0
 ],
 [
  "public void showpad(paddescriptor content) {",
  "you passed in",
  1
 ],
 [
  "public void write (textwriter writer) {\twriter.newline = format.newline;\tfor (int n=0; n<prefixblanklines; n++) writer.writeline ();\twriter.writeline (\"# \" + productdescription);\tmetadata.write (writer);\tforeach (var p in projects) p.write (writer);\tforeach (slnsection s in sections) s.write (writer, \"globalsection\");",
  "i will add more useless code",
  1
 ],
 [
  "messagebar.setmessagelabel (brandingservice.brandapplicationname (gettextcatalog.getstring ( \"<b>an autosave file has been found for this file.</b>\\n\" + \"this could mean that another instance of monodevelop is editing this \" + \"file, or that monodevelop crashed with unsaved changes.\\n\\n\" + \"do you want to use the original file, or load from the autosave file?\")));\tbutton b1 = new button (gettextcatalog.getstring(\"_use original file\"));\tb1.image = new imageview (gtk.stock.refresh, iconsize.button);\tb1.clicked += delegate {\ttry {\tautosave.removeautosavefile (filename);\ttexteditor.grabfocus ();\tview.load (filename);\tview.workbenchwindow.document.reparsedocument ();\t} catch (exception ex) {",
  "i have detected an useless char",
  1
 ],
 [
  "private static bool callsecondclassinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturndynamicclass<int>();\tif ((!(bool)(s[1].instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "has successor",
  1
 ],
 [
  "}\tschedule sched = curwi.schedule;\tif (null == sched) {\t}\telse {\t}\tjobschedulestatistics stats = curwi.statistics;\tif (null == stats) {\t}\telse {",
  "external auth using persist security info",
  1
 ],
 [
  "public static void main (string[] args) {\tfoo f = new foo();\tbar b = new bar();\tb.test(f);",
  "f equals f ok",
  0
 ],
 [
  "public static int main () {\tint a = 1;\tif (a != 1) return 1;\tconsole.writeline (\"a is = \" + a);\ts b= delegate {",
  "adstorectx ismemberofinstore found member can t clear",
  1
 ],
 [
  "public void basictest_getipv4interfacestatistics_success() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipv4interfacestatistics stats = nic.getipv4statistics();",
  "transient",
  1
 ],
 [
  "static void main () {\twhile (true) {\ttry {",
  "trying",
  0
 ],
 [
  "public void taskfinishedhandler (taskfinishedeventargs args) {\tindent--;\tif (isverbositygreaterorequal (loggerverbosity.detailed) || (!args.succeeded && isverbositygreaterorequal (loggerverbosity.normal))) {\tsetcolor (eventcolor);",
  "the path can be absolute or relative to the registry path",
  1
 ],
 [
  "mres1.wait();\tcts.cancel();\tmres2.set();\ttry {\tc1.wait();\t}\tcatch (exception e) {\tassert.true(false, string.format(\"runlazycancellationtests: error. did not expect c1.wait() to throw an exception, got \" + e.tostring()));\t}\t}",
  "warning table has no primary key multiple c objects will refer to the same row",
  1
 ],
 [
  "public registerresponseinfo register (registerinfo registerinfo) {\tvar r = registerinfo;",
  "request register mesh client nodeaddress endpoint",
  0
 ],
 [
  "private static bool test2() {\tdynamic a = -10l;\tlong b = +(+a);\tif (b == -10) return true;",
  "failed long",
  0
 ],
 [
  "stringbuilder output = new stringbuilder();\twhile (bytes != 0) {\tbyte[] bbb = new byte[1024];\tbytes = datareader.readelementcontentasbase64(bbb, 0, bbb.length);\tfor (int i = 0; i < bytes; i++) {\tcerror.write(bbb[i].tostring());\toutput.appendformat(bbb[i].tostring());\t}\t}\tcerror.writeline();",
  "registercontext exception",
  1
 ],
 [
  "string tdir = fileservice.getfullpath (path.getdirectoryname (tfile));\tif (!directory.exists (tdir)) directory.createdirectory (tdir);\tfile.copy (file.sourcepath, tfile, true);\t}\tstring td = path.getdirectoryname (targetfile);\tif (!directory.exists (td)) directory.createdirectory (td);\tdeployservice.createarchive (monitor, tmpfolder, targetfile);\t}\tcatch (exception ex) {\tmonitor.reporterror (\"package creation failed\", ex);",
  "package creation failed",
  0
 ],
 [
  "private static void anotherthreadproc () {\toracleconnection[] connections = null;\tint maxcon = max_connections;\tint i = 0;\tconnections = new oracleconnection[maxcon];\tfor (i = 0; i < maxcon; i++) {\tconnections[i] = new oracleconnection(constr);\tconnections[i].open ();\t}",
  "done connection pooling test",
  0
 ],
 [
  "static void help (string details) {\tswitch (details) {\tbreak;\tbreak;",
  "datetime utcnow response",
  1
 ],
 [
  "if (s5.f1 != 1+9) {\treturn 1;\t}\tif (s5.f2 != 2+9) {\treturn 2;\t}\tif (s5.f3 != 3+9) {\treturn 3;\t}\tif (s5.f4 != 4+9) {",
  "the bundle dir argument is mandatory",
  1
 ],
 [
  "assert.areequal (test, uri.tostring (), \"tostring/\" + test);\t}\t}\t[test]\tpublic void unixlocalpath_wtf () {\tstring path = \"file: uri fileuri = new uri( path );\tassert.areequal (\"/tmp/foo/bar\", fileuri.absolutepath, path);\tstring path2 = \"file: fileuri = new uri (path2);\tassert.areequal (\"file: }\tpublic static void print (uri uri) {",
  "authority",
  0
 ],
 [
  "public void g09_unitpricegreaterthan10() {\tnorthwind db = base.createdb();\tvar pricequery = from prod in db.products group prod by new {\tcriterion = prod.unitprice > 10 }\tinto grouping select grouping;\tforeach (var prodobj in pricequery) {\tif (prodobj.key.criterion == false) console.writeline(\"prices 10 or less:\");",
  "orleans silo shutdown",
  1
 ],
 [
  "public void dodisplayvalue() {\tcolumndata[0] = _objinfo.getstringvalue();",
  "failed",
  1
 ],
 [
  "schemastream.position = 0;\tif (outputcode) metadata.convertcodesourcestreamtoassemblyfile (writtenfiles, outputassembly, strongnamefile);\telse {\tmetadata.convertschemastreamtocodesourcestream (wrappedproxy, outputdirectory, schemastream, writtenfiles, null, null);\tmetadata.convertcodesourcestreamtoassemblyfile (writtenfiles, outputassembly, strongnamefile);\tforeach (string file in writtenfiles) file.delete (file);\twrittenfiles.clear ();\t}\twrittenfiles.add (outputassembly);\t}",
  "written file",
  0
 ],
 [
  "if (s9.f6 != 6+9) {\treturn 6;\t}\tif (s9.f7 != 7+9) {\treturn 7;\t}\tif (s9.f8 != 8+9) {\treturn 8;\t}\tif (s9.f9 != 9+9) {",
  "got but expected",
  0
 ],
 [
  "public void validationcallback(object sender, validationeventargs args) {\tif (args.severity == xmlseveritytype.warning) {\tbwarningcallback = true;\twarningcount++;\twarninginnerexceptionset = (args.exception.innerexception != null);",
  "failed key vault operations",
  1
 ],
 [
  "public static void main() {",
  "loadfrompromary",
  1
 ],
 [
  "public delegate object delobj (object g, int i);\tpublic delegate object delstr (object g, int i);\tpublic static int work () {\tgen<string> gs = new gen<string> ();\tgen<object> go = new gen<object> ();\tmethodinfo miobj = typeof (gen<object>).getmethod (\"newarr\", bindingflags.public | bindingflags.instance);\tmethodinfo mistr = typeof (gen<string>).getmethod (\"newarr\", bindingflags.public | bindingflags.instance);\tif (miobj == mistr) {",
  "failed bool string string",
  1
 ],
 [
  "static void main(string[] args) {\tappdomain hostdomain = appdomain.createdomain(\"orleanshost\", null, new appdomainsetup {\tappdomaininitializer = initsilo, appdomaininitializerarguments = args, });",
  "verifying default discardnull with read byte int int",
  1
 ],
 [
  "if (desired_type.name.endswith(\"&\")) {\tstring fullname1 = desired_type.assemblyqualifiedname;\tstring fullname2 = fullname1.replace(\"&\", \"\");\tdesired_type = type.gettype(fullname2);\t}\ttry {\tobject val2 = typeconvert.to(val, desired_type);\toutparamvalues.add(val2);\t}\tcatch (exception ex) {",
  "principal dispose disposing underlying object",
  1
 ],
 [
  "private static void showhelp (bool detailed) {\tif (detailed) {\t}\twriteline ();\tif (detailed) {",
  "assembly list file is the path to a test file containing a list of assembly file paths on separate lines example il assembly list txt assembly list txt contents dll dll",
  0
 ],
 [
  "d.begininvoke (dispatcherpriority.normal, (action) delegate {\tif (next != 4) throw new exception (\"expected state 4, got \" + next.tostring ());\tnext = 5;\t});\td.begininvoke (dispatcherpriority.send, (action) delegate {\tif (next != 1) throw new exception (\"expected state 1, got \" + next.tostring ());\tnext = 2;\td.begininvoke (dispatcherpriority.send, (action) delegate {\tif (next != 2) throw new exception (\"expected state 2, got \" + next.tostring ());\tnext = 3;",
  "inserted",
  0
 ],
 [
  "static void guardfromeh0 () {\ttry {\tinnerfromeh0 ();\t} catch (exception e) {\tif (!(e is threadabortexception)) result |= 0x8;",
  "use the up down left and right arrow keys to move around when done press enter",
  1
 ],
 [
  "if (s14.f11 != 11+9) {\treturn 11;\t}\tif (s14.f12 != 12+9) {\treturn 12;\t}\tif (s14.f13 != 13+9) {\treturn 13;\t}\tif (s14.f14 != 14+9) {",
  "got but expected",
  0
 ],
 [
  "protected override void renderendform() {\tbase.renderendform();\tif (_requiresoptionsubmitcard) {\twrite(\"<card id=\\\"\");\twrite(_postbackcardprefix);\twrite(\"0\");\twrite(_optionsubmitcardindex++);\twriteline(\"\\\">\");\twrite(\"<onevent type=\\\"onenterforward\\\">\");\trendergoaction(null, _postbackeventargumentvarname, wmlpostfieldtype.variable, true);",
  "source code you can browse the latest source code https",
  1
 ],
 [
  "if (!found) {\treturn;\t}\tconnectionstring = sb.connectionstring;\t}\tpublic void run (string[] args) {\tdealwithargs (args);\tstring entry = \"\";\tbuild = null;\tif (silent == false) {",
  "for mono data see http startuphelp",
  0
 ],
 [
  "private static bool callsecondstructinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturnstruct<int>();\tif ((!(bool)(((dynamic)s.instanceproperty).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "partial class sr",
  1
 ],
 [
  "if (dict == null || string.isnullorempty(cachefilename)) {\treturn;\t}\ttry {\tint count;\tusing (filestream fs = new filestream(cachefilename, filemode.create, fileaccess.write)) {\tusing (binarywriter writer = new binarywriter(fs)) {\tcount = savecache(writer);\t}\t}",
  "saved codecompletiondatausagecache of items",
  0
 ],
 [
  "try {\tif (!prog.parsearguments(args)) {\tprog.printusage();\texitcode = -1;\t}\telse {\texitcode = prog.run();\t}\t}\tcatch (exception exc) {",
  "halting due to error exception",
  0
 ],
 [
  "public static void main (string[] argv) {\tforeach (string arg in argv) {",
  "out",
  0
 ],
 [
  "public static int main(){\tint i = 0;\ttry{\ttry {\tthrow new notimplementedexception();\t}\tfinally {\ti++;",
  "exception",
  1
 ],
 [
  "\"usage: git [--version] ... <command> [<args>]\", \"\", \"common options:\", { \"version\", \"show version info\", v => showversion = v != null }, { \"help\", \"show this message and exit\", v => showhelp = v != null }, \"\", \"these are common git commands used in various situations:\", \"\", \"start a working area (see also: git help tutorial)\", new command (\"clone\", \"clone a repository into a new directory\"), new command (\"init\",  \"create an empty git repository or reinitialize an existing one\"), new command (\"thisisaverylongcommandnameinordertoinducewrapping\", \"create an empty git repository or reinitialize an existing one. let's make this really long to cause a line wrap, shall we?\"), };\tvar expectedhelp = new stringwriter ();\texpectedhelp.writeline (\"\");\texpectedhelp.writeline (\"\");\texpectedhelp.writeline (\"\");\tassert.areequal (0, git.run (new [] { \"help\" }));\tassert.areequal (expectedhelp.tostring (), o.tostring ());\tvar expectedhelphelp    = new stringwriter ();\texpectedhelphelp.writeline ();\texpectedhelphelp.writeline ();",
  "help show this message and exit",
  0
 ],
 [
  "public void async_asyncexecutorwithretriestest_5() {\tint counter = 0;\tint lastiteration = 0;\tfunc<int, task<int>> myfunc = ((int funccounter) => {\tlastiteration = funccounter;\tassert.equal(counter, funccounter);\t++counter;\tthrow new argumentexception(counter.tostring(cultureinfo.invariantculture));\t});\tfunc<exception, int, bool> errorfilter = ((exception exc, int i) => {",
  "cannot generate assembly because it already exist use force option to overwrite the existing assembly",
  1
 ],
 [
  "public static void main (string[] args) {\tprintersettings.stringcollection col = system.drawing.printing.printersettings.installedprinters;\tfor (int i = 0; i < col.count; i++) {\tconsole.writeline (\"--- {0}\", col[i]);\tprintersettings ps = new printersettings ();\tps.printername = col[i];\tfor (int p = 0; p < ps.printerresolutions.count; p++) {\t}*/ for (int p = 0; p < ps.papersizes.count; p++) {",
  "test failed at call result",
  1
 ],
 [
  "public void testdisable() {\tvar input = baseinput + @\" try {\tf ();\t} catch {\tthrow;\t} finally {",
  "please select benchmark list of available",
  1
 ],
 [
  "public void discardnull_false_flase_default_readbyte() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "verifying default discardnull with readbyte",
  0
 ],
 [
  "static void writeheader(streamwriter html, string title) {",
  "computenode id state",
  1
 ],
 [
  "try {\tmonitor.begintask (gettextcatalog.getstring (\"rebasing\"), 5);\tif (!commonpremergerebase (options, monitor, out stashindex)) return;\tvar divergence = rootrepository.objectdatabase.calculatehistorydivergence (rootrepository.head.tip, rootrepository.branches [branch].tip);\tvar toapply = rootrepository.commits.queryby (new commitfilter {\tincludereachablefrom = rootrepository.head.tip, excludereachablefrom = divergence.commonancestor, sortby = commitsortstrategies.topological | commitsortstrategies.reverse }).toarray ();\trootrepository.reset (resetmode.hard, divergence.another);\tint count = toapply.length;\tint i = 1;\tforeach (var com in toapply) {",
  "cherry picking",
  0
 ],
 [
  "public static void blobtest (oracleconnection connection) {",
  "define has cross compiler offsets",
  1
 ],
 [
  "string ctype = isopen ? \"any\" : \"textonly\";\treturn isopen ? contentvalidator.any : contentvalidator.textonly;\t}\telse {\tdebug.assert(!isopen);\treturn contentvalidator.empty;\t}\t}\t#if debug stringbuilder bb = new stringbuilder();\tcontentnode.dump(bb, symbols, positions);",
  "passing null argument should have thrown argumentnullexception",
  1
 ],
 [
  "bytes = new byte[6] { 0x31, 0x32, 0x33, 0x34, 0x35, 0x036 };\tblob.write (bytes, 0, bytes.length);\tblob.close ();\ttrans.commit ();\treadsimpletest(con, \"select * from mono_oracle_test\");\tstring varchar2_value = (string) readscalar (con,\"select max(varchar2_value) from mono_oracle_test\");\tdecimal number_whole_value = (decimal) readscalar (con,\"select max(number_whole_value) from mono_oracle_test\");\tdecimal number_scaled_value = (decimal) readscalar (con,\"select number_scaled_value from mono_oracle_test\");\tdatetime date_value = (datetime) readscalar (con,\"select date_value from mono_oracle_test\");\tstring clob_value = (string) readscalar (con,\"select clob_value from mono_oracle_test\");",
  "write change cipher spec",
  1
 ],
 [
  "public void rtsenable_get_handshake_requesttosend() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {",
  "verifying getting rtsenable with handshake set to requesttosend",
  0
 ],
 [
  "public void seek_badoffset() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tcom.open();",
  "test failed at conversion result",
  1
 ],
 [
  "private static bool callsecondinterfaceinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturndynamicinterface<int>();\tif ((!(bool)(s.instanceproperty.instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "exception caught",
  1
 ],
 [
  "if (!str.startswith (\"user \")) {\twhere = \"user\";\treturn false;\t}\twriter.flush ();\tstr = reader.readline ();\tif (!str.startswith (\"pass \")) {\twhere = \"pass\";\treturn false;\t}",
  "test failed at call result",
  1
 ],
 [
  "isequenced<int> inner = new treeset<int>();\tinner.add(i); inner.add(i+1);\touter.add(inner);\t}\tipersistentsorted<int> inner1 = new treeset<int>(), inner2 = new treeset<int>(), inner3 = new treeset<int>();\tinner1.addall<int>(new int[] { 2, 3, 5, 7, 11 });\tinner2.addall(inner1); inner2.add(13);\tinner3.addall(inner1);\touter.add(inner1.snapshot());\tinner1.add(13);",
  "other useless string",
  1
 ],
 [
  "static assembly assemblyresolveeventhandler(object sender, resolveeventargs args) {",
  "the application exited with code",
  1
 ],
 [
  "public void largeswitch (string s) {\tswitch (s) {",
  "verifying writetimeout with writebyte",
  1
 ],
 [
  "else if (command == projectservice.cleantarget) res = await item.clean (monitor, configuration);\t} else {\tconfigurationselector configuration = new solutionconfigurationselector (config);\tif (command == projectservice.buildtarget) res = await item.build (monitor, configuration, true);\telse if (command == projectservice.cleantarget) res = await item.clean (monitor, configuration);\telse {\tvar p = item as project;\tif (p != null) {\tres = (await p.runtarget (monitor, command, configuration)).buildresult;\t} else {",
  "target not supported",
  0
 ],
 [
  "catch (xmlexception ex) {\tmonitor.reporterror (ex.message, ex);\taddtask (filename, ex.message, ex.lineposition, ex.linenumber, taskseverity.error, workspaceobject);\terror = true;\t}\tfinally {\tif (stringreader != null) stringreader.dispose ();\tsettings.validationeventhandler -= validationhandler;\t}\tif (error) {",
  "verifying bytestowrite with one call to write",
  1
 ],
 [
  "private static void writesummaryreport( resultsummarizer summary ) {",
  "not run invalid ignored skipped",
  0
 ],
 [
  "string sibling = string.concat (pkg_path, ext);\tstring sref = string.concat (ref_path, ext);\tif (file.exists (sibling)) symlink (sibling, sref);\telse {\ttry {\tfile.delete (sref);\t} catch {\t}\t}\t}",
  "culture name",
  1
 ],
 [
  "private verbosetestlogging _log;\tprivate tcplistener _listener;\tprivate bool _usessl;\tprivate sslprotocols _sslprotocols = sslprotocols.tls12 | sslprotocols.tls11 | sslprotocols.tls;\tprivate encryptionpolicy _sslencryptionpolicy;\tprivate ipendpoint _remoteendpoint;\tprivate dummytcpserverreceivecallback _receivecallback;\tprivate void startlistener(ipendpoint endpoint) {\t_listener = new tcplistener(endpoint);\t_listener.start(5);",
  "server listening",
  0
 ],
 [
  "public void basictest_getipinterfacestatistics_success_osx() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfacestatistics stats = nic.getipstatistics();",
  "successfully bound at",
  1
 ],
 [
  "public int transform_arglist(string szxmlfile, outputtype outputtype, navtype navtype, bool errorcase) {\tszxmlfile = fullfilepath(szxmlfile);\tixpathnavigable xd = loadxml(szxmlfile, navtype);",
  "executing transform",
  0
 ],
 [
  "try {\tsynchronizationcontext.setsynchronizationcontext (context);\tvar t = test ();\tawait_mre.set ();\tif (!t.wait (3000)) return 3;\tif (!mre.waitone (3000)) return 2;\t} finally {\tsynchronizationcontext.setsynchronizationcontext (null);\t}\tif (context.started != 0 || context.completed != 0 || context.sendcounter != 0) return 1;",
  "aa",
  1
 ],
 [
  "x509crl crl = force ? null : findcrl (cert, store);\tif ((crl == null) || !crl.iscurrent) {\tx509extension ext = cert.extensions [\"2.5.29.31\"];\tif (ext == null) {\tcontinue;\t}\tcrldistributionpointsextension crldp = new crldistributionpointsextension (ext);\tforeach (var dp in crldp.distributionpoints) {\tstring name = dp.name.trim ();\tif (name.startswith (\"url=\")) download (name.substring (4), store);",
  "revision",
  1
 ],
 [
  "static void help () {",
  "error don t worry about this one",
  1
 ],
 [
  "console.outputencoding = encoding.utf8;\tvar writer = console.out;\tforeach (var c in all) {\tif (c.lcid == cultureinfo.invariantculture.lcid) continue;\tvar df = c.datetimeformat;\tdump (writer, df.abbreviateddaynames, \"abbreviateddaynames\");\tdump (writer, df.abbreviatedmonthgenitivenames, \"abbreviatedmonthgenitivenames\");\tdump (writer, df.abbreviatedmonthnames, \"abbreviatedmonthnames\");\tdump (writer, df.daynames, \"daynames\");\tdump (writer, df.getalldatetimepatterns (), \"getalldatetimepatterns\");",
  "did not return null for non existent parameter name",
  1
 ],
 [
  "}\tif (failed_tests.count == 0) continue;\tsw.writeline (@\"        <tr id='el{0}' class='errorlist' style='display: none'>\", assembly);\tsw.writeline (@\"            <td colspan='4'>\");\tsw.writeline (@\"                <table cellpadding='2' cellspacing='0' width='100%'>\");\tint test_num = 0;\tforeach (failedtest ft in failed_tests.values) {\tsw.writeline (\"                    <tr onclick=\\\"toggle('as{0}ed{1}')\\\" onmouseover='highlight(this)' onmouseout='unhighlight(this)'>\", assembly, test_num);\tsw.writeline (@\"                        <td style='width: 17px'><img src='media/bullet.png' /></td>\");\tsw.writeline (@\"                    <tr id='as{0}ed{1}' class='errordetail' style='display: none'>\", assembly, test_num);",
  "pgroup",
  1
 ],
 [
  "public void addparam4(object param, xslinputtype xslinputtype, readertype readertype, outputtype outputtype, navtype navtype) {\tstring baseline = path.combine(\"baseline\", (string)param);\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(szlongstring, szempty, \"test1\");\tretobj = m_xsltarg.getparam(szlongstring, szempty);",
  "error unknown command line argument",
  1
 ],
 [
  "public void basictest_getipv4interfacestatistics_success_linux() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipv4interfacestatistics stats = nic.getipv4statistics();",
  "stats for",
  0
 ],
 [
  "private static bool callsecondinterfaceinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturndynamicinterface();\tif ((!(bool)(s[1].instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "static void usage () {",
  "returning null",
  1
 ],
 [
  "public task<string> d3method() {",
  "joined thread",
  1
 ],
 [
  "static void help (string details) {",
  "nonunicastpacketssent",
  1
 ],
 [
  "private static bool nullableinttypewithnumbericconversionfromshortinassignment() {\tint failcount = 0;\tshort? origin = short.maxvalue;\tdynamic d = origin;\tint? result = d;\tif (result != origin) {\tfailcount++;",
  "bad command line arguments supplied arg",
  1
 ],
 [
  "public override string tostring () {\tstringwriter sw = new stringwriter ();",
  "extra",
  0
 ],
 [
  "const int newjobschedulepriority = 1;\tboundjobschedule.jobspecification.priority = newjobschedulepriority;\tboundjobschedule.commit();\tassertjobschedulecorrectness(batchcli.jobscheduleoperations, boundjobschedule, this.poolfixture.poolid, newjobschedulepriority, jobmanagerid, jobmanagercommandline, recurrenceinterval, metadata);\tconst string newjobmanagercommandline = \"ping 127.0.0.1 -n 150\";\tboundjobschedule.jobspecification.jobmanagertask.commandline = newjobmanagercommandline;\tboundjobschedule.commit();\tassertjobschedulecorrectness(batchcli.jobscheduleoperations, boundjobschedule, this.poolfixture.poolid, newjobschedulepriority, jobmanagerid, newjobmanagercommandline, recurrenceinterval, metadata);\tconst string newpoolid = \"testpool\";\tboundjobschedule.jobspecification.poolinformation = new poolinformation() { poolid = newpoolid };",
  "updating poolinformation",
  0
 ],
 [
  "#endif return null;\t}\tdatacolumncollection columns = datatable.columns;\tdebug.assert(null != columns, \"getdatacolumnbyschemaaction: unexpected null datacolumncollection\");\tint index = columns.indexof(datasetcolumn);\tif ((0 <= index) && (index < columns.count)) {\tdatacolumn datacolumn = columns[index];\tdebug.assert(null != datacolumn, \"getdatacolumnbyschemaaction: unexpected null datacolumn\");\tif (!string.isnullorempty(datacolumn.expression)) {\t#if debug if (adapterswitches.dataschema.traceerror) {",
  "schema mismatch on datacolumn datasetcolumn which is a computed column",
  0
 ],
 [
  "protected void processchildproperties(xmlnode node, object parent) {\tvar t=parent.gettype();\tforeach(xmlnode child in node.childnodes) {\tif (!(child is xmlelement)) continue;\tstring pname=child.localname;\tvar pi=t.getproperty(pname);\tif (pi==null) {",
  "unsupported property",
  0
 ],
 [
  "protected override void generatetypestart(codetypedeclaration e) {",
  "ask add always confirm before adding a new trusted certificate",
  1
 ],
 [
  "static int main() {\ttype gtd = typeof (a<>);\ttype oi = gtd.makegenerictype (gtd.getgenericarguments ());\tif (oi != gtd) {",
  "fully open instantiation of static type not the same of the generic type definition",
  0
 ],
 [
  "console.clear();\tconsole.writeline(\"db.orders.add(new order { productid = 7, customerid = 1, orderdate = datetime.now });\");\tdb.orders.insertonsubmit(new order { employeeid = 1, customerid = \"alfki\", orderdate = datetime.now });\tdb.submitchanges();\tconsole.writeline(\"db.orders.add(new order { productid = 2, customerid = 2, orderdate = datetime.now });\");\tdb.orders.insertonsubmit(new order { employeeid = 1, customerid = \"alfki\", orderdate = datetime.now });\tdb.submitchanges();\tforeach (var v in db.orders) objectdumper.write(v);\tconsole.readkey();\tconsole.clear();",
  "db orders remove db orders first",
  0
 ],
 [
  "public override object visit(icsharpcode.nrefactory.monocsharp.statement stmt) {",
  "unknown statement",
  0
 ],
 [
  "private static bool dynamiclocalvariabledefinitioninusing() {\tint failcount = 0;\tc.calleddisposeflag = false;\tusing (dynamic d = new c()) {\tif (((int)d.m(10)) != 10) {\tfailcount++;",
  "seeding stress engine random number generator with",
  1
 ],
 [
  "static globaldebug() {\tglobaldebug.s_debuglevel = globalconfig.debuglevel;\t#if supportdebuglogfile string debuglogfile = globalconfig.debuglogfile;\tif (debuglogfile != null) {\tforeach (tracelistener listener in debug.listeners) {\tif (listener is defaulttracelistener) ((defaulttracelistener)listener).logfilename = debuglogfile;\t}",
  "principal api debug log appdomain with id utc",
  0
 ],
 [
  "public static void creategenerictestfile(string strfilename) {\tmemorystream ms = new memorystream();\ttextwriter tw = new streamwriter(ms);\ttw.writeline(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"no\\\"?>\");\ttw.writeline(\"<!-- comment1 -->\");\ttw.writeline(\"<?pi1a?>\");\ttw.writeline(\"<?pi1b?>\");\ttw.writeline(\"<?pi1c?>\");",
  "try",
  1
 ],
 [
  "int x = 0;\tfor (int i = 0; i < 100; i++) x++;\tconsole.writeline (x);\tstring useless = \"useless string\";\tif (useless.equals (\"other useless\")) {\tuseless = string.empty;\t}\tuseless = string.concat (useless,\" 1\");\tfor (int j = 0; j < useless.length; j++) {\tif (useless[j] == 'u') console.writeline (\"i have detected an u char\");",
  "foo",
  1
 ],
 [
  "private void emitwritearray(string typename) {\topenscope($\"public static void write(this nativewriter writer, list<{typename}> values)\");\twriteline(\"if (values == null)\");\twriteline(\"{\");\twriteline(\"}\");\twriteline(\"{\");",
  "writer write value",
  0
 ],
 [
  "static list<commenttag> createcommenttags (string tagliststring) {\tvar list = new list<commenttag> ();\tif (string.isnullorempty (tagliststring)) return list;\tstring[] tags = tagliststring.split (';');\tfor (int n=0; n<tags.length; n++) {\tstring[] split = tags [n].split (':');\tint priority;\tif (split.length == 2 && int.tryparse (split [1], out priority)) list.add (new commenttag (split [0], priority));",
  "invalid tag list in commenttagset",
  0
 ],
 [
  "if ((!adutils.isofobjectclass(memberde, \"group\")) && (!adutils.isofobjectclass(memberde, \"user\")) && (!adutils.isofobjectclass(memberde, \"foreignsecurityprincipal\"))) {\tneedtoretry = true;\tdisposememberde = true;\t}\telse if (_recursive && adutils.isofobjectclass(memberde, \"group\")) {\tif (!_groupsvisited.contains(memberdn) && !_groupstovisit.contains(memberdn)) _groupstovisit.add(memberdn);\tneedtoretry = true;\tdisposememberde = true;\t}\telse if (_recursive && adutils.isofobjectclass(memberde, \"foreignsecurityprincipal\")) {",
  "task",
  1
 ],
 [
  "public static void main () {\tvar all = cultureinfo.getcultures (culturetypes.specificcultures | culturetypes.neutralcultures).orderby (l => l.lcid);\tconsole.outputencoding = encoding.utf8;\tvar writer = console.out;\tforeach (var c in all) {\tif (c.lcid == cultureinfo.invariantculture.lcid) continue;",
  "threeletterwindowslanguagename",
  1
 ],
 [
  "} else {\tforeach (string type in types) {\ttry {\ttype t = asm.gettype (type);\tmaps.add (imp.importtypemapping (t));\tusertypes.add (t);\tif (verbose) console.writeline (\" - \" + t);\t} catch (invalidoperationexception ex) {\t} catch (notimplementedexception ex) {\tif (verbose) {",
  "warning ignoring",
  0
 ],
 [
  "public void showstats () {\tif (timers == null) return;\tdictionary<timertype, string> timer_names = new dictionary<timertype,string> {\t{ timertype.parsetotal, \"parsing source files\" }, { timertype.assemblybuildersetup, \"assembly builder setup\" }, { timertype.createtypetotal, \"compiled types created\" }, { timertype.referencesloading, \"referenced assemblies loading\" }, { timertype.referencesimporting, \"referenced assemblies importing\" }, { timertype.predefinedtypesinit, \"predefined types initialization\" }, { timertype.moduledefinitiontotal, \"module definition\" }, { timertype.emittotal, \"resolving and emitting members blocks\" }, { timertype.closetypes, \"module types closed\" }, { timertype.resouces, \"embedding resources\" }, { timertype.outputsave, \"writing output file\" }, { timertype.debugsave, \"writing debug symbols file\" }, };\tint counter = 0;\tdouble percentage = (double) total.elapsedmilliseconds / 100;\tlong subtotal = total.elapsedmilliseconds;\tforeach (var timer in timers) {\tstring msg = timer_names[(timertype) counter++];\tvar ms = timer == null ? 0 : timer.elapsedmilliseconds;",
  "stderr",
  1
 ],
 [
  "protected virtual string loadfile (string path) {\tif (!file.exists (path)) {\treturn string.empty;\t}\ttry {\treturn file.readalltext (path);\t} catch (exception ex) {",
  "error reading file required for exception template exception has been thrown",
  0
 ],
 [
  "public dummy entry (label pc, method method, textwriter data) {",
  "method entry",
  0
 ],
 [
  "var context = new authenticationcontext(authority, tokencache);\tvar result = await context.acquiretokenasync(resource, clientcredential).configureawait(false);\treturn result.accesstoken;\t}\tpublic async task<string> getuseraccesstoken(string authority, string resource, string scope) {\tstring clientid = testconfigurationmanager.trygetenvironmentorappsetting(\"nativeclientid\");\tvar context = new authenticationcontext(authority, tokencache);\tif (_devicecodeforstoragetests == null) {\t_devicecodeforstoragetests = await context.acquiredevicecodeasync(resource, clientid).configureawait(false);\tdebug.writeline(\"############################################################################################\");",
  "insert following user code devicecodeforstoragetests usercode",
  0
 ],
 [
  "config = configurationmanager.openmappedexeconfiguration(fm, configurationuserlevel.none);\t}\tif (config != null) {\tappsettingssection section = (appsettingssection)config.getsection(\"appsettings\");\tsection.settings[\"helpmode\"].value = helpmode;\tconfig.save();\t}\t}\t}\tcatch (exception ex) {",
  "helpviewer",
  0
 ],
 [
  "public override void classendload (lc c, ulong counter, bool success) {",
  "classendload",
  0
 ],
 [
  "public static int main (string[] args) {\tlocation.inemacs = environment.getenvironmentvariable (\"emacs\") == \"t\";\tcommandlineparser cmd = new commandlineparser (console.out);\tvar settings = cmd.parsearguments (args);\tif (settings == null) return 1;\tif (cmd.hasbeenstopped) return 0;\tdriver d = new driver (new compilercontext (settings, new consolereportprinter ()));\tif (d.compile () && d.report.errors == 0) {\tif (d.report.warnings > 0) {",
  "did not throw exception",
  1
 ],
 [
  "public static int main(string[] args) {\tmethodinfo dofoo = typeof(testclass).getmethod(\"dofoo\");\tif ((dofoo.getmethodimplementationflags() & methodimplattributes.preservesig) == 0) return 1;\tdofoo = typeof(testclass).getproperty(\"foo\").getgetmethod ();\tif ((dofoo.getmethodimplementationflags() & methodimplattributes.preservesig) == 0) return 1;\tdofoo = typeof(testclass).getevent(\"e\").getaddmethod (true);\tif ((dofoo.getmethodimplementationflags() & methodimplattributes.preservesig) == 0) return 1;",
  "has preservesig",
  0
 ],
 [
  "} catch (memberaccessexception) {\t}\ttry {\tvar a = new correctcasefriendassembly.internalclass(@internal: 0);\t} catch (memberaccessexception) {\tfailcount += 1;\t}\ttry {\tvar b = new correctcasefriendassembly.internalclass(@public: 'a');\tb.internalmethod();",
  "error deleting case for whitespace arg",
  1
 ],
 [
  "s11.f10 = 10;\ts11.f11 = 11;\ts11 = mono_return_sbyte11(s11, 9);\tif (s11.f1 != 1+9) {\treturn 1;\t}\tif (s11.f2 != 2+9) {\treturn 2;\t}\tif (s11.f3 != 3+9) {",
  "reader positioned on",
  1
 ],
 [
  "fillsolution (four_five_sln_gen, msbuildgenerator.profile_4_x, projects.values, additionalfilter);\tif (duplicates.count () > 0) {\tvar sb = new stringbuilder ();\tsb.appendline (\" foreach (var item in duplicates) {\tsb.appendline ($\" }\tconsole.error.writeline (sb.tostring ());\t}\twritesolution (four_five_sln_gen, path.combine (\"..\", \"..\", makesolutionname (msbuildgenerator.profile_4_x)));\tif (makefiledeps){\tconst string classdirprefix = \"./../../\";",
  "copyright c by remobjects software",
  1
 ],
 [
  "_currentparsetree = args.generatorresults.document;\t_lastchangeowner = null;\t}\tdebug.assert(args != null, \"event arguments cannot be null\");\teventhandler<documentparsecompleteeventargs> handler = documentparsecomplete;\tif (handler != null) {\ttry {\thandler(this, args);\t}\tcatch (exception ex) {",
  "rzed document parse complete handler threw",
  0
 ],
 [
  "private void dispose(bool disposing) {\tdebug.indent();\tint oldbusy = interlocked.compareexchange(ref _busy, bufferbusydisposing, bufferfree);\tif (disposing) {\tif (oldbusy == bufferbusypainting) {",
  "stack at busy buffer",
  0
 ],
 [
  "helplibraryagent.start();\tthread.sleep(0x3e8);\t}\tstring helpurl = string.concat(arguments, projectlanguages.currentlanguageashttpparam, (embedded)?\"&embedded=true\":string.empty);\tif (help3service.config.externalhelp) {\tdisplayhelpwithshellexecute(helpurl);\treturn;\t}\tbrowserpane browser = activehelp3browser();\tif (browser != null) {",
  "helpviewer displaylocalhelp calls",
  0
 ],
 [
  "} catch (memberaccessexception) {\tfailcount += 1;\t}\ttry {\twrongcasefriendassembly.internalclass.privatestaticmethod();\t} catch (memberaccessexception) {\tfailcount += 1;\t}\ttry {\twrongcasefriendassembly.internalclass.internalstaticmethod();",
  "access friend internal static method ok",
  0
 ],
 [
  "public override void doselectinvoke() {\ttry {\tif (isautoinvoked(!constants.ignore_exception)) invoke(false, true, !constants.ignore_exception);\t} catch (exception ex) {",
  "select autoinvoke exception",
  0
 ],
 [
  "corevaluationcontext cctx = (corevaluationcontext) ctx;\ttype t;\tif (metadatahelperfunctionsextensions.coretypes.trygetvalue (type.type, out t)) return t.fullname;\ttry {\tif (type.type == corelementtype.element_type_array || type.type == corelementtype.element_type_szarray) return gettypename (ctx, type.firsttypeparameter) + \"[\" + new string (',', type.rank - 1) + \"]\";\tif (type.type == corelementtype.element_type_byref) return gettypename (ctx, type.firsttypeparameter) + \"&\";\tif (type.type == corelementtype.element_type_ptr) return gettypename (ctx, type.firsttypeparameter) + \"*\";\treturn type.gettypeinfo (cctx.session).fullname;\t}\tcatch (exception ex) {",
  "writing type",
  1
 ],
 [
  "public override bool onstart() {",
  "orleansazuresilos onstart called information",
  0
 ],
 [
  "elementlist.removeat(i--);\tcontinue;\t}\te.setattribute(\"shortname\", shortname);\thtml.writeline(\"  <li><a href=\\\"#\" + shortname + \"\\\">\" + shortname + \"</a>\");\t}\tforeach (xmlelement e in elementlist) {\tstring fullname = e.getattribute(\"name\").substring(2);\tstring shortname = e.getattribute(\"shortname\");\thtml.writeline(\"  <h2><a name=\\\"\" + shortname + \"\\\">\" + shortname + \"</a></h2>\");",
  "package exported to",
  1
 ],
 [
  "public static void createwhitespacehandlingtestfile(string strfilename) {\tstream s = new memorystream();\ttextwriter tw = new streamwriter(s);\ttw.writeline(\"]>\");",
  "linenumber",
  1
 ],
 [
  "public void var4() {\ttry {\tnew xslcompiledtransform().load((xmlreader)null, xsltsettings.trustedxslt, (xmlresolver)null);\t}\tcatch (argumentnullexception) {\treturn;\t}\tcatch (exception e) {\t_output.writeline(e.tostring());",
  "open and close port while the port is recieving data and the rts pin is changing states",
  1
 ],
 [
  "public void discardnull_true_false_read_byte_int_int_before() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "nested got but expected",
  1
 ],
 [
  "if (name.length < 1) return null;\tbool label = char.isdigit (name, 0);\tfor (int i=0; i < levels.count; i++) {\tpl = (policylevel) levels [i];\tparent = pl.rootcodegroup;\tcodegroup cg = null;\tif (label) cg = findcodegroupbylabel (name, \"1\", ref parent);\telse cg = findcodegroupbyname (name, ref parent);\tif (cg != null) return cg;\t}",
  "defects found",
  1
 ],
 [
  "for (int j = 0; j < 2; j++) {\tbool useobj = (j == 0);\tobject refobj = new object();\tfor (int k = 0; k < 2; k++) {\tbool precanceledtoken = (k == 0);\ttask<int> f1;\tcancellationtokensource cts = new cancellationtokensource();\tcancellationtoken ct = cts.token;\tif (precanceledtoken) {\tcts.cancel();",
  "compiling",
  1
 ],
 [
  "}\tstring name = items[1];\tipaddress address;\tif (!ipaddress.tryparse(items[0], out address)) {\treturn null;\t}\ttry {\treturn new hostentry(name, address);\t}\tcatch (argumentexception e) {",
  "wrong entry in the hosts file cannot create host entry",
  0
 ],
 [
  "public void rtsenable_true_handshake_requesttosendxonxoff() {",
  "skipped the package dependency is already added to the project",
  1
 ],
 [
  "private static bool doubletypewithnumbericconversionfromulonginassignment() {\tint failcount = 0;\tulong origin = ulong.minvalue;\tdynamic d = origin;\tdouble result = d;\tif (result != origin) {\tfailcount++;",
  "sec in ms pipeline contains items",
  1
 ],
 [
  "public static void createxmllangtestfile(string strfilename) {\tstream s = new memorystream();\ttextwriter tw = new streamwriter(s);\ttw.writeline(\"<xmllang0 xml:lang=\\\"en-us\\\">what color is it?</xmllang0>\");\ttw.write(\"<xmllang1 xml:lang=\\\"en-gb\\\">what color is it?<a><b><c>language test</c><persona>dromio of ephesus</persona></b></a></xmllang1>\");",
  "noxmllang",
  0
 ],
 [
  "protected override bool onbuild (progressmonitor monitor, deploycontext ctx) {\tstring consmsg;\toperationconsole cons;\tif (externalconsole) {\tcons = externalconsolefactory.instance.createconsole (closeconsolewhendone, monitor.cancellationtoken);\tconsmsg = gettextcatalog.getstring (\"(in external terminal)\");\t} else {\tcons = new monitorconsole (monitor);\tconsmsg = \"\";\t}",
  "executing",
  0
 ],
 [
  "string mime_type = (string) mime_types [filetype];\tif (mime_type == null) mime_type = \"text/plain\";\ttry {\tfilestream f=new filestream(req, filemode.open, fileaccess.read);\tbyte[] fbuf=new byte[256];\treplyheaders(sock, 200, \"ok\", mime_type, null, f.length);\tf.close();\t} catch(filenotfoundexception) {\tnotfound(sock);\t} catch(ioexception) {",
  "start another thread",
  1
 ],
 [
  "}\tif (error == -1) {\tthrow new berconversionexception();\t}\t}\tberval binaryvalue = new berval();\tintptr flattenptr = intptr.zero;\ttry {\terror = wldap32.ber_flatten(berelement, ref flattenptr);\tif (error == -1) {",
  "ber flatten failed",
  0
 ],
 [
  "console.writeline();\tcc = 0;\t}\tconsole.write(\"{0,-2:x2} \", _inbuff[i]);\tcc++;\t}\tif (cc>0) {\tconsole.writeline();\t}\tcc = 0;",
  "unused buffer",
  0
 ],
 [
  "public void skipusinggoto () {\ttry {\tfile.open (\"foo.txt\", filemode.open);\t}\tcatch (exception exception) {\tretry: if (exception == null) throw new exception (exception.tostring ());",
  "skipped",
  0
 ],
 [
  "catch {\tfailed = true;\t}\tif (selfsign) {\tstore = getstorefromname (x509stores.names.trustedroot, machine);\t} else if (i == 0) {\tstore = getstorefromname (x509stores.names.otherpeople, machine);\t} else {\tstore = getstorefromname (x509stores.names.intermediateca, machine);\t}",
  "positioned on wrong element not on dns",
  1
 ],
 [
  "public static void error(testresult result, object actual, object expected, string source, string message, string stack, string filename, int lineno) {\tif (internal != null) {\tinternal.error(result, testlogflags.text, stringex.format(actual), stringex.format(expected), source, message, stack, filename, lineno );\t}\telse {",
  "file",
  0
 ],
 [
  "m_xsltarg.addparam(\"myarg4\", szempty, d4);\tm_xsltarg.removeparam(\"myarg4\", szempty);\tretobj = m_xsltarg.getparam(\"myarg4\", szempty);\tif (retobj != null) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg5\", szempty, d5);\tm_xsltarg.removeparam(\"myarg5\", szempty);\tretobj = m_xsltarg.getparam(\"myarg5\", szempty);\tif (retobj != null) {",
  "failed to remove",
  0
 ],
 [
  "public void breakstate_default() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "verifying default breakstate",
  0
 ],
 [
  "recordword = true;\tcontinue;\t}\tif (ch == '}' && next == '}' && recordword) {\ti++;\trecordword = false;\tstring replacement;\tif (variables.trygetvalue (wordbuilder.tostring (), out replacement)) {\tresult.append (replacevariables (replacement, variables));\t} else {",
  "thread running",
  1
 ],
 [
  "connectionstringsettings cssc = ((connectionstringssection)connstrings).connectionstrings[\"localsqlserver\"];\tconsole.writeline (\"connstrings[localsqlserver] = {0}\", (cssc == null ? \"null\" : cssc.connectionstring));\tconnectionstringsettings cssc2 = ((connectionstringssection)connstrings).connectionstrings[\"accessfilename\"];\tconsole.writeline (\"connstrings[accessfilename] = {0}\", (cssc2 == null ? \"null\" : cssc2.connectionstring));\tappsettingssection sect = (appsettingssection) config.appsettings;\tconsole.writeline (\"sect.settings[hithere] = {0}\", (sect.settings [\"hithere\"] == null ? \"null\" : sect.settings [\"hithere\"].value.tostring ()));\trsaprotectedconfigurationprovider rsa = (rsaprotectedconfigurationprovider)protectedconfiguration.providers [protectedconfiguration.defaultprovider];\tconsole.writeline (\"rsa = {0}\", (rsa == null ? \"null\" : rsa.tostring ()));\t}\tcatch (exception e) {",
  "raised",
  0
 ],
 [
  "private ilasmtest() {}\tpublic static int main (string [] args) {\tif (args.length != 1) {",
  "symgraph changed due to manifestation of due to missing target in",
  1
 ],
 [
  "static void writehelp () {\tconsole.writeline ();",
  "unknown end node valid end nodes are",
  1
 ],
 [
  "dt.columns.add (\"col3\");\tdt.constraints.add (new uniqueconstraint (dt.columns [0]));\tdv.sort = \"col2\";\tdt.columns.remove (\"col3\");\tdv.rowfilter = \"col1 <> 0\";\tdv.rowstatefilter = dataviewrowstate.deleted;\tdv.rowstatefilter = dataviewrowstate.currentrows;\tdt.rows.add (new object [] {1, 3});\tdt.rows.add (new object [] {2, 2});\tdt.rows.add (new object [] {3, 1});",
  "added row to rows",
  0
 ],
 [
  "m_xsltarg = new xsltargumentlist();\tstring obj = \"0.00\";\tm_xsltarg.addextensionobject(\"myarg1\", obj);\tretobj = m_xsltarg.getextensionobject(\"myarg1\");\tif (retobj.tostring() != \"0.00\") {\tassert.true(false);\t}\tint i = 8;\tm_xsltarg.addextensionobject(\"myarg2\", i);\tretobj = m_xsltarg.getextensionobject(\"myarg2\");",
  "removehelpnamespace",
  1
 ],
 [
  "public void pinchangedevent_dsrchanged() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (serialport com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\tpinchangedeventhandler eventhandler = new pinchangedeventhandler(com1);\teventhandler.eventfilter = eventtype => eventtype != serialpinchange.cdchanged;",
  "foo compareto b",
  1
 ],
 [
  "else {\t}\tienumerable<resourcefile> resfilesprop = ijm.resourcefiles;\tif (null != resfilesprop) {\tlist<resourcefile> resfiles = new list<resourcefile>();\t}\telse {\t}\ttaskconstraints tc = ijm.constraints;\tif (null == tc) {",
  "taskconstraints null",
  0
 ],
 [
  "return;\t}\tthis.updatetimer = new timer (1000);\tthis.updatetimer.elapsed += this.onupdatetimerellapsed;\tthis.updatetimer.autoreset = false;\tthis.recentfiles = desktopservice.recentfiles;\tthis.recentfiles.changed += this.onrecentfileschanged;\ttry {\tupdatejumplist();\t} catch (exception ex) {",
  "assert areequal result",
  1
 ],
 [
  "byte[] buffer = new byte[3];\tint startpos = 0;\tint readsize = 3;\tint currentsize = 0;\tdatareader.read();\twhile (datareader.read()) {\tcurrentsize = datareader.readcontentasbinhex(buffer, startpos, readsize);\tcerror.equals(currentsize, 1, \"size\");\tcerror.equals(buffer[0], (byte)18, \"buffer\");\tif (!(isxpathnavigatorreader() || isxmlnodereader() || isxmlnodereaderdatadoc())) {",
  "lineposition",
  0
 ],
 [
  "public static int main (string [] args) {\tappdomain domain = appdomain.createdomain (\"newdomain\");\ttest mytest = new test ();\ttest othertest = (test) domain.createinstanceandunwrap (typeof (test).assembly.fullname, typeof (test).fullname);\tothertest.callsetthread (mytest);\tif (mytest.thread.gettype () == thread.currentthread.gettype ()) console.writeline (\"same type\");\telse {",
  "different type",
  0
 ],
 [
  "static bool callsecondclassindexer() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturnclass<int>();\tif ( (!(bool)(((dynamic)(s + 1))[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "warning",
  1
 ],
 [
  "public void newlinesubstring() {\tusing (serialport com1 = tcsupport.initfirstserialport()) using (serialport com2 = tcsupport.initsecondserialport(com1)) {",
  "verifying read method with sub strings of the new line appearing in the string being read",
  0
 ],
 [
  "public void longrunning_testremovepoolcomputenodes() {\taction test = () => {\tusing (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {\tstring poolid = \"testremovepoolcomputenodes_longrunning\" + testutilities.getmyname();\tconst int targetdedicated = 3;\ttry {\tcloudpool pool = batchcli.pooloperations.createpool(poolid, poolfixture.vmsize, new cloudserviceconfiguration(poolfixture.osfamily), targetdedicatedcomputenodes: targetdedicated);\tpool.commit();",
  "created pool",
  0
 ],
 [
  "console.writeline(\"================================\");\toracletransaction transaction = con.begintransaction ();\toracledataadapter da = new oracledataadapter(\"select * from mono_adapter_test\", con);\tda.selectcommand.transaction = transaction;\toraclecommandbuilder mycb = new oraclecommandbuilder(da);\tdataset ds = new dataset();\tda.fill(ds, \"mono_adapter_test\");\tdatarow myrow;\tmyrow = ds.tables[\"mono_adapter_test\"].newrow();\tbyte[] bytes = new byte[] { 0x45,0x46,0x47,0x48,0x49,0x50 };",
  "ourlabeltwoareas pevents pos size",
  1
 ],
 [
  "public explicitlytypedlambda(ilist<iparameter> parameters, bool isanonymousmethod, bool isasync, csharpresolver storedcontext, resolvevisitor visitor, astnode body) {\tthis.parameters = parameters;\tthis.isanonymousmethod = isanonymousmethod;\tthis.isasync = isasync;\tthis.storedcontext = storedcontext;\tthis.visitor = visitor;\tthis.body = body;\tif (visitor.undecidedlambdas == null) visitor.undecidedlambdas = new list<lambdabase>();\tvisitor.undecidedlambdas.add(this);",
  "added undecided explicitly typed lambda",
  0
 ],
 [
  "m_xsltarg.addparam(\"myarg2\", szempty, (uint32)i);\tm_xsltarg.removeparam(\"myarg2\", szempty);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (retobj != null) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg2\", szempty, (int64)i);\tm_xsltarg.removeparam(\"myarg2\", szempty);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (retobj != null) {",
  "failed to remove",
  0
 ],
 [
  "public void charentity_4(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writecharentity('\\udd12');\t}\tcatch (argumentexception e) {",
  "mapping match on sourcetable sourcetable",
  1
 ],
 [
  "public static int main () {\tvar tests = from test in typeof (tester).getmethods (bindingflags.instance | bindingflags.nonpublic | bindingflags.declaredonly) where test.getparameters ().length == 2 orderby test.name select runtest (test);\tint failures = tests.count (a => !a);",
  "tests failed",
  0
 ],
 [
  "var references = new list<packagemanagementpackagereference> ();\tforeach (var dependency in dependenciestoadd) {\treferences.add (new packagemanagementpackagereference (dependency.packageid, dependency.packageversion));\t}\tvar task = packagemanagementservices.projectoperations.installpackagesasync (project, references);\tawait task.configureawait (false);\treturn true;\t} catch (invalidoperationexception) {\tthrow;\t} catch (exception ex) {",
  "could not queue packages for installation",
  0
 ],
 [
  "s7.f6 = 6;\ts7.f7 = 7;\ts7 = mono_return_sbyte7(s7, 9);\tif (s7.f1 != 1+9) {\treturn 1;\t}\tif (s7.f2 != 2+9) {\treturn 2;\t}\tif (s7.f3 != 3+9) {",
  "warning enum member",
  1
 ],
 [
  "} else {\tmessageservice.showwarning(\"resouretoolkit: could not get resourcefilecontent for '\"+filename+\"' key +'\"+key+\"'.\");\t}\t} catch (exception ex) {\tmessageservice.showwarningformatted(\"${res:hornung.resourcetoolkit.errorprocessingresourcefile}\" + environment.newline + ex.message, filename);\treturn;\t}\tforeach (keyvaluepair<string, iresourcefilecontent> entry in resourcefilecontentregistry.getlocalizedcontents(filename)) {\ttry {\tif (entry.value.containskey(key)) {",
  "got but expected",
  1
 ],
 [
  "header ();\tif (args.length == 0) usage ();\tstring file = args [0];\tstring output = args.length > 1 ? args [1] : file;\ttry {\tassemblydefinition assembly = assemblyfactory.getassembly (file);\tstripassembly (assembly, output);\tif (file != output) console.writeline (\"assembly {0} stripped out into {1}\", file, output);\treturn 0;\t} catch (targetinvocationexception tie) {",
  "error",
  0
 ],
 [
  "int numtoread = this.entrysize;\tlongname = new stringbuilder();\twhile (numtoread > 0) {\tint numread = this.read(namebuffer, 0, (numtoread > namebuffer.length ? namebuffer.length : numtoread));\tif (numread == -1) {\tthrow new invalidheaderexception(\"failed to read long name entry\");\t}\tlongname.append(tarheader.parsename(namebuffer, 0, numread).tostring());\tnumtoread -= numread;\t}",
  "constant folder bug in e operator u x e y",
  1
 ],
 [
  "public static void save (textwriter writer, editortheme theme) {\twriter.writeline (\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\");\twriter.writeline (\"<!doctype plist public \\\"- writer.writeline (\"<plist version=\\\"1.0\\\">\");\tforeach (var setting in theme.settings) {\tif (setting.name != null) {\t}\tif (setting.scopes.count > 0) {",
  "key scope key",
  0
 ],
 [
  "public void emitsource() {\twriteline();",
  "using internal metadata nativeformat writer",
  0
 ],
 [
  "public void testinvalidcase2() {\tanalyze<stringcompareisculturespecificanalyzer>(@\" class test {\tvoid foo () {",
  "assert fail",
  1
 ],
 [
  "xslt.load(trtemp, xsltsettings.trustedxslt, xr);\t}\tfinally {\tif (trtemp != null) trtemp.dispose();\t}\tbreak;\tcase readertype.xmlnodereader: xmldocument doctemp = new xmldocument();\tdoctemp.load(_strxslfile);\txmlnodereader nrtemp = new xmlnodereader(doctemp);\ttry {",
  "loading style sheet as xmlnodereader",
  0
 ],
 [
  "private static bool callsecondclassoperator() {\tint failcount = 0;\tverify.firstcalled = false;\tdynamic d = new firstclassreturnclass<int>();\tif ((!(((secondclass<int>)d.instancemethod()) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "activeviewcontentchanged to",
  1
 ],
 [
  "stream stream = null;\ttry {\tstream = getkeybindingsschemestream ();\tif (stream != null) {\treader = new xmltextreader (stream);\tcachedset = new keybindingset (keybindingservice.defaultkeybindingset);\tcachedset.loadscheme (reader, id);\treturn cachedset;\t}\t} catch (exception e) {",
  "error reading keybindings definition in addin",
  0
 ],
 [
  "}\t}\tcatch (exception e) {\t}\ttry {\tint newcount = entrycount + oldestentrynumber;\tif (i > newcount) lastseencount = newcount;\telse lastseencount = i;\t}\tcatch (win32exception e) {",
  "error message is wrong",
  1
 ],
 [
  "assert.true(false);\t}\tm_xsltarg.addparam(\"myarg5\", szempty, d5);\tretobj = m_xsltarg.getparam(\"myarg5\", szempty);\tif (!d5.equals(retobj)) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg6\", szempty, d6);\tretobj = m_xsltarg.getparam(\"myarg6\", szempty);\tif (!d6.equals(retobj)) {",
  "failed to add get a value for",
  0
 ],
 [
  "public void onevent () {",
  "nonvirtualdelegate onevent",
  0
 ],
 [
  "public async task taskmethodwithoutawaitbutwithexceptionhandling() {\ttry {\tusing (new stringwriter()) {\t}\t}\tcatch (exception) {",
  "crash",
  0
 ],
 [
  "assemblies.add (a.codebase);\t} catch (exception) {\tif (skip_scan) {\tassemblies.add (new uri (new fileinfo (name).fullname).tostring ());\t} else {\tthrow;\t}\t}\t}\tif (error != null) {",
  "failure to load assemblies the following directories were searched for the assemblies",
  0
 ],
 [
  "dt.columns.add (\"col2\");\tdt.columns.add (\"col3\");\tdt.constraints.add (new uniqueconstraint (dt.columns [0]));\tdv.sort = \"col2\";\tdt.columns.remove (\"col3\");\tdv.rowfilter = \"col1 <> 0\";\tdv.rowstatefilter = dataviewrowstate.deleted;\tdv.rowstatefilter = dataviewrowstate.currentrows;\tdt.rows.add (new object [] {1, 3});\tdt.rows.add (new object [] {2, 2});",
  "added row to rows",
  0
 ],
 [
  "byte[] tempvalue = (byte[])value[valuecount];\terror = encodingbytearrayhelper(berelement, tempvalue, fmt);\tvaluecount++;\t}\telse if (fmt == 'v') {\tif (valuecount >= value.length) {\tdebug.writeline(\"value argument is not valid, valuecount >= value.length\\n\");\tthrow new argumentexception(string.format(cultureinfo.currentculture, sr.berconverternotmatch));\t}\tif (value[valuecount] != null && !(value[valuecount] is string[])) {",
  "ok",
  1
 ],
 [
  "object [] arguments;\targuments = new object [] { i, j };\tif (compare (\"tostring\", mask, ref stateindex, arguments, ref more_states)) {\tcontinue;\t}\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;",
  "serial port being used",
  1
 ],
 [
  "public void startclustersifneeded(int numclusters, itestoutputhelper output) {\tthis.output = output;\tif (multicluster.clusters.count != numclusters) {\tif (multicluster.clusters.count > 0) multicluster.stopallclientsandclusters();",
  "invalid argument value",
  1
 ],
 [
  "static void dumpkeyinfo (keyinfo ki) {",
  "count",
  0
 ],
 [
  "public static bool operator ! (blah i) {",
  "overloaded operator",
  0
 ],
 [
  "static void usage () {",
  "usage mono xmltool options",
  0
 ],
 [
  "goto found;\t}\tforeach (string ns in common_ns) {\tt = a.gettype (ns + \".\" + tname, false, true);\tif (t != null) {\tmessage = string.format (\"{0} is included in the {1} assembly.\", t.fullname, t.assembly.getname ().name);\tgoto found;\t}\t}\t} catch (exception e){",
  "failure",
  0
 ],
 [
  "public int pastetext (int offset, string text, byte[] copydata, ref idisposable undogroup) {\tif (textpastehandler != null) {\tstring newtext;\ttry {\tnewtext = textpastehandler.formatplaintext (offset, text, copydata);\t} catch (exception e) {",
  "option takes argument",
  1
 ],
 [
  "public static void main () {",
  "elem",
  1
 ],
 [
  "public static bool testmove (byte dest, byte src, int len) {\tbyte[] array = new byte [totallength];\tfor (byte i = 0; i < totallength; ++i) array [i] = i;\tbuffer.blockcopy (array, src, array, dest, len);\tfor (byte i = 0; i < totallength; ++i) {\tif (array [i] != expected (dest, src, len, i)) {\tfor (byte j = 0; j < totallength; ++j) console.write (\"\" + expected (dest, src, len, j) + \" \");\tconsole.writeline ();",
  "got",
  0
 ],
 [
  "if (args.length == 2) ss = readfilewords(args[0], int.parse(args[1]));\telse ss = args;\ttimer t = new timer();\tscg.ienumerable<scg.ienumerable<string>> classes = anagramclasses(ss);\tint count = 0;\tforeach (scg.ienumerable<string> anagramclass in classes) {\tcount++;\tforeach (string s in anagramclass) console.write(s + \" \");\tconsole.writeline();\t}",
  "loading xml",
  1
 ],
 [
  "private void debug (timespan ts) {",
  "test failed",
  1
 ],
 [
  "s15.f11 = 11;\ts15.f12 = 12;\ts15.f13 = 13;\ts15.f14 = 14;\ts15.f15 = 15;\ts15 = mono_return_sbyte15(s15, 9);\tif (s15.f1 != 1+9) {\treturn 1;\t}\tif (s15.f2 != 2+9) {",
  "got but expected",
  0
 ],
 [
  "stringwriter expected = new stringwriter ();\texpected.writeline (\"\");\texpected.writeline (\"  -p, --indicator-style=value\");\texpected.writeline (\"      --color[=value]        controls color info\");\texpected.writeline (\"      --color2[=color]       set color\");\texpected.writeline (\"      --rk=value1:value2     required key/value option\");\texpected.writeline (\"      --rk2=key:value        required {foo} key/value option\");\texpected.writeline (\"      --rk3=value            required {foo}\");\texpected.writeline (\"      --rk4=val              required {foo} val\");\texpected.writeline (\"      --ok[=value1:value2]   optional key/value option\");",
  "request refresh mesh registraion",
  1
 ],
 [
  "public dummy storearg (label pc, parameter argument, source source, textwriter data) {",
  "typedef struct",
  1
 ],
 [
  "public static async task testecho( uri server, websocketmessagetype type, int timeoutmilliseconds, itestoutputhelper output) {\tvar cts = new cancellationtokensource(timeoutmilliseconds);\tstring message = \"hello websockets!\";\tstring closemessage = \"good bye!\";\tvar receivebuffer = new byte[100];\tvar receivesegment = new arraysegment<byte>(receivebuffer);\tusing (clientwebsocket cws = await getconnectedwebsocket(server, timeoutmilliseconds, output)) {\tawait cws.sendasync(websocketdata.getbufferfromtext(message), type, true, cts.token);\tassert.equal(websocketstate.open, cws.state);",
  "event received",
  1
 ],
 [
  "}\tvoid generatereadclassinstance (xmltypemapping typemap, string isnullable, string checktype) {\tsethookvar (\"$object\", \"ob\");\tif (!typemap.typedata.isvaluetype) {\twriteline (typemap.typedata.csharpfullname + \" ob = null;\");\tif (generatereadhook (hooktype.type, typemap.typedata.type)) {\treturn;\t}\tif (_format == serializationformat.literal) {\twriteline (\"\");",
  "making async call",
  1
 ],
 [
  "public static int main () {\tint r;\ta a = new a (1);\tif (a.value != 500) return 1;\tr = a.test (1);\tif (r != 2) return 2;\tr = a [0];\tif (r != 2) return 3;",
  "usage assembly getexecutingassembly operation operand operations get set add subtract multiple divide",
  1
 ],
 [
  "dynpara = null;\tint n = 0;\ttry {\tvv.m(dynpara, n);\t}\tcatch (microsoft.csharp.runtimebinder.runtimebinderexception e) {\tif (errorverifier.verify(errormessageid.badargtypes, e.message, \"s.m<int>(int, int)\")) ret--;\t}\ttry {\tvd.m(n, dynpara);",
  "nas",
  1
 ],
 [
  "public void applydispatchbehavior (operationdescription operationdescription, dispatchoperation dispatchoperation) {",
  "ioperationbehavior applydispatchbehavior",
  0
 ],
 [
  "protected override void applymetadatareferenceadded (projectid projectid, metadatareference metadatareference) {\tvar mdproject = getmonoproject (projectid) as monodevelop.projects.dotnetproject;\tvar path = getmetadatapath (metadatareference);\tif (mdproject == null || path == null) return;\tforeach (var r in mdproject.references) {\tif (r.referencetype == monodevelop.projects.referencetype.assembly && r.reference == path) {",
  "warning duplicate reference is added",
  0
 ],
 [
  "assemblies.add (new uri (new fileinfo (name).fullname).tostring ());\t} else {\tthrow;\t}\t}\t}\tif (error != null) {\tforeach (var path in link_paths){\t}\tif (custom_mode){",
  "in custom mode you need to provide the directory to lookup assemblies from using l",
  0
 ],
 [
  "private static bool callsecondstructinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturnstruct();\tif ((!(bool)(((dynamic)s.instancemethod()).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "endif ndef",
  1
 ],
 [
  "public static void main () {",
  "switch on",
  1
 ],
 [
  "public static int main(string[] args) {\ttry {\tusing (xunitperformanceharness harness = new xunitperformanceharness(args)) {\tforeach(var testname in gettestassemblies()) {\tharness.runbenchmarks(gettestassembly(testname));\t}\t}\treturn 0;\t}\tcatch (exception ex) {",
  "error benchmark execution failed",
  0
 ],
 [
  "loggingservice.warn(item.typename);\treturn item;\t}\t}\tlist = (arraylist)toolboxbyhost[all_hosts];\tif (list != null && list.contains(item)) {\treturn item;\t}\t}\t}",
  "did not throw exception",
  1
 ],
 [
  "}\tcatch (filenotfoundexception e1) {\t_output.writeline(e1.tostring());\t}\tcatch (fileloadexception e2) {\t_output.writeline(e2.tostring());\t}\t}\t}\tcatch (exception e) {",
  "caught other exception",
  1
 ],
 [
  "public void applyclientbehavior (operationdescription operationdescription, clientoperation clientoperation) {",
  "list certificate versions",
  1
 ],
 [
  "int prelistnodefilescount = interceptorcount;\tvar files = batchcli.joboperations.listnodefiles(bug1959324jobid, taskidhello, recursive: true).tolist();\tassert.true(interceptorcount > prelistnodefilescount);\tint prelistjobscount = interceptorcount;\tvar jobs = batchcli.joboperations.listjobs().tolist();\tassert.true(interceptorcount > prelistjobscount);\tint prelistpoolscount = interceptorcount;\tvar pools = batchcli.pooloperations.listpools().tolist();\tassert.true(interceptorcount > prelistpoolscount);\tprotocol.batchrequestmodificationintercepthandler yieldinjectioninterceptor = baserequest => {",
  "yield injector",
  0
 ],
 [
  "{\tmyenum.first, myenum.second, myenum.third, null }\t;\tmyenum[] enumvalues = new myenum[]\t{\tmyenum.first, myenum.second, myenum.third }\t;\tforeach (myenum? a1 in enumnvalues) {\tdynamic d1 = a1;\tif ((d1 ?? myenum.third) != (a1 ?? myenum.third)) {",
  "added value retrieved value",
  1
 ],
 [
  "public async task<int> run (string[] arguments) {\tforeach (string s in arguments) readargument (s);\tif (help) {",
  "secutil",
  1
 ],
 [
  "public void getparam5() {\tm_xsltarg = new xsltargumentlist();\tretobj = m_xsltarg.getparam(szinvalid, szempty);\tif (retobj != null) {",
  "did not return null for an invalid param name",
  0
 ],
 [
  "protected override icollection getchildren() {\tlock (_allclasses) {\tif (_allclasses.count > 0) return _allclasses.values;\ttry {\tintptr comobj;\tint result = nogoop.win32.activex.cocreateinstance (ref nogoop.win32.activex.categoriesmgrclsid, (intptr)0, nogoop.win32.activex.clsctx_inproc_server, ref nogoop.win32.activex.iunknowniid, out comobj);",
  "com create x",
  0
 ],
 [
  "}\treturn true;\tcase \"/warn\": if (value.length == 0) {\tenvironment.exit (1);\t}\ttry {\twarning_level = int.parse (value, cultureinfo.invariantculture);\t} catch {\t}\tif (warning_level < 0 || warning_level > 4) {",
  "fatal error invalid warning level specified with option",
  0
 ],
 [
  "public void test () {\tmyobj = new myclass ();\tvar something = \"key\";\tswitch (something) {\tcase \"key\": myobj.firstevent += (sender, e) => {",
  "firstevent",
  0
 ],
 [
  "protected override void run () {\tvar windows = gtk.window.listtoplevels ();\tforeach (var window in windows) {",
  "tr",
  1
 ],
 [
  "stringwriter expected = new stringwriter ();\texpected.writeline (\"\");\texpected.writeline (\"  -p, --indicator-style=value\");\texpected.writeline (\"      --color[=value]        controls color info\");\texpected.writeline (\"      --color2[=color]       set color\");\texpected.writeline (\"      --rk=value1:value2     required key/value option\");\texpected.writeline (\"      --rk2=key:value        required {foo} key/value option\");\texpected.writeline (\"      --rk3=value            required {foo}\");\texpected.writeline (\"      --rk4=val              required {foo} val\");\texpected.writeline (\"      --ok[=value1:value2]   optional key/value option\");",
  "ok",
  1
 ],
 [
  "s17.f16 = 16;\ts17.f17 = 17;\ts17 = mono_return_sbyte17(s17, 9);\tif (s17.f1 != 1+9) {\treturn 1;\t}\tif (s17.f2 != 2+9) {\treturn 2;\t}\tif (s17.f3 != 3+9) {",
  "got but expected",
  0
 ],
 [
  "if (key != null) version.tryparse (key.getvalue (null) as string, out version);\t}\tif (version == null || version < minversion || location == null || !file.exists (path.combine (location, \"bin\", \"libgtk-win32-2.0-0.dll\"))) {\tstring url = \"http: string caption = \"fatal error\";\tstring message = \"{0} did not find the required version of gtk#. please click ok to open the download page, where \" + \"you can download and install the latest version.\";\tif (displaywindowsokcancelmessage ( string.format (message, brandingservice.applicationname, url), caption) ) {\tprocess.start (url);\t}\treturn false;\t}",
  "found gtk version",
  0
 ],
 [
  "if (loadxsl(\"xmlresolver_document_function_absolute_uri.xsl\", xslinputtype, readertype) == 1) {\tif (transformresolver(\"fruits.xml\", outputtype, navtype, new xmlurlresolver()) == 1) {\tverifyresult(expected);\treturn;\t}\telse {\tassert.true(false);\t}\t}\telse {",
  "failed to load style sheet",
  0
 ],
 [
  "writer.writeline (\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\");\twriter.writeline (\"<!doctype plist public \\\"- writer.writeline (\"<plist version=\\\"1.0\\\">\");\tforeach (var setting in theme.settings) {\tif (setting.name != null) {\t}\tif (setting.scopes.count > 0) {\t}\tif (setting.settings.count > 0) {\tforeach (var kv in setting.settings) {\t}",
  "value should be dbnull value",
  1
 ],
 [
  "numsasdefinitions += results.count();\tforeach (var m in results) console.out.writeline(\"\\t{0}\", m.identifier.name);\t}\twhile (results != null && !string.isnullorwhitespace(results.nextpagelink)) {\tresults = task.run(() => userkeyvaultclient.getsasdefinitionsnextasync(results.nextpagelink)).configureawait(false).getawaiter().getresult();\tif (results != null && results != null) {\tnumsasdefinitions += results.count();\tforeach (var m in results) console.out.writeline(\"\\t{0}\", m.identifier.name);\t}\t}",
  "number of storage sas definitions in the vault",
  0
 ],
 [
  "#else foreach (var url in files) body (url);\t#endif byte [] buffer = new byte [8192];\tvar symbolescapere = new system.text.regularexpressions.regex (\"[^\\\\w_]\");\tforeach (var url in files) {\tstring fname = locatefile (new uri (url).localpath);\tstring aname = makebundle.getassemblyname (fname);\tstring encoded = symbolescapere.replace (aname, \"_\");\tif (prog == null) prog = aname;\tvar stream = streams [url];\tvar real_size = sizes [url];",
  "embedding",
  0
 ],
 [
  "m_xsltarg.addparam(\"myarg6\", szempty, d6);\tm_xsltarg.removeparam(\"myarg6\", szempty);\tretobj = m_xsltarg.getparam(\"myarg6\", szempty);\tif (retobj != null) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg7\", szempty, d7);\tm_xsltarg.removeparam(\"myarg7\", szempty);\tretobj = m_xsltarg.getparam(\"myarg7\", szempty);\tif (retobj != null) {",
  "expected",
  1
 ],
 [
  "public void inbufferfilled_discard_cycle() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (serialport com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {",
  "xml exception dropped connection",
  1
 ],
 [
  "public void logwarning (string message) {",
  "msbuild",
  0
 ],
 [
  "public int test_function (int a, bool b) {",
  "test function called",
  0
 ],
 [
  "if (s16.f3 != 3+9) {\treturn 3;\t}\tif (s16.f4 != 4+9) {\treturn 4;\t}\tif (s16.f5 != 5+9) {\treturn 5;\t}\tif (s16.f6 != 6+9) {",
  "retrieved",
  1
 ],
 [
  "}\toutput.writeline();\t}\tif (type.hasmethods) {\tcancellationtoken.throwifcancellationrequested();\tdisassemblemethod(m);\toutput.writeline();\t}\t}\tif (type.hasevents) {",
  "foreach var ev in type events",
  0
 ],
 [
  "static bool callsecondstructoperator() {\tint failcount = 0; verify.firstcalled = false;\tif ( (!(bool)(firstclassreturndynamicstruct<int>.staticproperty + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "no exception thrown",
  1
 ],
 [
  "public void var10() {\ttry {\t#pragma warning disable 0618 new xsltransform().transform((ixpathnavigable)null, (xsltargumentlist)null, (textwriter)null, (xmlresolver)null);\t#pragma warning restore 0618 }\tcatch (argumentnullexception) {\treturn;\t}\tcatch (exception e) {\t_output.writeline(e.tostring());",
  "failed to add get a value for",
  1
 ],
 [
  "public static void emitvariable( string collectionname, int keysize, jsonwebkey key ) {\tvar text = key.tostring();\ttext = text.replace( \"\\\"\", \"\\\\\\\"\" );\ttext = text.replace( \"\\r\\n\", \"\\\\r\\\\n\" );",
  "debug",
  1
 ],
 [
  "public void compilemethod(cppmethodcodenode methodcodenodeneedingcode) {\tmethoddesc method = methodcodenodeneedingcode.method;\tif (_compilation.logger.isverbose) {\tstring methodname = method.tostring();",
  "replay edge update",
  1
 ],
 [
  "s12.f11 = 11;\ts12.f12 = 12;\ts12 = mono_return_sbyte12(s12, 9);\tif (s12.f1 != 1+9) {\treturn 1;\t}\tif (s12.f2 != 2+9) {\treturn 2;\t}\tif (s12.f3 != 3+9) {",
  "got but expected",
  0
 ],
 [
  "}\tms.flush ();\tms.position = 0;\tstring statusline = null;\tusing (streamreader sr = new streamreader (ms, encoding.utf8)) {\tstatusline = sr.readline ();\t}\tstringwriter sw = new stringwriter ();\tif (statusline.startswith (\"post /original/\")) {\tendpoint ep = socket.localendpoint;",
  "location http sw writeline",
  0
 ],
 [
  "public void basictest_getipinterfacestatistics_success() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfacestatistics stats = nic.getipstatistics();",
  "nonunicastpacketssent",
  0
 ],
 [
  "public void test<t2>() {",
  "less",
  0
 ],
 [
  "public override bool onstart() {",
  "foo has a value of",
  1
 ],
 [
  "static void externalauthenticationtest () {\tstring user = environment.username;\tif (!environment.userdomainname.equals(string.empty)) user = environment.userdomainname + \"\\\\\" + environment.username;\toracleconnection con = new oracleconnection(\"data source=palis;integrated security=true\");\ttry {\tcon.open();\toraclecommand cmd = con.createcommand();\tcmd.commandtext = \"select user from dual\";\toracledatareader reader = cmd.executereader();",
  "cs",
  1
 ],
 [
  "string basepath = @\"xml-test-suite/xmlconf/\" + subdir + @\"/not-wf\";\tdirectoryinfo [] dirs = null;\tif (issuntest) dirs =  new directoryinfo [] {new directoryinfo (basepath)};\telse dirs = new directoryinfo (basepath).getdirectories ();\tforeach (directoryinfo di in dirs) {\tforeach (fileinfo fi in di.getfiles (\"*.xml\")) {\ttry {\txmltextreader xtr = new xmltextreader (fi.fullname);\txtr.namespaces = false;\twhile (!xtr.eof) xtr.read ();",
  "incorrectly wf",
  0
 ],
 [
  "private static void addlistenercomponent(eventloginternal component, string compmachinename, string complogname) {\tlock (internalsyncobject) {",
  "did not throw exception",
  1
 ],
 [
  "protected void readpo(string filename) {\txmlserializer serializer=new xmlserializer(typeof(purchaseorder));\tserializer.unknownnode+=new xmlnodeeventhandler(serializer_unknownnode);\tserializer.unknownattribute+=new xmlattributeeventhandler(serializer_unknownattribute);\tfilestream fs=new filestream(filename, filemode.open);\tpurchaseorder po;\tpo=(purchaseorder)serializer.deserialize(fs);\tfs.close();",
  "tcp channel already registered an add in may have registered it",
  1
 ],
 [
  "public static void usage (string message) {\tif (message != null) {\tconsole.writeline (\"{0}{1}{0}\", environment.newline, message);\t}",
  "g assert",
  1
 ],
 [
  "}\t}\tcatch (nullreferenceexception) {\tcounter++;\t}\ttry {\tthrow new exception(\"testing filter\");\t}\tcatch (exception e) when (e.message == \"testing filter\" && counter++ > 0) {\tif (e.message != \"testing filter\") {",
  "unexpected exception message",
  0
 ],
 [
  "static void updatereferences (string url, string ignorefile) {\tconsole.writeline ();",
  "updating service references",
  0
 ],
 [
  "public int v() {\tstring type = curvariation.params[0].tostring();",
  "successfully switched to mode",
  1
 ],
 [
  "foreach (runtime runtime in runtimes) {\tif (!runtime.ishostapplicationassembly) {\tloaddependencies();\t}\ttype t = runtime.findtype(classname);\tif (t != null) {\treturn t;\t}\t}\tif (hasshownerrormessage) {",
  "cannot find class",
  0
 ],
 [
  "if (urnscheme != null) {\tif ((urnscheme == urnscheme.sidscheme) && (principaltype == typeof(principal) || principaltype == typeof(groupprincipal) || principaltype.issubclassof(typeof(groupprincipal)))) {\tsecurityidentifier sid = new securityidentifier(urnvalue);\tbyte[] sidb = new byte[sid.binarylength];\tsid.getbinaryform(sidb, 0);\tif (sid == null) throw new argumentexception(sr.storectxsecurityidentityclaimbadformat);\tintptr psid = intptr.zero;\ttry {\tpsid = utils.convertbytearraytointptr(sidb);\tif (unsafenativemethods.isvalidsid(psid) && (utils.classifysid(psid) == sidtype.fakeobject)) {",
  "after finally",
  1
 ],
 [
  "private static void appendil(methodinfo method, stringwriter sw, itypefactory typefactory) {\tilreader reader = ilreaderfactory.create(method);\texceptioninfo[] exceptions = reader.ilprovider.getexceptioninfos();\tvar writer = new richilstringtotextwriter(sw, exceptions);",
  "method",
  0
 ],
 [
  "public static void threadmethod_a() {",
  "column name",
  1
 ],
 [
  "if (entry.toupper() == \"q\") return false;\treturn true;\t}\tpublic void showdefaults() {\tconsole.writeline ();\tif (provider.equals (string.empty) && factory == null) console.writeline (\"provider is not set.\");\telse if(factory != null) {\t}\telse {\tif (provider.equals (\"loadextprovider\")) {",
  "extra check optional report ignore entries not in the defect list",
  1
 ],
 [
  "static int test_0_child_goes_away () {",
  "test child goes away",
  0
 ],
 [
  "public static void createxmllangtestfile(string strfilename) {\tstream s = new memorystream();\ttextwriter tw = new streamwriter(s);",
  "pgroup",
  0
 ],
 [
  "private void clickhandler (object sender, eventargs e) {\tif (!visible) {\treturn;\t}\ttitlebutton button = (titlebutton) sender;\tswitch (button.caption) {\tcase captionbutton.close: form.close ();\tbreak;",
  "help not implemented",
  0
 ],
 [
  "}\tif (t.status != taskstatus.faulted) {\tconsole.writeline (\"failed (status={0})\", t.status);\treturn false;\t}\tif (!(t.exception.innerexception is applicationexception)) {\treturn false;\t}\treturn true;\t} catch (exception e) {",
  "failed",
  0
 ],
 [
  "private static void save () {\tusing (filestream file = new filestream (bookmark_file,filemode.create)) {\tserializer.serialize (file,root_group);\t}",
  "error trying to read configure in for project",
  1
 ],
 [
  "bwarningcallback = true;\twarningcount++;\t}\telse if (args.severity == xmlseveritytype.error) {\tberrorcallback = true;\terrorcount++;\t}\txmlschemaexception se = args.exception as xmlschemaexception;\tif (se.innerexception != null) {\t}",
  "inner exception is null",
  0
 ],
 [
  "static void readresult(idatareader rdr, datatable dt) {\tforeach (datarow schemarow in dt.rows) {\tforeach (datacolumn schemacol in dt.columns) console.writeline(schemacol.columnname + \" = \" + schemarow[schemacol]);\tconsole.writeline();\t}\tint nrows = 0;\tint c = 0;\tstring output, metadatavalue, datavalue;\twhile(rdr.read()) {",
  "code",
  1
 ],
 [
  "console.writeline (\"graphics created ok {0}\", gr != null);\tif (gr != null) {\tpen p = new pen (color.red, 2);\tgr.drawline (p, 10.0f, 10.0f, 90.0f, 90.0f);\tgr.drawrectangle (p, 10.0f, 10.0f, 80.0f, 80.0f);\tp.dispose ();\t}\tbmp.save (filename, imgfmt);\tgr.dispose ();\tbmp.dispose ();",
  "ok",
  1
 ],
 [
  "public static void main(string[] args) {",
  "note that null prints as blank or",
  0
 ],
 [
  "public static int test_0_valuetype_invokes () {\temptystruct es = default (emptystruct);\tes.value = 100;\tvar ar1 = (actionref)delegate.createdelegate(typeof (actionref), typeof (emptystruct).getmethod(\"test\"));\tif (ar1 (ref es) != 110) {",
  "expected got",
  0
 ],
 [
  "static bool callsecondclassoperator() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturnclass<int>();\tif ( (!(bool)(((dynamic)s.instanceproperty) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "processed",
  1
 ],
 [
  "public override void setvalue(object component, object value) {",
  "signextend bytes from to return block",
  1
 ],
 [
  "bool bpassed = false;\tbyte[] buffer = new byte[ibuffersize];\treloadsource(ereader_type.binhex_test);\tdatareader.positiononelement(st_elem_name1);\tdatareader.read();\tif (checkcanreadbinarycontent()) return true;\ttry {\tdatareader.readcontentasbinhex(buffer, iindex, icount);\t}\tcatch (exception e) {",
  "actual exception",
  0
 ],
 [
  "private void writeservicepoint (string label, servicepoint sp) {\tconsole.writeline (\"\\n\" + label);",
  "unused buffer",
  1
 ],
 [
  "public static int run() {\tint iterationcount = 0;\twhile (!visited && iterationcount++ < 10000) {\tgc.keepalive(new dummy());\tgc.collect();\t}\tif (visited) {",
  "where system ca bundle crt is in pem format",
  1
 ],
 [
  "public override void help() {\tconsole.writeline();\tconsole.writeline();\tconsole.writeline();\tconsole.writeline();",
  "b is a tp",
  1
 ],
 [
  "protected override void loadfromprimary() {",
  "principalcollection containsenumtest restoring from bookmark",
  1
 ],
 [
  "int x = 0;\tfor (int i = 0; i < 100; i++) x++;\tconsole.writeline (x);\tstring useless = \"useless string\";\tif (useless.equals (\"other useless\")) {\tuseless = string.empty;\t}\tuseless = string.concat (useless,\" 1\");\tfor (int j = 0; j < useless.length; j++) {\tif (useless[j] == 'u') console.writeline (\"i have detected an u char\");",
  "isreceiveonly",
  1
 ],
 [
  "foreach (servicedata sd in services.services) {\tif (sd.protocols == null) continue;\tforeach (string prot in sd.protocols) {\tstring ns = sd.namespace + \".\" + prot;\txmlelement elem = doc.selectsinglenode (\"assemblies/assembly/namespaces/namespace[@name='\" + ns + \"']\") as xmlelement;\tif (elem == null) {\tign++;\tcontinue;\t}\tif (!file.exists (getwsdlfile(sd))) {",
  "program specified to open file with programtoopenwith is not installed on this machine",
  1
 ],
 [
  "}\t} }, { \"remote-mode\", \"accept crefs from stdin to display in the browser.\\n\" + \"for monodevelop integration.\", v => remote_mode = v != null }, { \"about|version\", \"write version information and exit.\", v => show_version = v != null }, { \"h|?|help\", \"show this message and exit.\", v => show_help = v != null }, };\tlist<string> topics = p.parse (args);\tif (basedir == null) basedir = directory.getparent (system.reflection.assembly.getexecutingassembly ().location).fullname;\tif (show_version) {\tversion ver = assembly.getexecutingassembly ().getname ().version;\tif (ver != null) console.writeline (ver.tostring ());\treturn r;\t}\tif (show_help) {",
  "result",
  1
 ],
 [
  "sw.writeline (@\"        <tr id='el{0}' class='errorlist' style='display: none'>\", assembly);\tsw.writeline (@\"            <td colspan='4'>\");\tsw.writeline (@\"                <table cellpadding='2' cellspacing='0' width='100%'>\");\tint test_num = 0;\tforeach (failedtest ft in failed_tests.values) {\tsw.writeline (\"                    <tr onclick=\\\"toggle('as{0}ed{1}')\\\" onmouseover='highlight(this)' onmouseout='unhighlight(this)'>\", assembly, test_num);\tsw.writeline (@\"                        <td style='width: 17px'><img src='media/bullet.png' /></td>\");\tsw.writeline (@\"                    <tr id='as{0}ed{1}' class='errordetail' style='display: none'>\", assembly, test_num);\ttest_num++;\t}",
  "tr",
  0
 ],
 [
  "public override object visit(icsharpcode.nrefactory.monocsharp.statement stmt) {",
  "end if",
  1
 ],
 [
  "if (size != dict.count) {\tconsole.writeline(\"list.size ({0}) != dict.count ({1})\", size, dict.count);\tretval = false;\t}\tnode n = startsentinel.next, n2;\twhile (n != endsentinel) {\tif (!dict.find(n.item, out n2)) {\tretval = false;\t}\telse if (n != n2) {",
  "wrong node in dict for item",
  0
 ],
 [
  "}\tstringwriter sw = new stringwriter ();\tif (!have_auth) {\tsw.writeline ();\tsw.flush ();\t} else if (cl > 0 && statusline.startswith (\"post \")) {\tsw.writeline ();\tsw.write (\"looks ok\");\tsw.flush ();\t} else {",
  "http test failed",
  0
 ],
 [
  "public static int test_shift_2 () {\tunchecked {\tlong c = (long)0x800000ff00000000;\tlong d = (long)0x8ef0abcd00000000;\tlong t;\tint sa;\tt = c>>4;\tif (t != (long)0xf800000ff0000000) return 1;\tif ((t << 4) != c) return 1;\tt = d>>40;",
  "x",
  0
 ],
 [
  "public void callback() {\tusing (var com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (var com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\tvar callbackhandler = new callbackhandler();\tint elapsedtime;",
  "someenum result",
  1
 ],
 [
  "public static void resolvecallback(iasyncresult ar) {\tstacktrace st = new stacktrace();\tframe_count = st.framecount;\tfor(int i = 0; i < st.framecount; i++) {\tstackframe sf = st.getframe(i);",
  "no value",
  1
 ],
 [
  "if (s14.f3 != 3+9) {\treturn 3;\t}\tif (s14.f4 != 4+9) {\treturn 4;\t}\tif (s14.f5 != 5+9) {\treturn 5;\t}\tif (s14.f6 != 6+9) {",
  "got but expected",
  0
 ],
 [
  "static void call (installer instance, string method, object arg) {",
  "m",
  0
 ],
 [
  "cmd.connection = conn;\tcmd.commandtext = \"select 1 / 0;\";\tcmd.commandtimeout = 3;\tconn.open();\ttry {\tvar output = cmd.executenonquery();\t}\tcatch (exception e) {\t}\t}",
  "key",
  1
 ],
 [
  "public override void onapplytemplate() {\tvar resizer = gettemplatechild(\"part_resizer\") as resizer;\tif (resizer != null) resizer.dragstarted += (s, e) => {\tisresizing = true;\tshowresizeroverlaywindow(s as resizer);",
  "issuing request type",
  1
 ],
 [
  "writeline ();\tif (detailed) {\t}\twriteline ();\twriteline (\"-?\");\twriteline ();\tif (!detailed) return;\twriteline ();\twriteline ();\twriteline ();",
  "did not throw exception",
  1
 ],
 [
  "cmd.transaction.commit();\toraclecommand select = con.createcommand ();\tselect.commandtext = \"select blob_column from blobtest2\";\toracledatareader reader = select.executereader ();\telse {\toraclelob lob = reader.getoraclelob (0);\tif (lob == oraclelob.null) console.writeline(\"lob is oraclelob.null\");\telse {\tbyte[] blob = (byte[]) lob.value;\tstring result = gethexstring(blob);",
  "bytearray and blob are not the same bad",
  0
 ],
 [
  "public void loadgeneric9(xslinputtype xslinputtype, readertype readertype, outputtype outputtype, navtype navtype) {\tstring expected = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?><result><fruit>apple</fruit><fruit>orange</fruit></result>\";\tif ((loadxsl_resolver(\"xmlresolver_main.xsl\", xslinputtype, readertype, getdefaultcredresolver()) == 1)) {\tif ((loadxsl(\"xmlresolver_main.xsl\", xslinputtype, readertype) == 1) && (transform((string) \"fruits.xml\", (outputtype) outputtype, navtype) == 1)) {\tverifyresult(expected);\treturn;\t}\t}\telse {",
  "failed to load",
  0
 ],
 [
  "public void testdisable() {\tanalyze<basemethodcallwithdefaultparameteranalyzer>(@\" public class mybase {\tpublic virtual void foobar(int x = 12) {",
  "foo bar",
  0
 ],
 [
  "md5.initialize();\ttemp = md5.computehash(this.context.randomsc, 0, this.context.randomsc.length);\tthis.context.serverwriteiv = new byte[this.ivsize];\tbuffer.blockcopy(temp, 0, this.context.serverwriteiv, 0, this.ivsize);\t}\telse {\tthis.context.clientwriteiv = ciphersuite.emptyarray;\tthis.context.serverwriteiv = ciphersuite.emptyarray;\t}\t}",
  "please type without the quotes you shouldn t see it as you type",
  1
 ],
 [
  "public void emptynewline() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {",
  "exception in setvalue in property propagation for prop ex",
  1
 ],
 [
  "public void asyncresult_null() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {",
  "verifying endwrite with null asyncresult",
  0
 ],
 [
  "public void runtest () {\tif (configuration.dtda) {",
  "game over",
  1
 ],
 [
  "public void print () {",
  "writefullbegintag",
  1
 ],
 [
  "string compare = string.empty;\tint i = 0;\tforeach (var element in collectionsource.sortedlist) {\tcollectionsource.fill(ric,element);\tassert.that(((basedataitem)ric[0]).dbvalue,is.greaterthanorequalto(compare));\tcompare = ((basedataitem)ric[0]).dbvalue;\ti++;\t}\tdo {\tcollectionsource.fill(ric);",
  "verifying call discard method several times after input buffer has been filled",
  1
 ],
 [
  "public void regressiontest3(xslinputtype xslinputtype, readertype readertype) {\ttry {\tloadxsl(\"bug370868.xsl\", xslinputtype, readertype);\t}\tcatch (system.xml.xsl.xsltexception e) {\tif (e.linenumber == 3 && e.lineposition == 2) return;",
  "lineposition",
  1
 ],
 [
  "try {\tstrongnameutility utility = new strongnameutility();\tif (!utility.validatestrongnametoolexistance(windowssdkpath)) {\treturn false;\t}\tstring path = assembly.itemspec;\tstring output;\tstring arguments = \"-q -t \\\"\" + path + \"\\\"\";\tbool success = utility.execute(arguments, out output);\tif (!success) {",
  "got but expected",
  1
 ],
 [
  "main.progress = 0;\tfileinfo masterinfoinfo = new fileinfo (masterinfo);\tif (masterinfoinfo.exists) {\tmain.status = \"download failed, reusing cached (possibly out of date) masterinfo\";\tif (done != null) done (masterinfo);\t}\telse main.status = \"download failed\";\t});\t}\t});",
  "findresultenumerator movenext no resultset",
  1
 ],
 [
  "public void dispose() {",
  "i m writting a test and i will fill a screen with some useless code",
  1
 ],
 [
  "public static int main() {\twaitsubsystemtests.doublesetoneventwithtimedoutwaitershouldnotstayinwaiterslist();\twaitsubsystemtests.manualreseteventtest();\twaitsubsystemtests.autoreseteventtest();\twaitsubsystemtests.semaphoretest();\twaitsubsystemtests.mutextest();\twaitsubsystemtests.waitdurationtest();\tthreadpooltests.runprocessorcountitemsinparallel();\tthreadpooltests.runmorethanmaxjobsmakesonejobwaitforstarvationdetection();",
  "runruntests attachtoparentignored waiting on outer task if we hang that s a failure",
  1
 ],
 [
  "private void conditionsplitbad (object value) {\tuseisoperatortest test = (value as useisoperatortest);\tif (test != null) {",
  "retrieved",
  1
 ],
 [
  "static int main () {\tint res;\tres = testproperty ();\tif (res != 0) return 10 + res;\tres = testfield ();\tif (res != 0) return 20 + res;",
  "console writeline",
  1
 ],
 [
  "public override object getvalue(object component) {\t#if debug if (propdescusageswitch.traceverbose) {\tstring compname = \"(null)\";\tif (component != null) compname = component.tostring();\t}\t#endif if (isextender) {",
  "did not throw exception",
  1
 ],
 [
  "public static void createbigelementtestfile(string strfilename) {\tmemorystream ms = new memorystream();\ttextwriter tw = new streamwriter(ms);\tstring str = new string('z', (1 << 20) - 1);",
  "root",
  0
 ],
 [
  "return 1;\t}\tfloat2 s2;\ts2.f1 = 1;\ts2.f2 = 2;\ts2 = mono_return_float2(s2, 906);\tif (s2.f1 != 1+906) {\treturn 1;\t}\tif (s2.f2 != 2+906) {",
  "finishing type",
  1
 ],
 [
  "static longstaticconstructorwithoutfields () {",
  "strong name cannot be verified for delay signed assembly continuing anyway",
  1
 ],
 [
  "static void setupmypackage(oracleconnection con) {",
  "resourcetoolkit bclnrefactoryresourceresolver found key",
  1
 ],
 [
  "return;\t}\twriter.flush ();\tsocket data_cnc = data.accept ();\tvar datastr = new networkstream (data_cnc, false);\tint ch;\twhile ((ch = datastr.readbyte ()) != -1){\tresult.add ((byte)ch);\t}\tdata_cnc.close ();",
  "parallel findall starting",
  1
 ],
 [
  "try {\ttransform(\"fruits.xml\", transformtype, doctype);\t}\tcatch (system.invalidoperationexception e2) {\tcheckexpectederror(e2, \"system.xml\", \"xslt_nostylesheetloaded\", new string[] { \"idontexist.xsl\" });\treturn;\t}\t}\t}\telse {",
  "value based cfg",
  1
 ],
 [
  "foreach (createcollectioninfo c in createmethods.values) {\twritecreatecollectionmethod(c);\t}\twriter.writeline();\tforeach (string idname in idnames.values) {\twriter.write(\"string \");\twriter.write(idname);\twriter.writeline(\";\");\t}\twriter.writeline();",
  "error generating aspnetmastercontent for template",
  1
 ],
 [
  "public void read_datareceivedbeforetimeout() {\tusing (serialport com1 = tcsupport.initfirstserialport()) using (serialport com2 = tcsupport.initsecondserialport(com1)) {\tchar[] charxmitbuffer = tcsupport.getrandomchars(512, tcsupport.characteroptions.none);\tstring endstring = \"end\";\tasyncread asyncread = new asyncread(com1, endstring);\tvar asyncreadtask = new task(asyncread.read);\tchar endchar = endstring[0];\tchar notendchar = tcsupport.getrandomotherchar(endchar, tcsupport.characteroptions.none);",
  "verifying that readto string will read characters that have been received after the call to read was made",
  0
 ],
 [
  "static void findderivedclasses(hashset<iclass> resultlist, iclass baseclass, ienumerable<iprojectcontent> projectcontents, bool directderivationonly) {\tbaseclass = baseclass.getcompoundclass();",
  "findderivedclasses for",
  0
 ],
 [
  "public static void error(testresult result, object actual, object expected, string source, string message, string stack, string filename, int lineno) {\tif (internal != null) {\tinternal.error(result, testlogflags.text, stringex.format(actual), stringex.format(expected), source, message, stack, filename, lineno );\t}\telse {",
  "details",
  0
 ],
 [
  "private static bool ulongtypewithnumbericconversionfromushortinassignment() {\tint failcount = 0;\tushort origin = ushort.maxvalue;\tdynamic d = origin;\tulong result = d;\tif (result != origin) {\tfailcount++;",
  "nrefactorydesignerloader parse finished",
  1
 ],
 [
  "eventlogpermission permission = new eventlogpermission(eventlogpermissionaccess.administer, machinename);\tpermission.demand();\tmutex mutex = null;\truntimehelpers.prepareconstrainedregions();\ttry {\tsharedutils.entermutex(eventlogmutexname, ref mutex);\tif (sourceexists(source, machinename, true)) {\tif (\".\".equals(machinename)) throw new argumentexception(sr.getstring(sr.localsourcealreadyexists, source));\telse throw new argumentexception(sr.getstring(sr.sourcealreadyexists, source, machinename));\t}",
  "virtual network gateway is deployed successfully",
  1
 ],
 [
  "break;\tcase \"whitespace\": strxml = \"<root>\t\t\t </root>\";\tbreak;\t}\txmlreader xr;\txr = createreader(new stringreader(strxml));\tdo { xr.read(); }\twhile ((xr.nodetype.tostring() != variation.param.tostring()) && (xr.readstate != readstate.endoffile));\tif (xr.readstate == readstate.endoffile || xr.nodetype.tostring() != variation.param.tostring()) {\txr.dispose();",
  "nodetype",
  0
 ],
 [
  "break;\tcase \"\\\\usesimplereader\": setusesimplereader (parms);\tbreak;\tbreak;\t}\t}\tpublic void listproviders() {\tdatatable table = dbproviderfactories.getfactoryclasses();\tfor (int r = 0; r < table.rows.count; r++) {\tconsole.writeline(\"---------------------\");",
  "break on hyphen also a list",
  1
 ],
 [
  "writer.exitstyle(style);\twriter.endstylecontext();\t}\telse {\twriter.beginstylecontext();\twriter.enterstyle(style);\twriter.writetext(item[fieldindices[field]], true);\twriter.exitstyle(style);\twriter.endstylecontext();\t}",
  "td",
  0
 ],
 [
  "foreach (var e in entries) {\taliases.appendformat (\"    <reference include=\\\"{0}\\\">\", path.getfilenamewithoutextension (e.referencefile));\taliases.append (environment.newline);\taliases.appendformat (\"      <aliases>{0}</aliases>\", e.name);\taliases.append (environment.newline);\taliases.appendformat (\"      <hintpath>..\\\\..\\\\{0}</hintpath>\", path.getfilename (e.referencefile));\taliases.append (environment.newline);\taliases.appendline (\"    </reference>\");\t}\tfile.writeline ();",
  "using nunit framework",
  0
 ],
 [
  "if (!int.tryparse (args [0], out tcpport)) return 2;\tif (!int.tryparse (args [1], out processid)) return 3;\tvar thread = new thread (new parameterizedthreadstart (loop));\tthread.start (tcpport);\tvar sw = stopwatch.startnew ();\twhile (!disonnected) {\tsentevent.waitone ();\tsw.restart ();\tif (!responseevent.waitone (100)) {\tstartcollectingstacks ();",
  "create adapter",
  1
 ],
 [
  "public void refreshpackages () {\ttry {\tcancelcurrentrefresh ();\tgetinstalledpackages ();\t} catch (exception ex) {",
  "refresh packages folder error",
  0
 ],
 [
  "static iprojectcontent tryreadfromcache(string cachefilename) {\tif (cachefilename == null || !file.exists(cachefilename)) return null;",
  "deserializing",
  0
 ],
 [
  "private testoledb () {\toledbcommand cmd;\tm_cnc = new oledbconnection (\"provider=postgresql;addr=127.0.0.1;database=rodrigo\");\tm_cnc.open ();",
  "element root any",
  1
 ],
 [
  "public void listnodeagentskus() {\taction test = () => {\tusing (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {\tvar nas = batchcli.pooloperations.listnodeagentskus().tolist();\tassert.true(nas.count > 0);\tforeach (nodeagentsku curnas in nas) {",
  "skuid",
  0
 ],
 [
  "public void testnullnode() {\ttestwrongcontext<removebracescoderefactoringprovider>(@\"class testclass {\tvoid test() {\tif (true) {",
  "calling ldap get values",
  1
 ],
 [
  "else dirs = new directoryinfo (basepath).getdirectories ();\tforeach (directoryinfo di in dirs) {\tforeach (fileinfo fi in di.getfiles (\"*.xml\")) {\ttry {\txmltextreader xtr = new xmltextreader (fi.fullname);\txtr.namespaces = false;\txtr.normalization = true;\txmlreader xr = new xmlvalidatingreader (xtr);\twhile (!xr.eof) xr.read ();\t} catch (xmlexception ex) {",
  "incorrectly not wf",
  0
 ],
 [
  "public static void main(string[] args) {",
  "read schema with no keyinfo",
  1
 ],
 [
  "static void thread_start () {",
  "thread start",
  0
 ],
 [
  "static imembershipcondition processstrongnamemembership (string[] args, ref int i) {\tif (args [++i] != \"-file\") {",
  "missing file parameter",
  0
 ],
 [
  "private static void printusage() {",
  "arguments filename arguments will be read and processed from this file",
  0
 ],
 [
  "public void additem (catalogentry data) {\tif (this.entriesdict.containskey (data.string)) {",
  "duplicate message id in po file ignoring it to achieve validity",
  0
 ],
 [
  "public void var1() {\ttry {\t#pragma warning disable 0618 new xsltransform().load((ixpathnavigable)null);\t#pragma warning restore 0618 }\tcatch (argumentnullexception) {\treturn;\t}\tcatch (exception e) {\t_output.writeline(e.tostring());",
  "failed enum",
  1
 ],
 [
  "private static void deletekey(string keyname) {\tvar vaultaddress = inputvalidator.getvaultaddress();\tkeyname = (keyname == string.empty) ? inputvalidator.getkeyname() : keyname;\tvar keybundle = task.run(() => keyvaultclient.deletekeyasync(vaultaddress, keyname)).configureawait(false).getawaiter().getresult();",
  "waited",
  1
 ],
 [
  "return vcclangassembler;\t}\tstatic toolchainprogram getccompiler (bool staticlinkmono, bool staticlinkcruntime) {\ttoolchainprogram program = null;\tstring compiler = getenv (\"cc\", \"\");\tif (compiler.length != 0) {\tprogram = new toolchainprogram (\"cc\", compiler);\t} else {\tprogram = visualstudiosdktoolchainhelper.getinstance ().getvccompiler ();\tif (program == null || program.path.length == 0) {",
  "warning couldn t find installed visual studio sdk fallback to cl exe and default environment",
  0
 ],
 [
  "public static void main() {\tstring connectionstring = null;\tconnectionstring = \"host=localhost;\" + \"dbname=test;\" + \"user=postgres\";\tpgsqlconnection con;",
  "addnlinkedattrset dispose disposing membersearchersqueue",
  1
 ],
 [
  "public override void onstop() {",
  "orleansazureweb onstop",
  0
 ],
 [
  "taskstatemonitor statemonitor = batchcli.utilities.createtaskstatemonitor();\tstatemonitor.waitall(new list<cloudtask> { boundtask }, taskstate.completed, timespan.fromminutes(2));\tboundjobschedule.refresh();\tboundjobschedule.refresh();\tboundjob.refresh();\tboundjob.refresh();\tboundtask.refresh();\tboundtask.refresh();\tnodefile nodefile = boundtask.getnodefile(\"stdout.txt\");\tnodefile.refresh();",
  "refreshing task file",
  0
 ],
 [
  "private static bool callsecondstructoperator() {\tint failcount = 0;\tdynamic d = new firstclassreturnstruct();\tverify.firstcalled = false;\tif ((!(((secondstruct)d.instancemethod()) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "internal int value",
  1
 ],
 [
  "private void thread_func() {\tthread thr=thread.currentthread;",
  "locking thr for",
  0
 ],
 [
  "public override imessage invoke (imessage request) {\timethodcallmessage call = (imethodcallmessage)request;",
  "resourcetoolkit nrefactoryresourceresolver getresourcesetreference is unable to find a suitable resource file for",
  1
 ],
 [
  "static void dump(astcontext ctx, parsertargetinfo targetinfo, target target) {\tstring targetfile;\tif (!string.isnullorempty (outputfile)) {\ttargetfile = outputfile;\t} else {\ttargetfile = target.triple;\tif (!string.isnullorempty (outputdir)) targetfile = path.combine (outputdir, targetfile);\ttargetfile += \".h\";\t}\tusing (var writer = new streamwriter(targetfile)) {",
  "invalid view hash offset size",
  1
 ],
 [
  "public static void main () {\tfloat width = 400.0f;\tfloat height = 800.0f;\tfontcollection ifc = new installedfontcollection ();\tforeach (fontfamily ffm in ifc.families) {\tconsole.writeline (ffm.name);\t}\tfont f = new font (\"arial\",12);",
  "height",
  0
 ],
 [
  "public static int main () {\tint total = 0;\tforeach (int i in getit (new int [] { 1, 2, 3})){\ttotal += i;\t}\tif (total != 6) return 1;\ttotal = 0;\tforeach (int i in getmulti (new int [,] { { 10, 20 }, { 30, 40}})){",
  "got",
  0
 ],
 [
  "static void main (string[] args) {\ttry {\ttestoledb test = new testoledb ();\ttest.testdatareader ();\ttest.testtransaction ();\ttest.close ();\t} catch (exception e) {",
  "an error has occured",
  0
 ],
 [
  "static void generatefile (list<tuple<string, string, string>> txtstrings, cmdoptions options) {\tusing (var str = options.outputfile == null ? console.out : new streamwriter (options.outputfile)) {",
  "thisisaverylongcommandnameinordertoinducewrapping",
  1
 ],
 [
  "protected task removenode(servermanagementclient client, string nodename) {\ttry {",
  "removing node",
  0
 ],
 [
  "sn16.f9 = 9;\tsn16.f10 = 10;\tsn16.f11 = 11;\tsn16.f12 = 12;\tsn16.f13 = 13;\tsn16.f14 = 14;\tsn16.f15 = 15;\tsn16.nested2.f16 = 16;\tsn16 = mono_return_sbyte16_nested(sn16, 9);\tif (sn16.nested1.f1 != 1+9) {",
  "nested got but expected",
  0
 ],
 [
  "private static bool test4() {\tbool[] boolvalues = new bool[]\t{\ttrue, false }\t;\tforeach (bool a1 in boolvalues) {\tforeach (bool a2 in boolvalues) {\tbool d1 = a1;\tdynamic d2 = a2;\tif ((d1 && d2) != (a1 && a2)) {",
  "failed bool bool",
  0
 ],
 [
  "cmd2.commandtext = \"insert into mono_test_table3 (col1, col2) values ('3', null)\";\tcmd2.executenonquery ();\tcmd2.commandtext = \"insert into mono_test_table3 (col1, col2) values ('3','few')\";\tcmd2.executenonquery ();\tcmd2.commandtext = \"select col1, count(col2) as max_col1 from mono_test_table3 group by col1\";\toracledatareader reader = cmd2.executereader ();\twhile (reader.read ()) {\tobject obj0 = reader.getvalue (0);\tobject obj1 = reader.getvalue (1);\t}",
  "class testclass void test system console writeline",
  1
 ],
 [
  "foreach (directoryinfo di in dirs) {\tforeach (fileinfo fi in di.getfiles (\"*.xml\")) {\ttry {\txmltextreader xtr = new xmltextreader (fi.fullname);\txtr.namespaces = false;\txtr.normalization = true;\txmlreader xr = new xmlvalidatingreader (xtr);\twhile (!xr.eof) xr.read ();\t} catch (xmlexception ex) {\t} catch (xmlschemaexception ex) {",
  "extern void void",
  1
 ],
 [
  "foreach (type iface in array_type.getinterfaces ()) {\tif (ifaces.contains (iface)) ifaces [iface] = state.found;\telse ifaces.add (iface, state.extra);\t}\tint errors = 0;\tforeach (type iface in ifaces.keys) {\tstate state = (state) ifaces [iface];\tif (state == state.found) {\tcontinue;\t} else {",
  "error",
  0
 ],
 [
  "public int getparam2(object args) {\tobject retobj;\tfor (int i = 1; i <= 100; i++) {\tretobj = xsltarg1.getparam(((object[])args)[1].tostring(), szempty);\tstring expected = \"test\" + ((object[])args)[0];",
  "getparam thread iteration added value retrieved value",
  0
 ],
 [
  "private static void encrypt(keybundle key) {\tkeyoperationresult  operationresult;\tvar algorithm = inputvalidator.getencryptionalgorithm();\tvar plaintext = inputvalidator.getplaintext();\tstring keyversion = inputvalidator.getkeyversion();\toperationresult = _encrypt(key, keyversion, algorithm, plaintext);\tfile.writealltext(\"ciphertext.txt\", convert.tobase64string(operationresult.result));",
  "failed",
  1
 ],
 [
  "console.writeline (e.message);\treturn;\t}\tif (show_help) {\tp.writeoptiondescriptions (console.out);\treturn;\t}\tforeach (var m in (from k in macros.keys orderby k select k)) {\tconsole.writeline (\"\\t{0}={1}\", m, macros [m] ?? \"<null>\");\t}",
  "extract",
  0
 ],
 [
  "public static void deletedirectory(string directorypath) {\tif (!directory.exists(directorypath)) {",
  "directory is missing and can t be removed",
  0
 ],
 [
  "});\tfunc<exception, int, bool> errorfilter = ((exception exc, int i) => {\treturn true;\t});\ttask<int> promise = asyncexecutorwithretries.executewithretries(myfunc, 10, 10, null, errorfilter);\tint value = promise.result;\tcounter = 0;\ttry {\tpromise = asyncexecutorwithretries.executewithretries(myfunc, 3, 3, null, errorfilter);\tvalue = promise.result;",
  "certificate added",
  1
 ],
 [
  "public static int main() {\tdoh doh;\tdoh3 doh2 = new doh3 ();\tbool success = false;\tdoh.a1 = doh.a2 = doh.a3 = doh.a4 = 0;\tdoh.a = 1;\tif (doh.a1 == 1 && doh.a2 == 0 && doh.a3 == 0 && doh.a4 == 0) {\tsuccess = true;\t} else if (doh.a1 == 0 && doh.a2 == 0 && doh.a3 == 0 && doh.a4 == 1) {",
  "big endian",
  0
 ],
 [
  "}\t} else if (af.timestampurl != null) {\tbool ts = false;\tfor (int j = 0; j < timestampretry && !ts; j++) {\tts = af.timestamp (tbsfilename);\tif (!ts && (j < timestampretry - 1)) {\tthread.sleep (timestampdelay);\t}\t}\tif (!ts) {",
  "write change cipher spec",
  1
 ],
 [
  "public d (sbyte value) : base (7) {",
  "endregion",
  1
 ],
 [
  "public void dump (textwriter tw) {",
  "verifying even parity after open",
  1
 ],
 [
  "public static void foo () {",
  "foo",
  0
 ],
 [
  "private void writeerrorsandfailuresreport(testresult result) {\treportindex = 0;",
  "errors and failures",
  0
 ],
 [
  "public static int main () {\tvar x = test2 ();\tif (x.count () != 0) return 1;",
  "ok",
  0
 ],
 [
  "public static implicit operator byte (blah i) {",
  "blah byte",
  0
 ],
 [
  "childrenasproperties = (bool)expr.value;\t}\tif (namedargs.any (p => p.key == \"defaultproperty\")) {\tvar expr = namedargs.first (p => p.key == \"defaultproperty\").value;\tif (expr.isnull) {\treturn false;\t}\tdefaultproperty = (string)expr.value;\t}\tif (namedargs.any (p => p.key == \"childcontroltype\")) {",
  "asp net completion does not yet handle parsechildrenattribute type",
  0
 ],
 [
  "try {\ta = assembly.loadfrom (full_path);\taddassembly (a);\treturn;\t} catch (filenotfoundexception ff) {\ttotal_log += ff.fusionlog;\tcontinue;\t}\t}\t} catch (badimageformatexception f) {",
  "cannot load assembly bad file format",
  0
 ],
 [
  "private void dumpbitmapinfo(ref nativemethods.bitmapinfo_flat pbmi) {",
  "bibitcount",
  0
 ],
 [
  "public static void execnegativetestwithbadops(dynamic dobj, string[] exp_msg, string tip, func<dynamic, dynamic> test) {\tint flag = 1;\ttry {\tdynamic dr = test(dobj);",
  "name value",
  1
 ],
 [
  "writeline (\"\");\twritelineind (\"{\");\tforeach (generationresult res in generatedmaps) {\tif (res.mapping is xmltypemapping) {\twritelineuni (\"\");\t}\t}\twriteline (\"}\");\twritelineuni (\"}\");\twriteline (\"\");",
  "category",
  1
 ],
 [
  "sbyte4 s4;\ts4.f1 = 1;\ts4.f2 = 2;\ts4.f3 = 3;\ts4.f4 = 4;\ts4 = mono_return_sbyte4(s4, 9);\tif (s4.f1 != 1+9) {\treturn 1;\t}\tif (s4.f2 != 2+9) {",
  "got but expected",
  0
 ],
 [
  "}\t} else if (!threadrocks.threadednamespace (nspace)) {\tmethoddefinition target = ((methodreference) ins.previous.operand).resolve ();\tif (target != null) {\tthreadmodel callermodel = type.threadingmodel ();\tif (!target.isgeneratedcode () || target.isproperty ()) {\tthreadmodel targetmodel = target.threadingmodel ();\tif (!isvalidcall (callermodel, targetmodel)) {\tstring mesg = string.format (cultureinfo.invariantculture, \"{0} delegate cannot be bound to {1} {2} method.\", callermodel, targetmodel, target.name);\t++defectcount;",
  "test failed conversion result is incorrect",
  1
 ],
 [
  "public static int main(string[] args) {\tif (args.length == 0 || args [0] == \"--help\" || args [0] == \"help\") {\tconsole.writeline ();",
  "package pkg specify the package name of the application",
  0
 ],
 [
  "static void initsilo(string[] args) {\thostwrapper = new orleanshostwrapper(args);\tif (!hostwrapper.run()) {",
  "add",
  1
 ],
 [
  "static bool callsecondstructoperator() {\tint failcount = 0; verify.firstcalled = false;\tif ( (!(bool)(firstclassreturndynamicstruct.staticproperty + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "}\tcatch (argumentexception e) {\tcerror.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\tcatch (nullreferenceexception e) {\tcerror.compare(w.writestate, writestate.element, \"writestate should be element \");\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "static private void help () {",
  "n dn subject distinguished name",
  0
 ],
 [
  "public void getparam18() {\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(\"myarg1\", szempty, \"test1\");\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);",
  "added value retrieved value",
  0
 ],
 [
  "driver.mre1.reset ();\tdriver.mre2.reset ();\tthread thread = new thread (() => {\ttry {\ttry {\t} finally {\tstaticconstructor4.init ();\tgot_to_the_end_of_the_finally = true;\t}\t} catch (exception e) {",
  "init caught exception",
  0
 ],
 [
  "writeline ();\tif (detailed) {\twriteline (\"\\t<assembly_display_name> is the name of the assembly (partial or\\n\" + \"\\tfully qualified) to remove from the global assembly cache. if a \\n\" + \"\\tpartial name is specified all matching assemblies will be uninstalled.\\n\" + \"\\texample: -u mydll,version=1.2.1.0\");\t}\twriteline ();\tif (detailed) {\twriteline (\"\\t<assembly_list_file> is the path to a test file containing a list of\\n\" + \"\\tassembly names on separate lines.\\n\" + \"\\texample -ul assembly_list.txt\\n\" + \"\\t\\tassembly_list.txt contents:\\n\" + \"\\t\\tassembly1,version=1.0.0.0,culture=en,publickeytoken=0123456789abcdef\\n\" + \"\\t\\tassembly2,version=2.0.0.0,culture=en,publickeytoken=0123456789abcdef\");\t}\twriteline ();\tif (detailed) {",
  "assembly path is the path to an assembly the full assembly name is retrieved from the specified assembly if there is an assembly in the gac with a matching name it is removed example us mydll dll",
  0
 ],
 [
  "public async task takeheapshotandmakereport () {\tvar newheapshot = await takeheapshot ();\tif (options.printreporttypes.hasflag (stresstestoptions.profileroptions.printreport.objectstotal)) {\tforeach (var typewithcount in newheapshot.objectsperclasscounter.where (p => p.value > 0).orderbydescending (p => p.value)) {\t}\t}\tif (options.printreporttypes.hasflag (stresstestoptions.profileroptions.printreport.objectsdiff)) {\theapshots.add (newheapshot);\tif (heapshots.count == 1) {",
  "proxy grain was originally located on silo",
  1
 ],
 [
  "this.context.clientwritekey = keyblock.readbytes(this.keymaterialsize);\tthis.context.serverwritekey = keyblock.readbytes(this.keymaterialsize);\tif (this.ivsize != 0) {\tthis.context.clientwriteiv = keyblock.readbytes(this.ivsize);\tthis.context.serverwriteiv = keyblock.readbytes(this.ivsize);\t}\telse {\tthis.context.clientwriteiv = ciphersuite.emptyarray;\tthis.context.serverwriteiv = ciphersuite.emptyarray;\t}",
  "serverwritekey",
  0
 ],
 [
  "try {\tusing (sqldatareader rdr = cmd.executereader()) {\tverifycolumnboundaries(rdr, getfields(tvpperm), objvalues, dtvalues);\t}\t}\tcatch (sqlexception se) {\t}\tcatch (invalidoperationexception ioe) {\t}\tcatch (argumentexception ae) {",
  "argumentexception",
  0
 ],
 [
  "public static async task<bool> addpackagedependencies (this dotnetproject project, ilist<ipackagedependency> dependencies) {\tif (project == null) throw new argumentnullexception (nameof (project));\tforeach (var dependency in dependencies) {",
  "v",
  1
 ],
 [
  "public announcementbounddiscoveryservice (announcementendpoint aendpoint) {\tvar ans = new announcementservice ();\tans.onlineannouncementreceived += registerendpoint;\tans.offlineannouncementreceived += unregisterendpoint;\tahost = new servicehost (ans);\tahost.addserviceendpoint (aendpoint);\tahost.open ();",
  "argument exception in value setup",
  1
 ],
 [
  "await checker7(0);\tawait checker7(1);\tawait checker7(2);\tawait checker7(3);\tmulticluster.setprotocolmessagefilterfortesting(cluster[0], _ => true);\t}\tif (phases != 0) {\tawait checker3(20);\tawait checker3(phases);\t}",
  "run failed with",
  1
 ],
 [
  "private void strcontains_newline_rnd() {\tusing (serialport com1 = tcsupport.initfirstserialport()) using (serialport com2 = tcsupport.initsecondserialport(com1)) {\trandom rndgen = new random(-55);\tstringbuilder strbldrtowrite = tcsupport.getrandomstringbuilder(newline_testing_string_size, tcsupport.characteroptions.none);\tstring newline = genrandomnewline(true);",
  "v majorversion minorversion",
  1
 ],
 [
  "protected override void run () {\tif (!options.hasmemoryleakfeature) return;\tvar type = typeof (glib.object).assembly.gettype (\"glib.pointerwrapper\");\tif (type == null) {\treturn;\t}",
  "gtk mac leak tracking enabled",
  0
 ],
 [
  "public static void thread() {\tthread.sleep(500);\tthread.sleep(500);",
  "thread running",
  0
 ],
 [
  "j++;\tcontinue;\t}\tif (text [i] != expected [j]) {\tbreak;\t}\ti++;j++;\t}\tbool passed = i == text.length && j == expected.length;\tif (!passed) {",
  "was",
  0
 ],
 [
  "{\tsw.write(\"<root><base64>\");\tsw.write(base64str);\tsw.write(\"</base64></root>\");\t}\tfilepathutil.addstream(filename, mems);\treloadsource(filename);\tint size = (totalfilesize - 30);\tint size64 = size * 3 / 4;\tdatareader.positiononelement(\"base64\");",
  "method",
  0
 ],
 [
  "protected static void writeincludedeclaration (textwriter writer, string inc) {\tif (inc == null || inc.length == 0) return;\tmatch m = includeregex.match (inc);\tif (!m.groups [\"include\"].success) {",
  "warning invalid publicincludefile",
  0
 ],
 [
  "\"usage: git [--version] ... <command> [<args>]\", \"\", \"common options:\", { \"version\", \"show version info\", v => showversion = v != null }, { \"help\", \"show this message and exit\", v => showhelp = v != null }, \"\", \"these are common git commands used in various situations:\", \"\", \"start a working area (see also: git help tutorial)\", new command (\"clone\", \"clone a repository into a new directory\"), new command (\"init\",  \"create an empty git repository or reinitialize an existing one\"), new command (\"thisisaverylongcommandnameinordertoinducewrapping\", \"create an empty git repository or reinitialize an existing one. let's make this really long to cause a line wrap, shall we?\"), };\tvar expectedhelp = new stringwriter ();\texpectedhelp.writeline (\"\");\texpectedhelp.writeline (\"\");\texpectedhelp.writeline (\"\");\tassert.areequal (0, git.run (new [] { \"help\" }));\tassert.areequal (expectedhelp.tostring (), o.tostring ());\tvar expectedhelphelp    = new stringwriter ();\texpectedhelphelp.writeline ();\texpectedhelphelp.writeline ();",
  "publicipaddress gateway ip",
  1
 ],
 [
  "this.context.clientwritekey = keyblock.readbytes(this.keymaterialsize);\tthis.context.serverwritekey = keyblock.readbytes(this.keymaterialsize);\tif (this.ivsize != 0) {\tthis.context.clientwriteiv = keyblock.readbytes(this.ivsize);\tthis.context.serverwriteiv = keyblock.readbytes(this.ivsize);\t}\telse {\tthis.context.clientwriteiv = ciphersuite.emptyarray;\tthis.context.serverwriteiv = ciphersuite.emptyarray;\t}",
  "waiting for jopprep to complete",
  1
 ],
 [
  "}\tbit_array.append (string.format (\"(int) 0x{0:x8}\", numbers [i]));\tif (i != numbers.length - 1) bit_array.append (\", \");\t}\tbit_array.appendline (\"\");\tbit_array.appendline (tabs + \"};\");\tbit_array.appendline (tabs + \"};\");\twritelinenonformat (bit_array.tostring ());\twriteline (\"bitarray bits = new bitarray (answers);\");\twriteline (\"for (int i = 0; i < (int) char.maxvalue; i++)\");",
  "assert areequal bits get i maskedtextprovider isvalidpasswordchar char i i tostring",
  0
 ],
 [
  "protected override void generateiterationstatement(codeiterationstatement e) {\tgeneratestatement(e.initstatement);\toutput.write(\"do while \");\tgenerateexpression(e.testexpression);\toutput.writeline(\"\");\tindent++;\tgeneratevbstatements(e.statements);\tgeneratestatement(e.incrementstatement);\tindent--;",
  "loop",
  0
 ],
 [
  "public static void creategenerictestfile(string strfilename) {\tmemorystream ms = new memorystream();\ttextwriter tw = new streamwriter(ms);\ttw.writeline(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"no\\\"?>\");\ttw.writeline(\"<!-- comment1 -->\");",
  "valid from",
  1
 ],
 [
  "static void dotest (smtpserver s, smtpclient c, mailmessage m) {\tthread t = new thread (s.run);\tt.start ();\tc.send (m);\tt.join ();",
  "mail from",
  0
 ],
 [
  "foreach (object value in list) {\tconsole.write (value);\tconsole.write (environment.newline);\t}\tint x = 0;\tfor (int i = 0; i < 100; i++) x++;\tconsole.writeline (x);\tstring useless = \"useless string\";\tif (useless.equals (\"other useless\")) {\tuseless = string.empty;",
  "other useless string",
  0
 ],
 [
  "a.legs= new legdto[] { new legdto() };\ta.notes= new notedto[] { new notedto() };\ta.payperiodevents= new payperiodeventdto[] { new payperiodeventdto() };\ta.payrollcategories= new payrollcategorydto[] { new payrollcategorydto() };\ta.payrolls= new payrolldto[] { new payrolldto() };\ta.performances= new performancedto[] { new performancedto() };\ta.positions= new positiondto[] { new positiondto() };\ta.reglatoryoperationtypes= new reglatoryoperationtypedto[] { new reglatoryoperationtypedto() };\ta.trips= new tripdto[] { new tripdto() };\ta.usersettings= new usersettingdto[] { new usersettingdto() };",
  "size is",
  0
 ],
 [
  "public void document_4(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartdocument();\tw.writestartelement(\"root\");\tw.writeendelement();\tw.writeenddocument();\tw.writeenddocument();\t}\tcatch (invalidoperationexception e) {",
  "exception",
  0
 ],
 [
  "static void setupmypackage(oracleconnection con) {",
  "setup oracle package curspkg join",
  0
 ],
 [
  "static void trylldb (int pid, processdata data) {\tstring filename = path.gettempfilename ();\tusing (streamwriter sw = new streamwriter (new filestream (filename, filemode.open, fileaccess.write))) {",
  "thread backtrace all",
  0
 ],
 [
  "protected override void oninitialize () {\tif (!monoruntimeinfo.isvalidruntime) return;\tforeach (string pcfile in getallpkgconfigfiles ()) {\ttry {\tvar pc = new filepath (pcfile).resolvelinks ();\tif (!string.isnullorempty (pc)) parsepcfile (pc);\tif (shuttingdown) return;\t}\tcatch (exception ex) {",
  "got but expected",
  1
 ],
 [
  "public override string tostring () {\tstringwriter sw = new stringwriter ();",
  "expected true",
  1
 ],
 [
  "public static void staticexcept () {\ttry {\tnongen.dothrow ();\t}\tcatch (genexc<t>) {",
  "getvalue",
  1
 ],
 [
  "}\t}\t}\tforeach (string sourcedir in directory.getdirectories(addininstalltemp)) {\tstring addinname = path.getfilename(sourcedir);\tstring targetdir = path.combine(useraddinpath, addinname);\tif (notremoved.contains(addinname)) {\tcontinue;\t}\tif (uninstalladdin(disabled, addinname, targetdir)) {",
  "can t load scheme unsupported version",
  1
 ],
 [
  "ienumerable<resourcefile> resfilesprop = ijm.resourcefiles;\tif (null != resfilesprop) {\tlist<resourcefile> resfiles = new list<resourcefile>();\t}\telse {\t}\ttaskconstraints tc = ijm.constraints;\tif (null == tc) {\t}\telse {",
  "maxwallclocktime null",
  0
 ],
 [
  "public static implicit operator fraction(int theint) {",
  "in implicit conversion to fraction",
  0
 ],
 [
  "int startpos = 0;\tint readsize = 3;\tint currentsize = 0;\tdatareader.read();\twhile (datareader.read()) {\tcerror.equals(datareader.value.contains(\"123\"), \"value\");\tcurrentsize = datareader.readcontentasbinhex(buffer, startpos, readsize);\tcerror.equals(currentsize, 1, \"size\");\tcerror.equals(buffer[0], (byte)18, \"buffer\");\tif (!(isxpathnavigatorreader() || isxmlnodereader() || isxmlnodereaderdatadoc())) {",
  "result changed due to fewer unmodified locations since entry",
  1
 ],
 [
  "public static int main(string[] args) {\ttry {\tcallfrominsidegrandchild();\treturn 100;\t}\tcatch (exception ex) {\tconsole.writeline(ex);",
  "test failed",
  0
 ],
 [
  "private static bool callsecondclassinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tif ((!(bool)(((dynamic)firstclassreturnclass.staticproperty).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "private void strcontains_newline_rnd() {\tusing (serialport com1 = tcsupport.initfirstserialport()) using (serialport com2 = tcsupport.initsecondserialport(com1)) {\trandom rndgen = new random(-55);\tstringbuilder strbldrtowrite = tcsupport.getrandomstringbuilder(newline_testing_string_size, tcsupport.characteroptions.none);\tstring newline = genrandomnewline(true);",
  "verifying write method with a random newline string and writing a string that contains the newline",
  0
 ],
 [
  "public void timesincludemillisecondpart_linux() {\tt item = getexistingitem();\tstring driveformat = new driveinfo(getitempath(item)).driveformat;\tassert.all(timefunctions(), (function) => {\tvar msec = 0;\tfor (int i = 0; i < 5; i++) {\tdatetime time = function.getter(item);\tmsec = time.millisecond;\tif (msec != 0) break;\tthread.sleep(1234);",
  "ok",
  1
 ],
 [
  "public string getstrings () {",
  "total string data size",
  0
 ],
 [
  "public void bytestoread_rcvrndnumbytes() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (serialport com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "verifying bytestoread after receiving a random number of bytes",
  0
 ],
 [
  "task<int> task1 = null;\ttask<int> task2 = null;\ttask join = null;\ttask wrapper = new task(() => {\ttask1 = task<int>.factory.startnew(() => {\tassert.equal(scheduler, taskscheduler.current);\tint num1 = 1;\twhile (!pause1.task.result) {\tnum1 = random.next();\t}",
  "using system text",
  1
 ],
 [
  "cmd.commandtext = \"create table #blobs (id int, blob xml)\";\tcmd.executenonquery();\tcmd.commandtext = \"insert into #blobs (id, blob) values (1, @blob)\";\tcmd.parameters.add(\"@blob\", sqldbtype.xml, -1);\tcmd.parameters[\"@blob\"].direction = parameterdirection.input;\tcmd.parameters[\"@blob\"].value = xmlreader.create(new stringreader(xmlstr));\ttask t = cmd.executenonqueryasync(cts.token);\tif (!t.iscompleted) cts.cancel();\ttry {\tt.wait();",
  "t status",
  0
 ],
 [
  "system.io.fileinfo fi = new fileinfo (assembly.getentryassembly ().location);\tassem = assembly.loadfrom (path.combine (fi.directory.fullname, assemblyname));\t}\tcatch (exception e) {\treturn;\t}\tmonotests.features.configuration.onlyservers = true;\tprogram p = new program ();\tp.runallinits (assem);\tconsole.readkey ();",
  "copy to",
  1
 ],
 [
  "public override string tostring() {\tstringwriter writer = new stringwriter(cultureinfo.invariantculture);",
  "database exception",
  1
 ],
 [
  "static public int check (string filename, bool quiet, bool verbose) {\tauthenticodedeformatter a = new authenticodedeformatter (filename);\tfs.write (a.signature, 0, a.signature.length);\tfs.close ();*/ filename = path.getfilename (filename);\tif (verbose) {",
  "starting sending chirps",
  1
 ],
 [
  "}\treturn 0;\t}\tif (!file.exists(\"sharpdevelop.sln\")) {\tstring maindir = path.getfullpath(path.combine(exedir, \"../../../../..\"));\tif (file.exists(maindir + \"\\\\sharpdevelop.sln\")) {\tdirectory.setcurrentdirectory(maindir);\t}\t}\tif (!file.exists(\"sharpdevelop.sln\")) {",
  "console writeline type",
  1
 ],
 [
  "static void printlocation (ilocation loc) {",
  "end column",
  0
 ],
 [
  "outputline (@\"       \\close to close the connection\");\toutputline (@\"       \\e to execute sql query (select)\");\toutputline (@\"       \\h to show help (all commands).\");\toutputline (@\"       \\defaults to show default variables.\");\toutputline (\"\");\t}\tpublic void showhelp () {\tconsole.writeline (\"\");\tif (!waitforenterkey ()) return;\tif (!waitforenterkey ()) return;",
  "test failed at call result",
  1
 ],
 [
  "public static void createencodedtestfile(string strfilename, encoding encode) {\tstream strm = new memorystream();\ttextwriter tw = new streamwriter(strm, encode);",
  "typename",
  1
 ],
 [
  "protected resolveresult resolve(string code) {\tvar prep = prepareresolver(code);\tdebug.writeline(new string('=', 70));\tresolveresult rr = prep.item1.resolve(prep.item2);\tassert.isnotnull(rr, \"resolveresult is null - did something go wrong while navigating to the target node?\");",
  "hello",
  1
 ],
 [
  "try {\tconfiguration config = configurationmanager.openexeconfiguration (configurationuserlevel.none);\tappsettingssection sect = (appsettingssection)config.getsection(\"appsettings\");\tforeach (string key in sect.settings.allkeys) {\tkeyvalueconfigurationelement e = sect.settings[key];\tconsole.writeline (\"{0} = {1}\", e.key, e.value);\t}\tconsole.writeline (\"lockallattributesexcept = '{0}'\", sect.lockallattributesexcept.attributelist);\t}\tcatch (exception e) {",
  "exception raised",
  0
 ],
 [
  "static ldapbackuprequest() {\ttry {\tldapextendedresponse.register( backuprestoreconstants.nldap_ldap_backup_response, type.gettype(\"novell.directory.ldap.extensions.ldapbackupresponse\"));\t}\tcatch (typeloadexception e) {",
  "successfully started orleans silo as a node",
  1
 ],
 [
  "static void main (string [] args) {\tif (!file.exists (\"genproj.cs\")) {\tenvironment.exit (1);\t}\tif (args.length == 1 && args [0].tolower ().contains (\"-h\")) {",
  "genproj exe visual studio release output full solutions with tests",
  0
 ],
 [
  "public override bool onstart() {",
  "orleansazureweb onstart",
  0
 ],
 [
  "private void renderlistviewitem (xhtmlmobiletextwriter writer, objectlistitem item, int fieldcount, int[] fieldindices, bool itemrequiresmorebutton, bool itemrequireshyperlink) {\tstyle style = style;\tstyle subcommandstyle = control.commandstyle;\tstring accesskey = getcustomattributevalue(item, xhtmlconstants.accesskeycustomattribute);\tstring cssclass = getcustomattributevalue(item, xhtmlconstants.cssclasscustomattribute);\tstring subcommandclass = getcustomattributevalue(xhtmlconstants.csscommandclasscustomattribute);\tif (subcommandclass == null || subcommandclass.length == 0) {\tsubcommandclass = cssclass;\t}",
  "public class tests",
  1
 ],
 [
  "private static bool test3() {\tshort a = 1;\tdynamic b = a;\t++b;\tif (b == 2) return true;",
  "failed short",
  0
 ],
 [
  "}\tif (stream != null) {\txmlreader r = readerhelper.create(stream, rs, filename);\twhile (r.read()) {\tif (r.nodetype == xmlnodetype.element) break;\t}\txmlreader wr = r.readsubtree();\treturn wr;\t}\tif (fragment != null) {",
  "test failed at call result",
  1
 ],
 [
  "try {\tsetdefaultpolicylevel ();\tfor (int i=0; i < args.length; i++) {\tif (!processinstruction (args, ref i)) return 1;\t}\t}\tcatch (exception e) {\thelp ();\treturn 2;\t}",
  "name optionkey option name language optionkey language languagespecific optionkey option isperlanguage",
  1
 ],
 [
  "public void getparam16() {\tm_xsltarg = new xsltargumentlist();\tint i = 0;\tm_xsltarg.addparam(\"myarg1\", szempty, \"test16\");\tfor (i = 0; i < 200; i++) {\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);\tif (retobj.tostring() != \"test16\") {",
  "no exception thrown",
  1
 ],
 [
  "protected async override task onexecute (progressmonitor monitor, executioncontext context, configurationselector configuration, solutionitemrunconfiguration runconfiguration) {\tif (data == null || !data.supportsintegration || string.isnullorempty (data.executetargetname)) {\tawait base.onexecute (monitor, context, configuration, runconfiguration);\treturn;\t}\toperationconsole console = context.consolefactory.createconsole ( operationconsolefactory.createconsoleoptions.default.withtitle (project.name));\tmonitor.begintask (gettextcatalog.getstring (\"executing {0}\", project.name), 1);\ttry {\tprocesswrapper process = runtime.processservice.startprocess (\"make\", data.executetargetname, project.basedirectory, console.out, console.error, null);\tawait process.task;",
  "the application exited with code",
  0
 ],
 [
  "datatable table;\ttable = reader.getschematable();\tfor(int c = 0; c < reader.fieldcount; c++) {\tdatarow row = table.rows[c];\tstring strcolumnname = row[\"columnname\"].tostring();\tstring strbasecolumnname = row[\"basecolumnname\"].tostring();\tstring strcolumnsize = row[\"columnsize\"].tostring();\tstring strnumericscale = row[\"numericscale\"].tostring();\tstring strnumericprecision = row[\"numericprecision\"].tostring();\tstring strdatatype = row[\"datatype\"].tostring();",
  "got but expected",
  1
 ],
 [
  "public static ienumerable<string> yieldreturnwithnestedtryfinally(bool breakinmiddle) {\tyield return \"start of method\";\ttry {\tyield return \"within outer try\";",
  "within outer try",
  0
 ],
 [
  "console.writeline ();\tif (showmsg != null) {\tconsole.writeline (showmsg);\tconsole.writeline ();\t}\treturn;\t}\tvar results = rewriter.rewrite (options);\tif (results.anyerrors) {\tforeach (var error in results.errors) {",
  "finished creating shared objects",
  1
 ],
 [
  "public void baudrate_1200() {",
  "verifying baudrate",
  0
 ],
 [
  "public static void main() {\tthread thr=new thread(new threadstart(foo.thread));\tthr.isbackground=true;\tthr.start();\tthread.sleep(1200);",
  "main thread returns",
  0
 ],
 [
  "csrinvisible = reader.get (terminfostrings.cursorinvisible);\tif (term == \"cygwin\" || term == \"linux\" || (term != null && term.startswith (\"xterm\")) || term == \"rxvt\" || term == \"dtterm\") {\ttitleformat = \"\\x1b]0;{0}\\x7\";\t} else if (term == \"iris-ansi\") {\ttitleformat = \"\\x1bp1.y{0}\\x1b\\\\\";\t} else if (term == \"sun-cmd\") {\ttitleformat = \"\\x1b]l{0}\\x1b\\\\\";\t}\tcursoraddress = reader.get (terminfostrings.cursoraddress);\tgetcursorposition ();",
  "nogetposition left top",
  0
 ],
 [
  "norm.processfile(new streamreader (args[1]), console.out);\t}\telse if (directory.exists (args[1])) {\tif (args.length != 3) {\tprintusage();\treturn 1;\t}\tnorm.processdirectory (args[1], args[2]);\t}\telse {",
  "path not found",
  0
 ],
 [
  "m_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(\"myarg1\", szempty, \"test2\");\tm_xsltarg.removeparam(\"myarg1\", szempty);\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);\tif (retobj != null) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg1\", szempty, \"test1\");\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);\tif (retobj.tostring() != \"test1\") {",
  "chars xxx chars",
  1
 ],
 [
  "public void testnonredundantfloatcast () {\ttestwrongcontext<redundantcastissue> (@\" class foo {\tvoid bar () {\tfloat f = 5.6f;",
  "foo",
  0
 ],
 [
  "tw.writeline(\"<attribute1 />\");\ttw.writeline(\"<attribute2 a1='a1value' />\");\ttw.writeline(\"<attribute3 a1='a1value' a2='a2value' a3='a3value' />\");\ttw.writeline(\"<attribute4 a1='' />\");\ttw.writeline(string.format(\"<attribute5 crlf='x{0}x' cr='x{0}x' lf='x\\nx' ms='x     x' tab='x\\tx' />\", environment.newline));\ttw.writeline(\"<skip1 /><afterskip1 />\");\ttw.writeline(\"<skip2></skip2><afterskip2 />\");\ttw.writeline(\"<chars1>0123456789</chars1>\");\ttw.flush();\ttw.writeline(\"<isdefault a1='a1value' />\");",
  "true",
  0
 ],
 [
  "}\tfixme - stuff to do to finish this: 1) make a hash table that has all classes that implement a given interface. probably make a class/interface into structure that is a list from this hash table.  this has an indication if its the classes default interface or not.  sometimes you will get an interface in one typelib and the class is in another type lib.  this will help that, and it will also make the resolution of the classes faster. 2) deal with inherited interfaces.  after we have exhausted all possbilities with the actual interfaces, when we should do checking using the inherited interfaces so at least we will find something. of course, the inherited interfaces will show up on the query interface, so we need to make sure we prefer the lower level interfaces.  maybe they will always show up first, but we need to see about this. basicinfo chosenclass;\tif (_classesdefaultinterfaces.count > 0) {\tchosenclass = (basicinfo)_classesdefaultinterfaces[0];\tif (traceutil.if(this, tracelevel.info)) {\t}\t}\telse if (_classesinterfaces.count > 0) {\tchosenclass = (basicinfo)_classesinterfaces[0];\tif (traceutil.if(this, tracelevel.info)) {",
  "principalcollectionenumerator movenext resultset mode moving to insvaluescomp mode",
  1
 ],
 [
  "addressprefixes = new list<string>() {\t\"192.168.0.0/16\", }\t}\t};\tvar putlocalnetworkgatewayresponse = networkmanagementclient.localnetworkgateways.createorupdate(resourcegroupname, localnetworkgatewayname, localnetworkgateway);\tassert.equal(\"succeeded\", putlocalnetworkgatewayresponse.provisioningstate);\tvar getlocalnetworkgatewayresponse = networkmanagementclient.localnetworkgateways.get(resourcegroupname, localnetworkgatewayname);\tstring publicipname = testutilities.generatename();\tstring domainnamelabel = testutilities.generatename();\tvar nic1publicip = testhelper.createdefaultpublicipaddress(publicipname, resourcegroupname, domainnamelabel, location, networkmanagementclient);",
  "a test",
  1
 ],
 [
  "driver.mre1.reset ();\tdriver.mre2.reset ();\tthread thread = new thread (() => {\ttry {\ttry {\t} finally {\tstaticconstructor4.init ();\tgot_to_the_end_of_the_finally = true;\t}\t} catch (exception e) {",
  "trying to set eventhandler through ba interface should set direct event",
  1
 ],
 [
  "private static bool test2() {\tdynamic a = -10l;\tlong b = +(+a);\tif (b == -10) return true;",
  "helpviewer",
  1
 ],
 [
  "public void testcase5() {\tanalyze<stringcompareisculturespecificanalyzer>(@\" class test {\tvoid foo () {",
  "foo bar",
  0
 ],
 [
  "invocationexpression invocation = expr as invocationexpression;\tif (invocation != null) {\tmemberreferenceexpression fre = invocation.targetobject as memberreferenceexpression;\tif (fre != null) {\tif (fre.membername == \"getstring\" || fre.membername == \"getobject\" || fre.membername == \"getstream\") {\tif (invocation.arguments.count > 0) {\tprimitiveexpression p = invocation.arguments[0] as primitiveexpression;\tif (p != null) {\tstring key = p.value as string;\tif (key != null) {",
  "resourcetoolkit bclnrefactoryresourceresolver found key",
  0
 ],
 [
  "public override void getdetailtext() {\tif (_container == null && _typelibstring != null && _typelibversion != null) {\ttry {\t_container = typelibrary.gettypelib (new guid(_typelibstring), _typelibversion);\t_typelib = (typelibrary)_container;\t}\tcatch (exception ex) {",
  "error getting typelib for ex",
  0
 ],
 [
  "if (sn16.f2 != 2+9) {\treturn 2;\t}\tif (sn16.f3 != 3+9) {\treturn 3;\t}\tif (sn16.f4 != 4+9) {\treturn 4;\t}\tif (sn16.f5 != 5+9) {",
  "hello",
  1
 ],
 [
  "public static void main () {\tdouble d = 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000222;",
  "verifying databits",
  1
 ],
 [
  "static void generatefile (string outputfile, list<tuple<string, string>> txtstrings, cmdoptions options) {\tusing (var str = new streamwriter (outputfile)) {",
  "add a column with a null name",
  1
 ],
 [
  "public static void runruntests_cancellation_negative() {\tcancellationtokensource cts = new cancellationtokensource();\tcancellationtoken token = cts.token;\tint count = 0;\tcts.cancel();\ttask task3 = task.run(() => { count = 41; }, token);\tassert.throws<aggregateexception>( () => { task3.wait(); });\tassert.false(count == 41, \"    > failed.  task w/ canceled token ran when it should not have.\");\tassert.true(task3.iscanceled, \"    > failed.  task w/ canceled token should have ended in canceled state\");\ttask future3 = task.run(() => { count = 47; return count; }, token);",
  "submitting task",
  1
 ],
 [
  "public void getparam19() {\tm_xsltarg = new xsltargumentlist();\tretobj = m_xsltarg.getparam(null, null);\tif (retobj != null) {",
  "did not return null for null parameter name",
  0
 ],
 [
  "void foo () {\ta = cond ? expr : }\t}\";\tvar unit = syntaxtree.parse(code);\tvar type = unit.members.first() as typedeclaration;\tvar method = type.members.first() as methoddeclaration;\tvar exprstmt = method.body.statements.firstordefault() as expressionstatement;\tvar expr = exprstmt.expression as assignmentexpression;\tbool passed = expr != null && expr.right is conditionalexpression;\tif (!passed) {",
  "expected",
  0
 ],
 [
  "output.write(\".publickey = \");\twriteblob(asm.name.publickey);\toutput.writeline();\t}\tif (asm.name.hashalgorithm != assemblyhashalgorithm.none) {\toutput.write(\".hash algorithm 0x{0:x8}\", (int)asm.name.hashalgorithm);\tif (asm.name.hashalgorithm == assemblyhashalgorithm.sha1) output.write(\" output.writeline();\t}\tversion v = asm.name.version;\tif (v != null) {",
  "total string data size",
  1
 ],
 [
  "}\tidisposable disposablemembers = _members as idisposable;\tif (disposablemembers != null) {\tdisposablemembers.dispose();\t}\tidisposable disposablemembersenum = _membersenum as idisposable;\tif (disposablemembersenum != null) {\tdisposablemembersenum.dispose();\t}\tif (_membersqueue != null) {",
  "addnlinkedattrset dispose disposing membersqueue",
  0
 ],
 [
  "protected override codecompileunit parse() {",
  "nrefactorydesignerloader parse",
  0
 ],
 [
  "protected sealed override async task<bool> onremovefromproject (cancellationtoken token) {\tint trycount = 1;\tbool keeptrying = true;\twhile (keeptrying) {\ttry {\tif (trycount > 1) {\t} else {",
  "rxevent triggered",
  1
 ],
 [
  "public static void main(string[] args) {\taddinmanager.initialize (\".\");\taddinmanager.registry.update (null);",
  "no exception thrown",
  1
 ],
 [
  "using (rsa rsapublic = rsafactory.create()) using (rsa rsaprivate = rsafactory.create()) {\ttry {\trsapublic.importparameters(publicparameters);\t}\tcatch (cryptographicexception) {\treturn;\t}\trsaprivate.importparameters(keyparameters);\tif (signature == null) {\tsignature = signdata(rsaprivate, data, hashalgorithm, padding);",
  "callername signature bytearraytohex",
  0
 ],
 [
  "public void basictest_staticipv6loopbackindex_matchesloopbacknetworkinterface() {\tassert.true(capability.ipv6support());",
  "hello",
  1
 ],
 [
  "public void addsblockifneccessary() {\tvar input = baseinput + @\" if (true) try {\tf ();",
  "flags",
  1
 ],
 [
  "activedirectoryaccessrule allowselface = new extendedrightaccessrule( new maclprinc.securityidentifier(selfsddl), accesscontroltype.allow, s_changepasswordguid);\tactivedirectoryaccessrule allowworldace = new extendedrightaccessrule( new maclprinc.securityidentifier(worldsddl), accesscontroltype.allow, s_changepasswordguid);\tif (usercannotchangepassword) {\tif (!denyselffound) {\tadssecurity.addaccessrule(denyselface);\t}\tif (!denyworldfound) {\tadssecurity.addaccessrule(denyworldace);\t}\tif (allowselffound) {",
  "expected o p",
  1
 ],
 [
  "string obj = \"0.00\";\tm_xsltarg.addextensionobject(\"myarg1\", obj);\tretobj = m_xsltarg.getextensionobject(\"myarg1\");\tif (retobj.tostring() != \"0.00\") {\tassert.true(false);\t}\tint i = 8;\tm_xsltarg.addextensionobject(\"myarg2\", i);\tretobj = m_xsltarg.getextensionobject(\"myarg2\");\tif (!i.equals(retobj)) {",
  "edge count",
  1
 ],
 [
  "public dummy copyblock (label pc, source destaddress, source srcaddress, source len, textwriter data) {",
  "cpblk",
  0
 ],
 [
  "ptr++;\t}\tif (cptr [l] != 10){\treturn 1;\t}\tif (cptr [ul] != 10) return 2;\tif (cptr [b] != 10) return 3;\tbyte* bptr = (byte*) 5;\tushort us = 3;\tbyte* ret = (byte*) (bptr + us);",
  "ok",
  0
 ],
 [
  "foreach(sqlerror error in se.errors) {\t}\texception ie = se.innerexception;\tif(ie != null) {\t}\treturn;\t}\tidbcommand cmd = con.createcommand();\tcmd.commandtext = sql;\tidatareader reader = cmd.executereader();",
  "improperly reported an exception for a whitespace value",
  1
 ],
 [
  "string filename = ( args.length == 0 ) ? \"xmlchartype.bin\" : args[0];\tconsole.write( \"writing xmlchartype character properties to {0}...\", filename );\tfilestream fs = new filestream( filename, filemode.create );\tfor ( int i = 0; i < charpropertiessize; i += 4096 ) {\tfs.write( s_charproperties, i, 4096 );\t}\tfs.close();\t}\tcatch ( exception e ) {\tconsole.writeline();",
  "assert areequal want getstyles new",
  1
 ],
 [
  "break;\tdefault: cerror.compare(false, \"unexpected method name \" + methodname);\tbreak;\t}\t}\tcatch (exception e) {\tif (exceptiontype.fullname.equals(e.gettype().fullname)) {\treturn;\t}\telse {",
  "did not throw exception of type",
  0
 ],
 [
  "rtf.defaultfont(this.font.name);\trtf_text_map = new rtf.textmap();\trtf.textmap.setupstandardtable(rtf_text_map.table);\tdocument.suspendrecalc ();\ttry {\trtf.read();\tflushtext(rtf, false);\t}\tcatch (rtf.rtfexception e) {\t#if debug throw e;",
  "rtf parsing failure",
  0
 ],
 [
  "private static bool callsecondstructinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tdynamic d = new firstclassreturnstruct<int>();\tif ((!(((secondstruct<int>)d[1]).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "error making search index",
  1
 ],
 [
  "public void basictest_getipv4interfacestatistics_success() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipv4interfacestatistics stats = nic.getipv4statistics();",
  "outputqueuelength",
  0
 ],
 [
  "}\tif (t.status != taskstatus.faulted) {\tconsole.writeline (\"failed (status={0})\", t.status);\treturn false;\t}\tif (!(t.exception.innerexception is applicationexception)) {\treturn false;\t}\treturn true;\t} catch (exception e) {",
  "content length",
  1
 ],
 [
  "public void readtimeout_neg2() {",
  "findresultenumerator movenext no resultset",
  1
 ],
 [
  "public static void runlongrunningtasktests() {\ttaskscheduler tm = taskscheduler.default;\tint ntasks = environment.processorcount * 2;\ttask[] tasks = new task[ntasks];\tmanualresetevent mre = new manualresetevent(false);\tcountdownevent cde = new countdownevent(ntasks);\tfor (int i = 0; i < ntasks; i++) {\ttasks[i] = task.factory.startnew(delegate {\tcde.signal();",
  "signalled",
  0
 ],
 [
  "static void dumpsignedinfo (signedinfo s) {",
  "res mainwindow xmlvalidationmessages validationsuccess",
  1
 ],
 [
  "static string formatdecimal(string toformat, string format){\tstring str = string.empty;\tif (checkvalue (toformat)) {\ttry {\tdecimal number =\tdecimal.parse(toformat, numberstyles.any, cultureinfo.currentculture.numberformat);\tstr = number.tostring (format,cultureinfo.currentculture);\t} catch (formatexception) {",
  "hello",
  1
 ],
 [
  "string str = datareader[-1];\t}\tcatch (argumentoutofrangeexception exc) {\tcerror.writeline(exc + \" : \" + exc.message);\treturn test_pass;\t}\tcatch (exception e) {\tcerror.writeline(e + \" : \" + e.message);\tthrow new ctestexception(ctestbase.test_fail, wrong_exception);\t}",
  "no exception thrown",
  0
 ],
 [
  "public void basictest_getipv4interfacestatistics_success() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipv4interfacestatistics stats = nic.getipv4statistics();",
  "null test passed",
  1
 ],
 [
  "break;\tcase \"--fetch-target\": if (i+1 == top){\thelp ();\treturn 1;\t}\tfetch_target = args [++i];\tbreak;\tcase \"--list-targets\": commandlocaltargets ();\tvar wc = new webclient ();\tvar s = wc.downloadstring (new uri (target_server + \"target-sdks.txt\"));",
  "targets available for download with fetch target",
  0
 ],
 [
  "static void initsilo(string[] args) {\thostwrapper = new orleanshostwrapper(args);\tif (!hostwrapper.run()) {",
  "arg",
  1
 ],
 [
  "private static bool nullableuinttypewithnumbericconversionfromushortinassignment() {\tint failcount = 0;\tushort? origin = ushort.maxvalue;\tdynamic d = origin;\tuint? result = d;\tif (result != origin) {\tfailcount++;",
  "test failed at conversion result",
  0
 ],
 [
  "action ();\t}\tcatch (exception e) {\t}\t}\t}\tcatch (exception e) {\tif (e is operationcanceledexception || e is objectdisposedexception) {\t}\telse {",
  "unhandled exception in helper thread helper thread is terminated",
  0
 ],
 [
  "private static bool callsecondclassindexer() {\tint failcount = 0;\tverify.firstcalled = false;\tdynamic d = new firstclassreturnclass<int>();\tif ((!(((d + 1))[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "private static int main() {\ttry {\tif (testtrycatch(15) || !testtrycatch(18)) {\treturn 1;\t}\tif (testtryfinally(19) || !testtryfinally(12)) {",
  "blah short",
  1
 ],
 [
  "public void v3() {\tstring type = variation.params[0].tostring();\txmlreader datareader = getreader(new stringreader(_xmlstr));\tpositiononelement(datareader, \"root\");\tswitch (type) {\tcase \"nns\": datareader.readtodescendant(\"elem\");\tint depth = datareader.depth;\tif (datareader.hasattributes) {",
  "symbolicate options store symbols msym dir dir",
  1
 ],
 [
  "public void xmllang_2() {\txdocument doc = new xdocument();\txmlwriter w = createwriter(doc);\tw.writestartelement(\"root\");\tif (w.xmllang != null) {\tw.dispose();",
  "type",
  1
 ],
 [
  "static void showhelp() {",
  "metadatapath ws mex file path",
  1
 ],
 [
  "public async task usecallback_validcertificate_expectedvaluesduringcallback(uri url, bool checkrevocation) {\tif (!backendsupportscustomcertificatehandling) {",
  "assembly has thrown",
  1
 ],
 [
  "for (int i=0; i<100; i++) {\tisequenced<int> inner = new treeset<int>();\tinner.add(i); inner.add(i+1);\touter.add(inner);\t}\tisequenced<int> inner1 = new treeset<int>(), inner2 = new treeset<int>(), inner3 = new treeset<int>();\tinner1.addall<int>(new int[] { 2, 3, 5, 7, 11 });\tinner2.addall(inner1); inner2.add(13);\tinner3.addall(inner1);\touter.add(inner1);",
  "in outer",
  0
 ],
 [
  "public int v() {\tstring type = curvariation.params[0].tostring();\treloadsource(new stringreader(_xmlstr));\tdatareader.positiononelement(\"root\");\tswitch (type) {\tcase \"nns\": datareader.readtodescendant(\"elem\");\tif (datareader.hasattributes) {",
  "positioned on wrong element",
  0
 ],
 [
  "public static void threadmethod_blocker() {",
  "thread c started",
  0
 ],
 [
  "public void testcase2() {\ttest<stringcompareisculturespecificissue>(@\" class test {\tvoid foo () {",
  "inside try",
  1
 ],
 [
  "private static bool callsecondinterfaceinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tif ((!(bool)(((dynamic)firstclassreturninterface.staticproperty).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "cmd2.executenonquery ();\t}\tcatch(oracleexception) {\t}\tcmd2.commandtext = \"create table mono_test_table1 (\" + \" col1 varchar2(8), \"+ \" col2 varchar2(32))\";\tcmd2.executenonquery ();\tcmd2.commandtext = \"create procedure sp_test1 \" + \" is \" + \" begin \" + \"\tinsert into mono_test_table1 (col1,col2) values ('aaa','bbbb');\" + \"\tcommit;\" + \" end;\";\tcmd2.executenonquery ();\tcmd2.commandtext = \"commit\";\tcmd2.executenonquery ();",
  "date offset isdst",
  1
 ],
 [
  "static private void help () {",
  "secutil hex",
  0
 ],
 [
  "static string getbasedirectory (dotnetproject project) {\tif (project.parentsolution != null) return project.parentsolution.basedirectory;",
  "error mono runtime not detected please use the mono runtime for gacutil exe",
  1
 ],
 [
  "public static void enableidleactions () {\truntime.assertmainthread ();\tif (idleactionsdisabled == 0) {",
  "dhcp lease lifetime",
  1
 ],
 [
  "private string generateliteralmemberselement(xmlmembersmapping xmlmembersmapping) {\telementaccessor element = xmlmembersmapping.accessor;\tmembermapping[] mappings = ((membersmapping)element.mapping).members;\tbool haswrapperelement = ((membersmapping)element.mapping).haswrapperelement;\tstring methodname = nextmethodname(element.name);\twriter.writeline();\twriter.write(\"public object[] \");\twriter.write(methodname);\twriter.writeline(\"() {\");\twriter.indent++;",
  "reader movetocontent",
  0
 ],
 [
  "if (s13.f4 != 4+9) {\treturn 4;\t}\tif (s13.f5 != 5+9) {\treturn 5;\t}\tif (s13.f6 != 6+9) {\treturn 6;\t}\tif (s13.f7 != 7+9) {",
  "got but expected",
  0
 ],
 [
  "if (tool.useoutputpad) processwrapper = runtime.processservice.startprocess (commandtool, argumentstool, initialdirectorytool, progressmonitor.log, progressmonitor.log, null);\telse processwrapper = runtime.processservice.startprocess (commandtool, argumentstool, initialdirectorytool, null);\tstring processname = system.io.path.getfilename (commandtool);\ttry {\tprocessname = processwrapper.processname;\t} catch (systemexception) {\t}\tprocesswrapper.waitforoutput ();\tif (processwrapper.exitcode == 0) {\t} else {",
  "process has exited with error code",
  0
 ],
 [
  "}\tcatch (exception ex) {\tassert.true(false, \"samplewithfilesandpool probably can ignore this if its pool not found: \" + ex.tostring());\t}\t}) });\tlist<cloudtask> tasks = boundjob.listtasks(null).tolist();\tcloudtask mycompletedtask = tasks[0];\tforeach (cloudtask curtask in tasks) {\t}\tboundpool.refresh();",
  "pool id state",
  0
 ],
 [
  "}\telse {\ttestmodule.skipcount++;\t}\t}\tcatch (ctestskippedexception) {\ttestmodule.skipcount++;\t}\tcatch (exception e) {\tsystem.console.writeline(indent + var.desc);",
  "usage mono mono api diff exe assembly xml assembly xml",
  1
 ],
 [
  "private void emitmetadatareader() {\topenscope(\"public partial class metadatareader\");\tforeach (var record in schemadef.recordschema) {\topenscope($\"public {record.name} get{record.name}({record.name}handle handle)\");\tif (record.name == \"constantstringvalue\") {",
  "authzset sidlist processing sids",
  1
 ],
 [
  "public void addparam14(object param, xslinputtype xslinputtype, readertype readertype, outputtype outputtype, navtype navtype) {\tstring baseline = path.combine(\"baseline\", (string)param);\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(\"myarg1\", szempty, \"test1\");\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);\tif (retobj.tostring() != \"test1\") assert.true(false);\tm_xsltarg.addparam(\"myarg1\", szempty, \"test2\");\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);",
  "added value retrieved value",
  0
 ],
 [
  "static bool testpreinitprimitivedata() {",
  "testing preinitialized primitive data",
  0
 ],
 [
  "public override void visit(membercore member) {",
  "unknown member",
  0
 ],
 [
  "public static void main (string[] args) {\tif (args.length == 0) {\treturn;\t} else if (args.length > 64) {\treturn;\t}\talone = (args.length == 1);\tservicepointmanager.certificatepolicy = new testcertificatepolicy ();\tint id = 1;\tforeach (string url in args) {",
  "get at",
  0
 ],
 [
  "foreach (var field in t.elements (\"field\")) fcomparer.added (field, true);\t}\tt = target.element (\"properties\");\tif (t != null) {\t}\tt = target.element (\"events\");\tif (t != null) {\t}\tt = target.element (\"methods\");\tif (t != null) {",
  "foreach var method in t elements method mcomparer added method true",
  0
 ],
 [
  "private bool containsenumtest(principal principal) {\tcheckdisposed();\tif (principal == null) throw new argumentnullexception(\"principal\");\tlock (_resultset) {\tresultsetbookmark bookmark = null;\ttry {",
  "disposed exception invalidoperationexception throws as expected when trying to pass taskmanager to start on",
  1
 ],
 [
  "public bool verifynode(xmlnodetype eexpnodetype, string strexpname, string strexpvalue) {\tbool bpassed = true;\tif (nodetype != eexpnodetype) {",
  "actual nodetype",
  0
 ],
 [
  "nativehashtable methodtemplateshashtable = loadhashtable(moduleinfo.handle, reflectionmapblob.metadatabasedgenericmethodstemplatemap, out externalfixupstable);\tif (methodtemplateshashtable.isnull) continue;\tvar enumerator = methodtemplateshashtable.lookup(hashcode);\tvar nativemetadataunit = nativemetadatatype.context.resolvemetadataunit(moduleinfo);\tnativeparser entryparser;\twhile (!(entryparser = enumerator.getnext()).isnull) {\tvar entrytypehandle = entryparser.getunsigned().ashandle();\tmethoddesc methoddesc = nativemetadataunit.getmethod(entrytypehandle, null);\tdebug.assert(methoddesc != null);\tif (methoddesc == canonform) {",
  "null",
  1
 ],
 [
  "public static async task removepackagedependency(this dotnetproject project, ipackagedependency dependency) {\tif (project == null) throw new argumentnullexception (nameof (project));",
  "removing package dependency from project",
  0
 ],
 [
  "foreach (loadedmethod m in methods) {\ttotaljitclicks += m.jitclicks;\t}\tif (totaljitclicks > 0) {\tprintseparator (writer);\tforeach (loadedmethod m in methods) {\tif (m.jitclicks > 0) {\t}\t}\t} else {",
  "threadstart",
  1
 ],
 [
  "private simplemode findcontextmode (simpleaction a, nvdlsection parentstate) {\tif (a.contexts != null) foreach (simplecontext ctx in a.contexts) foreach (simplepath path in ctx.path) if (matchpath (path, parentstate)) {",
  "matched context at",
  0
 ],
 [
  "public void dumpreader (xmlreader xr, bool attvalue) {\tif (xr.nodetype == xmlnodetype.attribute) {\twhile (xr.readattributevalue ()) dumpreader (xr, true);\t} else if (!attvalue) {",
  "template not found",
  1
 ],
 [
  "static void outparmtest2 (oracleconnection con) {\toraclecommand cmd2 = con.createcommand();\tcmd2.commandtext = \"create or replace function sf_testoutparm2(parm1 in number, parm2 out number, parm3 in out number) return number \" + \"is \" + \"   returnvalue number := 123.45; \" + \"begin \" + \"   if parm1 is null then \" + \"      parm2 := 18; \" + \"\t   parm3 := parm3 + 8000; \" + \"      returnvalue := 78; \" + \"   elsif parm1 = 999 then \" + \"         parm2 := null;\" + \"         parm3 := null;\" + \"         returnvalue := null;\" + \"   elsif parm3 is null then \" + \"         parm2 := 0; \" + \"         parm3 := 1234567890123.12345678; \" + \"   else \" + \"\t   parm2 := parm1 + 3; \" + \"      parm3 := parm3 + 70; \" + \"   end if;\" + \"   return returnvalue;\" + \"end;\";\tcmd2.executenonquery();",
  "the system cannot find resource",
  1
 ],
 [
  "static void writeblock(poblock block, streamwriter writer, pofile po, bool ismessages) {\tforeach (var item in block.metadata) writer.writeline(item);",
  "msgid",
  0
 ],
 [
  "public static void copydirectory(string directoryname, directorynode node, bool includeinproject) {\tdirectoryname = fileutility.normalizepath(directoryname);\tstring copiedfilename = path.combine(node.directory, path.getfilename(directoryname));",
  "unable to load image for project template",
  1
 ],
 [
  "object [] arguments;\targuments = new object [] { };\tif (compare (\"tostring\", mask, ref stateindex, arguments, ref more_states)) {\tcontinue;\t}\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;",
  "assert areequal mtp tostring",
  0
 ],
 [
  "if (paramvalue.gettype() == typeof(system.datetimeoffset)) {\tsystem.datetimeoffset dt = (system.datetimeoffset)paramvalue;\tvalue = dt.datetime.toshortdatestring() + \" \" + dt.datetime.timeofday + \" \" + dt.offset;\t}\telse if (paramvalue.gettype() == typeof(system.timespan)) {\tvalue = ((system.timespan)paramvalue).tostring();\t}\telse {\tvalue = ((system.datetime)paramvalue).toshortdatestring() + \" \" + ((system.datetime)paramvalue).timeofday;\t}",
  "foo bar",
  1
 ],
 [
  "public static void showhelp (optionset p) {",
  "imports system class testclass public sub testmethod str as string console writeline str end sub end class imports system class testclass public sub testmethod str as string if str isnot nothing then console writeline str end if end sub end class",
  1
 ],
 [
  "public static void restoreassemblies() {\tappdomain.currentdomain.assemblyload += new assemblyloadeventhandler(assemblyloadhandler);\tif (_assemblies.count == 0) return;\tprogressdialog progressdialog = new progressdialog();\tprogressdialog.setup(stringparser.parse(\"${res:componentinspector.progressdialog.loadingpreviouslyopenedassembliesdialogtitle}\"), stringparser.parse(\"${res:componentinspector.progressdialog.loadingpreviouslyopenedassembliesmessage}\"), _assemblies.count, progressdialog.has_progress_text, progressdialog.final);\tprogressdialog.showifnotdone();",
  "assembly restore start",
  0
 ],
 [
  "public void testbasiccase() {\tanalyze<basemethodcallwithdefaultparameteranalyzer>(@\" public class mybase {\tpublic virtual void foobar(int x = 12) {",
  "unknown end node valid end nodes are",
  1
 ],
 [
  "action test = () => {\tusing (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {\tstring jobid = constants.defaultconvenienceprefix + testutilities.getmyname() + guid.newguid();\ttry {\tcloudjob cloudjob = batchcli.joboperations.createjob(jobid, new poolinformation() { poolid = this.poolfixture.poolid });\tcloudjob.ontaskfailure = ontaskfailure.performexitoptionsjobaction;\tcloudjob.usestaskdependencies = true;\tcloudjob.commit();\tconst string taskid = \"t1\";\tcloudtask tasktoadd = new cloudtask(taskid, \"cmd /c \\\"ping 127.0.0.1 \\\"\");",
  "adding task",
  0
 ],
 [
  "environment.exit(0);\t}\trun.wait();\tif (run.isfaulted) {\t}\telse {\tok = run.result;\t}\t}\tcatch (exception exc) {",
  "skipped the package dependency is not added to the project",
  1
 ],
 [
  "private void openforwrite(string currentmachinename) {\tif (this.boolflags[flag_disposed]) throw new objectdisposedexception(gettype().name);",
  "failed to launch browser because invalid launch url",
  1
 ],
 [
  "public static void testpersistsucurityinfo5() {\tconsole.writeline(\"\\ntestpersistsucurityinfo5 - persist security info=false\");\toracleconnection con = new oracleconnection(\"data source=palis;user id=scott;password=tiger;persist security info=false\");\tcon.open();\toracleconnection con2 = (oracleconnection) ((icloneable) con).clone();",
  "connectionstring before open",
  0
 ],
 [
  "public static void init () {",
  "init",
  0
 ],
 [
  "view.dragstarted += delegate(object sender, dragstartedeventargs e) {\tvar val = store.getnavigatorat (view.selectedrow).getvalue (text);\te.dragoperation.data.addvalue (val);\tvar img = image.fromresource(gettype(), \"class.png\");\te.dragoperation.setdragimage(img, (int)img.size.width, (int)img.size.height);\te.dragoperation.finished += delegate(object s, dragfinishedeventargs args) {\t};\t};\tview.rowexpanding += delegate(object sender, treeviewroweventargs e) {\tvar val = store.getnavigatorat (e.position).getvalue (text);",
  "expanding",
  0
 ],
 [
  "static void readresult(idatareader rdr, datatable dt) {\tforeach (datarow schemarow in dt.rows) {\tforeach (datacolumn schemacol in dt.columns) console.writeline(schemacol.columnname + \" = \" + schemarow[schemacol]);\tconsole.writeline();\t}\tint nrows = 0;\tint c = 0;\tstring output, metadatavalue, datavalue;",
  "defaulting to system net http httpclienthandler",
  1
 ],
 [
  "catch (invalidoperationexception) {\tflag = false;\t}\tif (flag) {\tthrow new testexception(testresult.failed, \"\");\t}\ttry {\tdatareader.read();\t}\tcatch (xmlexception) {",
  "cannot read after an invalid operation exception",
  0
 ],
 [
  "}\t} catch (exception e) {\terrors.add (new compilererror (fullpath, 1, 1, null, e.tostring ()));\treturn null;\t}\tforeach (razorerror error in results.parsererrors) {\terrors.add (new compilererror (fullpath, error.location.lineindex + 1, error.location.characterindex + 1, null, error.message));\t}\ttry {\tusing (var writer = new stringwriter ()) {",
  "create stored function sp for testing long varchar input output inputoutput return parameters",
  1
 ],
 [
  "private static bool verifyclientcertificate (object sender, x509certificate certificate, x509chain chain, sslpolicyerrors certificateerrors) {\tif (certificate != null) {\tconsole.writeline (certificate.tostring (true));\t} else {",
  "no client certificate provided",
  0
 ],
 [
  "protected typelibrary resolveref(ucomitypelib itypelib) {",
  "typelib resolving",
  0
 ],
 [
  "try {\tfilestream f=new filestream(req, filemode.open, fileaccess.read);\tbyte[] fbuf=new byte[256];\treplyheaders(sock, 200, \"ok\", mime_type, null, f.length);\tint count;\twhile((count=f.read(fbuf, 0, 256))>0) {\tsock.send(fbuf, count, socketflags.none);\t}\tf.close();\t} catch(filenotfoundexception) {",
  "file not found",
  0
 ],
 [
  "object [] arguments;\targuments = new object [] { chr, i, int32_out, maskedtextresulthint_out };\tif (compare (\"insertat\", mask, ref stateindex, arguments, ref more_states)) {\tcontinue;\t}\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;",
  "assert areequal mtp insertat out out out maskedtextresulthint out",
  0
 ],
 [
  "exc14n = (cryptoconfig.createfromname (\"http: hmacmd5 = (cryptoconfig.createfromname (\"hmacmd5\") != null);\tmerlin ();\tconsole.writeline ();\tphaos ();\t}\tcatch (exception ex) {\tconsole.writeline (ex);\t}\tfinally {\tconsole.writeline ();",
  "total skip",
  0
 ],
 [
  "public static ienumerable<string> yieldreturnwithnestedtryfinally(bool breakinmiddle) {\tyield return \"start of method\";\ttry {\tyield return \"within outer try\";\ttry {\tyield return \"within inner try\";\tif (breakinmiddle) yield break;\tyield return \"end of inner try\";\t} finally {",
  "timeout check frequency",
  1
 ],
 [
  "public override void added (xelement target, bool wasparentadded) {\tstring name = target.attribute (\"name\").value;\tvar addeddescription  = $\"{state.namespace}.{name}: added type\";\tstate.logdebugmessage ($\"possible -n value: {addeddescription}\");\tif (state.ignorenew.any (re => re.ismatch (addeddescription))) return;\toutput.writeline (\"<pre class='added' data-is-non-breaking>\");\tstate.indent = 0;\taddedinner (target);",
  "test",
  1
 ],
 [
  "public static void main (string[] args) {\tint total = 0;\tbatchcompiler bc = newbatchcompiler ();\tforeach (string src in directory.getfiles (\".\", \"*.il\")) {\tif (bc.compile (src)) ++total;\tbc = newbatchcompiler ();\t}",
  "total compiled successfully",
  0
 ],
 [
  "public static void main (string[] args) {\tint low = 2000;\tint high = 2000;",
  "using system",
  0
 ],
 [
  "public static void buildclient (servicedata sd) {\tstring file = getclientfile (sd);\tif (file.exists (file)) return;\tcreatefolderforfile (file);\tstreamwriter sw = new streamwriter (file);",
  "can t get recent projects list",
  1
 ],
 [
  "public static void creategenerictestfile(string strfilename) {\tfilepathutil.addstream(strfilename, new memorystream());\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" standalone=\\\"no\\\"?>\");\ttw.writeline(\"<!-- comment1 -->\");\ttw.writeline(\"<?pi1a?>\");\ttw.writeline(\"<?pi1b?>\");\ttw.writeline(\"<?pi1c?>\");",
  "cannot get method",
  1
 ],
 [
  "public delegate int mydel(int x);\tprivate class myclass {\tpublic int do(int p) {\treturn 1;\t}\tpublic short do(short x) {",
  "process closehandle snapshot handle",
  1
 ],
 [
  "public void elemnamespace_17(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writeattributestring(\"xmlns\", null, \"test\");\tw.writeendelement();\t}\tcatch (xmlexception e) {",
  "exception",
  0
 ],
 [
  "try {\tvd.m(n, dynpara);\t}\tcatch (microsoft.csharp.runtimebinder.runtimebinderexception e) {\tif (errorverifier.verify(errormessageid.badargtypes, e.message, \"s.m<int>(int, int)\")) ret--;\t}\tdynpara = new test();\tdynamic dynp2 = null;\ttry {\tvv.m(dynpara, dynp2);",
  "could write \ud55c\uae00",
  1
 ],
 [
  "public async task refreshwithcontent (string projectcontent) {\ttry {\tbeginoperation ();\tawait sendrefreshwithcontent (projectcontent).configureawait (false);\t} catch (exception ex) {",
  "msbuild refresh failed",
  0
 ],
 [
  "public recentfilestorage (string filepath) {\tthis.filepath = filepath;\tacquirefileexclusive (filepath).continuewith (t => {\tif (t.isfaulted) {\texception ex = t.exception;\twhile (ex is aggregateexception && ex.innerexception != null) {\tex = ex.innerexception;\t}",
  "using system",
  1
 ],
 [
  "public static void thread() {\tthread.sleep(500);\tthread.sleep(500);\tthread.sleep(500);",
  "thread running",
  0
 ],
 [
  "public override async void deleteitem () {\tvar service = this.currentnode.dataitem as connectedservicenode;\ttry {\tawait connectedservices.removeservicefromproject (this.project, service.id);\t} catch (exception ex) {",
  "cleaned up",
  1
 ],
 [
  "static void main () {\tvar workitems = new performancecounter (\"mono threadpool\", \"work items added\");\tvar t1 = datetime.now;\tint n = 100 * 100 * 100;\tfor (var i = 0; i < n; i++) threadpool.queueuserworkitem (_ => {});\tvar t2 = datetime.now;\tvar d0 = t2 - t1;\tvar d1 = d0.totalmilliseconds;",
  "items in ms ms per queue",
  0
 ],
 [
  "if (assemblies.containskey (mvid)) return assemblies[mvid];\tvar mviddir = path.combine (msymdir, mvid);\tif (!directory.exists (mviddir)) {\tlogger.logwarning (\"mvid directory does not exist: {0}\", mviddir);\treturn  null;\t}\tstring assemblypath = null;\tvar exefiles = directory.getfiles (mviddir, \"*.exe\");\tvar dllfiles = directory.getfiles (mviddir, \"*.dll\");\tif (exefiles.length + dllfiles.length != 1) {",
  "mvid directory should include one assembly",
  0
 ],
 [
  "static void displaycertificate (x509certificate x509, bool machine, bool verbose) {\tif (verbose) {",
  "init caught exception",
  1
 ],
 [
  "public void dispose() {\tisdisposed = true;\thosttoworkerpipe.dispose();\tif (thread.currentthread != readerthread) {\tif (!readerthread.join(3000)) {\tkill();\treaderthread.join();\t}",
  "typedef struct",
  1
 ],
 [
  "public static void writeobject (binarywriter w, object o, writercontext ctx) {\t#if trace if (o != null) {\ttrace.indent ();\t} else {",
  "invalid command line arguments",
  1
 ],
 [
  "public void validationcallback(object sender, validationeventargs args) {\tif (args.severity == xmlseveritytype.warning) {\t_warningcount++;\t_warninginnerexceptionset = (args.exception.innerexception != null);\t}\telse if (args.severity == xmlseveritytype.error) {",
  "error",
  0
 ],
 [
  "if (s14.f8 != 8+9) {\treturn 8;\t}\tif (s14.f9 != 9+9) {\treturn 9;\t}\tif (s14.f10 != 10+9) {\treturn 10;\t}\tif (s14.f11 != 11+9) {",
  "omitxmldeclaration",
  1
 ],
 [
  "public void parityerroronlastbyte() {\tusing (var com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) using (var com2 = new serialport(tcsupport.localmachineserialinfo.secondavailableportname)) {\tvar rndgen = new random(15);\tvar bytestowrite = new byte[numrndbytespairty];\tvar expectedbytes = new byte[numrndbytespairty];\tvar actualbytes = new byte[numrndbytespairty + 1];\tiasyncresult readasyncresult;",
  "verifying default parityreplace byte with a parity errro on the last byte",
  0
 ],
 [
  "setupexternalprovider (extp);\tuseparameters = false;\tusesimplereader = false;\tbreak;\tcase \"postgresql\": case \"npgsql\": extp = new string[3] {\t\"\\\\loadextprovider\", \"npgsql.npgsqlconnection\"};\tsetupexternalprovider (extp);\tuseparameters = false;\tusesimplereader = false;\tbreak;",
  "error bad argument or provider not supported",
  0
 ],
 [
  "static void async_callback (iasyncresult ar) {",
  "type should be byte but receiving value has type of",
  1
 ],
 [
  "for (int idx = 0; idx < defaults.length; idx++) {\tif (servicetype.isequivalentto(defaults[idx])) {\tservice = this;\tbreak;\t}\t}\tif (service == null) {\tservices.trygetvalue(servicetype, out service);\t}\tif (service is servicecreatorcallback) {",
  "encountered a callback invoking it",
  0
 ],
 [
  "public static bool runsas64bit(string exename) {\tif (!environment.is64bitoperatingsystem) {\treturn false;\t}",
  "verifying write method throws exception after a call to basestream close",
  1
 ],
 [
  "public override object getservice(type servicetype) {\tobject service = base.getservice(servicetype);\tif (service == null) {\t} else {",
  "secutil v",
  1
 ],
 [
  "}\tinterop.advapi32.tokenprivileges tkp = new interop.advapi32.tokenprivileges();\ttkp.luid = debugvalue;\ttkp.attributes = attrib;\tinterop.advapi32.adjusttokenprivileges(htoken, false, tkp, 0, intptr.zero, intptr.zero);\tif (marshal.getlastwin32error() != interop.errors.error_success) {\tthrow new win32exception();\t}\t}\tfinally {",
  "process closehandle processtoken",
  0
 ],
 [
  "if (s17.f8 != 8+9) {\treturn 8;\t}\tif (s17.f9 != 9+9) {\treturn 9;\t}\tif (s17.f10 != 10+9) {\treturn 10;\t}\tif (s17.f11 != 11+9) {",
  "failed long long",
  1
 ],
 [
  "for (int i = 0; i < numberofcalls; i++) statstasks.add(grain.getcallstats());\tawait task.whenall(promises);\tvar responsespersilo = statstasks.select(t => t.result).groupby(s => s.item2);\tforeach (var silogroup in responsespersilo) {\tvar silo = silogroup.key;\thashset<guid> activations = new hashset<guid>();\tforeach (var response in silogroup) {\tif (activations.contains(response.item1)) continue;\tactivations.add(response.item1);\tint count = 1;",
  "count logformatter printdate call logformatter printdate call",
  0
 ],
 [
  "}\terror = encodingbytearrayhelper(berelement, tempvalue, 'o');\tvaluecount++;\t}\telse if (fmt == 'o' || fmt == 'x') {\tif (valuecount >= value.length) {\tdebug.writeline(\"value argument is not valid, valuecount >= value.length\\n\");\tthrow new argumentexception(string.format(cultureinfo.currentculture, sr.berconverternotmatch));\t}\tif (value[valuecount] != null && !(value[valuecount] is byte[])) {",
  "type should be byte but receiving value has type of",
  0
 ],
 [
  "public void state_7(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartdocument();\tw.writestartattribute(\"attr\", \"\");\t}\tcatch (invalidoperationexception e) {",
  "error unable to setup output results file",
  1
 ],
 [
  "public virtual void addservice(type servicetype, object serviceinstance, bool promote) {\tif (promote) {\tiservicecontainer container = container;\tif (container != null) {",
  "using system",
  1
 ],
 [
  "public static void runtimefailfast(rhfailfastreason reason, exception exception, intptr pexaddress, intptr pexcontext) {\ttry {\tif (!safetoperformrichexceptionsupport) return;\tbool minimalfailfast = infailfast.value || (exception is outofmemoryexception);\tstring failfastmessage = \"\";\tif (!minimalfailfast) {\tif ((reason == rhfailfastreason.pn_unhandledexception) && (exception != null)) {",
  "unhandled exception",
  0
 ],
 [
  "var v1 = checked(a.x1 -= 1);\tret++;\t}\tcatch (system.overflowexception) {\t}\ttry {\tvar v2 = checked(a.y -= 1);\tret++;\t}\tcatch (system.overflowexception) {",
  "did not throw exception",
  1
 ],
 [
  "tw.write(\"<entity1 att1='xxx&lt;xxx&#65;xxx&#x43;xxxe1fooxxx'>xxx&gt;xxx&#66;xxx&#x44;xxxe1fooxxx</entity1>\");\ttw.writeline(\"<entity2 att1='xxx&lt;xxx&#65;xxx&#x43;xxxe1fooxxx'>xxx&gt;xxx&#66;xxx&#x44;xxxe1fooxxx</entity2>\");\ttw.writeline(\"<entity3 att1='xxx&lt;xxx&#65;xxx&#x43;xxxe1fooxxx'>xxx&gt;xxx&#66;xxx&#x44;xxxe1fooxxx</entity3>\");\ttw.writeline(\"<entity4 att1='xxx&lt;xxx&#65;xxx&#x43;xxxe1fooxxx'>xxx&gt;xxx&#66;xxx&#x44;xxxe1fooxxx</entity4>\");\ttw.writeline(\"<entity5>e1foo e3bzee </entity5>\");\ttw.writeline(\"<attribute1 />\");\ttw.writeline(\"<attribute2 a1='a1value' />\");\ttw.writeline(\"<attribute3 a1='a1value' a2='a2value' a3='a3value' />\");\ttw.writeline(\"<attribute4 a1='' />\");\ttw.writeline(string.format(\"<attribute5 crlf='x{0}x' cr='x{0}x' lf='x\\nx' ms='x     x' tab='x\\tx' />\", environment.newline));",
  "regioninfo",
  1
 ],
 [
  "private static bool callsecondclassinstanceproperty() {\tint failcount = 0;\tdynamic d = new firstclassreturnclass();\tverify.firstcalled = false;\tif ((!(((secondclass)d.instanceproperty).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "} else if (property.privateimplementationtype != null) {\toutput.write (\" implements \");\toutputtype (property.privateimplementationtype);\toutput.write ('.');\toutput.write (property.name);\t}\toutput.writeline ();\tif (!iscurrentinterface) {\t++indent;\tif (property.hasget) {",
  "get",
  0
 ],
 [
  "uri uri = new uri(\"file:\" + filename);\treloadsource(filename);\tdatareader.positiononelement(\"root\");\tdatareader.read();\tbpassed = cerror.equals(datareader.baseuri.contains(\"common/bug_62426.xml\"), true, \"before resolveentity\");\tif (isxmltextreader() || isxmlnodereader() || isxmlvalidatingreader()) {\tbpassed = datareader.verifynode(xmlnodetype.entityreference, \"bug62426\", string.empty);\tif (datareader.canresolveentity) {\tdatareader.resolveentity();\tdatareader.read();",
  "here",
  0
 ],
 [
  "public void getparam18() {\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(\"myarg1\", szempty, \"test1\");\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);\tm_xsltarg.addparam(\"myarg1\", \"http: retobj = m_xsltarg.getparam(\"myarg1\", \"http: _output.writeline(\"added value:{0}\\nretrieved value: {1}\", \"test2\", retobj);\tif (retobj.tostring() != \"test2\") assert.true(false);\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);",
  "retrieve original value actual retrieved value",
  0
 ],
 [
  "object [] arguments;\targuments = new object [] { i, value };\tif (compare (methodname, mask, ref stateindex, arguments, ref more_states)) {\tcontinue;\t}\twriteteststart ();\tmtp = new ms_system_componentmodel.maskedtextprovider (mask);\twriteline (\"mtp = new maskedtextprovider (@\\\"\" + mask.replace (\"\\\"\", \"\\\"\\\"\") + \"\\\");\");\tmore_states = createstate (mtp, stateindex);\tstateindex++;",
  "assert areequal mtp true false",
  0
 ],
 [
  "writelineind (\"if (typedserializers == null) {\");\twriteline (\"typedserializers = new system.collections.hashtable ();\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twriteline (\"\");\twritelineind (\"{\");\tforeach (generationresult res in generatedmaps) {\tif (res.mapping is xmltypemapping) {",
  "imports system class testclass public sub testmethod str as string console writeline str end sub end class imports system class testclass public sub testmethod str as string if str isnot nothing then console writeline str end if end sub end class",
  1
 ],
 [
  "public void openclose_readmethods() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {",
  "verifying calling read methods after calling open and basestream close",
  0
 ],
 [
  "static void setupmypackage(oracleconnection con) {\ttry {\toraclecommand cmd2 = con.createcommand ();\tcmd2.commandtext = \"drop table blobtest2\";\tcmd2.executenonquery ();\t}\tcatch (oracleexception) {\t}",
  "create table",
  0
 ],
 [
  "if (_typeinfo == null) {\tthrow new exception(\"(probably a bug, please report) \" + \"null typeinfo pointer returned\");\t}\t_typeinfo.getcontainingtypelib(out itypelib, out index);\t_typelib = typelibrary.gettypelib(itypelib);\t}\tcatch (exception ex) {\tif (_typeinfo != null) {\tguid guid = basicinfo.guidfromtypeinfo(_typeinfo);\t}",
  "containing typelib not found",
  0
 ],
 [
  "for (int i = 0; i < direntrycount; i++) {\ticondirentry ide;\tide.width = reader.readbyte ();\tide.height = reader.readbyte ();\tide.colorcount = reader.readbyte ();\tide.reserved = reader.readbyte ();\tide.planes = reader.readuint16 ();\tide.bitcount = reader.readuint16 ();\tide.bytesinres = reader.readuint32 ();\tide.imageoffset = reader.readuint32 ();",
  "cdata this section contains cdata",
  1
 ],
 [
  "if (s6.f3 != 3+9) {\treturn 3;\t}\tif (s6.f4 != 4+9) {\treturn 4;\t}\tif (s6.f5 != 5+9) {\treturn 5;\t}\tif (s6.f6 != 6+9) {",
  "client certificates",
  1
 ],
 [
  "cancellationtokensource disposedcts = new cancellationtokensource();\tcancellationtoken disposedtoken = disposedcts.token;\tdisposedcts.dispose();\tassert.throws<argumentoutofrangeexception>( () => { task.delay(-2); });\tassert.throws<argumentoutofrangeexception>( () => { task.delay(new timespan(1000, 0, 0, 0)); });\tcancellationtokensource cts = new cancellationtokensource();\tcancellationtoken token = cts.token;\tcts.cancel();\ttask task5 = task.delay(0, token);\ttask task6 = task.delay(new timespan(0), token);",
  "message",
  1
 ],
 [
  "public void setargnullity(int index, nullity n) {\tif (runner.verbositylevel > 1) {",
  "setarg",
  0
 ],
 [
  "foreach (datacolumn schemacol in dt.columns) {\tconsole.writeline(schemacol.columnname + \" = \" + schemarow[schemacol]);\t}\tconsole.writeline(\"\");\t}\trdr = cmd.executereader();\tdt = rdr.getschematable();\tforeach (datarow schemarow in dt.rows) {\tforeach (datacolumn schemacol in dt.columns) {\tconsole.writeline(schemacol.columnname + \" = \" + schemarow[schemacol]);",
  "failed int",
  1
 ],
 [
  "public static void test (action<int> allocator) {\tfor (int i = 0; i < 1000; ++i) {\tbool caught = false;\ttry {\tallocator (i);\t}\tcatch (outofmemoryexception) {\tcaught = true;\t}\tif (!caught) {",
  "isforwardingenabled",
  1
 ],
 [
  "streamwriter sw = new streamwriter (fn, true);\tsw.writeline ();\tsw.close ();\t}\telse file.delete (pfile);\t}\twriteerror (errdoc, ns, \"errors found while generating \" + prot + \" proxy for wsdl: \" + wsdl, err);\t}\telse {\tif (file.exists (pfile)) {",
  "ok",
  0
 ],
 [
  "xmlwritersettings wsettings = new xmlwritersettings();\twsettings.closeoutput = true;\twsettings.newlinechars = newlinechars;\txmlwriter w = null;\ttry {\tw = utils.createwriter(wsettings);\t}\tcatch (argumentexception e) {\treturn;\t}",
  "did not throw argumentexception",
  0
 ],
 [
  "cloudtask mycompletedtask = new list<cloudtask>(boundjob.listtasks(null))[0];\tstring stdout = mycompletedtask.getnodefile(constants.standardoutfilename).readasstring();\tstring stderr = mycompletedtask.getnodefile(constants.standarderrorfilename).readasstring();\tthis.testoutputhelper.writeline(stdout);\tthis.testoutputhelper.writeline(\"\");\tthis.testoutputhelper.writeline(stderr);\tthis.testoutputhelper.writeline(\"\");\ttaskconstraints comptc = mycompletedtask.constraints;\tassert.notnull(comptc);\tif (null == comptc) {",
  "using system",
  1
 ],
 [
  "public static void printnumberofunhandledopcodes() {\t#if debug foreach (var pair in unhandledopcodes) {",
  "addmethodbodybuilder unhandled opcode x",
  0
 ],
 [
  "}\telse {\t}\tif (ijm.useridentity != null) {\t}\t}\t}\t{\tienumerable<metadataitem> mdis = curwi.metadata;\tif (null == mdis) {",
  "abstractdesignergenerator reparse could not find designed class in primary file",
  1
 ],
 [
  "private void checkparticlederivation(xmlschemacomplextype complextype) {\txmlschemacomplextype basetype = complextype.basexmlschematype as xmlschemacomplextype;\tif (basetype != null && basetype != xmlschemacomplextype.anytype && complextype.derivedby == xmlschemaderivationmethod.restriction) {\tif (!isvalidrestriction(complextype.contenttypeparticle, basetype.contenttypeparticle)) {\t#if debug if(complextype.contenttypeparticle != null && basetype.contenttypeparticle != null) {\tstring position = string.empty;\tif (complextype.sourceuri != null) {\tposition = \" in \" + complextype.sourceuri + \"(\" + complextype.linenumber + \", \" + complextype.lineposition + \")\";\t}",
  "derived",
  0
 ],
 [
  "using (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writeattributestring(\"xmlns\", \"x\", null, \"foo\");\tw.writeattributestring(\"xmlns\", \"x\", null, \"bar\");\t}\tcatch (xmlexception e) {\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "private static bool callsecondinterfaceinstancemethod() {\tint failcount = 0;\tdynamic d = new firstclassreturninterface();\tverify.firstcalled = false;\tif ((!(((d + 1)).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "filename = s;\t}\t}\tif (filename == null) {\tshowusage ();\treturn 1;\t}\tconsoleprogressmonitor monitor = new consoleprogressmonitor ();\tsolution solution = await services.projectservice.readworkspaceitem (monitor, filename) as solution;\tif (solution == null) {",
  "testing context injected methods on enums",
  1
 ],
 [
  "public void test () {",
  "a b",
  0
 ],
 [
  "string full_path = path.combine (dir, assembly);\tif (!assembly.endswith (\".dll\") && !assembly.endswith (\".exe\")) full_path += \".dll\";\ttry {\tvar a = universe.loadfile (full_path);\treturn a;\t} catch (filenotfoundexception ff) {\ttotal_log += ff.fusionlog;\tcontinue;\t}\t}",
  "log",
  0
 ],
 [
  "ms.position = 0;\tstring statusline = null;\tusing (streamreader sr = new streamreader (ms, encoding.utf8)) {\tstatusline = sr.readline ();\t}\tstringwriter sw = new stringwriter ();\tif (statusline.startswith (\"post /original/\")) {\tendpoint ep = socket.localendpoint;\tsw.flush ();\t} else if (statusline.startswith (\"get /moved/\")) {",
  "content length",
  0
 ],
 [
  "public void linqtosqlobject03() {\tnorthwind db = createdb();\tvar custs = from c in db.customers where c.city == \"london\" select c;\tforeach (var cust in custs) foreach (var ord in cust.orders) foreach (var orderdetail in ord.orderdetails) {",
  "customerid has an orderid with productid that has name",
  0
 ],
 [
  "public void testremovebracesfromforeach() {\ttest<removebracescoderefactoringprovider>(@\"class testclass {\tvoid test() {\t$foreach (var a in b) {\t}\t}\t}\", @\"class testclass {\tvoid test() {",
  "verifying read method throws exception without a call to open",
  1
 ],
 [
  "ts.writeline ();\t}\tif (machine_config_file != null){\tfilestream conf;\ttry {\tconf = file.openread (machine_config_file);\t} catch {\terror (\"failure to open {0}\", machine_config_file);\treturn;\t}",
  "got but expected",
  1
 ],
 [
  "if (ctor_func != null){\terror (\"--static-ctor not supported with package bundling, you must use native compilation for this\");\treturn false;\t}\tvar maker = new packagemaker (output);\tmaker.addfile (runtime);\tforeach (var url in files){\tstring fname = locatefile (new uri (url).localpath);\tstring aname = makebundle.getassemblyname (fname);\tmaker.add (\"assembly:\" + aname, fname);",
  "assembly",
  0
 ],
 [
  "public new void writebreak() {",
  "br",
  0
 ],
 [
  "s12.f5 = 5;\ts12.f6 = 6;\ts12.f7 = 7;\ts12.f8 = 8;\ts12.f9 = 9;\ts12.f10 = 10;\ts12.f11 = 11;\ts12.f12 = 12;\ts12 = mono_return_sbyte12(s12, 9);\tif (s12.f1 != 1+9) {",
  "adstorectx findprincipalbyidentrefhelper fake principal sid scheme",
  1
 ],
 [
  "private void reset(string currentmachinename) {",
  "eventlog reset",
  0
 ],
 [
  "runtime = args [i + 1];\ti += 2;\t} else if (args [i] == \"--runtime-args\") {\tif (i + 1 >= args.length) {\treturn 1;\t}\truntime_args = (runtime_args ?? \"\") + \" \" + args [i + 1];\ti += 2;\t} else if (args [i] == \"--config\") {\tif (i + 1 >= args.length) {",
  "missing argument to config command line option",
  0
 ],
 [
  "}\t}\telse {\trunninghash.add(obj, obj);\t}\tcomobjinfo = (comobjectinfo) objectinfofactory.getobjectinfo(true, obj);\tcomobjinfo.calcrunningobjname(rot, bc, moniker, monikername);\tprogress.updateprogresstext(comobjinfo.getmonikername());\tprogress.updateprogress(1);\trunningobjects.add(comobjinfo);",
  "rot added",
  0
 ],
 [
  "static void showerrorbox(object sender, threadexceptioneventargs e) {",
  "ok",
  1
 ],
 [
  "public void testcase3() {\ttest<stringcompareisculturespecificissue>(@\" class test {\tvoid foo () {\t}\t}\", @\" class test {\tvoid foo () {",
  "foo bar",
  0
 ],
 [
  "public void writeafterbasestreamclose() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {",
  "verifying write method throws exception after a call to basestream close",
  0
 ],
 [
  "static void main (string[] args) {",
  "b equals b failed error",
  1
 ],
 [
  "public void read_timeout() {\tusing (serialport com1 = tcsupport.initfirstserialport()) using (serialport com2 = tcsupport.initsecondserialport(com1)) {\tchar[] charxmitbuffer = tcsupport.getrandomchars(512, tcsupport.characteroptions.none);\tstring endstring = \"end\";\tchar endchar = endstring[0];\tchar notendchar = tcsupport.getrandomotherchar(endchar, tcsupport.characteroptions.none);",
  "verifying that readto string works appropriately after timeoutexception has been thrown",
  0
 ],
 [
  "public void dragenterevent(object sender, drageventargs e) {\ttry\t{\tif (candrop(e))\t{\te.effect = dragdropeffects.copy;\t}\t} catch (exception ex){",
  "value of field",
  1
 ],
 [
  "public override void load(openedfile file, stream stream) {",
  "warning pinvoke shows up more than once in input assembly",
  1
 ],
 [
  "public static void showhelp (optionset p) {",
  "usage it gsharp agent filen",
  0
 ],
 [
  "static bool callsecondstructoperator() {\tint failcount = 0; verify.firstcalled = false;\tif ( (!(bool)(((dynamic)firstclassreturnstruct.staticmethod()) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "string failuremessage;\tstring stacktrace = null;\tif (_transform.succeeded) {\ttry {\tusing (streamreader sr = new streamreader (_transform.testcase.outfile)) failuremessage = compareresult (_transform.result, sr.readtoend ().replace (\"\\r\\n\", \"\\n\"), _transform.testcase.compare);\t}\tcatch {\tif (_expectedexception!=null) failuremessage = null;\telse {\tconsole.writeline (_transform.testcase.outfile);",
  "error no reference result and no expected exception",
  0
 ],
 [
  "var types = new list<type>();\tif (basetype == null) {\tbasetype = typeof(object);\t}\tloggingservice.debug(\"typediscoveryservice.gettypes for \" + basetype.fullname + \"excludeglobaltypes=\" + excludeglobaltypes.tostring());\tforeach (assembly asm in typeresolutionservice.designerassemblies.toarray()) {\tif (excludeglobaltypes) {\t}\taddderivedtypes(basetype, asm, types);\t}",
  "typediscoveryservice returns types",
  0
 ],
 [
  "if (cref == null) return \"\";\tif (cref.length < 2) return cref;\ttry {\tvar entity = new icsharpcode.nrefactory.documentation.documentationcomment (\"\", ctx).resolvecref (cref.replace(\"<\", \"{\").replace(\">\", \"}\"));\tif (entity != null) {\tvar ambience = new icsharpcode.nrefactory.csharp.csharpambience ();\tambience.conversionflags = icsharpcode.nrefactory.typesystem.conversionflags.showparameterlist | icsharpcode.nrefactory.typesystem.conversionflags.showparameternames | icsharpcode.nrefactory.typesystem.conversionflags.showtypeparameterlist;\treturn ambience.convertsymbol (entity);\t}\t} catch (exception e) {",
  "invalid cref",
  0
 ],
 [
  "private static bool callsecondinterfaceinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturninterface<int>();\tif ((!(bool)(((dynamic)(s + 1)).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "os version",
  1
 ],
 [
  "private static void decrypt(keybundle key) {\tkeyoperationresult operationresult;\tvar algorithm = inputvalidator.getencryptionalgorithm();\tvar ciphertext = inputvalidator.getciphertext();\tkeybundle   localkey;\tlocalkey = (key ?? getkey(null));\toperationresult = task.run(() => keyvaultclient.decryptasync(localkey.keyidentifier.tostring(), algorithm, ciphertext)).configureawait(false).getawaiter().getresult();",
  "verifying calling read methods after calling open and basestream close",
  1
 ],
 [
  "private static async task startsilo() {\tawait silo.startasync();",
  "silo started",
  0
 ],
 [
  "public void testsimplestring() {\tstring result = runcontextaction( new splitstringcoderefactoringprovider(), \"class testclass\" + environment.newline + \"{\" + environment.newline + \"\tvoid test ()\" + environment.newline + \"\t{\" + environment.newline + \"\t\tsystem.console.writeline (\\\"hello$world\\\");\" + environment.newline + \"\t}\" + environment.newline + \"}\" );",
  "test store query failed test history data may be corrupt",
  1
 ],
 [
  ";\tlong?[] longnvalues = new long?[]\t{\tlong.maxvalue, long.minvalue, null }\t;\tforeach (bool a1 in boolvalues) {\tforeach (long? a2 in longnvalues) {\tbool d1 = a1;\tdynamic d2 = a2;\tif ((d1 ? d2 : 10l) != (a1 ? a2 : 10l)) {",
  "failed bool nullable long nullable long",
  0
 ],
 [
  "methodinfo mi = typeof (nullabletestclass).getmethod (\"f\");\tnullabletestclass nullable = new nullabletestclass ();\tsimplestruct? test = new simplestruct (90, 90);\tmi.invoke (nullable, flags, new passesstuffbinder (null), new object [] {null}, null);\tif (nullable.hasvalue) {\treturn 1;\t}\tnullable = new nullabletestclass ();\tmi.invoke (nullable, flags, new passesstuffbinder (new simplestruct (10, 20)), new object [] {200}, null);\tif (!nullable.hasvalue || nullable.bval != 20) {",
  "invoked nullabled with boxed struct but did not get it",
  0
 ],
 [
  "public int getextnobject2(object args) {\tobject retobj;\tfor (int i = 1; i <= 100; i++) {\tretobj = xsltarg1.getextensionobject(((object[])args)[1].tostring());\tif (((myobject)retobj).myvalue() != (int)((object[])args)[0]) {",
  "finalreport succeeded transactions in finalreport elapsed totalmilliseconds ms",
  1
 ],
 [
  "static void processarguments (string [] args) {\tfor (int i = 0; i < args.length; i++){\tstring arg = args [i];\tswitch (arg){\tcase \"-add\": if (action != action.none) {\thelp (true);\t}\taction = action.add;\tbreak;\tcase \"-del\": case \"-delete\": if (action != action.none) {",
  "error conflicting options",
  0
 ],
 [
  "if (!testpreinitprimitivedata()) {\tresult = fail;\t}\tif (!testpreinitintdata()) {\tresult = fail;\t}\tif (!testpreinittypedata()) {\tresult = fail;\t}\tif (!testpreinitmethoddata()) {",
  "failed",
  0
 ],
 [
  "var dir = path.getdirectoryname (typeof(macplatformservice).assembly.location);\tif (objcruntime.dlfcn.dlopen (path.combine (dir, \"libxammac.dylib\"), 0) == intptr.zero) loggingservice.logfatalerror (\"unable to load libxammac\");\tmimemap = new lazy<dictionary<string, string>> (loadmimemapasync);\tcarbon.setprocessname (brandingservice.applicationname);\tcheckgtkversion (2, 24, 14);\txwt.toolkit.currentengine.registerbackend<iextendedtitlebarwindowbackend,extendedtitlebarwindowbackend> ();\txwt.toolkit.currentengine.registerbackend<iextendedtitlebardialogbackend,extendedtitlebardialogbackend> ();\tvar description = xammacbuildinfo.value;\tif (string.isnullorempty (description)) {\t} else {",
  "using",
  0
 ],
 [
  "public static void testpersistsucurityinfo4() {\tconsole.writeline(\"\\ntestpersistsucurityinfo4 - persist security info=false with password at front\");\toracleconnection con = new oracleconnection(\";password=tiger;data source=palis;user id=scott;persist security info=false\");\tcon.open();",
  "verifying that read char int int will read characters that have been received after the call to read was made",
  1
 ],
 [
  "} catch (memberaccessexception) {\tfailcount += 1;\t}\ttry {\tvar a = new wrongcasefriendassembly.internalclass(@internal: 0);\t} catch (memberaccessexception) {\tfailcount += 1;\t}\ttry {\twrongcasefriendassembly.internalclass.privatestaticmethod();",
  "access friend private static method ok",
  0
 ],
 [
  "if (!hasexited) endlaunch ();\tsymbolfilestimestamps.clear ();\tsourcefilesdebuginfo.clear ();\tif (!hasexited) {\tif (vm != null) {\tthreadpool.queueuserworkitem (delegate {\ttry {\tvm.exit (0);\t} catch (vmdisconnectedexception) {\t} catch (exception ex) {",
  "main mon lock",
  1
 ],
 [
  "public void encoding_utf8encoding_beforeopen() {",
  "test failed didn t called the dispose",
  1
 ],
 [
  "int i = s.indexof (':');\tif (i < 0) {\tnamedobject.name = new xname (s);\t} else {\tnamedobject.name = new xname (s.substring (0, i), s.substring (i + 1));\t}\t}\treturn parent;\t}\tif (c == ':') {",
  "addnlinkedattrset movenextforeign no matching principal",
  1
 ],
 [
  "private void completioncallback(object context)  {\tif (boolflags[flag_disposed]) {\treturn;\t}",
  "eventlog completionstatuschanged starting at",
  0
 ],
 [
  "public static int main () {",
  "config config",
  1
 ],
 [
  "s5.f1 = 1;\ts5.f2 = 2;\ts5.f3 = 3;\ts5.f4 = 4;\ts5.f5 = 5;\ts5 = mono_return_int5(s5, 906);\tif (s5.f1 != 1+906) {\treturn 1;\t}\tif (s5.f2 != 2+906) {",
  "got but expected",
  0
 ],
 [
  "if (s9.f4 != 4+9) {\treturn 4;\t}\tif (s9.f5 != 5+9) {\treturn 5;\t}\tif (s9.f6 != 6+9) {\treturn 6;\t}\tif (s9.f7 != 7+9) {",
  "pn proxynamespace namespace namespace of the generated proxy",
  1
 ],
 [
  "public static void usage (string message) {\tif (message != null) {\tconsole.writeline (\"{0}{1}{0}\", environment.newline, message);\t}",
  "protocol only applicable when using stream",
  0
 ],
 [
  "using (memorystream ms = new memorystream()) {\tusing (xmlwriter w = creatememwriter(utils, ms, ws)) {\tw.writeelementstring(\"elem\", \"text\");\tw.flush();\tms.position = 0;\tusing (streamreader reader = new streamreader(ms)) {\toutputxml = reader.readtoend();\t}\t}\t}",
  "tr",
  1
 ],
 [
  "static int main (string [] args) {\tstring path = getfilepath ();\tif (path == null) return 1;\tupdater updater = new updater (path);\tif (file.exists (path)) {\tbool uptodate;\tconsole.writeline (updater.getlocalmessage (out uptodate));\tif (uptodate) return 0;",
  "block pc",
  1
 ],
 [
  "public static void error(testresult result, object actual, object expected, string source, string message, string stack, string filename, int lineno) {\tif (internal != null) {\tinternal.error(result, testlogflags.text, stringex.format(actual), stringex.format(expected), source, message, stack, filename, lineno );\t}\telse {",
  "message",
  0
 ],
 [
  "public override object changetype(object value, type type, cultureinfo cultureinfo) {\tvariant myvalue = new variant(value);\tif (cultureinfo == null) cultureinfo = cultureinfo.currentculture;\t#endif if (type.isbyref) {",
  "removing gateway",
  1
 ],
 [
  "for (int i = underlyingsize, length = array.length; i < length; i++) {\tif (!equals(array[i], default(t))) {\tconsole.writeline(\"bad element: != default(t) at (base)index {0}\", i);\tretval = false;\t}\t}\t{\tarraylist<t> u = underlying ?? this;\tif (u.views != null) foreach (arraylist<t> v in u.views) {\tif (u.array != v.array) {",
  "nic",
  1
 ],
 [
  "public iasyncresult begindisplayinitializationui (iclientchannel channel, asynccallback callback, object state) {",
  "start",
  1
 ],
 [
  "public void getextobject7() {\tm_xsltarg = new xsltargumentlist();\tstring obj = \"0.00\";\tm_xsltarg.addextensionobject(\"myarg1\", obj);\tretobj = m_xsltarg.getextensionobject(\"myarg1\");\tif (retobj.tostring() != \"0.00\") {",
  "init",
  1
 ],
 [
  "}\t}\telse if (a.contains(\"=\")) {\tstring[] split = a.split('=');\tif (string.isnullorempty(split[1])) {\treturn false;\t}\tswitch (split[0].tolowerinvariant()) {\tcase \"deploymentid\": deploymentid = split[1];\tbreak;",
  "bad command line arguments supplied",
  0
 ],
 [
  "private static bool test3() {\tstring[] stringvalues = new string[]\t{\tstring.empty, \"abc\", null }\t;\tforeach (string a1 in stringvalues) {\tdynamic d1 = 10;\tif ((string.empty ?? d1) != (string.empty ?? a1)) {",
  "failed string string",
  0
 ],
 [
  "private static bool testmethodforreferenceconversionfromstringtoobjectinassignment<t>() where t : class {\tint failcount = 0;\tvar origin = \"aa\";\tdynamic d = origin;\tt result = d;\tif (result != (object)origin) {\tfailcount++;",
  "test failed at conversion result",
  0
 ],
 [
  "public void dispose() {",
  "valuecollectionenumerator entering dispose",
  0
 ],
 [
  "oraclelob blob = reader.getoraclelob (1);\tbytes = new byte[6] { 0x31, 0x32, 0x33, 0x34, 0x35, 0x036 };\tblob.write (bytes, 0, bytes.length);\tblob.close ();\ttrans.commit ();\treadsimpletest(con, \"select * from mono_oracle_test\");\tstring varchar2_value = (string) readscalar (con,\"select max(varchar2_value) from mono_oracle_test\");\tdecimal number_whole_value = (decimal) readscalar (con,\"select max(number_whole_value) from mono_oracle_test\");\tdecimal number_scaled_value = (decimal) readscalar (con,\"select number_scaled_value from mono_oracle_test\");\tdatetime date_value = (datetime) readscalar (con,\"select date_value from mono_oracle_test\");",
  "did not throw exception",
  1
 ],
 [
  "public void removewebusernameandpassword (uri uri) {\tvar diddelete = removecredential (uri.host);\tif (diddelete) return;\tvar lasterror = (errorcode)marshal.getlastwin32error ();\tswitch (lasterror) {\tbreak;\tbreak;",
  "tried saving credentials but got unknown error code x",
  0
 ],
 [
  "private void largestring() {",
  "verifying write method with a large string size",
  0
 ],
 [
  "public void conditionalmultiple () {",
  "debug",
  0
 ],
 [
  "public void startelement () {",
  "section startelement",
  0
 ],
 [
  "}\tif ((data.flags & profilerflags.statistical) != 0) {\tarray.sort (statisticalhititems, statisticalhititemcallcounts.comparebystatisticalhits);\tarray.reverse (statisticalhititems);\tulong totalhits = 0;\tforeach (istatisticalhititem s in statisticalhititems) {\ttotalhits += s.statisticalhits;\t}\tif (totalhits > 0) {\tprintseparator (writer);",
  "reporting statistical hits hits recorded",
  0
 ],
 [
  "public int test_function (int a, bool b) {",
  "expected dir but got",
  1
 ],
 [
  "public c (short value) : base (5) {",
  "samutils papiquerytoregexstring mapped to",
  1
 ],
 [
  "public static void thread() {\ttry {",
  "thread running",
  0
 ],
 [
  "if (pe.value is string) {\tif (foundstringliteral) {\treturn null;\t}\tif (!result.region.isempty) {\tcaretoffset = document.positiontooffset(result.region.beginline, result.region.begincolumn) - 2;\tif (caretoffset < 0) return null;\t} else {\tint newcaretoffset = document.gettext(0, math.min(document.textlength, caretoffset + result.expression.length)).lastindexof(result.expression);\tif (newcaretoffset == -1) {",
  "resourcetoolkit nrefactoryresourceresolver could not find resolved expression in text",
  0
 ],
 [
  "webconfigurationmanager.init ();\tsettingsmappingmanager.init ();\truntime_section = (httpruntimesection) webconfigurationmanager.getsection (\"system.web/httpruntime\");\t} catch (exception ex) {\tinitialexception = ex;\t}\tqueue_manager = new queuemanager ();\tif (queue_manager.hasexception) {\tif (initialexception == null) initialexception = queue_manager.initialexception;\telse {",
  "cg return",
  1
 ],
 [
  "static bool callsecondclassindexer() {\tint failcount = 0; verify.firstcalled = false;\tif ( (!(bool)(firstclassreturndynamicclass<int>.staticproperty[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "codetemplateservice can t save unnamed template",
  1
 ],
 [
  "task<double> promise = task.run( () => testonestream(streamid, streamprovidername, numproducers, numconsumers, nummessages, usefanout));\tpromises.add(promise);\tif (!usefanout) {\tawait promise;\t}\t}\tif (usefanout) {\t}\tdouble rps = (await task.whenall(promises)).sum();\tpromises.clear();",
  "got total rps on streams or rps per streams",
  0
 ],
 [
  "public siloinstancetablemanagertests(itestoutputhelper output, fixture fixture) {\ttestutils.checkforazurestorage();\tthis.output = output;\tthis.clusterid = \"test-\" + guid.newguid();\tgeneration = siloaddress.allocatenewgeneration();\tsiloaddress = siloaddressutils.newlocalsiloaddress(generation);\toutput.writeline(\"clusterid={0} generation={1}\", this.clusterid, generation);",
  "date offset isdst",
  1
 ],
 [
  "private static void assertisnotinvalidoperationexception(exception thrownexception, string expectedmessagesubstring) {\texception e = thrownexception.getbaseexception();",
  "connectionstring after close",
  1
 ],
 [
  "writelineuni (\"}\");\twriteline (\"\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twriteline (\"\");\tforeach (generationresult res in generatedmaps) {\tres.serializerclassname = getuniqueclassname (res.mapping.elementname + \"serializer\");\twritelineind (\"{\");\twritelineuni (\"}\");\twriteline (\"\");",
  "return reader",
  0
 ],
 [
  "public static int main() {\ttry {",
  "in try",
  0
 ],
 [
  "static bool callsecondstructindexer() {\tint failcount = 0; verify.firstcalled = false;\tif ( (!(bool)(((dynamic)firstclassreturnstruct.staticproperty)[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "nested got but expected",
  1
 ],
 [
  "static public void createbitmap (string filename, imageformat imgfmt) {\tbitmap\tbmp = new bitmap (100, 100, pixelformat.format24bpprgb);\tconsole.writeline (\"bitmap created ok {0}\", bmp != null);\tif ( bmp != null) {",
  "error makefile generation supported only for solutions",
  1
 ],
 [
  "public override void classendunload (lc c, ulong counter) {",
  "failed",
  1
 ],
 [
  "private void writehelp() {\tconsole.out.writeline(sr.format(sr.helpdescription));\tconsole.out.writeline(sr.format(sr.helpdevoptions));",
  "got but expected",
  1
 ],
 [
  "int failcount = 0;\tc origin = new c(1);\tdynamic d = origin;\tint count = 0;\tdo {\tif (count == 0) {\tcount++;\t}\telse {\tfailcount++;",
  "test failed conversion result is incorrect",
  0
 ],
 [
  "public static int main () {",
  "address is x",
  0
 ],
 [
  "public void testalreadypresentifnotnullcheck2() {",
  "imports system imports system collections generic class testclass public sub testmethod list as ienumerable of string if list isnot nothing andalso list contains bla class",
  0
 ],
 [
  "public static int main () {\tvar t = type.gettype(\"mono.runtime\");\tif (t == null) return 1;\tvar setgcallowsynchronousmajor = (func<bool,bool>) delegate.createdelegate(typeof(func<bool,bool>), t, \"setgcallowsynchronousmajor\", ignorecase:false, throwonbindfailure:false);\tif (setgcallowsynchronousmajor == null) return 1;",
  "could not disable synchronous major",
  0
 ],
 [
  "static bool callsecondclassindexer() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturnclass<int>();\tif ( (!(bool)(((dynamic)s.instancemethod())[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public void prettyprintshutdownreport() {\tif (shutdownreport.count == 0) {",
  "no errors reported when closing connection",
  0
 ],
 [
  "public static bool equalsallattributes<t1>(this ienumerable<t1> first, ienumerable<t1> second, iequalitycomparer<t1> comparer) where t1 : xattribute {\tif (first.isempty() && (second == null || second.isempty())) return true;\tif (first.isempty()) {\treturn false;\t}\tif (second == null || second.isempty()) {",
  "actual attributes empty",
  0
 ],
 [
  "bytes = encoding.getbytes (\"mono is fun!\");\tclob.write (bytes, 0, bytes.length);\tclob.close ();\toraclelob blob = reader.getoraclelob (1);\tbytes = new byte[6] { 0x31, 0x32, 0x33, 0x34, 0x35, 0x036 };\tblob.write (bytes, 0, bytes.length);\tblob.close ();\ttrans.commit ();\treadsimpletest(con, \"select * from mono_oracle_test\");\tstring varchar2_value = (string) readscalar (con,\"select max(varchar2_value) from mono_oracle_test\");",
  "derived",
  1
 ],
 [
  "public static void throwexception (string message, t arg) {",
  "no abort",
  1
 ],
 [
  "foreach (string s in strs) include_list.add (s);\tgot_assemblies = false;\tcontinue;\t}\tif (arg == \"--help\") {\thelp ();\treturn 0;\t}\tif (arg == \"--delete-tables\") {\tdeletetables ();",
  "tables deleted",
  0
 ],
 [
  "if (s5.f1 != 1+90) {\treturn 1;\t}\tif (s5.f2 != 2+90) {\treturn 2;\t}\tif (s5.f3 != 3+90) {\treturn 3;\t}\tif (s5.f4 != 4+90) {",
  "end sql",
  1
 ],
 [
  "}\tschedule sched = curwi.schedule;\tif (null == sched) {\t}\telse {\t}\tjobschedulestatistics stats = curwi.statistics;\tif (null == stats) {\t}\telse {",
  "back got",
  1
 ],
 [
  "this.testoutputhelper.writeline(\"\");\tassert.true(comptc.maxtaskretrycount.hasvalue);\tassert.equal(99, comptc.maxtaskretrycount.value);\t}\ttaskexecutioninformation tei = mycompletedtask.executioninformation;\tassert.notnull(tei);\tif (null == tei) {\t}\telse {\tthis.testoutputhelper.writeline(\"\");",
  "ok",
  1
 ],
 [
  "public static heapitemset<hi1> performintersection<hi1,hi2> (heapitemset<hi1> firstset, heapitemset<hi2> secondset) where hi1 : iheapitem where hi2 : iheapitem {\tlist<hi1> result = new list<hi1> ();\tint firstindex = 0;\tint secondindex = 0;\thi1[] firstobjects = firstset.elements;\thi2[] secondobjects = secondset.elements;",
  "inside performintersection",
  0
 ],
 [
  "adspath.append(\"winnt: adspath.append(_storectx.machineusersuppliedname);\tadspath.append(\"/\");\tint celements = pathname.getnumelements();\tdebug.assert(celements >= 2);\tfor (int i = celements - 2; i >= 0; i--) {\tadspath.append(pathname.getelement(i));\tadspath.append(\"/\");\t}\tadspath.remove(adspath.length - 1, 1);\tde.path = adspath.tostring();",
  "sammembersset movenextlocal fake domain",
  0
 ],
 [
  "foreach (instruction ins in method.body.instructions) {\tswitch (ins.opcode.code) {\tcase code.call: case code.callvirt: methodreference target = (methodreference) ins.operand;\tif (!call_using_this) {\tmethoddefinition callee = target.resolve ();\tif (callee != null) {\tif (!callee.ispublic && !callee.isstatic) {\tif (callee.declaringtype.isnamed (nspace, name)) {\tinstruction instance = ins.traceback (method);\tif (instance != null && instance.opcode.code == code.ldarg_0) {",
  "found non public this call at",
  0
 ],
 [
  "public bool nextresult () {",
  "nextresult",
  0
 ],
 [
  "_log.writeline(\"-- \" + gateway.address.tostring());\t}\tassert.notnull(ipproperties.multicastaddresses);\tforeach (ipaddressinformation multi in ipproperties.multicastaddresses) {\t_log.writeline(\"-- \" + multi.address.tostring());\t}\tassert.notnull(ipproperties.unicastaddresses);\tforeach (unicastipaddressinformation uni in ipproperties.unicastaddresses) {\t_log.writeline(\"-- \" + uni.address.tostring());\tassert.notnull(uni.ipv4mask);",
  "ok",
  1
 ],
 [
  "private void doapplicationdirectoryinit() {\tdebug.assert(_contexttype == contexttype.applicationdirectory);\tif (_container == null) {\tdoldapdirectoryinitnocontainer();\t}\telse {",
  "principalcontext doapplicationdirecotryinit using container path",
  0
 ],
 [
  "public void largeswitch (string s) {\tswitch (s) {",
  "unknown",
  0
 ],
 [
  "_foreignresultset = null;\treturn true;\t}\telse {\tif (!_groupsvisited.contains(de.path) && !_groupstovisit.contains(de.path)) _groupstovisit.add(de.path);\tneedtoretry = true;\tcontinue;\t}\t}\telse {",
  "sammembersset movenextlocal adding to foreignmembers",
  0
 ],
 [
  "try {\tthread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();\t} finally {\t}\ttry {\t} catch(threadabortexception) {\tthread.resetabort();\t} finally {",
  "threadabortexception finally",
  0
 ],
 [
  "public void dtrenable_false_afteropen() {",
  "verifying false dtrenable after open",
  0
 ],
 [
  "public static xwt.drawing.image geticon (string name, bool generatedefaulticon) {\tname = name ?? \"\";\txwt.drawing.image img;\tif (icons.trygetvalue (name, out img)) return img;\tif (string.isnullorempty (name)) {",
  "empty icon requested stack trace",
  0
 ],
 [
  "private void generateinitcallbacksmethod() {\twriter.writeline();",
  "protected override void initcallbacks",
  0
 ],
 [
  "static void test(pgsqlconnection con, string sql, commandtype cmdtype, commandbehavior behavior, string testdesc) {\tpgsqlcommand cmd = null;\tpgsqldatareader rdr = null;\tint c;\tint results = 0;\tconsole.writeline(sql);",
  "end sql",
  0
 ],
 [
  "themeengine.current.colormenu = colorfromgdkcolor (style.bg [0]);\tthemeengine.current.colormenutext = colorfromgdkcolor (style.text [0]);\t}\tcatch (dllnotfoundexception) {\t}\tcatch {\t}\tbreak;\t}\tcase desktop.kde: {",
  "output write",
  1
 ],
 [
  "public void var_4(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartdocument();\tw.writeenddocument();\t}\tcatch (argumentexception e) {",
  "with cts cancelled worked",
  1
 ],
 [
  "case \"suite-finished\": if (testname == roottestname) {\tfinishsuites (0);\tlistener.suitefinished (\"<root>\", createresult (element));\trootsuitestarted = false;\t}\tbreak;\t}\t}\t}\t} catch (exception ex) {",
  "exception in test listener",
  0
 ],
 [
  "if (startsentinel == null) {\treturn retval;\t}\tint count = 0;\tnode node = startsentinel.next, prev = startsentinel;\t#if hashindex int taggroupsize = 0, oldtaggroupsize = losize + 1, seentaggroups = 0;\ttaggroup oldtg = null;\tif (underlying == null) {\ttaggroup tg = startsentinel.taggroup;\tif (tg.count != 0 || tg.first != null || tg.last != null || tg.tag != int.minvalue) {",
  "bad startsentinel tag group",
  0
 ],
 [
  "static void showinfo() {\tconsole.writeline(\"               <key>=<value>\\n\");",
  "value can be",
  0
 ],
 [
  "private int loadrulesfromassembly (string assembly, string includemask, string excludemask, string applicabilityscope) {\tassembly a = null;\ttry {\tassemblyname aname = assemblyname.getassemblyname (path.getfullpath (assembly));\ta = assembly.load (aname);\t}\tcatch (filenotfoundexception) {",
  "could not load rules from assembly",
  0
 ],
 [
  "public localgraininitbootstrapper() {",
  "test failed at call result",
  1
 ],
 [
  "static bool certificatevalidation (x509certificate certificate, int[] certificateerrors) {\tconsole.writeline (certificate.tostring (true));",
  "warning is not safe for this usage",
  1
 ],
 [
  "public void mapped_userlevelnone () {\texeconfigurationfilemap map = new execonfigurationfilemap ();\tmap.execonfigfilename = \"execonfig\";\tsysconfig config = configurationmanager.openmappedexeconfiguration(map, configurationuserlevel.none);",
  "mapped application config path",
  0
 ],
 [
  "tw.writeline(\"<entity3 att1='xxx&lt;xxx&#65;xxx&#x43;xxxe1fooxxx'>xxx&gt;xxx&#66;xxx&#x44;xxxe1fooxxx</entity3>\");\ttw.writeline(\"<entity4 att1='xxx&lt;xxx&#65;xxx&#x43;xxxe1fooxxx'>xxx&gt;xxx&#66;xxx&#x44;xxxe1fooxxx</entity4>\");\ttw.writeline(\"<entity5>e1foo e3bzee </entity5>\");\ttw.writeline(\"<attribute1 />\");\ttw.writeline(\"<attribute2 a1='a1value' />\");\ttw.writeline(\"<attribute3 a1='a1value' a2='a2value' a3='a3value' />\");\ttw.writeline(\"<attribute4 a1='' />\");\ttw.writeline(string.format(\"<attribute5 crlf='x{0}x' cr='x{0}x' lf='x\\nx' ms='x     x' tab='x\\tx' />\", environment.newline));\ttw.writeline(\"<skip1 /><afterskip1 />\");\ttw.writeline(\"<skip2></skip2><afterskip2 />\");",
  "build started",
  1
 ],
 [
  "}\tif (count == 0) {\ttraceutil.writelinewarning (typeof(comobjectinfo), \"comobjinfo - \" + \" typeinfo count = 0: \" + _obj);\tthrow new exception(\"this object has no type information \" + \"(gettypeinfocount returned 0).  \");\t}\tresult = idisp.gettypeinfo(0, 0, out _typeinfo);\tif (result != 0) {\tthrow new comexception(\"(probably a bug, please report) \" + \"failed to get itypeinfo\", result);\t}\tif (_typeinfo == null) {",
  "mono jscript compiler version",
  1
 ],
 [
  "private static bool dynamicobjectinsecondoperandandconditionistrue() {\tint failcount = 0;\tbyte origin = 24;\tdynamic d = origin;\tlong third = 33;\tbool cond = true;\tif ((long)(cond ? d : third) != 24) {\tfailcount++;",
  "test failed conversion result is incorrect",
  0
 ],
 [
  "private static bool test2() {\tlong?[] longnvalues = new long?[]\t{\t10l, 30l, 0, null }\t;\tforeach (long? a1 in longnvalues) {\tdynamic d1 = a1;\tif ((d1 - 10) != (a1 - 10)) {",
  "failed long long",
  0
 ],
 [
  "public graincallbootstrapper() {",
  "constructor",
  0
 ],
 [
  "public void handshake_none_beforeopen() {",
  "restoring focus for to",
  1
 ],
 [
  "public xmlschemaelement findelement (string name) {\tensureloaded();\tforeach (xmlschemaelement element in schema.elements.values) if (element.qualifiedname.name == name) return element;",
  "xmlschemadataobject did not find element in the schema",
  0
 ],
 [
  "public static void displayjobschedulelong(itestoutputhelper testoutputhelper, cloudjobschedule curwi) {\t{\tjobscheduleexecutioninformation wiexinfo = curwi.executioninformation;",
  "exeinfo",
  0
 ],
 [
  "public static void main (string [] args) {\tif (args.length < 1) {",
  "usage filename",
  0
 ],
 [
  "if (s7.f3 != 3+906) {\treturn 3;\t}\tif (s7.f4 != 4+906) {\treturn 4;\t}\tif (s7.f5 != 5+906) {\treturn 5;\t}\tif (s7.f6 != 6+906) {",
  "got but expected",
  0
 ],
 [
  "static int main () {\tvar t = new thread (setuplinks);\tt.start ();\tt.join ();\tgc.collect ();\tbridge a, b;\ta = b = null;\tconsole.writeline (\"a is null {0}\", a == null);\tconsole.writeline (\"b is null {0}\", b == null);\tif (a == null || b == null) return 1;",
  "error while loading pixbuf",
  1
 ],
 [
  "public void writeoptiondescriptions () {\tvar p = new optionset () {\t\"\\n:category 1:\", { \"hidden\",             \"hidden option, invisible in help\",     v => {}, true }, { \"hidden2=\",           \"hidden option, invisible in help\",     (k, v) => {}, true }, { \"p|indicator-style=\", \"append / indicator to directories\",    v => {} }, { \"color:\",             \"controls color info\",                  v => {} }, { \"color2:\",            \"set {color}\",                          v => {} }, { \"rk=\",                \"required key/value option\",            (k, v) => {} }, { \"rk2=\",               \"required {{foo}} {0:key}/{1:value} option\",    (k, v) => {} }, { \"rk3=\",               \"required {{foo}} {}\",    k => {} }, { \"rk4=\",               \"required {{foo}} {0:val}\",    k => {} }, { \"ok:\",                \"optional key/value option\",            (k, v) => {} }, { \"long-desc\", \"this has a really\\nlong, multi-line description that also\\ntests\\n\" + \"the-builtin-supercalifragilisticexpialidicious-break-on-hyphen.  \" + \"also, a list:\\n\" + \"  item 1\\n\" + \"  item 2\", v => {} }, { \"long-desc2\", \"iwantthisdescriptiontobreakinsideawordgeneratingautowordhyphenation. \", v => {} }, { \"long-desc3\", \"onlyoneperiod.andnowhitespaceshouldbesupportedevenwithlongdescriptions\", v => {} }, { \"long-desc4\", \"lots of spaces in the middle 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 and more until the end.\", v => {} }, { \"long-desc5\", \"lots of spaces in the middle - . - . - . - . - . - . - . - and more until the end.\", v => {} }, \"\", \"==this is a really long category name which will involve line wrapping, just because...==\", { \"o|out=\", \"the {directory} to place the generated files and directories.\\n\\n\" + \"if not specified, defaults to\\n`dirname file`/cache/`basename file .tree`.\", v => {} }, \"\", \"category 3:\", { \"h|?|help\",           \"show help text\",                       v => {} }, { \"version\",            \"output version information and exit\",  v => {} }, { \"<>\", v => {} }, new testargumentsource (new[]{\"@s1\", \"@s2\"}, \"read response file for more options\"), };\tstringwriter expected = new stringwriter ();\texpected.writeline (\"\");\texpected.writeline (\"  -p, --indicator-style=value\");",
  "test failed at call result",
  1
 ],
 [
  "protected virtual void build () {",
  "i m writting a test and i will fill a screen with some useless code",
  0
 ],
 [
  "public static void indexedcollectionevents() {\tilist<int> coll = new arraylist<int>();\ticollection<int> bag = new hashbag<int>();\tbag.addall(new int[] { 3, 2, 5, 5, 7, 7, 5, 3, 7, 7 });\tcoll.iteminserted += delegate(object c, itemateventargs<int> args)  {",
  "adstorectx extensioncacheconverter encountered collection",
  1
 ],
 [
  "public static void threadmethod_b() {\tfor (int h=0;h<10;h++) {\tint i=5;\tm[i].waitone();\tthread.sleep(4500);\t}\tfor (int h=0;h<10;h++) {\tint i=5;\tm[i].releasemutex();\t}",
  "is a duplicate attribute name",
  1
 ],
 [
  "static void resolve (servicedata sd) {\tconsole.write (\"resolving \" + sd.wsdl + \" \");\ttry {\tdiscoveryclientprotocol contract = new discoveryclientprotocol ();\tcontract.discoverany (sd.wsdl);\tif (sd.protocols == null || sd.protocols.length==0) retrieveservicedata (sd, contract);\tstring wsdlfile = getwsdlfile (sd);\tcreatefolderforfile (wsdlfile);\tservicedescription doc = (servicedescription) contract.documents [sd.wsdl];\tdoc.write (wsdlfile);",
  "waiting for signal",
  1
 ],
 [
  "return 1;\t}\ttry {\ttest.abortother ();\treturn 2;\t} catch (threadabortexception e) {\tobject state = null;\tbool stateexc = false;\ttry {\tstate = e.exceptionstate;",
  "have state",
  0
 ],
 [
  "console.writeline (e);\tif ((string)e.exceptionstate == \"statetest\") result |= 1;\tthread.resetabort ();\tthrow e;\t}\t} catch (threadabortexception e) {\tconsole.writeline (e);\tif (e.exceptionstate == null) result |= 2;\t}\t} catch (exception e) {",
  "failed",
  1
 ],
 [
  "public static datacolumnmapping getcolumnmappingbyschemaaction(datacolumnmappingcollection columnmappings, string sourcecolumn, missingmappingaction mappingaction) {\tif (null != columnmappings) {\tint index = columnmappings.indexof(sourcecolumn);\tif (-1 != index) {\t#if debug if (adapterswitches.dataschema.traceinfo) {",
  "test failed at call result",
  1
 ],
 [
  "public static int main () {\ttry {\tthrow new aexception ();\t} catch (aexception e1) {\ttry {\t} catch (exception) {\t}\treturn 0;\t} catch (exception e) {",
  "assembly name not provided",
  1
 ],
 [
  "}\tif (s2.f2 != 2+9) {\treturn 2;\t}\tsbyte3 s3;\ts3.f1 = 1;\ts3.f2 = 2;\ts3.f3 = 3;\ts3 = mono_return_sbyte3(s3, 9);\tif (s3.f1 != 1+9) {",
  "access friend internal ctor fail",
  1
 ],
 [
  "public static void displaypools(itestoutputhelper testoutputhelper, ienumerable<cloudpool> poolsenumerable) {\tlist<cloudpool> pools = new list<cloudpool>(poolsenumerable);\tint numpools = (null != pools) ? pools.count : 0;\ttestoutputhelper.writeline(\"\");\ttestoutputhelper.writeline(\"\");\tforeach (cloudpool curpool in pools) {\ttestoutputhelper.writeline(curpool.id + \":\");",
  "state",
  0
 ],
 [
  "if (parm.equals (\"true\")) usesimplereader = true;\telse if (parm.equals (\"false\")) usesimplereader = false;\t}\tpublic void setupsilentmode (string[] parms) {\tif (parms.length != 2) {\treturn;\t}\tstring parm = parms[1].toupper ();\tif (parm.equals (\"true\")) silent = true;\telse if (parm.equals (\"false\")) silent = false;",
  "do",
  1
 ],
 [
  "private void setuppasswordmodification(authenticableprincipal p) {\tdirectoryentry de = (directoryentry)p.underlyingobject;\tif (((this.contextoptions & contextoptions.signing) != 0) && ((this.contextoptions & contextoptions.sealing) != 0)) {\ttry {\tde.invoke(\"setoption\", new object[]{unsafenativemethods.ads_option_enum.ads_option_password_method, unsafenativemethods.ads_password_encoding_enum.ads_password_encode_clear});\tde.options.passwordport = p.context.serverinformation.portldap;\t}\tcatch (system.reflection.targetinvocationexception e) {",
  "failed to add get a value for of type boolean",
  1
 ],
 [
  "static void help () {",
  "hello",
  1
 ],
 [
  "if (s7.f4 != 4+906) {\treturn 4;\t}\tif (s7.f5 != 5+906) {\treturn 5;\t}\tif (s7.f6 != 6+906) {\treturn 6;\t}\tif (s7.f7 != 7+906) {",
  "got but expected",
  0
 ],
 [
  "static void handleresponse (task<httpwebresponse> t) {\ttry {\twebresponse resp = t.result;\tstring result;\tusing (var sr = new streamreader (resp.getresponsestream ())) result = sr.readtoend ();\tif (result != \"ok\") throw new exception (result);\t}\tcatch (exception ex) {",
  "feedback submission failed",
  0
 ],
 [
  "private void dropserverobjects(stepermutation tvpperm) {\tstring droptext = \"drop proc \" + getprocname(tvpperm) + \"; drop type \" + gettypename(tvpperm);\tusing (sqlconnection conn = new sqlconnection(_connstr)) {\tconn.open();\tsqlcommand cmd = new sqlcommand(droptext, conn);\ttry {\tcmd.executenonquery();\t}\tcatch (sqlexception e) {",
  "connectionstring after open",
  1
 ],
 [
  "public static int testgenerictls() {",
  "testing thread statics on generic types shared between modules are shared properly",
  0
 ],
 [
  "public static int main() {\tsystem.reflection.assembly asm = system.reflection.assembly.loadfrom(\"module-cctor.exe\");",
  "passed",
  1
 ],
 [
  "public static void main () {\tvar all = cultureinfo.getcultures (culturetypes.specificcultures | culturetypes.neutralcultures).orderby (l => l.lcid);\tconsole.outputencoding = encoding.utf8;\tvar writer = console.out;\tforeach (var c in all) {\tif (c.lcid == cultureinfo.invariantculture.lcid) continue;\tvar df = c.datetimeformat;",
  "datetimeformat",
  0
 ],
 [
  "cerror.writelineignore(e.tostring());\tutils.checkelementstate(w.writestate);\treturn;\t}\tcatch (xmlexception e) {\tcerror.writelineignore(e.tostring());\tutils.checkelementstate(w.writestate);\treturn;\t}\t}",
  "checking out file",
  1
 ],
 [
  "private static void initializewithretries(clientconfiguration config, int initializeattemptsbeforefailing) {\tint attempt = 0;\twhile (true) {\ttry {\tgrainclient.initialize(config);",
  "warning handle character x in collation element table",
  1
 ],
 [
  "static void listcodegroups () {\tprintglobalinfo ();\tforeach (policylevel pl in levels) {",
  "se serviceendpoint url url of the service to be placed in the",
  1
 ],
 [
  "assert.areequal (test, uri.tostring (), \"tostring/\" + test);\t}\t}\t[test]\tpublic void unixlocalpath_wtf () {\tstring path = \"file: uri fileuri = new uri( path );\tassert.areequal (\"/tmp/foo/bar\", fileuri.absolutepath, path);\tstring path2 = \"file: fileuri = new uri (path2);\tassert.areequal (\"file: }\tpublic static void print (uri uri) {",
  "absoluteuri",
  0
 ],
 [
  "s3.f2 = 2;\ts3.f3 = 3;\ts3 = mono_return_sbyte3(s3, 9);\tif (s3.f1 != 1+9) {\treturn 1;\t}\tif (s3.f2 != 2+9) {\treturn 2;\t}\tif (s3.f3 != 3+9) {",
  "got but expected",
  0
 ],
 [
  "public override void help() {\tconsole.writeline();\tconsole.writeline();",
  "bad command line arguments supplied",
  1
 ],
 [
  "public static int main () {\tconsole.writeline (m (1));\ttry {\tconsole.writeline (m (null));\t} catch (exception) {",
  "thrown",
  0
 ],
 [
  "public static void testpersistsucurityinfo5() {\tconsole.writeline(\"\\ntestpersistsucurityinfo5 - persist security info=false\");\toracleconnection con = new oracleconnection(\"data source=palis;user id=scott;password=tiger;persist security info=false\");\tcon.open();",
  "foo bar",
  1
 ],
 [
  "tw.writeline(\"<attribute2 a1='a1value' />\");\ttw.writeline(\"<attribute3 a1='a1value' a2='a2value' a3='a3value' />\");\ttw.writeline(\"<attribute4 a1='' />\");\ttw.writeline(string.format(\"<attribute5 crlf='x{0}x' cr='x{0}x' lf='x\\nx' ms='x     x' tab='x\\tx' />\", environment.newline));\ttw.writeline(\"<skip1 /><afterskip1 />\");\ttw.writeline(\"<skip2></skip2><afterskip2 />\");\ttw.writeline(\"<chars1>0123456789</chars1>\");\ttw.flush();\ttw.writeline(\"<isdefault a1='a1value' />\");\ttw.writeline(\"<boolean3>1</boolean3>\");",
  "not ok",
  1
 ],
 [
  "private void dispose(bool disposing) {\t#if finalization_watch if (!disposing && nativepen != intptr.zero) {",
  "retrieved",
  1
 ],
 [
  "break;\tcase \"x11\": options.mode = 3;\tbreak;\tcase \"console\": options.mode = 0;\tbreak;\tcase \"cocoa\": options.mode = 2;\tbreak;\tdefault: try {\toptions.mode = int32.parse (value);\t} catch {",
  "could not recognize option as the mode",
  0
 ],
 [
  "public static void rev<t> (list <t> y) {",
  "numericprecision",
  1
 ],
 [
  "public void taskfinishedhandler (taskfinishedeventargs args) {\tindent--;\tif (isverbositygreaterorequal (loggerverbosity.detailed) || (!args.succeeded && isverbositygreaterorequal (loggerverbosity.normal))) {\tsetcolor (eventcolor);",
  "done executing task",
  0
 ],
 [
  "public int transformresolver(string szxmlfile, xmlresolver xr, bool errorcase, transformtype transformtype, doctype doctype) {\tlock (s_outfilememorylock) {\tszxmlfile = fullfilepath(szxmlfile);",
  "key name key",
  1
 ],
 [
  "public static int main ( string [] args) {\tbookaboutmovie jurassicpark = new bookaboutmovie(\"jurassic park\");",
  "csum",
  1
 ],
 [
  "}\tforeach (fileinfo inst in di.getfiles (\"*.xml\")) {\ttry {\trelaxngvalidatingreader vr = new relaxngvalidatingreader (new xmltextreader (inst.fullname), p);\tif (skip_error) vr.invalidnodefound += relaxngvalidatingreader.ignoreerror;\twhile (!vr.eof) vr.read ();\tif (inst.name.indexof (\"i.\") >= 0 && !skip_error) console.writeline (\"incorrectly validated instance: \" + di.name + \"/\" + inst.name);\t} catch (relaxngexception ex) {\tstring path = di.name + \"/\" + inst.name;\tif (inst.name.indexof (\"i.\") >= 0) continue;",
  "loading style sheet as xmltextreader",
  1
 ],
 [
  "static bool uninstalladdin(list<string> disabled, string addinname, string targetdir) {\tif (directory.exists(targetdir)) {",
  "verifying read method with zero timeout that resizes serialport s buffer",
  1
 ],
 [
  "public void parseassembly (byte[] data, string version, string name, string fullname, bool dump_asm, bool dump_ver, bool dump_guids_for_msbuild) {\tvar a = assembly.reflectiononlyload (data);\tvar m = a.getmodules ()[0];\tvar id = m.moduleversionid.tostring ().toupper ();\tvar hash_code = hash (id).tostring (\"x\");\tvar str = filetoenum (name);\tstring ver_str = version + \" \" + filetomoniker (fullname);\tvar ver = a.getname ().version;\tif (dump_ver) {",
  "ignored asm ver str ver major ver minor ver build ver revision",
  0
 ],
 [
  "public void close() {\tif (associated) {\tif (_haveprocesshandle) {\tlock (this) {\tstopwatchingforexit();\t}",
  "isvisible point",
  1
 ],
 [
  "#endif }\tcon.connectionstring = constr;\ttry {\tcon.open();\t}\tcatch(sqlexception se) {\tforeach(sqlerror error in se.errors) {\t}\texception ie = se.innerexception;\tif(ie != null) {",
  "stacktrace",
  0
 ],
 [
  "if (s10.f5 != 5+9) {\treturn 5;\t}\tif (s10.f6 != 6+9) {\treturn 6;\t}\tif (s10.f7 != 7+9) {\treturn 7;\t}\tif (s10.f8 != 8+9) {",
  "chunk size",
  1
 ],
 [
  "case \"pipeline\": this.pipelinelength = int32.parse(args[++i]);\tbreak;\tcase \"?\": case \"help\": default: ok = false;\tbreak;\t}\t}\telse if (argpos == 1) {\tthis.graphdatafile = new fileinfo(a);\targpos++;\tif (!graphdatafile.exists) {",
  "read schema with keyinfo",
  1
 ],
 [
  "_log.writeline(\"-- \" + dns.tostring());\t}\tassert.notnull(ipproperties.dnssuffix);\tassert.notnull(ipproperties.gatewayaddresses);\tforeach (gatewayipaddressinformation gateway in ipproperties.gatewayaddresses) {\t_log.writeline(\"-- \" + gateway.address.tostring());\t}\tassert.notnull(ipproperties.multicastaddresses);\tforeach (ipaddressinformation multi in ipproperties.multicastaddresses) {\t_log.writeline(\"-- \" + multi.address.tostring());",
  "codeentrypointmethod",
  1
 ],
 [
  "private static bool callsecondclassinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturndynamicclass();\tif ((!(bool)(s[1].instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "thread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();\t} finally {\t}\ttry {\tthread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();\t} finally {",
  "listing all groups",
  1
 ],
 [
  "_stateobj._longlen = _snapshotlonglen;\t_stateobj._longlenleft = _snapshotlonglenleft;\t_stateobj._snapshotreplay = true;\t_stateobj.assertvalidstate();\t}\tinternal void preparereplay() {\tresetsnapshotstate();\t}\t}\tprivate void dumpbuffer() {",
  "foo bar",
  1
 ],
 [
  "}\ttry {\tvar a = new correctcasefriendassembly.internalclass(@internal: 0);\t} catch (memberaccessexception) {\tfailcount += 1;\t}\ttry {\tvar a = new wrongcasefriendassembly.internalclass(@internal: 0);\t} catch (memberaccessexception) {\tfailcount += 1;",
  "access friend internal ctor fail",
  0
 ],
 [
  "if (sd != null) {\tremoveservice (re.url);\t}\tcontinue;\t}\tif (sd == null) {\tsd = createservicedata (re);\tservices.services.add (sd);\t}\t}",
  "done",
  0
 ],
 [
  "public static int main(string[] args) {\tif (args.length == 0 || args [0] == \"--help\" || args [0] == \"help\") {\tconsole.writeline ();",
  "the path can be absolute or relative to the registry path",
  0
 ],
 [
  "public void dumpreader (xmlreader xr, bool attvalue) {",
  "namespaceuri",
  0
 ],
 [
  "public void discardafterfailedopen() {\tusing (serialport com = new serialport(\"bad_port_name\")) {",
  "verifying read discard throws exception with a failed call to open",
  0
 ],
 [
  "public static int main () {\ttest1 ();\ttest2 ();\ttest3 ();\ttest4 ();\ttest5 ();\ttest6 ();",
  "column",
  1
 ],
 [
  "public void write (textwriter writer) {\twriter.newline = format.newline;\tfor (int n=0; n<prefixblanklines; n++) writer.writeline ();\twriter.writeline (\"# \" + productdescription);\tmetadata.write (writer);\tforeach (var p in projects) p.write (writer);",
  "global",
  0
 ],
 [
  "public static void testpersistsucurityinfo3() {\toracleconnection con = new oracleconnection(\"data source=palis;user id=scott;password=tiger\");\tcon.open();\tcon.close();",
  "connectionstring after close",
  0
 ],
 [
  "public void addparam16(object param, xslinputtype xslinputtype, readertype readertype, outputtype outputtype, navtype navtype) {\tstring baseline = path.combine(\"baseline\", (string)param);\tm_xsltarg = new xsltargumentlist();\tstring obj = \"test\";\tfor (int i = 0; i < 200; i++) {\tm_xsltarg.addparam(\"myarg2\", szempty, obj + i);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (retobj.tostring() != (\"test\" + i)) {",
  "failed to add remove iteration",
  0
 ],
 [
  "public static void createxmlspacetestfile(string strfilename) {\tstream s = new memorystream();\ttextwriter tw = new streamwriter(s);",
  "persona dromio of ephesus persona",
  0
 ],
 [
  "public static int main (string[] args) {\ttry {\tif (args.length != 1) {",
  "editorconfig edconf keyname",
  1
 ],
 [
  "public static int main () {\tint x = 1;\tint y = 0;\td del = new d (m);\tiasyncresult ar = del.begininvoke (x, out y, null, null);\tif (del.endinvoke (out y, ar) != 2) return 1;\tif (y != 3) return 2;",
  "test ok",
  0
 ],
 [
  "public static int main () {\tif (\"hello\" != a.hello.tostring ()) return 1;",
  "got but expected",
  1
 ],
 [
  "static void writeheader(streamwriter html, string title) {\thtml.writeline(\"  <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"listing.css\\\">\");\thtml.writeline(\"  <meta name=\\\"generator\\\" value=\\\"buildaddindocumentation\\\">\");",
  "head body",
  0
 ],
 [
  "public void tracing () {\ttrace.indentlevel = 0;\ttrace.indentsize = 4;\tstring value = \"entering main\" + environment.newline + \"exiting main\" + environment.newline;",
  "did not throw argumentnullexception",
  1
 ],
 [
  "public virtual void dispose() {\tif (!_disposed) {\tif ((this.underlyingobject != null) && (this.underlyingobject is idisposable)) {\t((idisposable)this.underlyingobject).dispose();\t}\tif ((this.underlyingsearchobject != null) && (this.underlyingsearchobject is idisposable)) {",
  "nhello hello",
  1
 ],
 [
  "public static async task removepackagedependency(this dotnetproject project, ipackagedependency dependency) {\tif (project == null) throw new argumentnullexception (nameof (project));\tif (dependency.status == status.notadded || !project.packageadded (dependency)) {",
  "got but expected",
  1
 ],
 [
  "public virtual void removeservice(type servicetype, bool promote) {\tif (promote) {\tiservicecontainer container = container;\tif (container != null) {\tdebug.indent();",
  "did not throw exception",
  1
 ],
 [
  "long tdiff = end.ticks - start.ticks;\tint mdiff = (int)tdiff/10000;\ttms += mdiff;\t}\tran++;\tif (result != expected) {\tfailed++;\t}\t}\tif (do_timings) {",
  "total ms",
  0
 ],
 [
  "xmldocument xml = new xmldocument();\txml.load(file.fullname);\txmlnodelist n = xml.selectnodes(\"/querymanifest[@version=\\\"1.0\\\"]/catalogs/catalog\");\tforeach (xmlnode node in n) {\tcatalogs.add( new help3catalog(node.attributes[\"productid\"].innertext, node.attributes[\"productversion\"].innertext, node.attributes[\"productlocale\"].innertext, node.attributes[\"productdisplayname\"].innertext, node.selectsinglenode(\"catalogpath\").innertext, node.selectsinglenode(\"contentpath\").innertext, node.selectsinglenode(\"brandingpackagefilename\").innertext) );\t}\t}\tloggingservice.debug(string.format(\"helpviewer: {0} {1} loaded\", catalogs.count, (catalogs.count == 1)?\"catalog\":\"catalogs\"));\t}\tcatch (exception ex) {",
  "principalsearchresult dispose disposing resultset",
  1
 ],
 [
  "public async task<int> run (string[] arguments) {\tif (arguments.length == 0 || arguments [0] == \"--help\") {\tconsole.writeline (\"\");\tconsole.writeline (\"\");",
  "the following files hold the content found at the corresponding urls",
  1
 ],
 [
  "private string mutates (methoddefinition method, instruction end) {\tstring name = null;\tinstruction ins = avoidmethodswithsideeffectsinconditionalcoderule.fulltraceback (method, end);\tif (ins != null) {",
  "test",
  1
 ],
 [
  "public bool contains(principal principal) {\tstorectx storectxtouse = _owninggroup.getstorectxtouse();\tif ((storectxtouse != null) && (storectxtouse.supportsnativemembershiptest)) {\tglobaldebug.writelineif(globaldebug.info, \"principalcollection\", \"contains: using native test (store ctx is null = {0})\", (storectxtouse == null));\treturn containsnativetest(principal);\t}\telse {",
  "test failed at conversion result",
  1
 ],
 [
  "public void basictest_getipinterfacestatistics_success_linux() {\tforeach (networkinterface nic in networkinterface.getallnetworkinterfaces()) {\tipinterfacestatistics stats = nic.getipstatistics();\tassert.throws<platformnotsupportedexception>(() => stats.incomingunknownprotocolpackets);\tassert.throws<platformnotsupportedexception>(() => stats.nonunicastpacketssent);",
  "unicastpacketssent",
  0
 ],
 [
  "static void writehelp () {\tconsole.writeline ();\tconsole.writeline ();\tconsole.writeline ();\tconsole.writeline ();",
  "sn strongnamefile snfile strong name file",
  0
 ],
 [
  "private static bool callsecondstructinstanceproperty() {\tint failcount = 0;\tdynamic d = new firstclassreturnstruct();\tverify.firstcalled = false;\tif ((!(((d + 1)).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public bool verifynode(xmlnodetype eexpnodetype, string strexpname, string strexpvalue) {\tbool bpassed = true;\tif (nodetype != eexpnodetype) {\tbpassed = false;\t}\tif (name != strexpname) {",
  "name doesn t match",
  0
 ],
 [
  "cmd.transaction.commit();\toraclecommand select = con.createcommand ();\tselect.commandtext = \"select blob_column from blobtest2\";\toracledatareader reader = select.executereader ();\telse {\toraclelob lob = reader.getoraclelob (0);\tif (lob == oraclelob.null) console.writeline(\"lob is oraclelob.null\");\telse {\tbyte[] blob = (byte[]) lob.value;\tstring result = gethexstring(blob);",
  "got",
  1
 ],
 [
  "if (leastindexreachable >= startind) console.writeline(\"articulation point: {0} (least index reachable via {3} is {1} >= this index {2})\", e.start, leastindexreachable, startind, e);\tif (leastindexreachablefrom[startind] > leastindexreachable) leastindexreachablefrom[startind] = leastindexreachable;\t}\t};\taction<edge<string, int>> onnotfollowed = delegate(edge<string, int> e) {\tint startind = index[e.start], endind = index[e.end];\tif (leastindexreachablefrom[startind] > endind) leastindexreachablefrom[startind] = endind;\t};\tstring root = \"c\";\tg.depthfirstsearch(root, beforevertex, aftervertex, onfollow, onfollowed, onnotfollowed);",
  "edges",
  0
 ],
 [
  "if ((symboltype == \"t\") || (symboltype == \"t\")) {\tlastfunction = region.newfunction (symbolname, (uint) symboloffset);\t}\t}\t}\t}\tif (lastfunction != null) {\tlastfunction.endoffset = (uint) (region.endaddress - region.startaddress);\t}\t} catch (exception e) {",
  "exception",
  0
 ],
 [
  "public void testmethodsynchronized() {\tvar input = @\" using system.runtime.compilerservices;\tclass testclass {\t[methodimpl (methodimploptions.synchronized)]\tvoid testmethod () {",
  "unknown scope value defaulting to all",
  1
 ],
 [
  "public int addfile (string fname) {\tusing (stream filestream = file.openread (fname)){\tvar ret = filestream.length;",
  "test failed at call result",
  1
 ],
 [
  "public static void encode (string dump_file, string data_name, string h_file) {\tpagedtableencoder.idata data;\tusing (textreader r = new streamreader (dump_file)) data = parsedump (r);\tpagedtableencoder pte = new pagedtableencoder (8, 8, 16, true, \"disable_astral\");\tpte.process (data, \"astral_index\");\tusing (textwriter w = new streamwriter (h_file)) {\tw.writeline (\"/*\");",
  "the tables below are automatically generated",
  0
 ],
 [
  "public void hello () {",
  "hello world",
  0
 ],
 [
  "public override void print (textwriter tw, ilprinter<apc> printer, func<cfgblock, ienumerable<sequence<edge<cfgblock, edgetag>>>> contextlookup, sequence<edge<cfgblock, edgetag>> context, hashset<pair<subroutine, sequence<edge<cfgblock, edgetag>>>> printed) {\tvar element = new pair<subroutine, sequence<edge<cfgblock, edgetag>>> (this, context);\tif (printed.contains (element)) return;\tprinted.add (element);\tvar subs = new hashset<subroutine> ();\tvar methodinfo = this as imethodinfo;\tstring method = (methodinfo != null) ? string.format (\"({0})\", this.subroutinefacade.metadataprovider.fullname (methodinfo.method)) : null;\ttw.writeline (\"-------------\");\tforeach (blockwithlabels<label> block in this.blocks) {\ttw.write (\"block {0} ({1})\", block.index, block.reversepostorderindex);",
  "target of backedge",
  0
 ],
 [
  "public void testireadonlymakespropertiesreadonly() {\ttype ireadonlytype = typeof(ireadonly);\tlist<type> typeswithireadonlybase = gettypeswhichimplementinterface(ireadonlytype.gettypeinfo().assembly, ireadonlytype, requirepublicconstructor: false).tolist();\tforeach (type type in typeswithireadonlybase) {\tireadonly objectundertest = this.customizedobjectfactory.createinstance<ireadonly>(type);\tobjectundertest.isreadonly = true;\tienumerable<propertyinfo> properties = type.getproperties(bindingflags.public | bindingflags.instance);\tforeach (propertyinfo property in properties.where(p => p.name != \"custombehaviors\")) {\tif (property.canwrite) {",
  "attempting to write property",
  0
 ],
 [
  "static void test4() {\tigraph<string, int, int> g = new hashgraph<string, int, int>(new intweight(), snake(5));",
  "edge count",
  0
 ],
 [
  "protected override void run () {\ttry {\tstring title = gettextcatalog.getstring (\"clear recent files\");\tstring question = gettextcatalog.getstring (\"are you sure you want to clear recent files list?\");\tif (messageservice.genericalert ( monodevelop.ide.gui.stock.question, title, question, alertbutton.no, alertbutton.yes) == alertbutton.yes) {\tdesktopservice.recentfiles.clearfiles ();\t}\t} catch (exception ex) {",
  "error clearing recent files list",
  0
 ],
 [
  "static int printusage () {",
  "usage parse exe dir",
  0
 ],
 [
  "public static int main () {\tint result = vararg.addabunchofints (__arglist ( 2, 3, 4 ));\tif (result != 9) return 1;\tresult = vararg.addasecondbunchofints (16, __arglist ( 2, 3, 4 ));\tif (result != 9) return 2;\tvararg s = new vararg ();\tresult = s.instaddabunchofints (__arglist ( 2, 3, 4, 5 ));\tif (result != 14) return 3;\tresult = s.instaddasecondbunchofints (16, __arglist ( 2, 3, 4, 5, 6 ));",
  "designerview load from",
  1
 ],
 [
  "static void main(string[] args) {\tif (args.length < 2) {",
  "usage cachestress threads millis useabsolutetime",
  0
 ],
 [
  "case \"-sy\": subjectparams.providertype = convert.toint32 (args [i++]);\tbreak;\tcase \"-p12\": p12file = args [i++];\tp12pwd = args [i++];\tbreak;\tcase \"-?\": help ();\treturn 0;\tcase \"-!\": extendedhelp ();\treturn 0;\tdefault: if (i != args.length) {",
  "error unknown parameter",
  0
 ],
 [
  "static void outparmtest6 (oracleconnection con) {",
  "create stored function sf to test date parameters",
  0
 ],
 [
  "static object checkinstalled () {\ttry {\treturn new svnclient ();\t} catch (exception ex) {",
  "usage mono table to charset",
  1
 ],
 [
  "static void dosqltest (idbconnection cnc) {\tidatareader reader;\tobject odatavalue;\ttry {\tdroptable (cnc);\t}\tcatch (sqlexception e) {\t}\ttry {\tcreatetable (cnc);",
  "ok",
  0
 ],
 [
  "public void dump(byte[] bytes) {\tfor (int i = 0; i < bytes.length; i++) {",
  "byte",
  0
 ],
 [
  "assert.true(false);\t}\tcatch (xsltexception e1) {\t_output.writeline(e1.message);\treturn;\t}\tcatch (argumentnullexception e2) {\t_output.writeline(e2.message);\tif (xslinputtype == xslinputtype.uri) return;\telse {",
  "url one or more url to download",
  1
 ],
 [
  "public static void readline(bool consolein) {\tstring expectedline = $\"this is a test of console.{(consolein ? \"in.\" : \"\")}readline.\";",
  "please type the sentence without the quotes",
  0
 ],
 [
  "cmd2.executenonquery ();\t}\tcatch(oracleexception) {\t}\ttry {\tcmd2.commandtext = \"drop procedure sp_test1\";\tcmd2.executenonquery ();\t}\tcatch(oracleexception) {\t}",
  "create table mono test",
  0
 ],
 [
  "static private void help () {",
  "show the authenticode certificate for the assembly",
  0
 ],
 [
  "static void writehelp () {\tconsole.writeline ();",
  "attribute names are different expected name is but actual name is",
  1
 ],
 [
  "string err = proc.standardoutput.readtoend ();\terr += \"\\n\" + proc.standarderror.readtoend ();\tif (file.exists (pfile)) {\tif (proc.exitcode == 1) {\tstring fn = fd.name + prot + \"proxy.cs\";\tfn = path.combine (geterrorpath(), fn);\tcreatefolderforfile (fn);\tfile.move (pfile, fn);\tstreamwriter sw = new streamwriter (fn, true);\tsw.writeline ();",
  "sw writeline",
  0
 ],
 [
  "public void loadgeneric2(xslinputtype xslinputtype, readertype readertype) {\ttry {\tloadxsl_resolver(null, xslinputtype, readertype, new xmlurlresolver());\t}\tcatch (system.argumentnullexception e) {\t_output.writeline(e.tostring());\treturn;\t}",
  "passing null stylesheet should have thrown argumentnullexception",
  0
 ],
 [
  "public override object instantiate () {",
  "instantiating compound field",
  0
 ],
 [
  "foreach (protectedconfigurationprovider pc in protectedconfiguration.providers) {\tconsole.writeline (pc.name);\tif (pc is rsaprotectedconfigurationprovider) {\trsaprotectedconfigurationprovider rsa = (rsaprotectedconfigurationprovider)pc;\tconsole.writeline (\"keycontainername = {0}\", rsa.keycontainername);\tconsole.writeline (\"usemachinecontainer = {0}\", rsa.usemachinecontainer);\t}\t}\t}\tcatch (exception e) {",
  "exception raised",
  0
 ],
 [
  "static void generate_receptors () {\tforeach (string t in types){\tw (\"\\tstatic void receive_\" + t + \" (\" + t + \" a)\\n\\t{\\n\");\tw (\"\\t\\tconsole.write (\\\"        \\\");\\n\");",
  "console writeline a",
  0
 ],
 [
  "public void rtsenable_get_handshake_none() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "verifying getting rtsenable with handshake set to none",
  0
 ],
 [
  "s15 =\"\";\ts15 = s0+s1+s2+s3+s4+s5+s6+s7+s8+s9+s10+s11+s12+s13+s14;\tdump();\ti0 =0;\twhile (i0++ < i2) {\tgenerate();\tdump();\t}\tend = datetime.now;\tn2 = (end-start).totalmilliseconds;",
  "generations in milliseconds gen sec",
  0
 ],
 [
  "public async task usecallback_notsecureconnection_callbacknotcalled() {\tif (!backendsupportscustomcertificatehandling) {",
  "skipping nameof usecallback notsecureconnection callbacknotcalled",
  0
 ],
 [
  "static internal datacolumn createdatacolumnbyschemaaction(string sourcecolumn, string datasetcolumn, datatable datatable, type datatype, missingschemaaction schemaaction) {\tdebug.assert(datatable != null, \"should not call with a null datatable\");\tif (adp.isempty(datasetcolumn)) {\treturn null;\t}\tswitch (schemaaction) {\tcase missingschemaaction.add: case missingschemaaction.addwithkey: #if debug if (adapterswitches.dataschema.traceinfo) {\t}\t#endif return new datacolumn(datasetcolumn, datatype);\tcase missingschemaaction.ignore: #if debug if (adapterswitches.dataschema.tracewarning) {",
  "schema filter of datacolumn datasetcolumn",
  0
 ],
 [
  "private void closeclientsocket(socketasynceventargs e) {\tasyncusertoken token = e.usertoken as asyncusertoken;\t_log.writeline( this.gethashcode() + \" closeclientsocket(_numconnectedsockets={0}, socketerror={1})\", _numconnectedsockets, e.socketerror);\ttry {\ttoken.socket.shutdown(socketshutdown.send);\t}\tcatch (exception ex) {",
  "end externalsource",
  1
 ],
 [
  "private void renderlistviewtableheader (xhtmlmobiletextwriter writer, int fieldcount, int[] fieldindices, bool itemrequiresmorebutton){\tstring cssclass = getcustomattributevalue(xhtmlconstants.cssclasscustomattribute);\tstring labelclass = getcustomattributevalue(xhtmlconstants.csslabelclasscustomattribute);\tif (labelclass == null || labelclass.length == 0) {\tlabelclass = cssclass;\t}",
  "tr",
  0
 ],
 [
  "static bool callsecondclassoperator() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturndynamicclass();\tif ( (!(bool)(s.instancemethod() + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "using (xmlwriter w = createwriter(doc)) {\ttry {\tw.writestartelement(\"root\");\tw.writeprocessinginstruction(null, \"test\");\t}\tcatch (argumentexception) {\ttestlog.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "failed enum enum",
  1
 ],
 [
  "}\t}\telse if (a.contains(\"=\")) {\tstring[] split = a.split('=');\tif (string.isnullorempty(split[1])) {\treturn false;\t}\tswitch (split[0].tolowerinvariant()) {\tcase \"deploymentid\": deploymentid = split[1];\tbreak;",
  "source",
  1
 ],
 [
  "tw.writeline(\"<attribute3 a1='a1value' a2='a2value' a3='a3value' />\");\ttw.writeline(\"<attribute4 a1='' />\");\ttw.writeline(string.format(\"<attribute5 crlf='x{0}x' cr='x{0}x' lf='x\\nx' ms='x     x' tab='x\\tx' />\", environment.newline));\ttw.writeline(\"<skip1 /><afterskip1 />\");\ttw.writeline(\"<skip2></skip2><afterskip2 />\");\ttw.writeline(\"<chars1>0123456789</chars1>\");\ttw.flush();\ttw.writeline(\"<isdefault a1='a1value' />\");\ttw.writeline(\"<boolean3>1</boolean3>\");\ttw.writeline(\"<content><e1 a1='a1value' a2='a2value'><e2 a1='a1value' a2='a2value'><e3 a1='a1value' a2='a2value'>leave</e3></e2></e1></content>\");",
  "pgroup",
  0
 ],
 [
  "public void staticfieldisnullorempty () {",
  "empty",
  0
 ],
 [
  "private static bool callsecondinterfaceinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturninterface();\tif ((!(bool)(((dynamic)(s + 1)).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public async task getasync_allowautoredirecttrue_redirectfromhttptohttp_statuscodeok(int statuscode) {\thttpclienthandler handler = createhttpclienthandler();\thandler.allowautoredirect = true;\tusing (var client = new httpclient(handler)) {\turi uri = configuration.http.redirecturifordestinationuri( secure: false, statuscode: statuscode, destinationuri: configuration.http.remoteechoserver, hops: 1);",
  "vu assembly remove exemption entry for the specified assembly",
  1
 ],
 [
  "public static int main () {\tint result = test ();",
  "assert areequal mtp tostring true false true false",
  1
 ],
 [
  "public int loadxsl(string _strxslfile, xslinputtype xslinputtype, readertype readertype, xmlresolver xr) {\t_strxslfile = fullfilepath(_strxslfile);\txslt = new xslcompiledtransform();\txmlreadersettings xrs = null;\tswitch (xslinputtype) {",
  "nativename",
  1
 ],
 [
  "try {\tthis.unpersisted = false;\tnewstorectx.update(this);\t}\tcatch (system.systemexception e) {\ttry {\tif (namemodified) this.name = previousname;\toriginalstorectx.move(newstorectx, this);\t}\tcatch (system.systemexception deletefail) {",
  "principal save context move back failed",
  0
 ],
 [
  "public void dump () {\tif (quiet) return;\tforeach (var floc in locations.keys){",
  "error",
  1
 ],
 [
  "public static void sleeploop () {\tfor (int i = 0; i < 10; ++i) {",
  "aborting startup arguments will be handled by previous instance",
  1
 ],
 [
  "private void detach() {",
  "hello world",
  1
 ],
 [
  "public void asyncresult_multipleoutoforder() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tint numbytestowrite1 = 8, numbytestowrite2 = 16, numbytestowrite3 = 10;",
  "gendarme rules documentation index",
  1
 ],
 [
  "openscope(\"internal override void visit(irecordvisitor visitor)\");\tforeach (var member in record.members) {\tif ((member.flags & memberdefflags.recordref) == 0) continue;\twriteline($\"{member.name} = visitor.visit(this, {member.name});\");\t}\tclosescope(\"visit\");\topenscope(\"public override sealed bool equals(object obj)\");\twriteline($\"var other = obj as {record.name};\");\twriteline(\"if (other == null) return false;\");\tif ((record.flags & recorddefflags.reentrantequals) != 0) {",
  "test failed at call result",
  1
 ],
 [
  "private static bool callsecondinterfaceindexer() {\tint failcount = 0;\tverify.firstcalled = false;\tdynamic d = new firstclassreturninterface<int>();\tif ((!(((secondinterface<int>)d[1])[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public void showmethoddef (object sender, methoddefinedeventargs args) {",
  "read scalar number whole value",
  1
 ],
 [
  "public static void print(xmlmembermapping mm) {",
  "membername",
  0
 ],
 [
  "public void convertcontentdefinition(codememberfield field, textwriter writer) {",
  "generate field declaration for",
  0
 ],
 [
  "public unsafe static int main () {\tblittablestruct ss = new blittablestruct ();\tint size = marshal.sizeof (typeof (blittablestruct));",
  "setupschema partial primary key detected",
  1
 ],
 [
  "static private void help () {",
  "toolbox removecreator",
  1
 ],
 [
  "protected override void initialize() {\tif (removeme != null) {\tnodes.remove(removeme);\tremoveme = null;\t}",
  "initialize directorynode",
  0
 ],
 [
  "public void performsearchindexcreation () {\tfiresearchindexcreationevent (true);\ttry {\troottree.makesearchindex ();\t} catch (exception e) {",
  "the solution can be compiled",
  1
 ],
 [
  "public dummy storestaticfield (label pc, field field, source value, textwriter data) {",
  "authzset dispose disposing",
  1
 ],
 [
  "public static flowcontrolcapabilities measureflowcontrolcapabilities(string portname) {\tfor (int probebase = 1; probebase <= 65536; probebase *= 2) {\tint probelength;\tprobelength = probebase + 1;\tint buffersize = measuretransmitbuffersize(portname, probelength);\tif (buffersize < probelength) {",
  "exception caught",
  1
 ],
 [
  "public static int operator / (blah i, blah j) {",
  "overloaded binary operator",
  0
 ],
 [
  "private void reflectgetcustomattributes(type classtoreflect, type metadatatype) {\tattributecollection baseattributes = null;\thashtable           attrhash = new hashtable();\t#if debug if (compdescrswitch.traceverbose) {",
  "schema error on datacolumn datasetcolumn",
  1
 ],
 [
  "thread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();\t} finally {\t}\ttry {\tthread.sleep(500);\t} catch(threadabortexception) {\tthread.resetabort();\t} finally {",
  "threadabortexception finally",
  0
 ],
 [
  "public static int main (string[] args) {\tint c = 0;\ttry {\tthrow new exception(\"test exception\");\t}\tcatch (exception e) {",
  "npgsqldatareader executereader",
  1
 ],
 [
  "try {\tw.writestartelement(\"root\");\tw.writestring(\"\\ud812\");\tw.writeendelement();\t}\tcatch (argumentexception e) {\tutils.checkerrorstate(w.writestate);\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "w.writestartelement(\"root\");\tw.writedoctype(\"doc1\", null, null, \"test1\");\tw.writeendelement();\t}\tcatch (invalidoperationexception e) {\tcerror.writelineignore(e.tostring());\tcerror.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "serverwriteiv",
  1
 ],
 [
  "bool ignore = ignorelist.contains (re.url);\tservicedata sd = findservice (re.url);\tif (ignore) {\tif (sd != null) {\tremoveservice (re.url);\t}\tcontinue;\t}\tif (sd == null) {\tsd = createservicedata (re);",
  "edge count",
  1
 ],
 [
  "static byte [] notmodifiedsincehandler (socket socket) {\tstringwriter sw = new stringwriter ();",
  "connection close",
  0
 ],
 [
  "} }, { \"z=\", \"create zoneinfodb from {dir}.\", v => {\tc = () => new zoneinfodb (v);\t} }, { \"offset=\", \"show timezone info offset for datetime {offset}.\", v => {\toffset = datetime.parse (v);\t} }, { \"r|dump-rules\", \"show timezone info offset for datetime {offset}.\", v => dump_rules = v != null }, { \"help\", \"show this message and exit\", v => {\tp.writeoptiondescriptions (console.out);\tenvironment.exit (0);\t} }, };\tp.parse (args);\tandroidtimezones.db = c ();",
  "db type",
  0
 ],
 [
  "static int help () {",
  "decrypted record data",
  1
 ],
 [
  "if (str != $\"retr {filename}\") {\twhere = $\"retr - got: {str}, expected: retr {filename}\";\tclient.close ();\treturn;\t}\twriter.flush ();\tsocket data_cnc = data.accept ();\tbyte [] dontcare = new byte [1];\tdata_cnc.receive (dontcare, 1, socketflags.none);\tdata_cnc.close ();",
  "resourcetoolkit icsharpcodecorenrefactoryresourceresolver found key",
  1
 ],
 [
  "\"usage: git [--version] ... <command> [<args>]\", \"\", \"common options:\", { \"version\", \"show version info\", v => showversion = v != null }, { \"help\", \"show this message and exit\", v => showhelp = v != null }, \"\", \"these are common git commands used in various situations:\", \"\", \"start a working area (see also: git help tutorial)\", new command (\"clone\", \"clone a repository into a new directory\"), new command (\"init\",  \"create an empty git repository or reinitialize an existing one\"), new command (\"thisisaverylongcommandnameinordertoinducewrapping\", \"create an empty git repository or reinitialize an existing one. let's make this really long to cause a line wrap, shall we?\"), };\tvar expectedhelp = new stringwriter ();\texpectedhelp.writeline (\"\");\texpectedhelp.writeline (\"\");\texpectedhelp.writeline (\"\");\tassert.areequal (0, git.run (new [] { \"help\" }));\tassert.areequal (expectedhelp.tostring (), o.tostring ());\tvar expectedhelphelp    = new stringwriter ();\texpectedhelphelp.writeline ();\texpectedhelphelp.writeline ();",
  "existing one let s make this really long to",
  0
 ],
 [
  "public void preservesbody() {\ttest<removecatchexceptioncoderefactoringprovider>(@\" class testclass {\tpublic void f() {\ttry {\t} $catch (system.exception e) {",
  "hi",
  0
 ],
 [
  "public static void createlinenumbertestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<?xml version=\\\"1.0\\\" ?>\");",
  "invoke",
  1
 ],
 [
  "public void getparam16() {\tm_xsltarg = new xsltargumentlist();\tint i = 0;\tm_xsltarg.addparam(\"myarg1\", szempty, \"test16\");\tfor (i = 0; i < 200; i++) {\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);\tif (retobj.tostring() != \"test16\") {",
  "failed after retrieving times",
  0
 ],
 [
  "private void dodomaininit() {\tdebug.assert(_contexttype == contexttype.domain);\tif (_container == null) {",
  "verifying minvalue readtimeout",
  1
 ],
 [
  "try {\tconfiguration config = configurationmanager.openexeconfiguration (configurationuserlevel.none);\tappsettingssection sect = (appsettingssection)config.getsection(\"appsettings\");\tforeach (string key in sect.settings.allkeys) {\tkeyvalueconfigurationelement e = sect.settings[key];\tconsole.writeline (\"{0} = {1}\", e.key, e.value);\t}\tconsole.writeline (\"lockelements = '{0}'\", sect.lockelements.attributelist);\t}\tcatch (exception e) {",
  "another default named column added",
  1
 ],
 [
  "public static void main() {\tm = new mutex[10];\tfor (int i = 0 ; i<10 ; i++ ) m[i] = new mutex();",
  "no contracts found",
  1
 ],
 [
  "public void indent () {\ttrace.indentlevel = 0;\ttrace.indentsize = 4;\tstring value = \"list of errors:\" + environment.newline + \"    error 1: file not found\" + environment.newline + \"    error 2: directory not found\" + environment.newline + \"end of list of errors\" + environment.newline;\ttrace.indent ();\tassert.areequal (1, trace.indentlevel);",
  "error file not found",
  0
 ],
 [
  "int failcount = 0;\tc origin = new c(1);\tdynamic d = origin;\tint count = 0;\tdo {\tif (count == 0) {\tcount++;\t}\telse {\tfailcount++;",
  "target",
  1
 ],
 [
  "return;\t}\tprocessasyncoperation asyncop = context.executionhandler.execute (executioncommand, console);\tvar stopper = monitor.cancellationtoken.register (asyncop.cancel);\tawait asyncop.task;\tstopper.dispose ();\t} finally {\tconsole.dispose ();\t}\t} catch (exception ex) {",
  "using internal lowlevellinq",
  1
 ],
 [
  "type t = typeof (myunicode);\tif ((t.attributes & typeattributes.stringformatmask) != typeattributes.unicodeclass){\terrors += 1;\t}\tt = typeof (myauto);\tif ((t.attributes & typeattributes.stringformatmask) != typeattributes.autoclass){\terrors += 2;\t}\tt = typeof (myansi);\tif ((t.attributes & typeattributes.stringformatmask) != typeattributes.ansiclass){",
  "eventsourcetest got command",
  1
 ],
 [
  "rand.nextbytes(data);\tmemorystream ms = new memorystream(data, false);\tcmd.commandtext = \"insert into #blobs (id, blob) values (1, @blob)\";\tcmd.parameters.add(\"@blob\", sqldbtype.varbinary, datasize);\tcmd.parameters[\"@blob\"].direction = parameterdirection.input;\tcmd.parameters[\"@blob\"].value = ms;\ttask t = cmd.executenonqueryasync(cts.token);\tif (!t.iscompleted) cts.cancel();\ttry {\tt.wait();",
  "employee id",
  1
 ],
 [
  "static void help (string details) {\tswitch (details) {",
  "verifying true rtsenable before open",
  1
 ],
 [
  "public ienumerable<string> getallpkgconfigfiles () {\tvar packagenames = new hashset<string> ();\tforeach (string pcdir in pkgconfigdirs) {\tienumerable<string> files;\tif (!directory.exists (pcdir)) continue;\ttry {\tfiles = directory.enumeratefiles (pcdir, \"*.pc\");\t} catch (exception ex) {",
  "runtime error in pc file scan of directory",
  0
 ],
 [
  "outputtype(e.privateimplementationtype);\toutput.write('.');\toutputidentifier(methodname);\t}\toutput.writeline();\tif (!iscurrentinterface && (e.attributes & memberattributes.scopemask) != memberattributes.abstract) {\tindent++;\tgeneratevbstatements(e.statements);\tindent--;\tif (sub) {",
  "end sub",
  0
 ],
 [
  "if (p == -1) {\treturn 1;\t}\tprofile = profile.substring(p+1);\tvar root_mono = path.getfullpath(path.combine(path.getdirectoryname(cmd), \"..\\\\..\\\\..\"));\tif (!file.exists(path.combine(root_mono, \"mono\\\\mini\\\\mini.c\"))) {\treturn 1;\t}\tp = profile.lastindexof ('-');\tif (p == -1){",
  "from p in db othertypes orderby p datetime select p blob",
  1
 ],
 [
  "public override bool execute () {\tif (sourcefiles.length == 0) return true;\ttry {\tlist <itaskitem> temporarycopiedfiles = new list <itaskitem> ();\tif (sourcefiles != null && destinationfiles != null && sourcefiles.length != destinationfiles.length) {",
  "number of source files is different than number of destination files",
  0
 ],
 [
  "private void doapplicationdirectoryinit() {\tdebug.assert(_contexttype == contexttype.applicationdirectory);\tif (_container == null) {\tdoldapdirectoryinitnocontainer();\t}\telse {",
  "verifying read method with sub strings of the new line appearing in the string being read",
  1
 ],
 [
  "private void checkdisposed() {\tif (_disposed) {",
  "test failed at call result",
  1
 ],
 [
  "if (cref == null) return \"\";\tif (cref.length < 2) return cref;\ttry {\tvar entity = new icsharpcode.nrefactory.documentation.documentationcomment (\"\", ctx).resolvecref (cref.replace(\"<\", \"{\").replace(\">\", \"}\"));\tif (entity != null) {\tvar ambience = new icsharpcode.nrefactory.csharp.csharpambience ();\tambience.conversionflags = icsharpcode.nrefactory.typesystem.conversionflags.showparameterlist | icsharpcode.nrefactory.typesystem.conversionflags.showparameternames | icsharpcode.nrefactory.typesystem.conversionflags.showtypeparameterlist;\treturn ambience.convertsymbol (entity);\t}\t} catch (exception e) {",
  "accepted incomplete element",
  1
 ],
 [
  "public static void deletecertmonitor(certificateoperations certops, itestoutputhelper testoutputhelper, string thumbalgo, string thumb) {\tbool found;\tdo {\tfound = false;\tforeach (certificate curcert in certops.listcertificates()) {\tif (thumbalgo.equals(curcert.thumbprintalgorithm, stringcomparison.invariantcultureignorecase) && thumb.equals(curcert.thumbprint, stringcomparison.invariantcultureignorecase)) {",
  "o input output txt convert the input file to a csv file using decimal",
  1
 ],
 [
  "public static void main (string[] args) {\tcompositepoker poker;\tpoker = new compositepoker ();\tconsole.writeline (\"--------\");\ttry { poker.databind(); } catch (exception e) { console.writeline (e);}\tpoker = new compositepoker ();\tconsole.writeline (\"--------\");\ttry { poker.databind(); } catch (exception e) { console.writeline (e);}\tpoker = new compositepoker ();",
  "controls",
  0
 ],
 [
  "public toolboxitemcollection gettoolboxitems(string category, idesignerhost host) {",
  "toolboxservice gettoolboxitems category host",
  0
 ],
 [
  "static compilererror getresourceid (filepath outputfile, executionenvironment env, projectfile finfo, ref string fname, string resgen, out string resourceid, progressmonitor monitor) {\tresourceid = finfo.resourceid;\tif (resourceid == null) {",
  "error unable to build resourceid for",
  0
 ],
 [
  "if (solution == null) {\treturn 1;\t}\tif (project != null) {\tsolutionitem item = solution.findprojectbyname (project);\tif (item == null) {\treturn 1;\t}\ttranslationproject tp = item as translationproject;\tif (tp == null) {",
  "error while indenting",
  1
 ],
 [
  "s6.f5 = 5;\ts6.f6 = 6;\ts6 = mono_return_short6(s6, 90);\tif (s6.f1 != 1+90) {\treturn 1;\t}\tif (s6.f2 != 2+90) {\treturn 2;\t}\tif (s6.f3 != 3+90) {",
  "ok",
  1
 ],
 [
  "public async task<int> run (string[] arguments) {\tif (arguments.length == 0 || arguments [0] == \"--help\") {\tconsole.writeline (\"\");\tconsole.writeline (\"\");",
  "id",
  1
 ],
 [
  "public idisposable subscribe(iobserver<searchedfile> observer) {\tvar task = task.factory.startnew( delegate {\tvar list = filelist.tolist();\tthrowifcancellationrequested();\tsearchparallel(list, observer);\t}, taskcreationoptions.longrunning);\ttask.continuewith( t => {",
  "parallel findall finished with error successfully",
  0
 ],
 [
  "private static bool test1() {\tdynamic a = 10;\tint b = -a;\tif (b == -10) return true;",
  "failed int",
  0
 ],
 [
  "public void getparam12() {\tm_xsltarg = new xsltargumentlist();\tstring obj = \"0.00\";\tm_xsltarg.addparam(\"myarg1\", szempty, obj);\tretobj = m_xsltarg.getparam(\"myarg1\", szempty);\tif (retobj.tostring() != \"0.00\") {",
  "saving memento of to key",
  1
 ],
 [
  "xpathdocument xd = new xpathdocument(xrdata, xmlspace.preserve);\txrdata.dispose();\txslcompiledtransform xslt = new xslcompiledtransform();\txmlreadersettings xrs = new xmlreadersettings();\t#pragma warning disable 0618 xrs.prohibitdtd = false;\t#pragma warning restore 0618 xmlreader xrtemp = xmlreader.create(_strxslfile);\txslt.load(xrtemp);\tstringwriter sw = new stringwriter();\tfor (int i = 1; i <= 100; i++) {\txslt.transform(xd, xsltarg1, sw);",
  "sharedargumentlist thread iteration done with transform",
  0
 ],
 [
  "static void testcomp() {\tigraph<string, int, int> g = new hashgraph<string, int, int>(new countweight<int>(), forest(2, 2));\tforeach (keyvaluepair<string, igraph<string, int, int>> comp in g.components()) {",
  "statisticalcallchainstart",
  1
 ],
 [
  "public void removeextobj2() {\tmyobject obj = new myobject(2, _output);\tm_xsltarg = new xsltargumentlist();\ttry {\tm_xsltarg.removeextensionobject(null);\t}\tcatch (system.argumentnullexception) {\treturn;\t}",
  "match compare to pls investigate why this resource id is being thrown in differet exceptions",
  1
 ],
 [
  "private static int main(string[] args) {\tfor (int i = 0; i < num_iterations; i++) {",
  "next iter",
  0
 ],
 [
  "public static async task launchbrowser (string appurl, string launchurl, task processtask) {\tlaunchurl = launchurl ?? \"\";\turi launchuri;\tif (!uri.trycreate (launchurl, urikind.absolute, out launchuri)) {\turi appuri;\tif (!uri.trycreate (appurl, urikind.absolute, out appuri)) {\treturn;\t}\tif (!uri.trycreate (launchurl, urikind.relative, out launchuri)) {",
  "priority",
  1
 ],
 [
  "const string jobmanagercommandline = \"ping 127.0.0.1 -n 500\";\tilist<metadataitem> metadata = new list<metadataitem> { new metadataitem(\"key1\", \"test1\"), new metadataitem(\"key2\", \"test2\") };\tcloudjobschedule jobschedule = batchcli.jobscheduleoperations.createjobschedule(jobscheduleid, null, null);\ttimespan firstrecurrenceinterval = timespan.fromminutes(2);\tjobschedule.schedule = new schedule() { recurrenceinterval = firstrecurrenceinterval };\tpoolinformation poolinfo = new poolinformation() {\tpoolid = this.poolfixture.poolid };\tjobschedule.jobspecification = new jobspecification(poolinfo) {\tpriority = jobschedulepriority, jobmanagertask = new jobmanagertask(jobmanagerid, jobmanagercommandline) };\tjobschedule.metadata = metadata;",
  "initial job schedule commit",
  0
 ],
 [
  "methoddesc method = methodcodenodeneedingcode.method;\tif (logger.isverbose) {\tstring methodname = method.tostring();\t}\ttry {\t_corinfo.compilemethod(methodcodenodeneedingcode);\t}\tcatch (typesystemexception ex) {\tmethodil throwingil = typesystemthrowingilemitter.emitil(method, ex);\t_corinfo.compilemethod(methodcodenodeneedingcode, throwingil);",
  "return",
  1
 ],
 [
  "process.start();\ttask copyoutput = process.standardoutput.basestream.copytoasync(outputstream);\ttask copyerror = process.standarderror.basestream.copytoasync(errorstream);\tbool completed = process.waitforexit(timeout);\tcopyoutput.wait(timeout);\tcopyerror.wait(timeout);\tif (completed) {\texitcode = process.exitcode;\t}\telse {",
  "cmdline timed out",
  0
 ],
 [
  "public void var12() {\ttry {\t#pragma warning disable 0618 new xsltransform().transform((ixpathnavigable)null, (xsltargumentlist)null, (stream)null, (xmlresolver)null);\t#pragma warning restore 0618 }\tcatch (argumentnullexception) {\treturn;\t}\tcatch (exception e) {\t_output.writeline(e.tostring());",
  "did not throw argumentnullexception",
  0
 ],
 [
  "static private void help () {",
  "struct setting field",
  1
 ],
 [
  "private static opcodebitmask comparisonsbitmask () {\topcodebitmask mask = new opcodebitmask ();\tmask.set (code.cgt);\tmask.set (code.ceq);\tmask.set (code.clt);\tmask.set (code.ble);\tmask.set (code.ble_s);\tmask.set (code.bge);\tmask.set (code.bge_s);",
  "loaded assy",
  1
 ],
 [
  "} while (reader.readtofollowing (\"file\"));\t} else if (directory.exists (dir)) {\tforeach (var f in directory.enumeratefiles (dir, \"*.dll\")) {\ttry {\tvar an = systemassemblyservice.getassemblynameobj (dir.combine (f));\tvar ainfo = new assemblyinfo ();\tainfo.update (an);\tassemblies.add (ainfo);\t} catch (badimageformatexception ex) {\t} catch (exception ex) {",
  "warning no namespaces found",
  1
 ],
 [
  "public override void garbagecollectionmarkstart (uint collection, uint generation, ulong counter) {",
  "scheme",
  1
 ],
 [
  "static void displaycrl (x509crl crl, bool machine, bool verbose) {\tif (verbose) {",
  "signature algorithm",
  0
 ],
 [
  "private void emitreadprimitivecollection(string typename) {\tstring collectiontypename = $\"{typename}collection\";\topenscope($\"public static unsafe uint read(this nativereader reader, uint offset, out {collectiontypename} values)\");\twriteline($\"values = new {collectiontypename}(reader, offset);\");\twriteline(\"offset = reader.decodeunsigned(offset, out count);\");\twriteline($\"offset = checked(offset + count * sizeof({typename}));\");",
  "return offset",
  0
 ],
 [
  "static void showinfo() {\tconsole.writeline(\"               <key>=<value>\\n\");\tconsole.writeline(\"                     <value> = \\\"<stringvalue>\\\"\");\tconsole.writeline(\"                     <value> = <filename>\\n\");",
  "the file can be a bitmap icon cursor or serialized object otherwise",
  0
 ],
 [
  "public void bug601305(xmlwriterutils utils) {",
  "expected",
  0
 ],
 [
  "tempfilename = pofile + filecounter.tostring();\t} while (file.exists(tempfilename));\tsw = new streamwriter(tempfilename,false,encoding);\t}\tcatch (exception ex) {\treturn false;\t}\tusing (sw) {\tsw.newline = originalnewline;\tif (!string.isnullorempty (comment)) catalog.savemultilines (sw, comment);",
  "mono jscript compiler copyright c cesar lopez nataren copyright c novell inc http option",
  1
 ],
 [
  "public int testresolveentitynodetype_endentity() {\tif (isxsltreader() || isxmltextreader() || isxmlnodereaderdatadoc() || iscorereader() || isxpathnavigatorreader()) return test_skipped;\treloadsource();\tif (findnodetype(xmlnodetype.endentity) == test_pass) {\ttry {\tcerror.writeline(datareader.nodetype);\tdatareader.resolveentity();",
  "resolveentity succeeded",
  0
 ],
 [
  "public virtual void showexception(exception ex, string message) {\tloggingservice.error(message, ex);",
  "principalcontext doldapdirectoryinit servername is",
  1
 ],
 [
  "public void emit(opcode opcode, label lblval) {\tdebug.assert(!opcode.equals(opcodes.br) && !opcode.equals(opcodes.br_s), \"use emitunconditionalbranch and be careful not to emit unverifiable code.\");",
  "abc system console writeline a",
  1
 ],
 [
  "public void canceltestrun () {\tif (isrunningtests) {\ttry {\tcommunicationmanager.sendmessage (messagetype.canceltestrun);\t} catch (exception ex) {",
  "canceltestrun error",
  0
 ],
 [
  "public static void main () {\tvar all = cultureinfo.getcultures (culturetypes.specificcultures | culturetypes.neutralcultures).orderby (l => l.lcid);\tconsole.outputencoding = encoding.utf8;\tvar writer = console.out;\tforeach (var c in all) {\tif (c.lcid == cultureinfo.invariantculture.lcid) continue;",
  "regex match timeout occurred",
  1
 ],
 [
  "while (true) {\tiobjectnode parentobjnode;\tparentobjnode = objectnode.parentobjectnode;\tif (parentobjnode == null) break;\tif (parentobjnode.objectinfo.objmemberinfo == null) break;\tif (!(parentobjnode.objectinfo.objmemberinfo is propertyinfo)) break;\tpropertyinfo propinfo = (propertyinfo)parentobjnode.objectinfo.objmemberinfo;\ttry {\tpropinfo.setvalue(parentobjnode.parentobjectnode.obj, parentobjnode.obj, parentobjnode.currentpropindexvalues);\t} catch (exception ex) {",
  "resolved to",
  1
 ],
 [
  "string keyversion = inputvalidator.getkeyversion();\tif (keyversion != string.empty) {\tvar vaultaddress = inputvalidator.getvaultaddress();\tstring keyname = inputvalidator.getkeyname(true);\twrappedkey = task.run(() => keyvaultclient.wrapkeyasync(vaultaddress, keyname, keyversion, algorithm, symmetrickey)).configureawait(false).getawaiter().getresult();\t}\telse {\tvar keyid = (key != null) ? key.key.kid : inputvalidator.getkeyid();\twrappedkey = task.run(() => keyvaultclient.wrapkeyasync(keyid, algorithm, symmetrickey)).configureawait(false).getawaiter().getresult();\t}",
  "verifying read method throws exception with a failed call to open",
  1
 ],
 [
  "try {\tusing (sqldatareader rdr = cmd.executereader()) {\tverifycolumnboundaries(rdr, getfields(tvpperm), objvalues, dtvalues);\t}\t}\tcatch (sqlexception se) {\t}\tcatch (invalidoperationexception ioe) {\t}\tcatch (argumentexception ae) {",
  "more info available at",
  1
 ],
 [
  "outputline (@\"       \\open to open the connection\");\toutputline (@\"       \\close to close the connection\");\toutputline (@\"       \\e to execute sql query (select)\");\toutputline (@\"       \\h to show help (all commands).\");\toutputline (@\"       \\defaults to show default variables.\");\toutputline (\"\");\t}\tpublic void showhelp () {\tconsole.writeline (\"\");\tif (!waitforenterkey ()) return;",
  "ok",
  1
 ],
 [
  "public bool success3 () {\tbool ret = false;\tobject o = new object ();\tlock (o) {\tobject o2 = new object ();\tlock (locker) {\tx++;\t}\tlock (locker) {\tret = true;",
  "i i category category counter name instance instance value value",
  1
 ],
 [
  "}\tfloat3 s3;\ts3.f1 = 1;\ts3.f2 = 2;\ts3.f3 = 3;\ts3 = mono_return_float3(s3, 906);\tif (s3.f1 != 1+906) {\treturn 1;\t}\tif (s3.f2 != 2+906) {",
  "determined existing localization model using that",
  1
 ],
 [
  "try {\tw.writestartelement(\"root\");\tw.writeendelement();\tw.writeendelement();\t}\tcatch (invalidoperationexception e) {\tcerror.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "public static void main() {",
  "nodeinserted",
  0
 ],
 [
  "stream responsestream = httpwebresponse.getresponsestream ();\tstreamreader responsestreamreader = new streamreader (responsestream);\tstring response = responsestreamreader.readline ();\tresponsestreamreader.close ();\tresponsestream.close ();\thttpwebresponse.close ();\t}\tcatch (webexception e) {\t}\tcatch (exception e) {",
  "was",
  1
 ],
 [
  "}\tfragment = new byte[fragmentlength];\tbuffer.blockcopy(recorddata, position, fragment, 0, fragmentlength);\tif ((this.context.write != null) && (this.context.write.cipher != null)) {\tfragment = this.encryptrecordfragment (contenttype, fragment);\t}\trecord.write((byte)contenttype);\trecord.write(this.context.protocol);\trecord.write((short)fragment.length);\trecord.write(fragment);",
  "get i",
  1
 ],
 [
  "public dummy branchfalse (label pc, label target, source cond, textwriter data) {",
  "br false",
  0
 ],
 [
  "static void rollbacktest (oracleconnection connection) {\toracletransaction transaction = connection.begintransaction ();\toraclecommand insert = connection.createcommand ();\tinsert.transaction = transaction;\tinsert.commandtext = \"insert into scott.emp (empno, ename, job) values (8787, 't coleman', 'monoist')\";",
  "inserting record",
  0
 ],
 [
  "if (parms.length < 2) {\treturn;\t}\tstring parm = parms[1];\tstringbuilder ps = new stringbuilder ();\tfor (int i = 2; i < parms.length; i++) ps.append (parms[i]);\tinternalvariables[parm] = ps.tostring ();\t}\tpublic void unsetinternalvariable(string[] parms) {\tif (parms.length != 2) {",
  "error wrong number of parameters",
  0
 ],
 [
  "public ienumerator<t> getenumerator() {",
  "ok",
  1
 ],
 [
  "static traceutil() {\ttry {\ttextwritertracelistener mywriter = new textwritertracelistener(system.console.out);\ttrace.listeners.add(mywriter);\t} catch (exception ex) {",
  "hello world",
  1
 ],
 [
  "static void generatefile (string outputfile, list<tuple<string, string>> txtstrings, cmdoptions options) {\tusing (var str = new streamwriter (outputfile)) {",
  "str writeline str writeline",
  0
 ],
 [
  "public void print (string html) {\t#if !macos if (html == null) {",
  "empty print",
  0
 ],
 [
  "render (res, node, url);\tcurrenttab.history.appendhistory (new linkpagevisit (this, url));\treturn;\t}\t} catch (exception e){\tconsole.writeline(\"#########\");\tconsole.writeline(\"#########\");\tconsole.writeline(e);\t}\tconsole.error.writeline (\"+----------------------------------------------+\");",
  "infomessage code",
  1
 ],
 [
  "public static datacolumn getdatacolumnbyschemaaction(string sourcecolumn, string datasetcolumn, datatable datatable, type datatype, missingschemaaction schemaaction) {\tif (null == datatable) {\tthrow adp.argumentnull(nameof(datatable));\t}\tif (string.isnullorempty(datasetcolumn)) {\t#if debug if (adapterswitches.dataschema.tracewarning) {",
  "failed enum",
  1
 ],
 [
  "private async task connecttohostasync(tcpclient tcp) {\tstring hostname = null;\tif (_options.remoteendpoint is dnsendpoint) {\tvar dns = (dnsendpoint)_options.remoteendpoint;\thostname = dns.host;",
  "client connecting to",
  0
 ],
 [
  "private static bool uninstallspecific (string name, string package, string gacdir, string libdir) {\tstring failure_msg = \"failure to remove assembly from the cache: \";\tif (!file.exists (name)) {\treturn false;\t}\tassemblyname an = null;\ttry {\tan = assemblyname.getassemblyname (name);\t} catch {",
  "set sql",
  1
 ],
 [
  "static void showhelp (optionset p) {",
  "format",
  1
 ],
 [
  "private static bool comparemessages(resourcemanager rm, string id, string actualerror, params string[] args) {\tif (null == rm) return false;\tif (string.isnullorempty(id) || string.isnullorempty(actualerror)) {",
  "empty error id or actual message",
  0
 ],
 [
  "}\tif (dotpos < 0) return null;\ttypedefinition type = findtype(module, key.substring(2, dotpos - 2));\tif (type == null) return null;\tstring shortname;\tif (parenpos > 0) {\tshortname = key.substring(dotpos + 1, parenpos - (dotpos + 1));\t} else {\tshortname = key.substring(dotpos + 1);\t}",
  "null mapped application config path",
  1
 ],
 [
  "public void testanonymousmethodsubscription_validcase() {\tanalyze<staticeventsubscriptionanalyzer>(@\" using system;\tclass foo {\tpublic static event eventhandler foobar;\tpublic static void test () {\tfoobar += delegate {",
  "hello",
  0
 ],
 [
  "thread thr=new thread(new threadstart(new test().thread_func));\tthr.start();\tthread.sleep(1000);\tif(monitor.tryenter(thr, 1000)==true) {\tmonitor.exit(thr);\t} else {\t}\tthread.sleep(20000);\tlock(thr) {\tmonitor.pulse(thr);",
  "signalled thread",
  0
 ],
 [
  "public static monodevelopoptions parse (string[] args) {\tvar opt = new monodevelopoptions ();\tvar optset = opt.getoptionset ();\ttry {\topt.remainingargs = optset.parse (args);\t} catch (mono.options.optionexception ex) {\topt.error = ex.tostring ();\t}\tif (opt.error != null) {",
  "error",
  0
 ],
 [
  "public void pi_7(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartelement(\"root\");\tw.writeprocessinginstruction(\"xml\", \"text\");\tw.writeendelement();\tw.dispose();\t}\tcatch (argumentexception e) {",
  "principalcollection add adding to insertedvaluescompleted",
  1
 ],
 [
  "public grainplacementtests(itestoutputhelper output) {\tthis.output = output;",
  "type is",
  1
 ],
 [
  "public static void main(string[] args) {\tilist<char> lst = new linkedlist<char>();\tlst.addall<char>(new char[] { 'a', 'b', 'c', 'd' });\tilist<char> a = lst.view(0, 2), b = lst.view(2, 0), c = lst.view(2, 1), d = lst.view(3, 1), e = lst.view(4, 0), f = lst.view(1, 2), g = lst.view(0, 4);\tilist<char>[] views = { a, b, c, d, e, f, g };\tforeach (ilist<char> u in views) {\tforeach (ilist<char> w in views) console.write(overlap(u, w) ? '+' : '-');\tconsole.writeline();\t}",
  "testing sizeparamindex",
  1
 ],
 [
  "public void transformstrstr2(xslinputtype xslinputtype, readertype readertype) {\tif (loadxsl(\"showparam.xsl\", xslinputtype, readertype) == 1) {\ttry {\txslt.transform(null, _stroutfile);\t}\tcatch (system.argumentexception) { return; }\t}",
  "unsafe bad at",
  1
 ],
 [
  "public void loadfrom_invalid_assembly () {\tstring tempfile = path.combine (tempfolder, path.getrandomfilename ());\tusing (streamwriter sw = file.createtext (tempfile)) {",
  "press enter to continue",
  1
 ],
 [
  "private static bool test3() {\tshort a = 2;\tdynamic b = a;\t--b;\tif (b == 1) return true;",
  "failed short",
  0
 ],
 [
  "private static bool callsecondclassoperator() {\tint failcount = 0;\tdynamic d = new firstclassreturnclass();\tverify.firstcalled = false;\tif ((!(((secondclass)d.instanceproperty) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "completed",
  1
 ],
 [
  "public static void displaypools(itestoutputhelper testoutputhelper, ienumerable<cloudpool> poolsenumerable) {\tlist<cloudpool> pools = new list<cloudpool>(poolsenumerable);\tint numpools = (null != pools) ? pools.count : 0;\ttestoutputhelper.writeline(\"\");\ttestoutputhelper.writeline(\"\");\tforeach (cloudpool curpool in pools) {\ttestoutputhelper.writeline(curpool.id + \":\");\tif (curpool.statistics != null) {\t}\telse {",
  "canceltestrun error",
  1
 ],
 [
  "if (_querymembersresults != null) {\t_querymembersresults.dispose();\t}\tif (_currentmemberssearcher != null) {\t_currentmemberssearcher.dispose();\t}\tif (_membersearchresults != null) {\t_membersearchresults.dispose();\t}\tif (_membersearchersqueue != null) {",
  "addnlinkedattrset dispose disposing membersearchersqueue",
  0
 ],
 [
  "static int main () {\ttest t1 = new test ();\tobjref myref = remotingservices.marshal (t1, \"/test\");\tstring url = \"simple: string uri;\tsimplechannel chnl = new simplechannel (8000);\tchannelservices.registerchannel (chnl);",
  "uri",
  0
 ],
 [
  "if (string.isnullorempty (name)) continue;\tif (name == \"item\") name = subelement.attribute (\"item\").value;\tif (!val.containskey (name)) {\tvar converted = convert (subelement);\tif (converted != null) val.add (name, converted);\t} else {\t}\t}\treturn val;\tcase \"number\": return new pnumber (int.parse (f.value));",
  "verifying endread with null asyncresult",
  1
 ],
 [
  "public override void writeto(itextoutput output) {\toutput.write(\"if (\");\tcondition.writeto(output);\toutput.writeline(\") {\");\toutput.indent();\ttrueblock.writeto(output);\toutput.unindent();\toutput.write(\"}\");\tif (falseblock != null) {",
  "else",
  0
 ],
 [
  "syntax.defineoption(\"ildump\", ref _ildump, \"dump il assembly listing for compiler-generated il\");\tsyntax.defineoption(\"stacktracedata\", ref _emitstacktracedata, \"emit data to support generating stack trace strings at runtime\");\tsyntax.defineoption(\"targetarch\", ref _targetarchitecturestr, \"target architecture for cross compilation\");\tsyntax.defineoption(\"targetos\", ref _targetosstr, \"target os for cross compilation\");\tsyntax.defineoption(\"singlemethodtypename\", ref _singlemethodtypename, \"single method compilation: name of the owning type\");\tsyntax.defineoption(\"singlemethodname\", ref _singlemethodname, \"single method compilation: name of the method\");\tsyntax.defineoptionlist(\"singlemethodgenericarg\", ref _singlemethodgenericargs, \"single method compilation: generic arguments to the method\");\tsyntax.defineparameterlist(\"in\", ref inputfiles, \"input file(s) to compile\");\t});\tif (waitfordebugger) {",
  "serverversion",
  1
 ],
 [
  "private static bool shorttypewithnumbericconversionfromsbyteinassignment() {\tint failcount = 0;\tsbyte origin = sbyte.minvalue;\tdynamic d = origin;\tshort result = d;\tif (result != origin) {\tfailcount++;",
  "new row",
  1
 ],
 [
  "static bool callsecondclassoperator() {\tint failcount = 0; verify.firstcalled = false;\tif ( (!(bool)(firstclassreturndynamicclass.staticmethod() + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "u username username",
  1
 ],
 [
  "if (s8.f5 != 5+90) {\treturn 5;\t}\tif (s8.f6 != 6+90) {\treturn 6;\t}\tif (s8.f7 != 7+90) {\treturn 7;\t}\tif (s8.f8 != 8+90) {",
  "unresolved variable error",
  1
 ],
 [
  "static void printnode (astnode node) {",
  "disposing handle",
  1
 ],
 [
  "exiter.client.exitprocess (0);\tenvironment.exit (0);\t}\tstring assemblyname = \"system.servicemodel_test_net_3_0.dll\";\tassembly assem;\ttry {\tsystem.io.fileinfo fi = new fileinfo (assembly.getentryassembly ().location);\tassem = assembly.loadfrom (path.combine (fi.directory.fullname, assemblyname));\t}\tcatch (exception e) {",
  "assert areequal mtp insertat",
  1
 ],
 [
  "m_xsltarg.addparam(\"myarg2\", szempty, (uint64)i);\tm_xsltarg.removeparam(\"myarg2\", szempty);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (retobj != null) {\tassert.true(false);\t}\tm_xsltarg.addparam(\"myarg2\", szempty, (single)i);\tm_xsltarg.removeparam(\"myarg2\", szempty);\tretobj = m_xsltarg.getparam(\"myarg2\", szempty);\tif (retobj != null) {",
  "failed to remove",
  0
 ],
 [
  "protected void checkdisposedordeleted() {\tif (_disposed) {",
  "principal checkdisposedordeleted accessing disposed object",
  0
 ],
 [
  "public static void main (string[] args) {",
  "hello world",
  0
 ],
 [
  "public void typoextrasemicolumn (int x) {\tif (x == 1);",
  "of course",
  0
 ],
 [
  "public void save (string file) {\tforeach (dictionaryentry e in lists) {\tstringcollection col = (stringcollection) e.value;\tstring s = \"\";\tforeach (string v in col) s += v.replace (\";\", \"\\\\;\") + \";\";\tif (s.length > 0) entries [e.key] = s;\telse entries.remove (e.key);\t}\tusing (streamwriter sw = new streamwriter (file)) {\tif (!isloadedfile) {",
  "timeout check frequency",
  1
 ],
 [
  "if (p == -1) {\treturn 1;\t}\tprofile = profile.substring(p+1);\tvar root_mono = path.getfullpath(path.combine(path.getdirectoryname(cmd), \"..\\\\..\\\\..\"));\tif (!file.exists(path.combine(root_mono, \"mono\\\\mini\\\\mini.c\"))) {\treturn 1;\t}\tp = profile.lastindexof ('-');\tif (p == -1){",
  "the directory holding this executable should be mpaths compiler instead it is",
  0
 ],
 [
  "public void unsafe() {\tbool bad = false;\tfor (int i = 0; i < 10; i++) {\tsystem.threading.thread t1 = new system.threading.thread(new system.threading.threadstart(unsafe1));\tsystem.threading.thread t2 = new system.threading.thread(new system.threading.threadstart(unsafe2));\tt1.start();\tt2.start();\tt1.join();\tt2.join();\tif (bad = 2 * sz + 1 != tree.count) {",
  "unsafe bad at",
  0
 ],
 [
  "static outputtype configurationtypetooutputtype(string configurationtype, string subsystem) {\tif (\"application\" == configurationtype && \"windows\" != subsystem) return icsharpcode.sharpdevelop.project.outputtype.exe;\telse if (\"application\" == configurationtype && \"windows\" == subsystem) return icsharpcode.sharpdevelop.project.outputtype.winexe;\telse if (\"dynamiclibrary\" == configurationtype) return icsharpcode.sharpdevelop.project.outputtype.library;",
  "configurationtype is not supported will use library output type",
  0
 ],
 [
  "public static void createwhitespacehandlingtestfile(string strfilename) {\tfilepathutil.addstream(strfilename, new memorystream());\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));",
  "element pcdata",
  0
 ],
 [
  "private static bool callsecondinterfaceinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturninterface<int>();\tif ((!(bool)(((dynamic)s.instanceproperty).instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "foreach (string dir in libdirs) link_paths.add (dir);\treturn true;\t}\tcase \"/about\": about ();\treturn true;\tcase \"/nostdlib\": case \"/nostdlib+\": stdlib = false;\treturn true;\tcase \"/nostdlib-\": stdlib = true;\treturn true;\tcase \"/target\": if (value.length == 0) {",
  "fatal error target type is invalid",
  0
 ],
 [
  "static byte [] notmodifiedsincehandler (socket socket) {\tstringwriter sw = new stringwriter ();",
  "server apache debian php with suhosin patch mod ssl openssl",
  0
 ],
 [
  "int failcount = 0;\tbyte origin = 24;\tdynamic d = origin;\tdynamic d2 = 33;\tvar a = new int[]\t{\td, d2 }\t;\tif ((a[0] != 24) || (a[1] != 33)) {\tfailcount++;",
  "test failed conversion result is incorrect",
  0
 ],
 [
  "public static int main (string[] args) {\ttry {\tif (args.length != 1) {\treturn 1;\t}\tstring charset = args[0];\tencoding encoding;\ttry {\tencoding = encoding.getencoding(charset);\t} catch (notsupportedexception e) {",
  "no converter for",
  0
 ],
 [
  "writer = getwriter (dest, dname);\tint rescount = 0;\tforeach (dictionaryentry e in reader) {\trescount++;\tobject val = e.value;\tif (val is string) writer.addresource ((string)e.key, (string)e.value);\telse writer.addresource ((string)e.key, e.value);\t}\treader.close ();\twriter.close ();",
  "writing resource file done",
  0
 ],
 [
  "}\tstrxml = \"<root>\t\t\t </root>\";\tbreak;\t}\txmlreader xr;\txr = createreader(new stringreader(strxml));\tdo { xr.read(); }\twhile ((xr.nodetype.tostring() != tokentype) && (xr.readstate != readstate.endoffile));\tif (xr.readstate == readstate.endoffile || xr.nodetype.tostring() != tokentype) {\txr.dispose();",
  "reader not positioned on correct node",
  0
 ],
 [
  "public override void run() {",
  "abstractdesignergenerator reparse could not find initializecomponents in designer source code file",
  1
 ],
 [
  "static async task<int> testfinallywithgotoandreturn (int value) {\tfin = false;\ttry {\tif (value > 4) goto l;\tvalue += 10;\tif (value > 12) return 9;\t} finally {\tfin = true;",
  "finally",
  0
 ],
 [
  "public void testmemberaccessexpression3() {",
  "imports system class somedata public property subdata as somesubdata end class class somesubdata public property name as string end class class testclass public sub testmethod dim data as new somedata console writeline data subdata name end sub end class imports system class somedata public property subdata as somesubdata end class class somesubdata public property name as string end class class testclass public sub testmethod dim data as new somedata if data subdata isnot nothing then console writeline data subdata name end if end sub end class",
  0
 ],
 [
  "if (s9.f4 != 4+9) {\treturn 4;\t}\tif (s9.f5 != 5+9) {\treturn 5;\t}\tif (s9.f6 != 6+9) {\treturn 6;\t}\tif (s9.f7 != 7+9) {",
  "got but expected",
  0
 ],
 [
  "copy (name_pdb, path.changeextension (asmb_path, \".pdb\"), true);\t}\tforeach (string ext in siblings) {\tstring sibling = string.concat (name, ext);\tif (file.exists (sibling)) copy (sibling, string.concat (asmb_path, ext), true);\t}\tforeach (manifestresourceinfo resource_info in resources) {\ttry {\tcopy (resource_info.filename, path.combine (full_path, path.getfilename (resource_info.filename)), true);\t} catch {",
  "no await",
  1
 ],
 [
  "public static void true(bool condition) {\tif (condition) return;",
  "started",
  1
 ],
 [
  "s6.f2 = 2;\ts6.f3 = 3;\ts6.f4 = 4;\ts6.f5 = 5;\ts6.f6 = 6;\ts6 = mono_return_double6(s6, 9);\tif (s6.f1 != 1+9) {\treturn 1;\t}\tif (s6.f2 != 2+9) {",
  "got but expected",
  0
 ],
 [
  "static private bool drawimagecallback(intptr callbackdata) {",
  "reader line exception line",
  1
 ],
 [
  "catch(oracleexception) {\t}\ttry {\tcmd2.commandtext = \"drop procedure sp_test1\";\tcmd2.executenonquery ();\t}\tcatch(oracleexception) {\t}\tcmd2.commandtext = \"create table mono_test_table1 (\" + \" col1 varchar2(8), \"+ \" col2 varchar2(32))\";\tcmd2.executenonquery ();",
  "create stored procedure sp",
  0
 ],
 [
  "activitydesignertheme designertheme = e.designertheme;\tambienttheme ambienttheme = e.ambienttheme;\tthis.rootdesignerlayout.location = this.location;\tthis.rootdesignerlayout.onlayoutposition(graphics, designertheme, ambienttheme);\tif (!this.hasactivedesigner) relocatestates();\tbase.onlayoutposition(e);\tif (!this.hasactivedesigner && this.needsautolayout) repositionstates();\tif (isrootdesigner && invokingdesigner == null) recalculaterootdesignersize();\t}\t#if debug catch (exception exception) {",
  "in fraction constructor int",
  1
 ],
 [
  "public void addparam2() {\tm_xsltarg = new xsltargumentlist();\ttry {\tm_xsltarg.addparam(null, szempty, \"test1\");\t}\tcatch (system.argumentnullexception) {\treturn;\t}",
  "system argumentnullexception not thrown for adding null param",
  0
 ],
 [
  "static bool runtest (methodinfo test) {\tconsole.write (\"running test {0, -25}\", test.name);\ttry {\ttask t = test.invoke (new tester (), null) as task;\ttry {\tif (!task.waitall (new[] { t }, 1000)) {",
  "connectionstring after open",
  1
 ],
 [
  "}\t}\telse if (a.contains(\"=\")) {\tstring[] split = a.split('=');\tif (string.isnullorempty(split[1])) {\treturn false;\t}\tswitch (split[0].tolowerinvariant()) {\tcase \"deploymentid\": deploymentid = split[1];\tbreak;",
  "failed to load stylesheet using default resolver",
  1
 ],
 [
  "int ret = 0;\tbool b = true;\ttry {\td[x, x] = 'a';\tret = 1;\t}\tcatch (microsoft.csharp.runtimebinder.runtimebinderexception ex) {\tb = errorverifier.verify(errormessageid.ambigcall, ex.message, \"target.this[int, object]\", \"target.this[object, int]\");\tif (!b) {\tret = 1;",
  "failed decimal",
  1
 ],
 [
  "bool ignore = ignorelist.contains (re.url);\tservicedata sd = findservice (re.url);\tif (ignore) {\tif (sd != null) {\tremoveservice (re.url);\t}\tcontinue;\t}\tif (sd == null) {\tsd = createservicedata (re);",
  "added",
  0
 ],
 [
  "static private void help () {",
  "uint",
  1
 ],
 [
  "public void writeexceptions() {\tconsole.writeline();",
  "test failed at call result",
  1
 ],
 [
  "public static void save (textwriter writer, editortheme theme) {\twriter.writeline (\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\");\twriter.writeline (\"<!doctype plist public \\\"- writer.writeline (\"<plist version=\\\"1.0\\\">\");\tforeach (var setting in theme.settings) {\tif (setting.name != null) {",
  "hello world",
  1
 ],
 [
  "doc.add(xa);\txmlwriter w = doc.createwriter();\tw.dispose();\ttry {\tdoc.save(new memorystream());\t}\tcatch (argumentexception) {\tcheckclosedstate(w.writestate);\treturn;\t}",
  "creating job schedule",
  1
 ],
 [
  "private static bool inifstatement1() {\tint failcount = 0;\tc origin = new c(1);\tdynamic d = origin;\tif ((bool)d) {\tfailcount++;",
  "assert areequal scan",
  1
 ],
 [
  "dataobject.stringdata = rowkey;\tvar promise = manager.upsertentryasync(unittestdynamodbstorage.instance_table_name, dynamodbstoragetests.getkeys(dataobject), dynamodbstoragetests.getvalues(dataobject));\tpromises.add(promise);\tif ((i % batchsize) == 0 && i > 0) {\ttask.whenall(promises);\tpromises.clear();\t}\t}\ttask.whenall(promises);\tsw.stop();",
  "no tests found in assembly",
  1
 ],
 [
  "public static void main () {\tstring problems = \"\";\ttype t = typeof (test);\tforeach (methodinfo m in t.getmethods (bindingflags.public | bindingflags.instance | bindingflags.declaredonly)) {\tparameterinfo p = m.getparameters () [0];",
  "proxy grain was originally located on silo",
  1
 ],
 [
  "static void dumpaligns(textwriter writer, parsertargetinfo target) {\tvar aligns = new[]\t{\tnew { name = \"gint8\", align = target.charalign}, new { name = \"gint16\", align = target.shortalign}, new { name = \"gint32\", align = target.intalign}, new { name = \"gint64\", align = gettypealign(target, target.int64type)}, new { name = \"float\", align = target.floatalign}, new { name = \"double\", align = target.doublealign}, new { name = \"gpointer\", align = gettypealign(target, target.intptrtype)}, };",
  "push",
  1
 ],
 [
  "if (s9.f6 != 6+906) {\treturn 6;\t}\tif (s9.f7 != 7+906) {\treturn 7;\t}\tif (s9.f8 != 8+906) {\treturn 8;\t}\tif (s9.f9 != 9+906) {",
  "threadtrace saved",
  1
 ],
 [
  "public static void thread() {\tthread.sleep(500);",
  "thread running",
  0
 ],
 [
  "protected async task grain_awsstore_silorestart() {\tvar initialserviceid = this.hostedcluster.options.serviceid;\tvar initialdeploymentid = this.hostedcluster.options.clusterid;\tvar serviceid = await this.hostedcluster.client.getgrain<iserviceidgrain>(guid.empty).getserviceid();\toutput.writeline(\"clusterid={0} serviceid={1}\", this.hostedcluster.options.clusterid, serviceid);\tguid id = guid.newguid();\tiawsstoragetestgrain grain = this.fixture.grainfactory.getgrain<iawsstoragetestgrain>(id);\tint val = await grain.getvalue();\tassert.equal(0, val);\tawait grain.dowrite(1);",
  "about to reset silos",
  0
 ],
 [
  "static void committest (oracleconnection connection) {\toracletransaction transaction = connection.begintransaction ();\toraclecommand insert = connection.createcommand ();\tinsert.transaction = transaction;\tinsert.commandtext = \"insert into scott.emp (empno, ename, job) values (8787, 't coleman', 'monoist')\";\tinsert.executenonquery ();\toraclecommand select = connection.createcommand ();\tselect.commandtext = \"select count(*) from scott.emp where empno = 8787\";\tselect.transaction = transaction;",
  "row count should be value is",
  0
 ],
 [
  "public static void go(inavigationpoint target) {\tif (target==null) {\treturn;\t}\tlinkedlistnode<inavigationpoint> targetnode;\ttargetnode = history.find(target);\tif (targetnode!=null) {\tcurrentnode = targetnode;\t} else {",
  "logging additional point",
  0
 ],
 [
  "public object serializetoolboxitem(toolboxitem toolboxitem) {",
  "nic",
  1
 ],
 [
  "public async task negotiatestream_streamtostream_kerberosauthdefaultcredentials_success() {\tif (!_iskrbavailable) {",
  "error",
  1
 ],
 [
  "for (int i = 0; i < direntrycount; i++) {\ticondirentry ide;\tide.width = reader.readbyte ();\tide.height = reader.readbyte ();\tide.colorcount = reader.readbyte ();\tide.reserved = reader.readbyte ();\tide.planes = reader.readuint16 ();\tide.bitcount = reader.readuint16 ();\tide.bytesinres = reader.readuint32 ();\tide.imageoffset = reader.readuint32 ();",
  "ide colorcount",
  0
 ],
 [
  "static private void help () {",
  "t url timestamp service http url",
  0
 ],
 [
  "private static bool callsecondclassinstanceproperty() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturndynamicclass();\tif ((!(bool)(s.instanceproperty.instanceproperty)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "protected override void write (pdictionary dict) {\tif (dict.count == 0) {\treturn;\t}\tincreaseindent ();\tforeach (var kv in dict) {",
  "key key",
  0
 ],
 [
  "private async task connecttohostasync(tcpclient tcp) {\tstring hostname = null;\tif (_options.remoteendpoint is dnsendpoint) {\tvar dns = (dnsendpoint)_options.remoteendpoint;\thostname = dns.host;\tawait tcp.connectasync(hostname, dns.port).configureawait(false);\t}\telse {\tvar ip = (ipendpoint)_options.remoteendpoint;\thostname = ip.address.tostring();",
  "type",
  1
 ],
 [
  "string result = \"start\";\ttry {\twhile (result != \"\") {\tstring command = console.readline();\tresult = player.play(command).result;\tconsole.writeline(result);\t}\t}\tfinally {\tplayer.die().wait();",
  "game over",
  0
 ],
 [
  "private  void generatecompileunitstart(codecompileunit e) {\tif (e.startdirectives.count > 0) {\tgeneratedirectives(e.startdirectives);\t}\toutput.write(\" output.write(sr.getstring(sr.autogen_comment_line3));\toutput.writeline(system.environment.version.tostring());",
  "instance created",
  1
 ],
 [
  "((xmlschemaexternal)mainschema.includes[0]).schema = reparsedinclude;\tset.reprocess(mainschema);\tset.compile();\tbwarningcallback = false;\tberrorcallback = false;\tsettings.schemas = set;\treader = xmlreader.create(xmlfile, settings);\twhile (reader.read()) { }\tcerror.compare(bwarningcallback, false, \"warning count mismatch\");\tcerror.compare(berrorcallback, false, \"error count mismatch\");",
  "re adding include to",
  0
 ],
 [
  "s4.f3 = 3;\ts4.f4 = 4;\ts4 = mono_return_sbyte4(s4, 9);\tif (s4.f1 != 1+9) {\treturn 1;\t}\tif (s4.f2 != 2+9) {\treturn 2;\t}\tif (s4.f3 != 3+9) {",
  "setup locals block",
  1
 ],
 [
  "public static bool equalall<t1, t2>(this ienumerable<t1> first, ienumerable<t2> second, iequalitycomparer<t2> comparer) where t1 : expectedvalue {\tusing (ienumerator<t1> e1 = first.getenumerator()) using (ienumerator<t2> e2 = second.getenumerator()) {\twhile (e1.movenext()) {\tif (e2.movenext()) {\tif (e1.current.isoriginalnode) {\tif (e1.current.data is xtext && !(e1.current.data is xcdata)) if (!object.referenceequals(e1.current.originalreference, e2.current)) {",
  "xtext reference comparison",
  0
 ],
 [
  "public async task closeasync_serverinitiatedclose_success(uri server) {\tconst string closewebsocketmetacommand = \".close\";\tusing (clientwebsocket cws = await websockethelper.getconnectedwebsocket(server, timeoutmilliseconds, _output)) {\tvar cts = new cancellationtokensource(timeoutmilliseconds);\tawait cws.sendasync( websocketdata.getbufferfromtext(closewebsocketmetacommand), websocketmessagetype.text, true, cts.token);",
  "failed to initialize orleans silo",
  1
 ],
 [
  "private void confirmvalidcertificate(string expectedhostname) {\tassert.equal(sslpolicyerrors.none, _validationcallbackhistory.sslpolicyerrors);\tassert.true(_validationcallbackhistory.certificatechain.count > 0);",
  "certificate subject",
  0
 ],
 [
  "if (!contentvalidator.addelement(localelement.qualifiedname, localelement, localelement.minoccurs == decimal.zero)) {\tsendvalidationevent(sr.sch_dupelement, localelement.qualifiedname.tostring(), localelement);\t}\t}\treturn contentvalidator;\t}\telse {\tparticlecontentvalidator contentvalidator = new particlecontentvalidator(complextype.contenttype, compilationsettings.enableupacheck);\t#if debug if (diagnosticsswitches.xmlschema.traceverbose) {\tstring name = complextype.name != null ? complextype.name : string.empty;",
  "error wrong number of parameters",
  1
 ],
 [
  "reflectionawarecodegen.writequotedcsharpstring(writer, expectedelement);\t}\twriter.writeline(\");\");\tif (anyifs) {\twriter.indent--;\twriter.writeline(\"}\");\t}\t}\tvoid generateinitcallbacksmethod() {\twriter.writeline();",
  "protected override void initcallbacks",
  0
 ],
 [
  "public void testdisable () {\ttestwrongcontext<redundantunsafecontextissue>(@\" unsafe class foo {\tpublic static void main (string[] args) {",
  "hello",
  0
 ],
 [
  "if (size != dict.count) {\tconsole.writeline(\"list.size ({0}) != dict.count ({1})\", size, dict.count);\tretval = false;\t}\tnode n = startsentinel.next, n2;\twhile (n != endsentinel) {\tif (!dict.find(n.item, out n2)) {\tretval = false;\t}\telse if (n != n2) {",
  "sqlclient diagnostictest executenonqueryerrortest connection disposed",
  1
 ],
 [
  "public async task simplevoidtaskmethod() {\tawait task.delay(timespan.fromseconds(1.0));",
  "after",
  0
 ],
 [
  "public void generateserializers (textwriter writer) {\t_writer = writer;\t_results = new generationresult [_xmlmaps.length];",
  "using system text",
  0
 ],
 [
  "public static int main () {",
  "hello world",
  0
 ],
 [
  "public static int[] throwanexception ()   {\tint[] arr = new int [10];\tint k = arr [11];",
  "verifying bytestowrite with successive calls to write",
  1
 ],
 [
  "private static bool test2() {\tlong?[] longnvalues = new long?[]\t{\t10l, 30l, 0, null }\t;\tforeach (long? a1 in longnvalues) {\tforeach (long? a2 in longnvalues) {\tdynamic d1 = a1;\tif ((d1 - a2) != (a1 - a2)) {",
  "failed long long",
  0
 ],
 [
  "public void printusage() {\tusing (stringwriter usagestr = new stringwriter()) {",
  "where",
  0
 ],
 [
  "for (int i = 0; i < array.length; i++) {\tarray[i] = (t)deserialize(serializedarray[i], typeof(t));\t}\treturn array;\t} catch (xamlobjectwriterexception ex) {\tloggingservice.warn(ex);\t} catch (notsupportedexception ex) {\tloggingservice.warn(ex);\t}\t} else {",
  "press any key to continue",
  1
 ],
 [
  "public void openclose() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "option takes argument",
  1
 ],
 [
  "private bool verifycallbacksafety (methoddefinition callback) {\tbool result;\tbool valid_ex_handler;\tmethodbody body;\tilist<instruction> instructions;\tif (callback == null) return true;",
  "loop",
  1
 ],
 [
  "static void main(string[] args) {\tif (args.length != 1) {",
  "usage graph exe testno",
  0
 ],
 [
  "private static bool callsecondstructinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tdynamic d = new firstclassreturnstruct<int>();\tif ((!(((secondstruct<int>)d[1]).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "running individual short tests",
  1
 ],
 [
  "writebuffer (ts, conf, buffer);\tts.write (\"\\t.byte 0\\n\");\tts.writeline ();\t}\tts.close ();\tif (compress) tc.writeline (\"\\nstatic const compressedassembly *compressed [] = {\");\telse tc.writeline (\"\\nstatic const monobundledassembly *bundled [] = {\");\tforeach (string c in c_bundle_names){\ttc.writeline (\"\\t&{0},\", c);\t}",
  "null",
  0
 ],
 [
  "public void transformstrstr8(inputtype inputtype, readertype readertype) {\tstring expected = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?><result> 1.no value specified 2.no value specified 3.no value specified 4.no value specified 5.no value specified 6.no value specified</result>\";\tstring szfullfilename = fullfilepath(\"fruits.xml\");\tfor (int i = 0; i < 50; i++) {\tif (loadxsl(\"showparam.xsl\", inputtype, readertype) == 1) {\tcalltransform(xslt, szfullfilename, _stroutfile);\ttry {\tverifyresult(expected);\t}\tcatch(exception) {",
  "failed to process load after calling times",
  0
 ],
 [
  "class testclass {\t[methodimpl (value = methodimploptions.synchronized)]\tvoid testmethod () {\t}\t}\";\tvar output = @\" using system.runtime.compilerservices;\tclass testclass {\tobject locker = new object ();\tvoid testmethod () {\tlock (locker) {",
  "appearance",
  1
 ],
 [
  "}\tcontinue;\t}\ttypeofexpression t = param as typeofexpression;\tif (t != null && this.positionavailable) {\t#endif resolveresult rr = this.resolve(new typereferenceexpression(t.typereference), expressioncontext.type);\t#if debug if (rr == null) {\t} else {\t}\t#endif if (rr != null) {",
  "principalcollectionenumerator movenext insvaluescomp mode moving to insvaluespend mode",
  1
 ],
 [
  "public void executenonqueryerrortest() {\tremoteinvoke(() => {\tcollectstatisticsdiagnostics(connectionstring => {\tusing (sqlconnection conn = new sqlconnection(connectionstring)) {\tusing (sqlcommand cmd = new sqlcommand()) {\tcmd.connection = conn;\tcmd.commandtext = \"select 1 / 0;\";\tcmd.commandtimeout = 3;\tconn.open();",
  "reader decodeunsigned offset out count",
  1
 ],
 [
  "s14.f7 = 7;\ts14.f8 = 8;\ts14.f9 = 9;\ts14.f10 = 10;\ts14.f11 = 11;\ts14.f12 = 12;\ts14.f13 = 13;\ts14.f14 = 14;\ts14 = mono_return_sbyte14(s14, 9);\tif (s14.f1 != 1+9) {",
  "url url specify an alternative url for downloading the trusted",
  1
 ],
 [
  "private void writeenum (type t, string ns, string fn) {\tif (!canmaptype (t) || !t.isenum) return;\tstring etype = maputils.getnativetype (t);\twriteliteralvalues (sh, t, fn);",
  "int from x r",
  0
 ],
 [
  "var logger = serviceprovider.getservice<iloggerfactory>().createlogger(testname);\tvar stopwatch = new stopwatch();\tstopwatch.start();\tint tmp = 0;\tfor (int i = 0; i < n; i++) {\tlogger.warn(mainlogcode, \"msg \" + i);\ttmp = i;\t}\ttimespan delay = eventbulkingoptions.bulkeventinterval - stopwatch.elapsed;\tif (delay > timespan.zero) {",
  "invalid view hash offset size",
  1
 ],
 [
  "return false;\t}\t}\t}\tattnames.add(actname);\tattscopes.add(scope);\t}\tj++;\t}\tif (j != explen) {",
  "reading to a",
  1
 ],
 [
  "paths.append (new uri (file).localpath);\t}\tvar cmd = string.format (\"{0} {1} -b true -out {2} {3} -c link -p copy \", runtime, managed_linker_path, outdir, paths.tostring ());\texecute (cmd);\t}\tstatic void preprocessassemblies (list <string> chosenfiles, list <string> files) {\tif (aot_mode == \"\" || (cil_strip_path == null && managed_linker_path == null)) return;\tvar temp_dir_name = path.combine(directory.getcurrentdirectory(), \"temp_assemblies\");\taot_temp_dir = new directoryinfo (temp_dir_name);\tif (aot_temp_dir.exists) {",
  "removing previous build cache at",
  0
 ],
 [
  "public void loadgeneric5(xslinputtype xslinputtype, readertype readertype) {\tcustomnullresolver myresolver = new customnullresolver(_output);\ttry {\tloadxsl_resolver(\"xmlresolver_main.xsl\", xslinputtype, readertype, myresolver);",
  "verifying endwrite with null asyncresult",
  1
 ],
 [
  "var t = counters.parserservice.objectdeserialized.begintiming (path);\ttry {\tusing (var fs = new filestream (path, system.io.filemode.open, fileaccess.read, fileshare.read, 4096, fileoptions.sequentialscan)) {\tusing (var reader = new binaryreaderwith7bitencodedints (fs)) {\tlock (sharedserializer) {\treturn (t)sharedserializer.deserialize (reader);\t}\t}\t}\t} catch (exception e) {",
  "error opening file",
  1
 ],
 [
  "writeline (\"\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twriteline (\"\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twriteline (\"\");\twritelineind (\"if (readmethods == null) {\");\twriteline (\"readmethods = new system.collections.hashtable ();\");\twritelineuni (\"}\");",
  "return readmethods",
  0
 ],
 [
  "public static bool generatecode(codegenoptions options) {\tvar outputfilename = options.outputfilename;\tvar outputfiledirectory = path.getdirectoryname(outputfilename);\tif (!string.isnullorempty(outputfiledirectory) && !directory.exists(outputfiledirectory)) {\tdirectory.createdirectory(outputfiledirectory);\t}\t#if !netcoreapp2_0 var generatedcode = generatecodeinappdomain(options);\t#else var generatedcode = generatecodeinternal(options);\t#endif using (var sourcewriter = new streamwriter(outputfilename)) {",
  "sourcewriter writeline codegen",
  0
 ],
 [
  "protected void setobject(object obj) {",
  "setobject",
  0
 ],
 [
  "notrun = xwt.drawing.image.fromresource (\"unit-skipped-16.png\");\tsuccess = xwt.drawing.image.fromresource (\"unit-success-16.png\");\tsuccessandfailure = xwt.drawing.image.fromresource (\"unit-mixed-results-16.png\");\tloading = xwt.drawing.image.fromresource (\"unit-loading-16.png\");\tinconclusive = xwt.drawing.image.fromresource (\"unit-inconclusive-16.png\");\toldfailure = failure.withalpha (0.4);\toldsuccess = success.withalpha (0.4);\toldsuccessandfailure = successandfailure.withalpha (0.4);\toldinconclusive = inconclusive.withalpha (0.4);\t} catch (exception e) {",
  "error while loading icons",
  0
 ],
 [
  "private static void listkeyversions(string keyname) {\tvar vaultaddress = inputvalidator.getvaultaddress();\tkeyname = (keyname == string.empty) ? inputvalidator.getkeyid() : keyname;\tvar numkeyversions = 0;\tvar maxresults = 1;",
  "positioned on wrong element",
  1
 ],
 [
  "private void generategetserializer(hashtable serializers, xmlmapping[] xmlmappings) {\t_writer.write(\"public override \");\t_writer.write(typeof(system.xml.serialization.xmlserializer).fullname);\t_writer.write(\" getserializer(\");\t_writer.write(typeof(type).fullname);",
  "option takes argument",
  1
 ],
 [
  "public override void createfile (string assembly_name, string file_prefix) {\tsh = file.createtext (file_prefix + \".h\");\tfile_prefix = file_prefix.replace (\"../\", \"\").replace (\"/\", \"_\");\tthis.assembly_file = assembly_name = path.getfilename (assembly_name);\twriteheader (sh, assembly_name, true);\tassembly_name = assembly_name.replace (\".dll\", \"\").replace (\".\", \"_\");",
  "g begin decls",
  0
 ],
 [
  "static int main () {\tvar l = new object[40000];\ttry {\tfor (int i = 0; i < 40000; ++i) {\tvar foo = new byte[2000];\tl[i] = foo;\t}",
  "done",
  0
 ],
 [
  "if (file.exists(benchmark32startinfo.filename)) {\ttestseries.add(new testseries(\"without profiler (32-bit)\", () => withoutprofiler(benchmark32startinfo)));\ttestseries.add(new testseries(\"with profiler (32-bit)\", () => withprofiler(benchmark32startinfo)));\t} else {\t}\tif (intptr.size == 8) {\tif (file.exists(benchmarkstartinfo.filename)) {\ttestseries.add(new testseries(\"without profiler (64-bit)\", () => withoutprofiler(benchmarkstartinfo)));\ttestseries.add(new testseries(\"with profiler (64-bit)\", () => withprofiler(benchmarkstartinfo)));\t} else {",
  "bit tests not executed could not find benchmark exe",
  0
 ],
 [
  "public static void runruntests_cancellation_negative() {\tcancellationtokensource cts = new cancellationtokensource();\tcancellationtoken token = cts.token;\tint count = 0;\tcts.cancel();\ttask task3 = task.run(() => { count = 41; }, token);\tassert.throws<aggregateexception>( () => { task3.wait(); });\tassert.false(count == 41, \"    > failed.  task w/ canceled token ran when it should not have.\");\tassert.true(task3.iscanceled, \"    > failed.  task w/ canceled token should have ended in canceled state\");\ttask future3 = task.run(() => { count = 47; return count; }, token);",
  "runruntests waiting for a future w canceled token if we hang something went wrong",
  0
 ],
 [
  "public void printtree (streamwriter msw) {\tfor (int i = 0; i < faxisarray.count; ++i) {\tforwardaxis axis = (forwardaxis)faxisarray[i];\tmsw.writeline(\"<tree isdss=\\\"{0}\\\" isattribute=\\\"{1}\\\">\", axis.isdss, axis.isattribute);\tdoublelinkaxis printaxis = axis.topnode;\twhile ( printaxis != null ) {",
  "prefix prefix",
  0
 ],
 [
  "console.writeline (\"text category = {0}\", props[1].category);\tconsole.writeline (\"text description = {0}\", props[1].description);\tconsole.writeline (\"text displaynem = {0}\", props[1].displayname);\tassert.areequal (\"(advanced)\", props[2].name, \"6\");\tconsole.writeline (props[2].gettype());\tconsole.writeline (\"advanced value = {0}\", props[2].getvalue (col));\ttypeconverter propcvt = props[2].converter;\tconsole.writeline (\"advanced converter = {0}\", propcvt.gettype());\tconsole.writeline (\"\");\tif (null == propcvt.getproperties(props[2].getvalue (col))) console.writeline (\"null properties\");",
  "connection close",
  1
 ],
 [
  "private void tmexceptiontesthelper(taskscheduler tm, string tminvalidmessage) {\tif (_tasktype != tasktype.promise) {\tif (_tasktype != tasktype.future) {\ttry {\t_task = createtaskhelper();\t_task.start(tm);\tassert.true(false, string.format(\"able to pass {0} taskmanager to start() on {1}, when expecting exception\", tminvalidmessage, _tasktype));\t}\tcatch (argumentnullexception) {",
  "null exception argumentnullexception throws as expected when trying to pass taskmanager to start on",
  0
 ],
 [
  "public static void blobtest (oracleconnection connection) {",
  "begin transaction",
  0
 ],
 [
  "public override t test<t> (t t, ub u) {",
  "positioned on wrong element not on ns",
  1
 ],
 [
  "static int main () {\ttest t1 = new test ();\tobjref myref = remotingservices.marshal (t1, \"/test\");\tstring url = \"simple: string uri;\tsimplechannel chnl = new simplechannel (8000);\tchannelservices.registerchannel (chnl);",
  "thread list",
  1
 ],
 [
  "public virtual void addservice(type servicetype, servicecreatorcallback callback, bool promote) {\tif (promote) {\tiservicecontainer container = container;\tif (container != null) {\tdebug.indent();",
  "did not throw exception",
  1
 ],
 [
  "public static void main (string[] args) {\tif (args.length == 0) {\treturn;\t} else if (args.length > 64) {\treturn;\t}\tservicepointmanager.certificatepolicy = new testcertificatepolicy ();\tint id = 1;\tforeach (string url in args) {",
  "get at",
  0
 ],
 [
  "public void save () {\tsettingshandler.ensuresettingsdirectory ();\ttry {\tif (file.exists(changeset_file)) file.copy (changeset_file, changeset_backup_file, true);\tusing (filestream fs = file.create (changeset_file)){\tserializer.serialize (fs, this);\t}\t} catch (exception e) {",
  "error while saving changes",
  0
 ],
 [
  "private static bool callsecondinterfaceindexer() {\tint failcount = 0;\tdynamic d = new firstclassreturninterface();\tverify.firstcalled = false;\tif ((!(((secondinterface)d.instanceproperty)[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "public void emptycondition (int x) {\tif (x == 0) {\t}",
  "invoked orleansmanager exe with arguments",
  1
 ],
 [
  "public static void main(string[] args) {\ttree<int> t = maketree(1, 15);\tact<int> act = delegate(int val) { console.write(\"{0} \", val); };\ttree<int>.depthfirst(t, act);\ttree<int>.breadthfirst(t, act);\ttree<int>.traverse(t, act, new arraylist<tree<int>>());",
  "breadth first",
  0
 ],
 [
  "public void addparam19(object param, xslinputtype xslinputtype, readertype readertype, outputtype outputtype, navtype navtype) {\tstring baseline = path.combine(\"baseline\", (string)param);\tm_xsltarg = new xsltargumentlist();\tstring obj = \"test\";\tfor (int i = 0; i < 300; i++) {\tm_xsltarg.addparam(\"myarg\" + i, szempty, obj + \"1\");\tretobj = m_xsltarg.getparam(\"myarg\" + i, szempty);\tif (retobj.tostring() != (\"test\" + \"1\")) {",
  "failed to add myarg",
  0
 ],
 [
  "public static void createlinenumbertestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<?xml version=\\\"1.0\\\" ?>\");\ttw.writeline(\" <element a0='a0&e1;v' a1='a1value' a2='a2&e1;v'><embedded /></element>\");\ttw.writeline(\"<?pi1?>\");\ttw.writeline(\"<base64>9f6hju++</base64>\");",
  "missing argument to runtime args command line option",
  1
 ],
 [
  "public errorcs0052 method () {",
  "the compile should advice the return type of this method is less accessible than the method",
  0
 ],
 [
  "writer.writeline(\";\");\t}\telse {\twriter.write(\"var theform = document.forms['\");\twriter.write(formuniqueid);\twriter.writeline(\"'];\");\twriter.write(\"if (!theform) {\\r\\n    theform = document.\");\twriter.write(formuniqueid);\twriter.writeline(\";\\r\\n}\");\t}",
  "function dopostback eventtarget eventargument",
  0
 ],
 [
  "static int main () {\tvar t = new thread (setuplinks);\tt.start ();\tt.join ();\tgc.collect ();\tbridge a, b;\ta = b = null;",
  "tr",
  1
 ],
 [
  "public int loadxsl(string _strxslfile, inputtype inputtype, readertype readertype) {\t_strxslfile = fullfilepath(_strxslfile);\t#pragma warning disable 0618 xslt = new xsltransform();\t#pragma warning restore 0618 switch (inputtype) {",
  "loading style sheet as uri",
  0
 ],
 [
  "public test (int i, int j) {",
  "got",
  0
 ],
 [
  "static librarycache load () {\tstring index_path = path.combine (dir, \"index.xml\");\tif (file.exists (index_path)) {\ttry {\tlibrarycache result;\txmlserializer serializer = new xmlserializer (typeof (librarycache));\tusing (xmltextreader rdr = new xmltextreader (index_path)) result = (librarycache) serializer.deserialize (rdr);\treturn result;\t} catch (exception e) {",
  "cache index serialization failed",
  0
 ],
 [
  "public static int main (string[] args) {\tint c = 0;\ttry {\tc = 0;\t}\tcatch (exception e) {\t}\tfinally {",
  "finally",
  0
 ],
 [
  "collectionsource.bind();\tint i = 0;\tforeach (var element in collectionsource.groupedlist) {\tforeach (var l in element) {\tcollectionsource.fill(dataitemscollection,l);\ti++;\t}\t}\tdo {\tcollectionsource.fill(dataitemscollection);",
  "ok",
  1
 ],
 [
  "public void getextobject5(xslinputtype xslinputtype, readertype readertype, outputtype outputtype, navtype navtype) {\tm_xsltarg = new xsltargumentlist();\tmyobject obj = new myobject(5, _output);\tm_xsltarg.addextensionobject(szlongns, obj);\tretobj = m_xsltarg.getextensionobject(szlongns);\tif (((myobject)retobj).myvalue() != obj.myvalue()) {",
  "removing element from the set",
  1
 ],
 [
  "protected override object getservice(type servicetype) {\tobject service = base.getservice(servicetype);\tif (service == null && serviceprovider != null) {\tservice = serviceprovider.getservice(servicetype);\t}\t#if idecontainer_log_service_requests if (service == null) {",
  "failed didn t get runtimebinderexception",
  1
 ],
 [
  "if (null != envsettings) {\tlist<environmentsetting> envsettingslist = new list<environmentsetting>(ijm.environmentsettings);\t}\telse {\t}\tienumerable<resourcefile> resfilesprop = ijm.resourcefiles;\tif (null != resfilesprop) {\tlist<resourcefile> resfiles = new list<resourcefile>();\t}\telse {",
  "resourcefiles null",
  0
 ],
 [
  "private static bool callsecondstructindexer() {\tint failcount = 0;\tdynamic d = new firstclassreturnstruct();\tverify.firstcalled = false;\tif ((!(((d + 1))[2])) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "string compare = string.empty;\tint i = 0;\tforeach (var element in collectionsource.sortedlist) {\tcollectionsource.fill(ric,element);\tassert.that(((basedataitem)ric[0]).dbvalue,is.greaterthanorequalto(compare));\tcompare = ((basedataitem)ric[0]).dbvalue;\ti++;\t}\tdo {\tcollectionsource.fill(ric);",
  "first last",
  0
 ],
 [
  "public void emitsource() {\twriteline();",
  "using internal nativeformat",
  0
 ],
 [
  "static bool callsecondclassoperator() {\tint failcount = 0; verify.firstcalled = false;\tvar s = new firstclassreturnclass();\tif ( (!(bool)(((dynamic)(s + 1)) + 2)) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "using (xmlwriter w = createwriter(doc)) {\ttry {\tw.writestartelement(\"root\");\tw.writesurrogatecharentity('\\ud9a2', '\\ude34');\t}\tcatch (argumentexception) {\ttestlog.compare(w.writestate, writestate.error, \"writestate should be error\");\treturn;\t}\t}",
  "did not throw exception",
  0
 ],
 [
  "static void trylldb (int pid, processdata data) {\tstring filename = path.gettempfilename ();\tusing (streamwriter sw = new streamwriter (new filestream (filename, filemode.open, fileaccess.write))) {",
  "quit",
  0
 ],
 [
  "}\tdifferentdomainactor dda = (differentdomainactor) differentappdomain.createinstanceandunwrap ( assembly.getentryassembly().fullname, typeof (differentdomainactor).fullname);\tdda.act (configurationdescription);\t} else {\tif (configuration.dt) {\t} else {\t}\tthrow new applicationexception (\"this exception is unhandled\");\t}\tif (configuration.dt) {",
  "continuing in different thread after the exception was thrown",
  0
 ],
 [
  "f.position = 0x3c;\tint peheaderstart = r.readint32();\tf.position = peheaderstart;\tif (r.readint32() != 0x00004550) {\treturn false;\t}\tint optionalheaderstart = peheaderstart + 4 + 20;\tf.position = optionalheaderstart;\tswitch (r.readint16()) {\tcase 0x10b: break;",
  "maxstack",
  1
 ],
 [
  "p = process.start (pi);\t} catch (exception e) {\tenvironment.exit (1);\t}\tif (p.standardoutput == null){\treturn true;\t}\tstring pkgout = p.standardoutput.readtoend ();\tp.waitforexit ();\tif (p.exitcode != 0) {",
  "showing service details failed service id not found",
  1
 ],
 [
  "public void dumpreader (xmlreader xr, bool attvalue) {",
  "test failed at call result",
  1
 ],
 [
  "}\tif (failed_tests.count == 0) continue;\tsw.writeline (@\"        <tr id='el{0}' class='errorlist' style='display: none'>\", assembly);\tsw.writeline (@\"            <td colspan='4'>\");\tsw.writeline (@\"                <table cellpadding='2' cellspacing='0' width='100%'>\");\tint test_num = 0;\tforeach (failedtest ft in failed_tests.values) {\tsw.writeline (\"                    <tr onclick=\\\"toggle('as{0}ed{1}')\\\" onmouseover='highlight(this)' onmouseout='unhighlight(this)'>\", assembly, test_num);\tsw.writeline (@\"                        <td style='width: 17px'><img src='media/bullet.png' /></td>\");\tsw.writeline (@\"                    <tr id='as{0}ed{1}' class='errordetail' style='display: none'>\", assembly, test_num);",
  "server authenticated to client with encryption cipher bit strength",
  1
 ],
 [
  "string filename = ( args.length == 0 ) ? \"xmlchartype.bin\" : args[0];\tconsole.write( \"writing xmlchartype character properties to {0}...\", filename );\tfilestream fs = new filestream( filename, filemode.create );\tfor ( int i = 0; i < charpropertiessize; i += 4096 ) {\tfs.write( s_charproperties, i, 4096 );\t}\tfs.close();\t}\tcatch ( exception e ) {\tconsole.writeline();",
  "exception",
  0
 ],
 [
  "console.writeline ();\tforeach (processdata pd in failed) {\tconsole.writeline ();\tconsole.writeline (pd.test);\tdumpfile (pd.stdoutname, pd.stdout.tostring ());\tdumpfile (pd.stderrname, pd.stderr.tostring ());\t}\t}\tif (ntimedout > 0) {\tconsole.writeline ();",
  "clientwritemac",
  1
 ],
 [
  "writeline (\"\");\twritelineind (\"if (readmethods == null) {\");\twriteline (\"readmethods = new system.collections.hashtable ();\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twritelineuni (\"}\");\twriteline (\"\");\twritelineind (\"if (writemethods == null) {\");\twriteline (\"writemethods = new system.collections.hashtable ();\");",
  "writemethods add res mapping getkey res writemethodname",
  0
 ],
 [
  "public static void createxmllangtestfile(string strfilename) {\tstream s = new memorystream();\ttextwriter tw = new streamwriter(s);\ttw.writeline(\"<xmllang0 xml:lang=\\\"en-us\\\">what color is it?</xmllang0>\");\ttw.write(\"<xmllang1 xml:lang=\\\"en-gb\\\">what color is it?<a><b><c>language test</c><persona>dromio of ephesus</persona></b></a></xmllang1>\");\ttw.writeline(\"<empty_xmllang attr0=\\\"0\\\" xml:lang=\\\"en-us\\\" />\");\ttw.writeline(\"<xmllang2 xml:lang=\\\"en-us\\\">what color is it?<title><!-- this is a comment--></title><xmllang1 xml:lang=\\\"en-gb\\\">testing language<xmllang0 xml:lang=\\\"en-us\\\">what color is it?</xmllang0>haha </xmllang1>hihihi</xmllang2>\");",
  "pgroup",
  0
 ],
 [
  "outputline (@\"       \\open to open the connection\");\toutputline (@\"       \\close to close the connection\");\toutputline (@\"       \\e to execute sql query (select)\");\toutputline (@\"       \\h to show help (all commands).\");\toutputline (@\"       \\defaults to show default variables.\");\toutputline (\"\");\t}\tpublic void showhelp () {\tconsole.writeline (\"\");\tif (!waitforenterkey ()) return;",
  "string",
  1
 ],
 [
  "public void removeextobj2() {\tmyobject obj = new myobject(2, _output);\tm_xsltarg = new xsltargumentlist();\ttry {\tm_xsltarg.removeextensionobject(null);\t}\tcatch (system.argumentnullexception) {\treturn;\t}",
  "usage managed linker path to exe",
  1
 ],
 [
  "static int main () {\ttest t1 = new test ();\tobjref myref = remotingservices.marshal (t1, \"/test\");\tstring url = \"corba: string uri;\tcorbachannel chnl = new corbachannel (8000);\tchannelservices.registerchannel (chnl);",
  "linenumber and position were incorrect expected actual",
  1
 ],
 [
  "dv.rowfilter = \"col1 <> 0\";\tdv.rowstatefilter = dataviewrowstate.deleted;\tdv.rowstatefilter = dataviewrowstate.currentrows;\tdt.rows.add (new object [] {1, 3});\tdt.rows.add (new object [] {2, 2});\tdt.rows.add (new object [] {3, 1});\tdatarowview drv = dv.addnew ();\teventwriter.writeline (dv.count);\tdrv [0] = 0;\tdrv.endedit ();",
  "adding task",
  1
 ],
 [
  "ar1 = (actionref) delegate.createdelegate(typeof (actionref), typeof (emptystruct).getmethod(\"test2\"));\tif (ar1 (ref es) != 120) {\treturn 3;\t}\tar2 = (actionref2) delegate.createdelegate(typeof (actionref2), es, typeof (emptystruct).getmethod(\"test\"));\tif (ar2 () != 110) {\treturn 4;\t}\ttry {\tdelegate.createdelegate(typeof (actionref2), new emptystruct (), typeof (emptystruct).getmethod(\"test2\"));",
  "must fail",
  0
 ],
 [
  "if (s17.f14 != 14+9) {\treturn 14;\t}\tif (s17.f15 != 15+9) {\treturn 15;\t}\tif (s17.f16 != 16+9) {\treturn 16;\t}\tif (s17.f17 != 17+9) {",
  "incorrectly not wf",
  1
 ],
 [
  "private static bool testoropwithsametypeandreturntype() {\tclearflags();\tdynamic d1 = new myopclass();\tdynamic d2 = new myopclass();\tdynamic dr = d1 || d2;\tif (dr.gettype() != typeof(myopclass)) {\treturn false;\t}\tif (dr != d2) {",
  "failed got wrong result",
  0
 ],
 [
  "if (members.length > 0 && members[0].mapping.isreturnvalue) writer.writeline(\"isreturnvalue = true;\");\tstring checktypehrefsource = (!haswrapperelement && !writeaccessors) ? \"hreflist\" : null;\tif (checktypehrefsource != null) writeinitchecktypehreflist(checktypehrefsource);\twriteparamsread(mappings.length);\tint loopindex = writewhilenotloopstart();\twriter.indent++;\tstring unrecognizedelementsource = checktypehrefsource == null ? \"unknownnode((object)p);\" : \"if (reader.getattribute(\\\"id\\\", null) != null) { readreferencedelement(); } else { unknownnode((object)p); }\";\twritememberelements(members, unrecognizedelementsource, \"unknownnode((object)p);\", null, null, checktypehrefsource);\twritewhileloopend(loopindex);\tif (checktypehrefsource != null) writehandlehreflist(members, checktypehrefsource);",
  "unable to unload appdomain",
  1
 ],
 [
  "return null;\t}\tcontext.nodes.pop ();\treturn parent;\t}\tif (c == '>') {\tif (context.statetag == maybe_self_closing) {\telement.close (element);\t}\tif (!element.isnamed) {",
  "classendload",
  1
 ],
 [
  "reflectionawarecodegen.writequotedcsharpstring(writer, expectedelement);\t}\twriter.writeline(\");\");\tif (anyifs) {\twriter.indent--;\twriter.writeline(\"}\");\t}\t}\tprivate void generateinitcallbacksmethod() {\twriter.writeline();",
  "sn strongname signing options",
  1
 ],
 [
  "private void processfile (string file_path) {\tif (!file.exists (file_path)) {",
  "file does not exist",
  0
 ],
 [
  "private static int main() {\tnew test().fibonacci(20, true);\tconsole.writeline();",
  "transitions for",
  1
 ],
 [
  "public static void createlinenumbertestfile(string strfilename) {\ttextwriter tw = new streamwriter(filepathutil.getstream(strfilename));\ttw.writeline(\"<?xml version=\\\"1.0\\\" ?>\");\ttw.writeline(\" <element a0='a0&e1;v' a1='a1value' a2='a2&e1;v'><embedded /></element>\");\ttw.writeline(\"<?pi1?>\");\ttw.writeline(\"<base64>9f6hju++</base64>\");",
  "boolxsd true boolxsd",
  0
 ],
 [
  "writer.writeline (\"{0}. {1}\", index, rule.name);\twriter.writeline ();\tendcolor ();\tbegincolor (consolecolor.darkred);\twriter.write (\"problem: \");\tendcolor ();\twriter.write (rule.problem);\twriter.writeline ();\tif (defect.location != defect.target) writer.writeline (\"* location: {0}\", defect.location);\tstring source = defect.source;",
  "error message is wrong",
  1
 ],
 [
  "if (ctorargs.count > 0) {\toutput.write (\"mybase.new(\");\toutputexpressionlist (ctorargs);\toutput.writeline (\")\");\t#if net_2_0 } else if (iscurrentclass) {\t#else } else {\t}\t}\tgeneratestatements (constructor.statements);\tindent--;",
  "end sub",
  0
 ],
 [
  "public virtual void addservice(type servicetype, servicecreatorcallback callback, bool promote) {",
  "adding service callback servicetype name promoting promote tostring",
  0
 ],
 [
  "public void getparam10() {\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(\"myarg1\", szlongns, \"test10\");\tretobj = m_xsltarg.getparam(\"myarg1\", szlongns);",
  "successfully started orleans silo as a node",
  1
 ],
 [
  "public override void removed (xelement source) {\tvar name = source.attribute (\"name\").value;\tvar namespacedescription  = $\"{name}: removed namespace\";\tstate.logdebugmessage ($\"possible -r value: {namespacedescription}\");\tif (state.ignoreremoved.any (re => re.ismatch (namespacedescription))) return;",
  "removed namespace",
  0
 ],
 [
  "const string testname = \"bug1910530_concurrentchangetrackedlistthreadsafetest\";\tusing(batchclient batchcli = batchclient.open(clientunittestcommon.createdummysharedkeycredential())) {\tjobscheduleoperations jobscheduleoperations = batchcli.jobscheduleoperations;\tstring jobscheduleid = microsoft.azure.batch.constants.defaultconvenienceprefix + \"-\" + testname;\tcloudjobschedule unboundjobschedule = jobscheduleoperations.createjobschedule(jobscheduleid, null, null);\tunboundjobschedule.metadata = new list<metadataitem>();\taction addaction = () => {\tunboundjobschedule.metadata.add(new metadataitem(\"test\", \"test\"));\t};\taction removeaction = () => {",
  "mapping error on sourcecolumn sourcecolumn",
  1
 ],
 [
  "private void copydictionaryfromtypetoappropriateslotinderivedtype(typedesc basetype, typebuilderstate derivedtypestate) {\tvar basetypestate = basetype.getorcreatetypebuilderstate();\tif (basetypestate.hasdictionaryinvtable) {\truntimetypehandle basetypehandle = getruntimetypehandle(basetype);\tintptr dictionaryentry = basetypestate.halfbakeddictionary;\tif (dictionaryentry == intptr.zero) dictionaryentry = basetypehandle.getdictionary();\tdebug.assert(dictionaryentry != intptr.zero);\tint dictionaryslot = eetypecreator.getdictionaryslotinvtable(basetype);\tdebug.assert(dictionaryslot >= 0);\tderivedtypestate.halfbakedruntimetypehandle.setdictionary(dictionaryslot, dictionaryentry);",
  "resetting",
  1
 ],
 [
  "case \"comment\": strxml = \"<root><!-- comment --></root>\";\tbreak;\tcase \"entityreference\": if (!readersupportsentityref()) {\treturn;\t}\tstrxml = \"<!doctype root[<!entity e \\\"test entity\\\"> ]><root>&e;</root>\";\tbreak;\tcase \"significantwhitespace\": strxml = \"<root xml:space=\\\"preserve\\\">\t\t\t </root>\";\tbreak;\tcase \"whitespace\": if (readerstripswhitespace()) {",
  "strips whitespace nodes by default",
  0
 ],
 [
  "public void stopbits_default() {\tusing (serialport com1 = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tserialportproperties serportprop = new serialportproperties();",
  "verifying default stopbits",
  0
 ],
 [
  "public static int main () {\tmydispose copy_a, copy_b, copy_c;\tusing (mydispose a = new mydispose (), b = new mydispose ()){\tcopy_a = a;\tcopy_b = b;\t}\tif (!copy_a.disposed) return 1;\tif (!copy_b.disposed) return 2;",
  "nested using clause disposed",
  0
 ],
 [
  "font.family = (int)rtf.minor;\tbreak;\t}\tcase major.charattr: {\tswitch(rtf.minor) {\tcase minor.fontnum: {\tfont.num = rtf.param;\tbreak;\t}\tdefault: {",
  "got unhandled control charattr minor",
  0
 ],
 [
  "public static void main () {\tgoto end;\tint a;",
  "end",
  0
 ],
 [
  "public texttag indent () {\ttexttag tag;\tindent++;\tif (indent >= tags.count) {\ttag = new texttag ($\"{trackerid}-{indent}\");",
  "nas",
  1
 ],
 [
  "static void testnonqueryusingexecutereader(oracleconnection con) {\toracledatareader reader = null;\toracletransaction trans = null;\toraclecommand cmd = con.createcommand();\tcmd.commandtext = \"drop table mono_adapter_test\";\ttrans = con.begintransaction();\tcmd.transaction = trans;\ttry {\treader = cmd.executereader();\treader.read();",
  "rowsaffected after read",
  0
 ],
 [
  "public void getparam14() {\tint i = 1;\tm_xsltarg = new xsltargumentlist();\tforeach (string str in szwhitespace) {\tm_xsltarg.addparam(\"myarg\" + i, szempty, \"test\" + str);\tretobj = m_xsltarg.getparam(\"myarg\" + i, szempty);\tif (retobj.tostring() != \"test\" + str) {",
  "hello",
  1
 ],
 [
  "if (stdout == null) {\tenvironment.exit (1);\t}\tvar regex = new regex (\"converting[^\\n]* method ([^\\n]+)\\n\");\tvar matches = regex.matches (stdout);\tvar methods = new list<string> ();\tforeach (match match in matches) {\tvar method = match.groups [1].value;\tmethods.add (method);\t}",
  "div",
  1
 ],
 [
  "public void testsimplecase() {\ttest<stringcomparetoisculturespecificissue>(@\" public class test {\tvoid foo (string b) {\t}\t}\t\", @\" public class test {\tvoid foo (string b) {",
  "foo b system stringcomparison ordinal",
  0
 ],
 [
  "}\tbyte[] qmark = encoding.getbytes(new char[] { (char)0x003f });\tfor (int i = 0; i < 0x110000; i++) {\tchar[] inp = (i < 0x10000 ? new char[] { (char)i }\t: new char[] { (char)(0xd800 + ((i - 0x10000) >> 10)), (char)(0xdc00 + ((i - 0x10000) & 0x3ff)) });\tbyte[] outp = encoding.getbytes(inp);\tif (!(((outp.length >= qmark.length && outp[0] == qmark[0]\t&& (qmark.length < 2 || outp[1] == qmark[1]) && (qmark.length < 3 || outp[2] == qmark[2]) && (qmark.length < 4 || outp[3] == qmark[3])) || (outp.length >= 1 && outp[0] == 0x3f)) && !(i == 0x003f))) {\tconsole.out.write(\"0x\");\tfor (int j = 0; j < outp.length; j++) console.out.write(tohexstring2(outp[j]));",
  "isloopback",
  1
 ],
 [
  "private void usage () {",
  "access friend internal method ok",
  1
 ],
 [
  "public void seek_open_close() {\tusing (serialport com = new serialport(tcsupport.localmachineserialinfo.firstavailableportname)) {\tcom.open();\tstream serialstream = com.basestream;\tcom.close();",
  "verifying seek property throws exception after open then close",
  0
 ],
 [
  "public void document_7(xmlwriterutils utils) {\tusing (xmlwriter w = utils.createwriter()) {\ttry {\tw.writestartdocument();\tw.writestartelement(\"root\");\tw.writeendelement();\tw.writestartelement(\"root\");\t}\tcatch (invalidoperationexception e) {",
  "exception",
  0
 ],
 [
  "public void readtimeout_zero_bytes() {\tusing (serialport com1 = tcsupport.initfirstserialport()) using (serialport com2 = tcsupport.initsecondserialport(com1)) {\tchar utf32char = (char)0x254b;\tbyte[] utf32charbytes = encoding.utf32.getbytes(new[] { utf32char });\tint readchar;",
  "public shared sub main system console writeline global microsoft visualbasic chrw global microsoft visualbasic chrw global microsoft visualbasic chrw global microsoft visualbasic chrw global microsoft visualbasic chrw global microsoft visualbasic chrw end sub",
  1
 ],
 [
  "public static int main () {\tc o = new c ();\to.x ();",
  "exception",
  1
 ],
 [
  "public void addparam20(inputtype inputtype, readertype readertype, transformtype transformtype, doctype doctype) {\tstring expected = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?><result xmlns:myobj1=\"\"urn:http: 1.test1 2.test2 3.test3 4.test4 5.no value specified 6.no value specified</result>\";\tm_xsltarg = new xsltargumentlist();\tm_xsltarg.addparam(\"myarg1\", \"urn:\" + szxslns, \"test1\");\tretobj = m_xsltarg.getparam(\"myarg1\", \"urn:\" + szxslns);\tif (retobj.tostring() != \"test1\") assert.true(false);\tm_xsltarg.addparam(\"myarg2\", \"urn:tmp\", \"test2\");\tretobj = m_xsltarg.getparam(\"myarg2\", \"urn:tmp\");",
  "added value retrieved value",
  0
 ],
 [
  "static extern string mono_path_canonicalize (string input);\tstatic void canonicalizeassert (string input, string expected) {\tstring actual = mono_path_canonicalize (input);\tif (expected != actual) {\tfailure = true;",
  "the application was terminated by an unknown signal",
  1
 ],
 [
  "private void marksequencepoint(isourcelineinfo sourceinfo) {\tdebug.assert(_module.emitsymbols);\tif (sourceinfo.isnosource && _lastsourceinfo != null && _lastsourceinfo.isnosource) {\treturn;\t}\tstring sourcefile = getfilename(sourceinfo);\t#if debug if (xmliltrace.isenabled) {",
  "cannot execute",
  1
 ],
 [
  "public void verifynametableget(object objactual, string str, char[] ach, int offset, int length) {\tobject objexpected = null;\tif (nametablever == enametable_ver.verify_with_getstr) {\tobjexpected = datareader.nametable.get(str);\tcerror.compare(objactual, objexpected, \"verifynametablewgetstr\");\t}\telse if (nametablever == enametable_ver.verify_with_getchar) {\tobjexpected = datareader.nametable.get(ach, offset, length);",
  "did not find required gtk installation",
  1
 ],
 [
  "public task savepreferences (workspaceitem item) {\tworkspaceuserdata data = new workspaceuserdata ();\tdata.activeconfiguration = activeconfigurationid;\tdata.activeruntime = usedefaultruntime ? null : activeruntime.id;\titem.userproperties.setvalue (\"monodevelop.ide.workspace\", data);\tif (storinguserpreferences != null) {\tuserpreferenceseventargs args = new userpreferenceseventargs (item, item.userproperties);\ttry {\tstoringuserpreferences (this, args);\t} catch (exception ex) {",
  "exception not generated for empty string input file",
  1
 ],
 [
  "assemblyloadertask = task.run ( () => {\ttry {\tvar assemblydefinition = assemblydefinition.readassembly (filename, new readerparameters {\tassemblyresolver = this });\tassemblydefinitiontasksource.setresult(assemblydefinition);\tdecompilertypesystem = new decompilertypesystem(assemblydefinition.mainmodule);\tvar loadedassembly = decompilertypesystem.mainassembly.unresolvedassembly;\treturn tuple.create(assemblydefinition, loadedassembly);\t}\tcatch (exception e) {",
  "error while reading assembly",
  0
 ],
 [
  "public static void finishreport (streamwriter sw) {",
  "html",
  0
 ],
 [
  "public static void usage (string message) {\tif (message != null) {\tconsole.writeline (\"{0}{1}{0}\", environment.newline, message);\t}",
  "did not throw exception",
  1
 ],
 [
  "}\tforeach (fileinfo inst in di.getfiles (\"*.xml\")) {\ttry {\trelaxngvalidatingreader vr = new relaxngvalidatingreader (new xmltextreader (inst.fullname), p);\tif (skip_error) vr.invalidnodefound += relaxngvalidatingreader.ignoreerror;\twhile (!vr.eof) vr.read ();\tif (inst.name.indexof (\"i.\") >= 0 && !skip_error) console.writeline (\"incorrectly validated instance: \" + di.name + \"/\" + inst.name);\t} catch (relaxngexception ex) {\tstring path = di.name + \"/\" + inst.name;\tif (inst.name.indexof (\"i.\") >= 0) continue;",
  "invalidated instance",
  0
 ],
 [
  "public override void moduleunloaded (ulong threadid, uint id, ulong startcounter, ulong endcounter, string name) {",
  "moduleunloaded",
  0
 ],
 [
  "public void bug1771070_1771072_jobandpoollifetimestats() {\taction test = () => {\tusing (batchclient batchcli = testutilities.openbatchclientasync(testutilities.getcredentialsfromenvironment()).result) {\tjobstatistics jobstatistics = batchcli.joboperations.getalllifetimestatistics();\tpoolstatistics poolstatistics = batchcli.pooloperations.getalllifetimestatistics();\tassert.notnull(jobstatistics);\tassert.notnull(poolstatistics);",
  "jobschedulestatistics lastupdatetime",
  0
 ],
 [
  "public static void checkfontproperties() {\tfont f = new font(\"arial\",12);\tf = new font(\"verdana\", 12);",
  "helpviewer",
  1
 ],
 [
  "public void utf32encoding() {",
  "verifying read with bytes encoded with",
  0
 ],
 [
  "if (cls != null) {\ttypeclassdescriptor = findtype (cls);\ttname = cls.name;\tif (typeclassdescriptor != null) {\telement.setattribute (\"baseclasstype\", typeclassdescriptor.name);\tobjects_dirty = true;\t}\t}\t}\tif (typeclassdescriptor == null) {",
  "stack based cfg",
  1
 ],
 [
  "public static int test_0_atest () {\tint[] ia = new int[32];\tfor (int i = 0; i <ia.length; i++) ia [i] = i*i;\tfor (int i = 0; i <ia.length; i++) if (ia [i] != i*i) return 1;\tif (ia.rank != 1) return 2;\tif (ia.getvalue (2) == null) return 3;\tfor (int i = 0; i <ia.length; i++) ia.setvalue (i*i*i, i);\tfor (int i = 0; i <ia.length; i++) if ((int)ia.getvalue (i) != i*i*i){",
  "err exception caught in scenario",
  1
 ],
 [
  "}\tcheckresults results = checker.check (options);\tconsole.writeline ();\tif (results.anyerrors) {\t}\tif (results.anywarnings) {\t}\tif (results.results != null) {\tforeach (var methodvalidationresults in results.results) {\tstring methodname = methodvalidationresults.key;",
  "method",
  0
 ],
 [
  "private static bool arraywithreferenceconversioninassignment() {\tint failcount = 0;\tvar origin = new[]\t{\t\"aa\", \"bb\", \"cc\" }\t;\tdynamic d = origin;\tobject[] result = d;\tif ((string)(result[1]) != origin[1]) {\tfailcount++;",
  "test failed at conversion result",
  0
 ],
 [
  "private static void showhelp (bool detailed) {\tif (detailed) {",
  "assembly path is the name of the file that contains the assembly manifest example i mydll dll",
  0
 ],
 [
  "}\tfixme - stuff to do to finish this: 1) make a hash table that has all classes that implement a given interface. probably make a class/interface into structure that is a list from this hash table.  this has an indication if its the classes default interface or not.  sometimes you will get an interface in one typelib and the class is in another type lib.  this will help that, and it will also make the resolution of the classes faster. 2) deal with inherited interfaces.  after we have exhausted all possbilities with the actual interfaces, when we should do checking using the inherited interfaces so at least we will find something. of course, the inherited interfaces will show up on the query interface, so we need to make sure we prefer the lower level interfaces.  maybe they will always show up first, but we need to see about this. basicinfo chosenclass;\tif (_classesdefaultinterfaces.count > 0) {\tchosenclass = (basicinfo)_classesdefaultinterfaces[0];\tif (traceutil.if(this, tracelevel.info)) {\t}\t}\telse if (_classesinterfaces.count > 0) {\tchosenclass = (basicinfo)_classesinterfaces[0];\tif (traceutil.if(this, tracelevel.info)) {",
  "comobjectinfo found non default i f",
  0
 ],
 [
  "static void main(string[] args) {\tienumerable<functiondecl> functions = parseinput(new streamreader(args[0]));\tusing (textwriter tw = new streamwriter(args[1])) {\twritemanagedthunkinterface(tw, functions);\t}\tusing (textwriter tw = new streamwriter(args[2])) {",
  "generating",
  0
 ],
 [
  "public static int main () {\tx x = new x ();\t((ia) x).draw ();",
  "exported",
  1
 ],
 [
  "stream.read (data, 0, (int)entry.size);\tloadfile (newbundle, entry.name, () => new memorystream (data), () => new memorystreamprovider (data, entry.name));\t}\t}\tentry = stream.getnextentry ();\t}\tlanguagebundles.add (newbundle);\treturn newbundle;\t}\t} catch (exception e) {",
  "error while reading",
  0
 ],
 [
  "gtk.main.quit ();\t} else {\te.reply = nsapplicationterminatereply.now;\t}\t};\t}\tswizzlensapplication ();\tvar nc = nsnotificationcenter.defaultcenter;\tnc.addobserver ((nsstring)\"atkcocoaaccessibilityenabled\", (nsnotification) => {\tif (!idetheme.accessibilityenabled) {",
  "showing notice",
  0
 ],
 [
  "}\tstring expected = \"foo0foo1foo2foo3foo4foo5foo6foo7foo8foo9foo10foo11foo12foo13foo14foo15foo16foo17foo18foo19foo20foo21foo22foo23foo24foo25foo26foo27foo28foo29foo30foo31foo32foo33foo34foo35foo36foo37foo38foo39foo40foo41foo42foo43foo44foo45foo46foo47foo48foo49\";\tif (!expected.equals(sb.tostring())) {\tconsole.write(\"expected: \");\tconsole.writeline(expected);\tconsole.write(\" actual: \");\tconsole.writeline(sb.tostring());\treturn fail;\t}\tif (counter != 1225) {",
  "error setting process name",
  1
 ],
 [
  "break;\tcase \"llvmonly\": enum_aot_mode = \"mono_aot_mode_llvmonly\";\tbreak;\tcase \"\": enum_aot_mode = \"mono_aot_mode_normal\";\tbreak;\tdefault: throw new exception (\"unsupported aot mode\");\t}\ttc.writeline (\"\\n}\\n\");\ttc.writeline (\"static char *image_name = \\\"{0}\\\";\", prog);\tif (ctor_func != null) {",
  "defects xml the list of defects xml produced by gendarme on your project",
  1
 ],
 [
  "for (int field = 0; field < fieldcount; field++) {\twriter.write(\"<td>\");\tif (field == 0 && itemrequireshyperlink) {\trenderpostbackevent(writer, requiressecondscreen ? string.format(cultureinfo.invariantculture, _showmoreformatanchor, item.index) : item.index.tostring(cultureinfo.invariantculture), getdefaultlabel(golabel), false, item[tablefieldindices[0]], false, wmlpostfieldtype.raw);\t}\telse {\twriter.rendertext(item[tablefieldindices[field]]);\t}\twriter.write(\"</td>\");\t}",
  "testing last error",
  1
 ],
 [
  "private static bool callsecondstructinstancemethod() {\tint failcount = 0;\tverify.firstcalled = false;\tvar s = new firstclassreturnstruct<int>();\tif ((!(bool)(((dynamic)s.instanceproperty).instancemethod())) || (!verify.firstcalled)) {\tfailcount++;",
  "test failed at call result",
  0
 ],
 [
  "static void help () {",
  "list ignore the file listing ignored defects entries for your project",
  1
 ],
 [
  "}\tif (p12file != null) {\thelp (true);\t}\tpvkfile = args [++i];\tbreak;\tcase \"-cert\": if (certfile != null) {\thelp (true);\t}\tif (p12file != null) {",
  "error use either or pvk and cert",
  0
 ],
 [
  "public void getparam14() {\tint i = 1;\tm_xsltarg = new xsltargumentlist();\tforeach (string str in szwhitespace) {\tm_xsltarg.addparam(\"myarg\" + i, szempty, \"test\" + str);\tretobj = m_xsltarg.getparam(\"myarg\" + i, szempty);\tif (retobj.tostring() != \"test\" + str) {",
  "error processing test for whitespace arg in first set",
  0
 ],
 [
  "w.flush();\tms.position = 0;\tusing (streamreader reader = new streamreader(ms)) {\treader.readtoend();\t}\t}\t}\tassert.true(false, \"exception was not thrown\");\t}\tcatch (objectdisposedexception e) {",
  "error loading standard client configuration file",
  1
 ],
 [
  "} else if (l.startswith (\"content-length:\")) {\tcl = int32.parse (l.substring (\"content-length: \".length));\t}\t}\t}\tstringwriter sw = new stringwriter ();\tif (!have_auth) {\tsw.writeline ();\tsw.flush ();\t} else if (cl > 0 && statusline.startswith (\"post \")) {",
  "http ok",
  0
 ],
 [
  "try {\tcmddrop.executenonquery();\t}\tcatch(oracleexception e) {\t}\tcmddrop.dispose();\tcmddrop = null;\toraclecommand cmd = connection.createcommand();\tcmd.commandtext = \"create table testtable (\\n\" + \" col1 numeric(18,0),\\n\" + \" col2 varchar(32),\\n\" + \" col3 date, col4 blob)\";\tcmd.executenonquery();",
  "insert rows",
  0
 ],
 [
  "private void myinstaller_committed(object sender, installeventargs e) {\tconsole.writeline(\"\");",
  "committed event occured",
  0
 ],
 [
  "public static void cancelabort () {\tobject lk = new object ();",
  "user not found",
  1
 ],
 [
  "if (xr.nodetype == xmlnodetype.attribute) {\twhile (xr.readattributevalue ()) dumpreader (xr, true);\t} else if (!attvalue) {\tconsole.write (xr.attributecount);\tif (xr.movetofirstattribute ()) {\tdo {\tdumpreader (xr, false);\t} while (xr.movetonextattribute ());\txr.movetoelement ();\t}",
  "attributes end",
  0
 ],
 [
  "public void addparam17(object param, xslinputtype xslinputtype, readertype readertype, outputtype outputtype, navtype navtype) {\tstring baseline = path.combine(\"baseline\", (string)param);\tint i = 1;\tint errcount = 0;\tm_xsltarg = new xsltargumentlist();\tforeach (string str in szwhitespace) {\ttry {\tm_xsltarg.addparam(\"myarg\" + i, szempty, \"test\" + str);\t}\tcatch (system.xml.xmlexception) {",
  "improperly reported an exception for a whitespace value",
  0
 ]
]